
build/arcadehid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000133fc  08000000  08000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         000001a8  20000000  08013400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00001670  200001a8  080135a8  000201a8  2**2
                  ALLOC

Disassembly of section .text:

08000000 <___SVECTOR>:
 8000000:	20004f80 	.word	0x20004f80
 8000004:	0800e451 	.word	0x0800e451
 8000008:	0800e271 	.word	0x0800e271
 800000c:	08000195 	.word	0x08000195
 8000010:	0800e273 	.word	0x0800e273
 8000014:	0800e275 	.word	0x0800e275
 8000018:	0800e277 	.word	0x0800e277
	...
 800002c:	0800e49d 	.word	0x0800e49d
 8000030:	0800e279 	.word	0x0800e279
 8000034:	00000000 	.word	0x00000000
 8000038:	0800e49d 	.word	0x0800e49d
 800003c:	0800e49d 	.word	0x0800e49d
 8000040:	0800e49d 	.word	0x0800e49d
 8000044:	0800e49d 	.word	0x0800e49d
 8000048:	0800e49d 	.word	0x0800e49d
 800004c:	0800e49d 	.word	0x0800e49d
 8000050:	0800e49d 	.word	0x0800e49d
 8000054:	0800e49d 	.word	0x0800e49d
 8000058:	08002b71 	.word	0x08002b71
 800005c:	08002bcd 	.word	0x08002bcd
 8000060:	08002c29 	.word	0x08002c29
 8000064:	08002c85 	.word	0x08002c85
 8000068:	08002ce1 	.word	0x08002ce1
 800006c:	0800e49d 	.word	0x0800e49d
 8000070:	0800e49d 	.word	0x0800e49d
 8000074:	0800e49d 	.word	0x0800e49d
 8000078:	0800e49d 	.word	0x0800e49d
 800007c:	0800e49d 	.word	0x0800e49d
 8000080:	0800e49d 	.word	0x0800e49d
 8000084:	0800e49d 	.word	0x0800e49d
 8000088:	0800e49d 	.word	0x0800e49d
 800008c:	0800e49d 	.word	0x0800e49d
 8000090:	0800e2e5 	.word	0x0800e2e5
 8000094:	0800e49d 	.word	0x0800e49d
 8000098:	0800e49d 	.word	0x0800e49d
 800009c:	08002d3d 	.word	0x08002d3d
 80000a0:	0800e49d 	.word	0x0800e49d
 80000a4:	0800e49d 	.word	0x0800e49d
 80000a8:	0800e49d 	.word	0x0800e49d
 80000ac:	0800e49d 	.word	0x0800e49d
 80000b0:	0800e285 	.word	0x0800e285
 80000b4:	0800e49d 	.word	0x0800e49d
 80000b8:	0800e49d 	.word	0x0800e49d
 80000bc:	0800e49d 	.word	0x0800e49d
 80000c0:	0800e49d 	.word	0x0800e49d
 80000c4:	0800e49d 	.word	0x0800e49d
 80000c8:	0800e49d 	.word	0x0800e49d
 80000cc:	0800e49d 	.word	0x0800e49d
 80000d0:	0800e49d 	.word	0x0800e49d
 80000d4:	0800e49d 	.word	0x0800e49d
 80000d8:	0800e27b 	.word	0x0800e27b
 80000dc:	0800e49d 	.word	0x0800e49d
 80000e0:	08002db1 	.word	0x08002db1
 80000e4:	0800e49d 	.word	0x0800e49d
 80000e8:	0800e289 	.word	0x0800e289
	...
 8000108:	f108f85f 	.word	0xf108f85f

0800010c <enter_critical>:
 * Cortex variant of arch.c CMSIS
 */

static volatile u32_t g_crit_entry = 0;

void enter_critical(void) {
 800010c:	b508      	push	{r3, lr}
  if ((__get_CONTROL() & 3) == 3) {
 800010e:	f00e f889 	bl	800e224 <__get_CONTROL>

#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
/* GNU gcc specific functions */

static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 8000112:	b672      	cpsid	i
#ifndef CONFIG_ARCH_CRITICAL_DISABLE_IRQ
  __disable_irq();
#else
  CONFIG_ARCH_CRITICAL_DISABLE_IRQ;
#endif
  g_crit_entry++;
 8000114:	4b02      	ldr	r3, [pc, #8]	; (8000120 <enter_critical+0x14>)
 8000116:	681a      	ldr	r2, [r3, #0]
 8000118:	3201      	adds	r2, #1
 800011a:	601a      	str	r2, [r3, #0]
 800011c:	bd08      	pop	{r3, pc}
 800011e:	bf00      	nop
 8000120:	200001a8 	.word	0x200001a8

08000124 <exit_critical>:
  TRACE_IRQ_OFF(g_crit_entry);
}

void exit_critical(void) {
 8000124:	b510      	push	{r4, lr}
  ASSERT(g_crit_entry > 0);
 8000126:	4c07      	ldr	r4, [pc, #28]	; (8000144 <exit_critical+0x20>)
 8000128:	6823      	ldr	r3, [r4, #0]
 800012a:	b91b      	cbnz	r3, 8000134 <exit_critical+0x10>
 800012c:	4806      	ldr	r0, [pc, #24]	; (8000148 <exit_critical+0x24>)
 800012e:	2119      	movs	r1, #25
 8000130:	f000 fb56 	bl	80007e0 <SYS_assert>
  g_crit_entry--;
 8000134:	6823      	ldr	r3, [r4, #0]
 8000136:	3b01      	subs	r3, #1
 8000138:	6023      	str	r3, [r4, #0]
  TRACE_IRQ_ON(g_crit_entry);
  if (g_crit_entry == 0) {
 800013a:	6823      	ldr	r3, [r4, #0]
 800013c:	b903      	cbnz	r3, 8000140 <exit_critical+0x1c>


#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
/* GNU gcc specific functions */

static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 800013e:	b662      	cpsie	i
 8000140:	bd10      	pop	{r4, pc}
 8000142:	bf00      	nop
 8000144:	200001a8 	.word	0x200001a8
 8000148:	0800fa78 	.word	0x0800fa78

0800014c <within_critical>:
#endif
  }
}

bool within_critical(void) {
  return g_crit_entry > 0;
 800014c:	4b02      	ldr	r3, [pc, #8]	; (8000158 <within_critical+0xc>)
 800014e:	6818      	ldr	r0, [r3, #0]
}
 8000150:	3000      	adds	r0, #0
 8000152:	bf18      	it	ne
 8000154:	2001      	movne	r0, #1
 8000156:	4770      	bx	lr
 8000158:	200001a8 	.word	0x200001a8

0800015c <arch_reset>:
 * Initiate a system reset request to reset the MCU
 */
static __INLINE void NVIC_SystemReset(void)
{
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      | 
                 (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) | 
 800015c:	4a04      	ldr	r2, [pc, #16]	; (8000170 <arch_reset+0x14>)
 800015e:	4b05      	ldr	r3, [pc, #20]	; (8000174 <arch_reset+0x18>)
 8000160:	68d1      	ldr	r1, [r2, #12]
 8000162:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
 8000166:	430b      	orrs	r3, r1
 *
 * Initiate a system reset request to reset the MCU
 */
static __INLINE void NVIC_SystemReset(void)
{
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      | 
 8000168:	60d3      	str	r3, [r2, #12]
static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
 800016a:	f3bf 8f4f 	dsb	sy
 800016e:	e7fe      	b.n	800016e <arch_reset+0x12>
 8000170:	e000ed00 	.word	0xe000ed00
 8000174:	05fa0004 	.word	0x05fa0004

08000178 <arch_break_if_dbg>:
void arch_reset(void) {
  NVIC_SystemReset();
}

void arch_break_if_dbg(void) {
  if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk) {
 8000178:	4b02      	ldr	r3, [pc, #8]	; (8000184 <arch_break_if_dbg+0xc>)
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	07db      	lsls	r3, r3, #31
 800017e:	d500      	bpl.n	8000182 <arch_break_if_dbg+0xa>
    // if debug is enabled, fire breakpoint
    __asm__ volatile ("bkpt #0\n");
 8000180:	be00      	bkpt	0x0000
 8000182:	4770      	bx	lr
 8000184:	e000edf0 	.word	0xe000edf0

08000188 <arch_sleep>:

static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }

static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 8000188:	bf30      	wfi
 800018a:	4770      	bx	lr

0800018c <irq_disable>:

#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
/* GNU gcc specific functions */

static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 800018c:	b672      	cpsid	i
 800018e:	4770      	bx	lr

08000190 <irq_enable>:


#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
/* GNU gcc specific functions */

static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 8000190:	b662      	cpsie	i
 8000192:	4770      	bx	lr

08000194 <HardFault_Handler>:
// user hardfault handler

#ifdef USER_HARDFAULT

__attribute__(( naked )) void HardFault_Handler(void) {
  asm volatile (
 8000194:	f01e 0f04 	tst.w	lr, #4
 8000198:	bf0c      	ite	eq
 800019a:	f3ef 8008 	mrseq	r0, MSP
 800019e:	f3ef 8009 	mrsne	r0, PSP
 80001a2:	f000 b801 	b.w	80001a8 <hard_fault_handler_c>

080001a6 <APP_shutdown>:
volatile unsigned int stacked_r12;
volatile unsigned int stacked_lr;
volatile unsigned int stacked_pc;
volatile unsigned int stacked_psr;

__attribute__ (( weak  )) void APP_shutdown() {}
 80001a6:	4770      	bx	lr

080001a8 <hard_fault_handler_c>:

void hard_fault_handler_c(unsigned int * hardfault_args)
{
 80001a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  stacked_r0 = ((unsigned long) hardfault_args[0]);
 80001ac:	6803      	ldr	r3, [r0, #0]
 80001ae:	f8df b2e4 	ldr.w	fp, [pc, #740]	; 8000494 <hard_fault_handler_c+0x2ec>
  stacked_r1 = ((unsigned long) hardfault_args[1]);
 80001b2:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 8000498 <hard_fault_handler_c+0x2f0>

__attribute__ (( weak  )) void APP_shutdown() {}

void hard_fault_handler_c(unsigned int * hardfault_args)
{
  stacked_r0 = ((unsigned long) hardfault_args[0]);
 80001b6:	f8cb 3000 	str.w	r3, [fp]
  stacked_r1 = ((unsigned long) hardfault_args[1]);
 80001ba:	6843      	ldr	r3, [r0, #4]
  stacked_r2 = ((unsigned long) hardfault_args[2]);
 80001bc:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 800049c <hard_fault_handler_c+0x2f4>
__attribute__ (( weak  )) void APP_shutdown() {}

void hard_fault_handler_c(unsigned int * hardfault_args)
{
  stacked_r0 = ((unsigned long) hardfault_args[0]);
  stacked_r1 = ((unsigned long) hardfault_args[1]);
 80001c0:	f8ca 3000 	str.w	r3, [sl]
  stacked_r2 = ((unsigned long) hardfault_args[2]);
 80001c4:	6883      	ldr	r3, [r0, #8]
  stacked_r3 = ((unsigned long) hardfault_args[3]);
 80001c6:	f8df 82d8 	ldr.w	r8, [pc, #728]	; 80004a0 <hard_fault_handler_c+0x2f8>

void hard_fault_handler_c(unsigned int * hardfault_args)
{
  stacked_r0 = ((unsigned long) hardfault_args[0]);
  stacked_r1 = ((unsigned long) hardfault_args[1]);
  stacked_r2 = ((unsigned long) hardfault_args[2]);
 80001ca:	f8c9 3000 	str.w	r3, [r9]
  stacked_r3 = ((unsigned long) hardfault_args[3]);
 80001ce:	68c3      	ldr	r3, [r0, #12]

  stacked_r12 = ((unsigned long) hardfault_args[4]);
 80001d0:	4f85      	ldr	r7, [pc, #532]	; (80003e8 <hard_fault_handler_c+0x240>)
void hard_fault_handler_c(unsigned int * hardfault_args)
{
  stacked_r0 = ((unsigned long) hardfault_args[0]);
  stacked_r1 = ((unsigned long) hardfault_args[1]);
  stacked_r2 = ((unsigned long) hardfault_args[2]);
  stacked_r3 = ((unsigned long) hardfault_args[3]);
 80001d2:	f8c8 3000 	str.w	r3, [r8]

  stacked_r12 = ((unsigned long) hardfault_args[4]);
 80001d6:	6903      	ldr	r3, [r0, #16]
  stacked_lr = ((unsigned long) hardfault_args[5]);
 80001d8:	f8df c2c8 	ldr.w	ip, [pc, #712]	; 80004a4 <hard_fault_handler_c+0x2fc>
  stacked_r0 = ((unsigned long) hardfault_args[0]);
  stacked_r1 = ((unsigned long) hardfault_args[1]);
  stacked_r2 = ((unsigned long) hardfault_args[2]);
  stacked_r3 = ((unsigned long) hardfault_args[3]);

  stacked_r12 = ((unsigned long) hardfault_args[4]);
 80001dc:	603b      	str	r3, [r7, #0]
  stacked_lr = ((unsigned long) hardfault_args[5]);
 80001de:	6943      	ldr	r3, [r0, #20]
  stacked_pc = ((unsigned long) hardfault_args[6]);
 80001e0:	4a82      	ldr	r2, [pc, #520]	; (80003ec <hard_fault_handler_c+0x244>)
  stacked_r1 = ((unsigned long) hardfault_args[1]);
  stacked_r2 = ((unsigned long) hardfault_args[2]);
  stacked_r3 = ((unsigned long) hardfault_args[3]);

  stacked_r12 = ((unsigned long) hardfault_args[4]);
  stacked_lr = ((unsigned long) hardfault_args[5]);
 80001e2:	f8cc 3000 	str.w	r3, [ip]
  stacked_pc = ((unsigned long) hardfault_args[6]);
 80001e6:	6983      	ldr	r3, [r0, #24]
  stacked_psr = ((unsigned long) hardfault_args[7]);
 80001e8:	69c1      	ldr	r1, [r0, #28]
  stacked_r2 = ((unsigned long) hardfault_args[2]);
  stacked_r3 = ((unsigned long) hardfault_args[3]);

  stacked_r12 = ((unsigned long) hardfault_args[4]);
  stacked_lr = ((unsigned long) hardfault_args[5]);
  stacked_pc = ((unsigned long) hardfault_args[6]);
 80001ea:	6013      	str	r3, [r2, #0]
  stacked_psr = ((unsigned long) hardfault_args[7]);
 80001ec:	4b80      	ldr	r3, [pc, #512]	; (80003f0 <hard_fault_handler_c+0x248>)

  u32_t bfar = SCB->BFAR;
 80001ee:	4d81      	ldr	r5, [pc, #516]	; (80003f4 <hard_fault_handler_c+0x24c>)
  stacked_r3 = ((unsigned long) hardfault_args[3]);

  stacked_r12 = ((unsigned long) hardfault_args[4]);
  stacked_lr = ((unsigned long) hardfault_args[5]);
  stacked_pc = ((unsigned long) hardfault_args[6]);
  stacked_psr = ((unsigned long) hardfault_args[7]);
 80001f0:	6019      	str	r1, [r3, #0]

  u32_t bfar = SCB->BFAR;
 80001f2:	6ba9      	ldr	r1, [r5, #56]	; 0x38
volatile unsigned int stacked_psr;

__attribute__ (( weak  )) void APP_shutdown() {}

void hard_fault_handler_c(unsigned int * hardfault_args)
{
 80001f4:	b087      	sub	sp, #28
  stacked_lr = ((unsigned long) hardfault_args[5]);
  stacked_pc = ((unsigned long) hardfault_args[6]);
  stacked_psr = ((unsigned long) hardfault_args[7]);

  u32_t bfar = SCB->BFAR;
  u32_t cfsr = SCB->CFSR;
 80001f6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  stacked_r12 = ((unsigned long) hardfault_args[4]);
  stacked_lr = ((unsigned long) hardfault_args[5]);
  stacked_pc = ((unsigned long) hardfault_args[6]);
  stacked_psr = ((unsigned long) hardfault_args[7]);

  u32_t bfar = SCB->BFAR;
 80001f8:	9103      	str	r1, [sp, #12]
  u32_t cfsr = SCB->CFSR;
  u32_t hfsr = SCB->HFSR;
 80001fa:	6aee      	ldr	r6, [r5, #44]	; 0x2c
  u32_t dfsr = SCB->DFSR;
 80001fc:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80001fe:	9104      	str	r1, [sp, #16]
  u32_t afsr = SCB->AFSR;
 8000200:	6be9      	ldr	r1, [r5, #60]	; 0x3c

  APP_shutdown();
 8000202:	e88d 1008 	stmia.w	sp, {r3, ip}
 8000206:	9202      	str	r2, [sp, #8]

  u32_t bfar = SCB->BFAR;
  u32_t cfsr = SCB->CFSR;
  u32_t hfsr = SCB->HFSR;
  u32_t dfsr = SCB->DFSR;
  u32_t afsr = SCB->AFSR;
 8000208:	9105      	str	r1, [sp, #20]

  APP_shutdown();
 800020a:	f7ff ffcc 	bl	80001a6 <APP_shutdown>

  const u8_t io = IODBG;

  IO_blocking_tx(io, TRUE);
 800020e:	2101      	movs	r1, #1
 8000210:	2000      	movs	r0, #0
 8000212:	f000 fb65 	bl	80008e0 <IO_blocking_tx>
  IO_tx_flush(io);
 8000216:	2000      	movs	r0, #0
 8000218:	f000 fca0 	bl	8000b5c <IO_tx_flush>

  ioprint(io, TEXT_BAD("\n!!! HARDFAULT !!!\n\n"));
 800021c:	2000      	movs	r0, #0
 800021e:	4976      	ldr	r1, [pc, #472]	; (80003f8 <hard_fault_handler_c+0x250>)
 8000220:	f000 ffd0 	bl	80011c4 <ioprint>
  ioprint(io, "Stacked registers:\n");
 8000224:	2000      	movs	r0, #0
 8000226:	4975      	ldr	r1, [pc, #468]	; (80003fc <hard_fault_handler_c+0x254>)
 8000228:	f000 ffcc 	bl	80011c4 <ioprint>
  ioprint(io, "  pc:   0x%08x\n", stacked_pc);
 800022c:	9a02      	ldr	r2, [sp, #8]
 800022e:	2000      	movs	r0, #0
 8000230:	6812      	ldr	r2, [r2, #0]
 8000232:	4973      	ldr	r1, [pc, #460]	; (8000400 <hard_fault_handler_c+0x258>)
 8000234:	f000 ffc6 	bl	80011c4 <ioprint>
  ioprint(io, "  lr:   0x%08x\n", stacked_lr);
 8000238:	f8dd c004 	ldr.w	ip, [sp, #4]
 800023c:	2000      	movs	r0, #0
 800023e:	f8dc 2000 	ldr.w	r2, [ip]
 8000242:	4970      	ldr	r1, [pc, #448]	; (8000404 <hard_fault_handler_c+0x25c>)
 8000244:	f000 ffbe 	bl	80011c4 <ioprint>
  ioprint(io, "  psr:  0x%08x\n", stacked_psr);
 8000248:	9b00      	ldr	r3, [sp, #0]
 800024a:	2000      	movs	r0, #0
 800024c:	681a      	ldr	r2, [r3, #0]
 800024e:	496e      	ldr	r1, [pc, #440]	; (8000408 <hard_fault_handler_c+0x260>)
 8000250:	f000 ffb8 	bl	80011c4 <ioprint>
  ioprint(io, "  sp:   0x%08x\n", stack_pointer);
 8000254:	4b6d      	ldr	r3, [pc, #436]	; (800040c <hard_fault_handler_c+0x264>)
 8000256:	2000      	movs	r0, #0
 8000258:	681a      	ldr	r2, [r3, #0]
 800025a:	496d      	ldr	r1, [pc, #436]	; (8000410 <hard_fault_handler_c+0x268>)
 800025c:	f000 ffb2 	bl	80011c4 <ioprint>
  ioprint(io, "  r0:   0x%08x\n", stacked_r0);
 8000260:	f8db 2000 	ldr.w	r2, [fp]
 8000264:	2000      	movs	r0, #0
 8000266:	496b      	ldr	r1, [pc, #428]	; (8000414 <hard_fault_handler_c+0x26c>)
 8000268:	f000 ffac 	bl	80011c4 <ioprint>
  ioprint(io, "  r1:   0x%08x\n", stacked_r1);
 800026c:	f8da 2000 	ldr.w	r2, [sl]
 8000270:	2000      	movs	r0, #0
 8000272:	4969      	ldr	r1, [pc, #420]	; (8000418 <hard_fault_handler_c+0x270>)
 8000274:	f000 ffa6 	bl	80011c4 <ioprint>
  ioprint(io, "  r2:   0x%08x\n", stacked_r2);
 8000278:	f8d9 2000 	ldr.w	r2, [r9]
 800027c:	2000      	movs	r0, #0
 800027e:	4967      	ldr	r1, [pc, #412]	; (800041c <hard_fault_handler_c+0x274>)
 8000280:	f000 ffa0 	bl	80011c4 <ioprint>
  ioprint(io, "  r3:   0x%08x\n", stacked_r3);
 8000284:	f8d8 2000 	ldr.w	r2, [r8]
 8000288:	2000      	movs	r0, #0
 800028a:	4965      	ldr	r1, [pc, #404]	; (8000420 <hard_fault_handler_c+0x278>)
 800028c:	f000 ff9a 	bl	80011c4 <ioprint>
  ioprint(io, "  r12:  0x%08x\n", stacked_r12);
 8000290:	683a      	ldr	r2, [r7, #0]
 8000292:	2000      	movs	r0, #0
 8000294:	4963      	ldr	r1, [pc, #396]	; (8000424 <hard_fault_handler_c+0x27c>)
 8000296:	f000 ff95 	bl	80011c4 <ioprint>
  ioprint(io, "\nFault status registers:\n");
 800029a:	2000      	movs	r0, #0
 800029c:	4962      	ldr	r1, [pc, #392]	; (8000428 <hard_fault_handler_c+0x280>)
 800029e:	f000 ff91 	bl	80011c4 <ioprint>
  ioprint(io, "  BFAR: 0x%08x\n", bfar);
 80002a2:	2000      	movs	r0, #0
 80002a4:	4961      	ldr	r1, [pc, #388]	; (800042c <hard_fault_handler_c+0x284>)
 80002a6:	9a03      	ldr	r2, [sp, #12]
 80002a8:	f000 ff8c 	bl	80011c4 <ioprint>
  ioprint(io, "  CFSR: 0x%08x\n", cfsr);
 80002ac:	2000      	movs	r0, #0
 80002ae:	4960      	ldr	r1, [pc, #384]	; (8000430 <hard_fault_handler_c+0x288>)
 80002b0:	4622      	mov	r2, r4
 80002b2:	f000 ff87 	bl	80011c4 <ioprint>
  ioprint(io, "  HFSR: 0x%08x\n", hfsr);
 80002b6:	2000      	movs	r0, #0
 80002b8:	495e      	ldr	r1, [pc, #376]	; (8000434 <hard_fault_handler_c+0x28c>)
 80002ba:	4632      	mov	r2, r6
 80002bc:	f000 ff82 	bl	80011c4 <ioprint>
  ioprint(io, "  DFSR: 0x%08x\n", dfsr);
 80002c0:	2000      	movs	r0, #0
 80002c2:	495d      	ldr	r1, [pc, #372]	; (8000438 <hard_fault_handler_c+0x290>)
 80002c4:	9a04      	ldr	r2, [sp, #16]
 80002c6:	f000 ff7d 	bl	80011c4 <ioprint>
  ioprint(io, "  AFSR: 0x%08x\n", afsr);
 80002ca:	9a05      	ldr	r2, [sp, #20]
 80002cc:	2000      	movs	r0, #0
 80002ce:	495b      	ldr	r1, [pc, #364]	; (800043c <hard_fault_handler_c+0x294>)
 80002d0:	f000 ff78 	bl	80011c4 <ioprint>
  ioprint(io, "\n");
 80002d4:	2000      	movs	r0, #0
 80002d6:	495a      	ldr	r1, [pc, #360]	; (8000440 <hard_fault_handler_c+0x298>)
 80002d8:	f000 ff74 	bl	80011c4 <ioprint>
  if (cfsr & (1<<(7+0))) {
 80002dc:	0622      	lsls	r2, r4, #24
 80002de:	d504      	bpl.n	80002ea <hard_fault_handler_c+0x142>
    ioprint(io, "MMARVALID: MemMan 0x%08x\n", SCB->MMFAR);
 80002e0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80002e2:	2000      	movs	r0, #0
 80002e4:	4957      	ldr	r1, [pc, #348]	; (8000444 <hard_fault_handler_c+0x29c>)
 80002e6:	f000 ff6d 	bl	80011c4 <ioprint>
  }
  if (cfsr & (1<<(4+0))) {
 80002ea:	06e3      	lsls	r3, r4, #27
 80002ec:	d503      	bpl.n	80002f6 <hard_fault_handler_c+0x14e>
    ioprint(io, "MSTKERR: MemMan error during stacking\n");
 80002ee:	2000      	movs	r0, #0
 80002f0:	4955      	ldr	r1, [pc, #340]	; (8000448 <hard_fault_handler_c+0x2a0>)
 80002f2:	f000 ff67 	bl	80011c4 <ioprint>
  }
  if (cfsr & (1<<(3+0))) {
 80002f6:	0727      	lsls	r7, r4, #28
 80002f8:	d503      	bpl.n	8000302 <hard_fault_handler_c+0x15a>
    ioprint(io, "MUNSTKERR: MemMan error during unstacking\n");
 80002fa:	2000      	movs	r0, #0
 80002fc:	4953      	ldr	r1, [pc, #332]	; (800044c <hard_fault_handler_c+0x2a4>)
 80002fe:	f000 ff61 	bl	80011c4 <ioprint>
  }
  if (cfsr & (1<<(1+0))) {
 8000302:	07a5      	lsls	r5, r4, #30
 8000304:	d503      	bpl.n	800030e <hard_fault_handler_c+0x166>
    ioprint(io, "DACCVIOL: MemMan memory access violation, data\n");
 8000306:	2000      	movs	r0, #0
 8000308:	4951      	ldr	r1, [pc, #324]	; (8000450 <hard_fault_handler_c+0x2a8>)
 800030a:	f000 ff5b 	bl	80011c4 <ioprint>
  }
  if (cfsr & (1<<(0+0))) {
 800030e:	07e0      	lsls	r0, r4, #31
 8000310:	d503      	bpl.n	800031a <hard_fault_handler_c+0x172>
    ioprint(io, "IACCVIOL: MemMan memory access violation, instr\n");
 8000312:	2000      	movs	r0, #0
 8000314:	494f      	ldr	r1, [pc, #316]	; (8000454 <hard_fault_handler_c+0x2ac>)
 8000316:	f000 ff55 	bl	80011c4 <ioprint>
  }

  if (cfsr & (1<<(7+8))) {
 800031a:	0421      	lsls	r1, r4, #16
 800031c:	d505      	bpl.n	800032a <hard_fault_handler_c+0x182>
    ioprint(io, "BFARVALID: BusFlt 0x%08x\n", SCB->BFAR);
 800031e:	4b35      	ldr	r3, [pc, #212]	; (80003f4 <hard_fault_handler_c+0x24c>)
 8000320:	2000      	movs	r0, #0
 8000322:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000324:	494c      	ldr	r1, [pc, #304]	; (8000458 <hard_fault_handler_c+0x2b0>)
 8000326:	f000 ff4d 	bl	80011c4 <ioprint>
  }
  if (cfsr & (1<<(4+8))) {
 800032a:	04e2      	lsls	r2, r4, #19
 800032c:	d503      	bpl.n	8000336 <hard_fault_handler_c+0x18e>
    ioprint(io, "STKERR: BusFlt error during stacking\n");
 800032e:	2000      	movs	r0, #0
 8000330:	494a      	ldr	r1, [pc, #296]	; (800045c <hard_fault_handler_c+0x2b4>)
 8000332:	f000 ff47 	bl	80011c4 <ioprint>
  }
  if (cfsr & (1<<(3+8))) {
 8000336:	0523      	lsls	r3, r4, #20
 8000338:	d503      	bpl.n	8000342 <hard_fault_handler_c+0x19a>
    ioprint(io, "UNSTKERR: BusFlt error during unstacking\n");
 800033a:	2000      	movs	r0, #0
 800033c:	4948      	ldr	r1, [pc, #288]	; (8000460 <hard_fault_handler_c+0x2b8>)
 800033e:	f000 ff41 	bl	80011c4 <ioprint>
  }
  if (cfsr & (1<<(2+8))) {
 8000342:	0567      	lsls	r7, r4, #21
 8000344:	d503      	bpl.n	800034e <hard_fault_handler_c+0x1a6>
    ioprint(io, "IMPRECISERR: BusFlt error during data access\n");
 8000346:	2000      	movs	r0, #0
 8000348:	4946      	ldr	r1, [pc, #280]	; (8000464 <hard_fault_handler_c+0x2bc>)
 800034a:	f000 ff3b 	bl	80011c4 <ioprint>
  }
  if (cfsr & (1<<(1+8))) {
 800034e:	05a5      	lsls	r5, r4, #22
 8000350:	d503      	bpl.n	800035a <hard_fault_handler_c+0x1b2>
    ioprint(io, "PRECISERR: BusFlt error during data access\n");
 8000352:	2000      	movs	r0, #0
 8000354:	4944      	ldr	r1, [pc, #272]	; (8000468 <hard_fault_handler_c+0x2c0>)
 8000356:	f000 ff35 	bl	80011c4 <ioprint>
  }
  if (cfsr & (1<<(0+8))) {
 800035a:	05e0      	lsls	r0, r4, #23
 800035c:	d503      	bpl.n	8000366 <hard_fault_handler_c+0x1be>
    ioprint(io, "IBUSERR: BusFlt bus error\n");
 800035e:	2000      	movs	r0, #0
 8000360:	4942      	ldr	r1, [pc, #264]	; (800046c <hard_fault_handler_c+0x2c4>)
 8000362:	f000 ff2f 	bl	80011c4 <ioprint>
  }

  if (cfsr & (1<<(9+16))) {
 8000366:	01a1      	lsls	r1, r4, #6
 8000368:	d503      	bpl.n	8000372 <hard_fault_handler_c+0x1ca>
    ioprint(io, "DIVBYZERO: UsaFlt division by zero\n");
 800036a:	2000      	movs	r0, #0
 800036c:	4940      	ldr	r1, [pc, #256]	; (8000470 <hard_fault_handler_c+0x2c8>)
 800036e:	f000 ff29 	bl	80011c4 <ioprint>
  }
  if (cfsr & (1<<(8+16))) {
 8000372:	01e2      	lsls	r2, r4, #7
 8000374:	d503      	bpl.n	800037e <hard_fault_handler_c+0x1d6>
    ioprint(io, "UNALIGNED: UsaFlt unaligned access\n");
 8000376:	2000      	movs	r0, #0
 8000378:	493e      	ldr	r1, [pc, #248]	; (8000474 <hard_fault_handler_c+0x2cc>)
 800037a:	f000 ff23 	bl	80011c4 <ioprint>
  }
  if (cfsr & (1<<(3+16))) {
 800037e:	0323      	lsls	r3, r4, #12
 8000380:	d503      	bpl.n	800038a <hard_fault_handler_c+0x1e2>
    ioprint(io, "NOCP: UsaFlt execute coprocessor instr\n");
 8000382:	2000      	movs	r0, #0
 8000384:	493c      	ldr	r1, [pc, #240]	; (8000478 <hard_fault_handler_c+0x2d0>)
 8000386:	f000 ff1d 	bl	80011c4 <ioprint>
  }
  if (cfsr & (1<<(2+16))) {
 800038a:	0367      	lsls	r7, r4, #13
 800038c:	d503      	bpl.n	8000396 <hard_fault_handler_c+0x1ee>
    ioprint(io, "INVPC: UsaFlt general\n");
 800038e:	2000      	movs	r0, #0
 8000390:	493a      	ldr	r1, [pc, #232]	; (800047c <hard_fault_handler_c+0x2d4>)
 8000392:	f000 ff17 	bl	80011c4 <ioprint>
  }
  if (cfsr & (1<<(1+16))) {
 8000396:	03a5      	lsls	r5, r4, #14
 8000398:	d503      	bpl.n	80003a2 <hard_fault_handler_c+0x1fa>
    ioprint(io, "INVSTATE: UsaFlt execute ARM instr\n");
 800039a:	2000      	movs	r0, #0
 800039c:	4938      	ldr	r1, [pc, #224]	; (8000480 <hard_fault_handler_c+0x2d8>)
 800039e:	f000 ff11 	bl	80011c4 <ioprint>
  }
  if (cfsr & (1<<(0+16))) {
 80003a2:	03e0      	lsls	r0, r4, #15
 80003a4:	d503      	bpl.n	80003ae <hard_fault_handler_c+0x206>
    ioprint(io, "UNDEFINSTR: UsaFlt execute bad instr\n");
 80003a6:	2000      	movs	r0, #0
 80003a8:	4936      	ldr	r1, [pc, #216]	; (8000484 <hard_fault_handler_c+0x2dc>)
 80003aa:	f000 ff0b 	bl	80011c4 <ioprint>
  }

  if (hfsr & (1<<31)) {
 80003ae:	2e00      	cmp	r6, #0
 80003b0:	da03      	bge.n	80003ba <hard_fault_handler_c+0x212>
    ioprint(io, "DEBUGEVF: HardFlt debug event\n");
 80003b2:	2000      	movs	r0, #0
 80003b4:	4934      	ldr	r1, [pc, #208]	; (8000488 <hard_fault_handler_c+0x2e0>)
 80003b6:	f000 ff05 	bl	80011c4 <ioprint>
  }
  if (hfsr & (1<<30)) {
 80003ba:	0071      	lsls	r1, r6, #1
 80003bc:	d503      	bpl.n	80003c6 <hard_fault_handler_c+0x21e>
    ioprint(io, "FORCED: HardFlt SVC/BKPT within SVC\n");
 80003be:	2000      	movs	r0, #0
 80003c0:	4932      	ldr	r1, [pc, #200]	; (800048c <hard_fault_handler_c+0x2e4>)
 80003c2:	f000 feff 	bl	80011c4 <ioprint>
  }
  if (hfsr & (1<<1)) {
 80003c6:	07b2      	lsls	r2, r6, #30
 80003c8:	d503      	bpl.n	80003d2 <hard_fault_handler_c+0x22a>
    ioprint(io, "VECTBL: HardFlt vector fetch failed\n");
 80003ca:	2000      	movs	r0, #0
 80003cc:	4930      	ldr	r1, [pc, #192]	; (8000490 <hard_fault_handler_c+0x2e8>)
 80003ce:	f000 fef9 	bl	80011c4 <ioprint>
  }

  SYS_dump_trace(IODBG);
 80003d2:	2000      	movs	r0, #0
 80003d4:	f000 f99e 	bl	8000714 <SYS_dump_trace>

  SYS_break_if_dbg();
 80003d8:	f000 f940 	bl	800065c <SYS_break_if_dbg>

  SYS_reboot(REBOOT_CRASH);
 80003dc:	2004      	movs	r0, #4
}
 80003de:	b007      	add	sp, #28
 80003e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  SYS_dump_trace(IODBG);

  SYS_break_if_dbg();

  SYS_reboot(REBOOT_CRASH);
 80003e4:	f000 b978 	b.w	80006d8 <SYS_reboot>
 80003e8:	20000c64 	.word	0x20000c64
 80003ec:	20000c5c 	.word	0x20000c5c
 80003f0:	20000c68 	.word	0x20000c68
 80003f4:	e000ed00 	.word	0xe000ed00
 80003f8:	0800faa7 	.word	0x0800faa7
 80003fc:	0800fac6 	.word	0x0800fac6
 8000400:	0800fada 	.word	0x0800fada
 8000404:	0800faea 	.word	0x0800faea
 8000408:	0800fafa 	.word	0x0800fafa
 800040c:	20000c70 	.word	0x20000c70
 8000410:	0800fb0a 	.word	0x0800fb0a
 8000414:	0800fb1a 	.word	0x0800fb1a
 8000418:	0800fb2a 	.word	0x0800fb2a
 800041c:	0800fb3a 	.word	0x0800fb3a
 8000420:	0800fb4a 	.word	0x0800fb4a
 8000424:	0800fb5a 	.word	0x0800fb5a
 8000428:	0800fb6a 	.word	0x0800fb6a
 800042c:	0800fb84 	.word	0x0800fb84
 8000430:	0800fb94 	.word	0x0800fb94
 8000434:	0800fba4 	.word	0x0800fba4
 8000438:	0800fbb4 	.word	0x0800fbb4
 800043c:	0800fbc4 	.word	0x0800fbc4
 8000440:	0801197d 	.word	0x0801197d
 8000444:	0800fbd4 	.word	0x0800fbd4
 8000448:	0800fbee 	.word	0x0800fbee
 800044c:	0800fc15 	.word	0x0800fc15
 8000450:	0800fc40 	.word	0x0800fc40
 8000454:	0800fc70 	.word	0x0800fc70
 8000458:	0800fca1 	.word	0x0800fca1
 800045c:	0800fcbb 	.word	0x0800fcbb
 8000460:	0800fce1 	.word	0x0800fce1
 8000464:	0800fd0b 	.word	0x0800fd0b
 8000468:	0800fd0d 	.word	0x0800fd0d
 800046c:	0800fd39 	.word	0x0800fd39
 8000470:	0800fd54 	.word	0x0800fd54
 8000474:	0800fd78 	.word	0x0800fd78
 8000478:	0800fd9c 	.word	0x0800fd9c
 800047c:	0800fdc4 	.word	0x0800fdc4
 8000480:	0800fddb 	.word	0x0800fddb
 8000484:	0800fdff 	.word	0x0800fdff
 8000488:	0800fe25 	.word	0x0800fe25
 800048c:	0800fe44 	.word	0x0800fe44
 8000490:	0800fe69 	.word	0x0800fe69
 8000494:	20000c60 	.word	0x20000c60
 8000498:	20000c50 	.word	0x20000c50
 800049c:	20000c6c 	.word	0x20000c6c
 80004a0:	20000c54 	.word	0x20000c54
 80004a4:	20000c58 	.word	0x20000c58

080004a8 <arch_busywait_us>:

#include "system.h"
#include "arch.h"

// TODO peter fix this
void arch_busywait_us(u32_t us) {
 80004a8:	b530      	push	{r4, r5, lr}
  if (us == 0) return;
 80004aa:	2800      	cmp	r0, #0
 80004ac:	d037      	beq.n	800051e <arch_busywait_us+0x76>
  register volatile system_counter_type *count_val =
      (volatile system_counter_type *)&(STM32_SYSTEM_TIMER->CNT);
  register system_counter_type mark = *count_val;
  register u32_t delta_ticks = us*(SYS_CPU_FREQ/1000000);
 80004ae:	4a1c      	ldr	r2, [pc, #112]	; (8000520 <arch_busywait_us+0x78>)
 80004b0:	4c1c      	ldr	r4, [pc, #112]	; (8000524 <arch_busywait_us+0x7c>)
 80004b2:	6812      	ldr	r2, [r2, #0]
// TODO peter fix this
void arch_busywait_us(u32_t us) {
  if (us == 0) return;
  register volatile system_counter_type *count_val =
      (volatile system_counter_type *)&(STM32_SYSTEM_TIMER->CNT);
  register system_counter_type mark = *count_val;
 80004b4:	491c      	ldr	r1, [pc, #112]	; (8000528 <arch_busywait_us+0x80>)
  register u32_t delta_ticks = us*(SYS_CPU_FREQ/1000000);
 80004b6:	fbb2 f4f4 	udiv	r4, r2, r4
 80004ba:	4360      	muls	r0, r4
  {
    register u32_t timer_tick_cycle = SYS_CPU_FREQ/SYS_MAIN_TIMER_FREQ;
 80004bc:	f242 7410 	movw	r4, #10000	; 0x2710
// TODO peter fix this
void arch_busywait_us(u32_t us) {
  if (us == 0) return;
  register volatile system_counter_type *count_val =
      (volatile system_counter_type *)&(STM32_SYSTEM_TIMER->CNT);
  register system_counter_type mark = *count_val;
 80004c0:	880b      	ldrh	r3, [r1, #0]
  register u32_t delta_ticks = us*(SYS_CPU_FREQ/1000000);
  {
    register u32_t timer_tick_cycle = SYS_CPU_FREQ/SYS_MAIN_TIMER_FREQ;
 80004c2:	fbb2 f2f4 	udiv	r2, r2, r4
    register u32_t abs_hit = mark+delta_ticks;

    bool precede = *count_val > mark;
 80004c6:	880c      	ldrh	r4, [r1, #0]
// TODO peter fix this
void arch_busywait_us(u32_t us) {
  if (us == 0) return;
  register volatile system_counter_type *count_val =
      (volatile system_counter_type *)&(STM32_SYSTEM_TIMER->CNT);
  register system_counter_type mark = *count_val;
 80004c8:	b29b      	uxth	r3, r3
  register u32_t delta_ticks = us*(SYS_CPU_FREQ/1000000);
  {
    register u32_t timer_tick_cycle = SYS_CPU_FREQ/SYS_MAIN_TIMER_FREQ;
    register u32_t abs_hit = mark+delta_ticks;

    bool precede = *count_val > mark;
 80004ca:	b2a4      	uxth	r4, r4
    if (precede) {
 80004cc:	429c      	cmp	r4, r3
 80004ce:	460d      	mov	r5, r1
 80004d0:	d915      	bls.n	80004fe <arch_busywait_us+0x56>
 80004d2:	181c      	adds	r4, r3, r0
      while (abs_hit >= timer_tick_cycle) {
 80004d4:	4294      	cmp	r4, r2
 80004d6:	d315      	bcc.n	8000504 <arch_busywait_us+0x5c>
        // wait for wrap
        while (*count_val >= mark);
 80004d8:	880c      	ldrh	r4, [r1, #0]
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	429c      	cmp	r4, r3
 80004de:	d2fb      	bcs.n	80004d8 <arch_busywait_us+0x30>
        // wait for hit
        while (*count_val < mark);
 80004e0:	882c      	ldrh	r4, [r5, #0]
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	429c      	cmp	r4, r3
 80004e6:	d3fb      	bcc.n	80004e0 <arch_busywait_us+0x38>
        delta_ticks -= timer_tick_cycle;
 80004e8:	1a80      	subs	r0, r0, r2
 80004ea:	e7f2      	b.n	80004d2 <arch_busywait_us+0x2a>
        abs_hit -= timer_tick_cycle;
      }
    } else {
      while (abs_hit >= timer_tick_cycle) {
        // wait for wrap
        while (*count_val < mark);
 80004ec:	880c      	ldrh	r4, [r1, #0]
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d3fb      	bcc.n	80004ec <arch_busywait_us+0x44>
        // wait for hit
        while (*count_val >= mark);
 80004f4:	882c      	ldrh	r4, [r5, #0]
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	429c      	cmp	r4, r3
 80004fa:	d2fb      	bcs.n	80004f4 <arch_busywait_us+0x4c>
        delta_ticks -= timer_tick_cycle;
 80004fc:	1a80      	subs	r0, r0, r2
 80004fe:	181c      	adds	r4, r3, r0
        while (*count_val < mark);
        delta_ticks -= timer_tick_cycle;
        abs_hit -= timer_tick_cycle;
      }
    } else {
      while (abs_hit >= timer_tick_cycle) {
 8000500:	4294      	cmp	r4, r2
 8000502:	d2f3      	bcs.n	80004ec <arch_busywait_us+0x44>
        abs_hit -= timer_tick_cycle;
      }
    }
  }
  {
    register system_counter_type hit = mark+delta_ticks;
 8000504:	4418      	add	r0, r3
 8000506:	b280      	uxth	r0, r0
    if (hit < mark) {
 8000508:	4298      	cmp	r0, r3
 800050a:	4b07      	ldr	r3, [pc, #28]	; (8000528 <arch_busywait_us+0x80>)
 800050c:	d203      	bcs.n	8000516 <arch_busywait_us+0x6e>
      while (*count_val > hit);
 800050e:	881a      	ldrh	r2, [r3, #0]
 8000510:	b292      	uxth	r2, r2
 8000512:	4282      	cmp	r2, r0
 8000514:	d8fb      	bhi.n	800050e <arch_busywait_us+0x66>
    }
    while (*count_val < hit);
 8000516:	881a      	ldrh	r2, [r3, #0]
 8000518:	b292      	uxth	r2, r2
 800051a:	4282      	cmp	r2, r0
 800051c:	d3fb      	bcc.n	8000516 <arch_busywait_us+0x6e>
 800051e:	bd30      	pop	{r4, r5, pc}
 8000520:	20000190 	.word	0x20000190
 8000524:	000f4240 	.word	0x000f4240
 8000528:	40000024 	.word	0x40000024

0800052c <SYS_timer>:
  static u64_t pre_rtc_tick = 0;
  u64_t rtc_tick = RTC_get_tick();
  r = RTC_TICK_TO_MS(pre_rtc_tick) != RTC_TICK_TO_MS(rtc_tick);
  pre_rtc_tick = rtc_tick;
#else
  sys.time_tick++;
 800052c:	4b1c      	ldr	r3, [pc, #112]	; (80005a0 <SYS_timer+0x74>)
 800052e:	2000      	movs	r0, #0
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	3201      	adds	r2, #1
 8000534:	601a      	str	r2, [r3, #0]
  sys.time_sub++;
 8000536:	689a      	ldr	r2, [r3, #8]
 8000538:	3201      	adds	r2, #1
 800053a:	609a      	str	r2, [r3, #8]
  if (sys.time_sub >= SYS_MAIN_TIMER_FREQ / SYS_TIMER_TICK_FREQ) {
 800053c:	689a      	ldr	r2, [r3, #8]
 800053e:	2a09      	cmp	r2, #9
 8000540:	d92c      	bls.n	800059c <SYS_timer+0x70>
    sys.time_sub = 0;
 8000542:	6098      	str	r0, [r3, #8]
    sys.time_ms_c++;
 8000544:	685a      	ldr	r2, [r3, #4]
 8000546:	3201      	adds	r2, #1
 8000548:	605a      	str	r2, [r3, #4]
    sys.time_ms++;
 800054a:	899a      	ldrh	r2, [r3, #12]
 800054c:	b292      	uxth	r2, r2
 800054e:	3201      	adds	r2, #1
 8000550:	b292      	uxth	r2, r2
 8000552:	819a      	strh	r2, [r3, #12]
    r = TRUE;
    if (sys.time_ms == 1000) {
 8000554:	899a      	ldrh	r2, [r3, #12]
 8000556:	b292      	uxth	r2, r2
 8000558:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800055c:	d11d      	bne.n	800059a <SYS_timer+0x6e>
      sys.time_ms = 0;
 800055e:	8198      	strh	r0, [r3, #12]
      sys.time_s++;
 8000560:	7b9a      	ldrb	r2, [r3, #14]
 8000562:	3201      	adds	r2, #1
 8000564:	b2d2      	uxtb	r2, r2
 8000566:	739a      	strb	r2, [r3, #14]
      if (sys.time_s == 60) {
 8000568:	7b9a      	ldrb	r2, [r3, #14]
 800056a:	2a3c      	cmp	r2, #60	; 0x3c
 800056c:	d115      	bne.n	800059a <SYS_timer+0x6e>
        sys.time_s = 0;
 800056e:	7398      	strb	r0, [r3, #14]
        sys.time_m++;
 8000570:	7bda      	ldrb	r2, [r3, #15]
 8000572:	3201      	adds	r2, #1
 8000574:	b2d2      	uxtb	r2, r2
 8000576:	73da      	strb	r2, [r3, #15]
        if (sys.time_m == 60) {
 8000578:	7bda      	ldrb	r2, [r3, #15]
 800057a:	2a3c      	cmp	r2, #60	; 0x3c
 800057c:	d10d      	bne.n	800059a <SYS_timer+0x6e>
          sys.time_m = 0;
 800057e:	73d8      	strb	r0, [r3, #15]
          sys.time_h++;
 8000580:	7c1a      	ldrb	r2, [r3, #16]
 8000582:	3201      	adds	r2, #1
 8000584:	b2d2      	uxtb	r2, r2
 8000586:	741a      	strb	r2, [r3, #16]
          if (sys.time_h == 24) {
 8000588:	7c1a      	ldrb	r2, [r3, #16]
 800058a:	2a18      	cmp	r2, #24
 800058c:	d105      	bne.n	800059a <SYS_timer+0x6e>
            sys.time_h = 0;
 800058e:	7418      	strb	r0, [r3, #16]
            sys.time_d++;
 8000590:	8a5a      	ldrh	r2, [r3, #18]
 8000592:	b292      	uxth	r2, r2
 8000594:	3201      	adds	r2, #1
 8000596:	b292      	uxth	r2, r2
 8000598:	825a      	strh	r2, [r3, #18]
  sys.time_sub++;
  if (sys.time_sub >= SYS_MAIN_TIMER_FREQ / SYS_TIMER_TICK_FREQ) {
    sys.time_sub = 0;
    sys.time_ms_c++;
    sys.time_ms++;
    r = TRUE;
 800059a:	2001      	movs	r0, #1
      }
    }
  }
#endif
  return r;
}
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	200001ac 	.word	0x200001ac

080005a4 <SYS_init>:

void SYS_init() {
 80005a4:	b510      	push	{r4, lr}
  memset(&sys, 0, sizeof(sys));
 80005a6:	4c07      	ldr	r4, [pc, #28]	; (80005c4 <SYS_init+0x20>)
 80005a8:	2100      	movs	r1, #0
 80005aa:	4620      	mov	r0, r4
 80005ac:	2214      	movs	r2, #20
 80005ae:	f00d feef 	bl	800e390 <memset>
#ifdef DBG_TRACE_MON
  _trace_log_ix = 0;
 80005b2:	2100      	movs	r1, #0
 80005b4:	6161      	str	r1, [r4, #20]
  memset(_trace_log, 0, sizeof(_trace_log));
 80005b6:	4804      	ldr	r0, [pc, #16]	; (80005c8 <SYS_init+0x24>)
 80005b8:	22c0      	movs	r2, #192	; 0xc0
#endif
}
 80005ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void SYS_init() {
  memset(&sys, 0, sizeof(sys));
#ifdef DBG_TRACE_MON
  _trace_log_ix = 0;
  memset(_trace_log, 0, sizeof(_trace_log));
 80005be:	f00d bee7 	b.w	800e390 <memset>
 80005c2:	bf00      	nop
 80005c4:	200001ac 	.word	0x200001ac
 80005c8:	20000c74 	.word	0x20000c74

080005cc <SYS_get_time_ms>:
sys_time SYS_get_time_ms() {
#if defined(CONFIG_RTC) && defined(CONFIG_SYS_USE_RTC)
  u64_t t = RTC_get_tick();
  return (sys_time)(RTC_TICK_TO_MS(t));
#else
  return sys.time_ms_c;
 80005cc:	4b01      	ldr	r3, [pc, #4]	; (80005d4 <SYS_get_time_ms+0x8>)
 80005ce:	6858      	ldr	r0, [r3, #4]
#endif
}
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	200001ac 	.word	0x200001ac

080005d8 <SYS_get_time>:

void SYS_get_time(u16_t *d, u8_t *h, u8_t *m, u8_t *s, u16_t *ms) {
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	9c03      	ldr	r4, [sp, #12]
  if (d) *d = dt.date.year_day;
  if (h) *h = dt.time.hour;
  if (m) *h = dt.time.minute;
  if (ms) *h = dt.time.millisecond;
#else
  if (d) *d = sys.time_d;
 80005dc:	b110      	cbz	r0, 80005e4 <SYS_get_time+0xc>
 80005de:	4d0a      	ldr	r5, [pc, #40]	; (8000608 <SYS_get_time+0x30>)
 80005e0:	8a6d      	ldrh	r5, [r5, #18]
 80005e2:	8005      	strh	r5, [r0, #0]
  if (h) *h = sys.time_h;
 80005e4:	b111      	cbz	r1, 80005ec <SYS_get_time+0x14>
 80005e6:	4808      	ldr	r0, [pc, #32]	; (8000608 <SYS_get_time+0x30>)
 80005e8:	7c00      	ldrb	r0, [r0, #16]
 80005ea:	7008      	strb	r0, [r1, #0]
  if (m) *m = sys.time_m;
 80005ec:	b112      	cbz	r2, 80005f4 <SYS_get_time+0x1c>
 80005ee:	4906      	ldr	r1, [pc, #24]	; (8000608 <SYS_get_time+0x30>)
 80005f0:	7bc9      	ldrb	r1, [r1, #15]
 80005f2:	7011      	strb	r1, [r2, #0]
  if (s) *s = sys.time_s;
 80005f4:	b113      	cbz	r3, 80005fc <SYS_get_time+0x24>
 80005f6:	4a04      	ldr	r2, [pc, #16]	; (8000608 <SYS_get_time+0x30>)
 80005f8:	7b92      	ldrb	r2, [r2, #14]
 80005fa:	701a      	strb	r2, [r3, #0]
  if (ms) *ms = sys.time_ms;
 80005fc:	b114      	cbz	r4, 8000604 <SYS_get_time+0x2c>
 80005fe:	4b02      	ldr	r3, [pc, #8]	; (8000608 <SYS_get_time+0x30>)
 8000600:	899b      	ldrh	r3, [r3, #12]
 8000602:	8023      	strh	r3, [r4, #0]
 8000604:	bd30      	pop	{r4, r5, pc}
 8000606:	bf00      	nop
 8000608:	200001ac 	.word	0x200001ac

0800060c <SYS_set_time>:
#endif
}

void SYS_set_time(u16_t d, u8_t h, u8_t m, u8_t s, u16_t ms) {
 800060c:	b530      	push	{r4, r5, lr}
  if (h < 24 && m < 60 && s < 60 && ms < 1000) {
 800060e:	2917      	cmp	r1, #23
  if (s) *s = sys.time_s;
  if (ms) *ms = sys.time_ms;
#endif
}

void SYS_set_time(u16_t d, u8_t h, u8_t m, u8_t s, u16_t ms) {
 8000610:	f8bd 500c 	ldrh.w	r5, [sp, #12]
  if (h < 24 && m < 60 && s < 60 && ms < 1000) {
 8000614:	d80c      	bhi.n	8000630 <SYS_set_time+0x24>
 8000616:	2a3b      	cmp	r2, #59	; 0x3b
 8000618:	d80a      	bhi.n	8000630 <SYS_set_time+0x24>
 800061a:	2b3b      	cmp	r3, #59	; 0x3b
 800061c:	d808      	bhi.n	8000630 <SYS_set_time+0x24>
 800061e:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 8000622:	d205      	bcs.n	8000630 <SYS_set_time+0x24>
              (m - dt.time.minute) * 60ULL +
              (s - dt.time.second);
    RTC_secs2datetime(dt_sec, &dt);
    RTC_set_date_time(&dt);
#else
    sys.time_d = d;
 8000624:	4c03      	ldr	r4, [pc, #12]	; (8000634 <SYS_set_time+0x28>)
 8000626:	8260      	strh	r0, [r4, #18]
    sys.time_h = h;
 8000628:	7421      	strb	r1, [r4, #16]
    sys.time_m = m;
 800062a:	73e2      	strb	r2, [r4, #15]
    sys.time_s = s;
 800062c:	73a3      	strb	r3, [r4, #14]
    sys.time_ms = ms;
 800062e:	81a5      	strh	r5, [r4, #12]
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop
 8000634:	200001ac 	.word	0x200001ac

08000638 <SYS_get_tick>:

sys_time SYS_get_tick() {
#if defined(CONFIG_RTC) && defined(CONFIG_SYS_USE_RTC)
  return RTC_get_tick();
#else
  return sys.time_tick;
 8000638:	4b01      	ldr	r3, [pc, #4]	; (8000640 <SYS_get_tick+0x8>)
 800063a:	6818      	ldr	r0, [r3, #0]
#endif
}
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	200001ac 	.word	0x200001ac

08000644 <SYS_set_assert_callback>:

static void (*assert_cb)(void) = NULL;
static assert_behaviour_t assert_behaviour = ASSERT_BLINK_4EVER;

void SYS_set_assert_callback(void (*f)(void)) {
  assert_cb = f;
 8000644:	4b01      	ldr	r3, [pc, #4]	; (800064c <SYS_set_assert_callback+0x8>)
 8000646:	6198      	str	r0, [r3, #24]
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	200001ac 	.word	0x200001ac

08000650 <SYS_set_assert_behaviour>:
}

void SYS_set_assert_behaviour(assert_behaviour_t b) {
  assert_behaviour = b;
 8000650:	4b01      	ldr	r3, [pc, #4]	; (8000658 <SYS_set_assert_behaviour+0x8>)
 8000652:	7718      	strb	r0, [r3, #28]
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	200001ac 	.word	0x200001ac

0800065c <SYS_break_if_dbg>:
}

void SYS_break_if_dbg(void) {
  arch_break_if_dbg();
 800065c:	f7ff bd8c 	b.w	8000178 <arch_break_if_dbg>

08000660 <SYS_hardsleep_ms>:
sys_time SYS_get_time_ms() {
#if defined(CONFIG_RTC) && defined(CONFIG_SYS_USE_RTC)
  u64_t t = RTC_get_tick();
  return (sys_time)(RTC_TICK_TO_MS(t));
#else
  return sys.time_ms_c;
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <SYS_hardsleep_ms+0x10>)
 8000662:	685a      	ldr	r2, [r3, #4]
void SYS_hardsleep_ms(u32_t ms) {
#if defined(CONFIG_RTC) && defined(CONFIG_SYS_USE_RTC)
  u64_t tick_release = RTC_get_tick() + RTC_MS_TO_TICK((u64_t)ms);
  while (RTC_get_tick() < tick_release);
#else
  sys_time release = SYS_get_time_ms() + ms;
 8000664:	4410      	add	r0, r2
sys_time SYS_get_time_ms() {
#if defined(CONFIG_RTC) && defined(CONFIG_SYS_USE_RTC)
  u64_t t = RTC_get_tick();
  return (sys_time)(RTC_TICK_TO_MS(t));
#else
  return sys.time_ms_c;
 8000666:	6859      	ldr	r1, [r3, #4]
#if defined(CONFIG_RTC) && defined(CONFIG_SYS_USE_RTC)
  u64_t tick_release = RTC_get_tick() + RTC_MS_TO_TICK((u64_t)ms);
  while (RTC_get_tick() < tick_release);
#else
  sys_time release = SYS_get_time_ms() + ms;
  while (SYS_get_time_ms() < release);
 8000668:	4281      	cmp	r1, r0
 800066a:	d3fc      	bcc.n	8000666 <SYS_hardsleep_ms+0x6>
#endif
}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	200001ac 	.word	0x200001ac

08000674 <SYS_hardsleep_us>:

void SYS_hardsleep_us(u32_t us) {
  arch_busywait_us(us);
 8000674:	f7ff bf18 	b.w	80004a8 <arch_busywait_us>

08000678 <SYS_dbg_mask_set>:
}

void SYS_dbg_mask_set(u32_t mask) {
  __dbg_mask = mask;
 8000678:	4b01      	ldr	r3, [pc, #4]	; (8000680 <SYS_dbg_mask_set+0x8>)
 800067a:	6018      	str	r0, [r3, #0]
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	20004f80 	.word	0x20004f80

08000684 <SYS_dbg_mask_enable>:
}

void SYS_dbg_mask_enable(u32_t mask) {
  __dbg_mask |= mask;
 8000684:	4b02      	ldr	r3, [pc, #8]	; (8000690 <SYS_dbg_mask_enable+0xc>)
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	4310      	orrs	r0, r2
 800068a:	6018      	str	r0, [r3, #0]
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20004f80 	.word	0x20004f80

08000694 <SYS_dbg_mask_disable>:
}

void SYS_dbg_mask_disable(u32_t mask) {
  __dbg_mask &= ~mask;
 8000694:	4b02      	ldr	r3, [pc, #8]	; (80006a0 <SYS_dbg_mask_disable+0xc>)
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	ea22 0000 	bic.w	r0, r2, r0
 800069c:	6018      	str	r0, [r3, #0]
 800069e:	4770      	bx	lr
 80006a0:	20004f80 	.word	0x20004f80

080006a4 <SYS_dbg_level>:
}

void SYS_dbg_level(u32_t level) {
  __dbg_level = level;
 80006a4:	4b01      	ldr	r3, [pc, #4]	; (80006ac <SYS_dbg_level+0x8>)
 80006a6:	6058      	str	r0, [r3, #4]
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	20004f80 	.word	0x20004f80

080006b0 <SYS_dbg_get_level>:
}

u32_t SYS_dbg_get_level() {
  return __dbg_level;
 80006b0:	4b01      	ldr	r3, [pc, #4]	; (80006b8 <SYS_dbg_get_level+0x8>)
 80006b2:	6858      	ldr	r0, [r3, #4]
}
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	20004f80 	.word	0x20004f80

080006bc <SYS_dbg_get_mask>:

u32_t SYS_dbg_get_mask() {
  return __dbg_mask;
 80006bc:	4b01      	ldr	r3, [pc, #4]	; (80006c4 <SYS_dbg_get_mask+0x8>)
 80006be:	6818      	ldr	r0, [r3, #0]
}
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	20004f80 	.word	0x20004f80

080006c8 <SYS_build_number>:
extern char __BUILD_DATE;
extern char __BUILD_NUMBER;

u32_t SYS_build_number() {
  return (u32_t)&__BUILD_NUMBER;
}
 80006c8:	4800      	ldr	r0, [pc, #0]	; (80006cc <SYS_build_number+0x4>)
 80006ca:	4770      	bx	lr
 80006cc:	000010eb 	.word	0x000010eb

080006d0 <SYS_build_date>:

u32_t SYS_build_date() {
  return (u32_t)&__BUILD_DATE;
}
 80006d0:	4800      	ldr	r0, [pc, #0]	; (80006d4 <SYS_build_date+0x4>)
 80006d2:	4770      	bx	lr
 80006d4:	0133edb8 	.word	0x0133edb8

080006d8 <SYS_reboot>:

__attribute__ (( noreturn )) void SYS_reboot(enum reboot_reason_e r) {
 80006d8:	b508      	push	{r3, lr}
#ifdef CONFIG_SHARED_MEM
  SHMEM_set_reboot_reason(r);
 80006da:	f002 fe63 	bl	80033a4 <SHMEM_set_reboot_reason>
#endif
  arch_reset();
 80006de:	f7ff fd3d 	bl	800015c <arch_reset>
 80006e2:	e7fe      	b.n	80006e2 <SYS_reboot+0xa>

080006e4 <__trace_start>:
  while (1);
}

#ifdef DBG_TRACE_MON
bool __trace_start(void) {
  bool o = __trace;
 80006e4:	4b02      	ldr	r3, [pc, #8]	; (80006f0 <__trace_start+0xc>)
  __trace = TRUE;
 80006e6:	2201      	movs	r2, #1
  while (1);
}

#ifdef DBG_TRACE_MON
bool __trace_start(void) {
  bool o = __trace;
 80006e8:	7818      	ldrb	r0, [r3, #0]
  __trace = TRUE;
 80006ea:	701a      	strb	r2, [r3, #0]
  return o;
}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	20000000 	.word	0x20000000

080006f4 <__trace_stop>:
bool __trace_stop(void) {
  bool o = __trace;
 80006f4:	4b02      	ldr	r3, [pc, #8]	; (8000700 <__trace_stop+0xc>)
  __trace = FALSE;
 80006f6:	2200      	movs	r2, #0
  bool o = __trace;
  __trace = TRUE;
  return o;
}
bool __trace_stop(void) {
  bool o = __trace;
 80006f8:	7818      	ldrb	r0, [r3, #0]
  __trace = FALSE;
 80006fa:	701a      	strb	r2, [r3, #0]
  return o;
}
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	20000000 	.word	0x20000000

08000704 <__trace_set>:
bool __trace_set(bool x) {
  bool o = __trace;
 8000704:	4b02      	ldr	r3, [pc, #8]	; (8000710 <__trace_set+0xc>)
 8000706:	781a      	ldrb	r2, [r3, #0]
  __trace = x;
 8000708:	7018      	strb	r0, [r3, #0]
  return o;
}
 800070a:	4610      	mov	r0, r2
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	20000000 	.word	0x20000000

08000714 <SYS_dump_trace>:
#endif

void SYS_dump_trace(u8_t io) {
 8000714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool o = __trace;
  __trace = TRUE;
  return o;
}
bool __trace_stop(void) {
  bool o = __trace;
 8000718:	4c2b      	ldr	r4, [pc, #172]	; (80007c8 <SYS_dump_trace+0xb4>)
  __trace = FALSE;
 800071a:	2300      	movs	r3, #0
  __trace = x;
  return o;
}
#endif

void SYS_dump_trace(u8_t io) {
 800071c:	b085      	sub	sp, #20
  bool o = __trace;
  __trace = TRUE;
  return o;
}
bool __trace_stop(void) {
  bool o = __trace;
 800071e:	f894 9000 	ldrb.w	r9, [r4]
  cur_thread[sizeof(cur_thread)-1] = 0;
#else
  char cur_thread[] = " ";
#endif

  bool old_blocking_tx = IO_blocking_tx(io, TRUE);
 8000722:	2101      	movs	r1, #1
  __trace = TRUE;
  return o;
}
bool __trace_stop(void) {
  bool o = __trace;
  __trace = FALSE;
 8000724:	7023      	strb	r3, [r4, #0]
#ifdef CONFIG_OS
  char cur_thread[16];
  memset(cur_thread, '.', sizeof(cur_thread));
  cur_thread[sizeof(cur_thread)-1] = 0;
#else
  char cur_thread[] = " ";
 8000726:	2320      	movs	r3, #32
 8000728:	f8ad 300c 	strh.w	r3, [sp, #12]
  __trace = x;
  return o;
}
#endif

void SYS_dump_trace(u8_t io) {
 800072c:	4605      	mov	r5, r0
  cur_thread[sizeof(cur_thread)-1] = 0;
#else
  char cur_thread[] = " ";
#endif

  bool old_blocking_tx = IO_blocking_tx(io, TRUE);
 800072e:	f000 f8d7 	bl	80008e0 <IO_blocking_tx>
 8000732:	4682      	mov	sl, r0
  IO_tx_flush(io);
 8000734:	4628      	mov	r0, r5
 8000736:	f000 fa11 	bl	8000b5c <IO_tx_flush>
  u32_t s_ix = _trace_log_ix;
 800073a:	4b24      	ldr	r3, [pc, #144]	; (80007cc <SYS_dump_trace+0xb8>)
  bool o = __trace;
  __trace = TRUE;
  return o;
}
bool __trace_stop(void) {
  bool o = __trace;
 800073c:	fa5f f989 	uxtb.w	r9, r9
  char cur_thread[] = " ";
#endif

  bool old_blocking_tx = IO_blocking_tx(io, TRUE);
  IO_tx_flush(io);
  u32_t s_ix = _trace_log_ix;
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	46a0      	mov	r8, r4
  if (s_ix == 0) {
 8000744:	b10b      	cbz	r3, 800074a <SYS_dump_trace+0x36>
    s_ix = TRACE_SIZE - 1;
  } else {
    s_ix--;
 8000746:	3b01      	subs	r3, #1
 8000748:	e000      	b.n	800074c <SYS_dump_trace+0x38>

  bool old_blocking_tx = IO_blocking_tx(io, TRUE);
  IO_tx_flush(io);
  u32_t s_ix = _trace_log_ix;
  if (s_ix == 0) {
    s_ix = TRACE_SIZE - 1;
 800074a:	233f      	movs	r3, #63	; 0x3f
    s_ix--;
  }
  u32_t ix = s_ix;
  u32_t t_len = 0;
  // find trace start
  while (_trace_log[ix] != 0) {
 800074c:	4920      	ldr	r1, [pc, #128]	; (80007d0 <SYS_dump_trace+0xbc>)
  if (s_ix == 0) {
    s_ix = TRACE_SIZE - 1;
  } else {
    s_ix--;
  }
  u32_t ix = s_ix;
 800074e:	461c      	mov	r4, r3
  u32_t t_len = 0;
 8000750:	2600      	movs	r6, #0
  // find trace start
  while (_trace_log[ix] != 0) {
 8000752:	f831 2014 	ldrh.w	r2, [r1, r4, lsl #1]
 8000756:	f8df b078 	ldr.w	fp, [pc, #120]	; 80007d0 <SYS_dump_trace+0xbc>
 800075a:	b132      	cbz	r2, 800076a <SYS_dump_trace+0x56>
    t_len++;
 800075c:	3601      	adds	r6, #1
    if (ix == 0) {
 800075e:	b10c      	cbz	r4, 8000764 <SYS_dump_trace+0x50>
      ix = TRACE_SIZE - 1;
    } else {
      ix--;
 8000760:	3c01      	subs	r4, #1
 8000762:	e000      	b.n	8000766 <SYS_dump_trace+0x52>
  u32_t t_len = 0;
  // find trace start
  while (_trace_log[ix] != 0) {
    t_len++;
    if (ix == 0) {
      ix = TRACE_SIZE - 1;
 8000764:	243f      	movs	r4, #63	; 0x3f
    } else {
      ix--;
    }
    if (ix == s_ix) break;
 8000766:	429c      	cmp	r4, r3
 8000768:	d1f3      	bne.n	8000752 <SYS_dump_trace+0x3e>
 800076a:	4f1a      	ldr	r7, [pc, #104]	; (80007d4 <SYS_dump_trace+0xc0>)
  }
  // display all trace chronologically
  while (t_len-- > 0)  {
 800076c:	b1ee      	cbz	r6, 80007aa <SYS_dump_trace+0x96>
    if (ix == TRACE_SIZE - 1) {
 800076e:	2c3f      	cmp	r4, #63	; 0x3f
      ix = 0;
    } else {
      ix++;
 8000770:	bf14      	ite	ne
 8000772:	3401      	addne	r4, #1
    if (ix == s_ix) break;
  }
  // display all trace chronologically
  while (t_len-- > 0)  {
    if (ix == TRACE_SIZE - 1) {
      ix = 0;
 8000774:	2400      	moveq	r4, #0
    } else {
      ix++;
    }
    u16_t e = _trace_log[ix];
 8000776:	f83b 2014 	ldrh.w	r2, [fp, r4, lsl #1]
    _trc_types op = e >> 8;
 800077a:	0a13      	lsrs	r3, r2, #8
    u8_t arg = e & 0xff;
 800077c:	b2d1      	uxtb	r1, r2
    if (_trace_log[ix] == 0) {
 800077e:	b1a2      	cbz	r2, 80007aa <SYS_dump_trace+0x96>
      break;
    }
#ifdef CONFIG_OS
    os_thread *t;
#endif
    switch (op) {
 8000780:	1e9a      	subs	r2, r3, #2
 8000782:	2a01      	cmp	r2, #1
 8000784:	d807      	bhi.n	8000796 <SYS_dump_trace+0x82>
      }
      break;
#endif
    case _TRC_OP_IRQ_ENTER:
    case _TRC_OP_IRQ_EXIT:
      ioprint(io, "%s  %s  %s\n", cur_thread, TRACE_NAMES[op], TRACE_IRQ_NAMES[arg]);
 8000786:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 800078a:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
 800078e:	4628      	mov	r0, r5
 8000790:	9200      	str	r2, [sp, #0]
 8000792:	4911      	ldr	r1, [pc, #68]	; (80007d8 <SYS_dump_trace+0xc4>)
 8000794:	e002      	b.n	800079c <SYS_dump_trace+0x88>
      memset(cur_thread, ' ', sizeof(cur_thread)-1);
      // fall through
      //no break
#endif
    default:
      ioprint(io, "%s  %s  %02x\n", cur_thread, TRACE_NAMES[op], arg);
 8000796:	9100      	str	r1, [sp, #0]
 8000798:	4910      	ldr	r1, [pc, #64]	; (80007dc <SYS_dump_trace+0xc8>)
 800079a:	4628      	mov	r0, r5
 800079c:	aa03      	add	r2, sp, #12
 800079e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80007a2:	f000 fd0f 	bl	80011c4 <ioprint>
 80007a6:	3e01      	subs	r6, #1
 80007a8:	e7e0      	b.n	800076c <SYS_dump_trace+0x58>
      break;
    }
  };
  IO_tx_flush(io);
 80007aa:	4628      	mov	r0, r5
 80007ac:	f000 f9d6 	bl	8000b5c <IO_tx_flush>

  IO_blocking_tx(io, old_blocking_tx);
 80007b0:	4628      	mov	r0, r5
 80007b2:	4651      	mov	r1, sl
 80007b4:	f000 f894 	bl	80008e0 <IO_blocking_tx>
  bool o = __trace;
  __trace = FALSE;
  return o;
}
bool __trace_set(bool x) {
  bool o = __trace;
 80007b8:	f898 3000 	ldrb.w	r3, [r8]
  __trace = x;
 80007bc:	f888 9000 	strb.w	r9, [r8]
  IO_tx_flush(io);

  IO_blocking_tx(io, old_blocking_tx);
  TRACE_SET(tracing);
#endif
}
 80007c0:	b005      	add	sp, #20
 80007c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80007c6:	bf00      	nop
 80007c8:	20000000 	.word	0x20000000
 80007cc:	200001ac 	.word	0x200001ac
 80007d0:	20000c74 	.word	0x20000c74
 80007d4:	0800e5ac 	.word	0x0800e5ac
 80007d8:	0800fe8e 	.word	0x0800fe8e
 80007dc:	0800fe9a 	.word	0x0800fe9a

080007e0 <SYS_assert>:

void SYS_break_if_dbg(void) {
  arch_break_if_dbg();
}

void SYS_assert(const char* file, int line) {
 80007e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  irq_disable();
  if (assert_cb) {
 80007e2:	4d1a      	ldr	r5, [pc, #104]	; (800084c <SYS_assert+0x6c>)

void SYS_break_if_dbg(void) {
  arch_break_if_dbg();
}

void SYS_assert(const char* file, int line) {
 80007e4:	4607      	mov	r7, r0
 80007e6:	460e      	mov	r6, r1
  irq_disable();
 80007e8:	f7ff fcd0 	bl	800018c <irq_disable>
  if (assert_cb) {
 80007ec:	69ac      	ldr	r4, [r5, #24]
 80007ee:	b104      	cbz	r4, 80007f2 <SYS_assert+0x12>
    assert_cb();
 80007f0:	47a0      	blx	r4
  }

  IO_blocking_tx(IODBG, TRUE);
 80007f2:	2101      	movs	r1, #1
 80007f4:	2000      	movs	r0, #0
 80007f6:	f000 f873 	bl	80008e0 <IO_blocking_tx>
  IO_tx_flush(IODBG);
 80007fa:	2000      	movs	r0, #0
 80007fc:	f000 f9ae 	bl	8000b5c <IO_tx_flush>
  ioprint(IODBG, TEXT_BAD("\nASSERT: %s:%i\n"), file, line);
 8000800:	4633      	mov	r3, r6
 8000802:	4913      	ldr	r1, [pc, #76]	; (8000850 <SYS_assert+0x70>)
 8000804:	463a      	mov	r2, r7
 8000806:	2000      	movs	r0, #0
 8000808:	f000 fcdc 	bl	80011c4 <ioprint>
  IO_tx_flush(IODBG);
 800080c:	2000      	movs	r0, #0
 800080e:	f000 f9a5 	bl	8000b5c <IO_tx_flush>
#if defined(CONFIG_OS) && defined(OS_DBG_MON)
  OS_DBG_list_all(TRUE, IODBG);
  IO_tx_flush(IODBG);
#endif
#ifdef CONFIG_TASK_QUEUE
  TASK_dump(IODBG);
 8000812:	2000      	movs	r0, #0
 8000814:	f001 f94e 	bl	8001ab4 <TASK_dump>
#endif
  IO_tx_flush(IODBG);
 8000818:	2000      	movs	r0, #0
 800081a:	f000 f99f 	bl	8000b5c <IO_tx_flush>
  SYS_dump_trace(IODBG);
 800081e:	2000      	movs	r0, #0
 8000820:	f7ff ff78 	bl	8000714 <SYS_dump_trace>
  IO_tx_flush(IODBG);
 8000824:	2000      	movs	r0, #0
 8000826:	f000 f999 	bl	8000b5c <IO_tx_flush>
void SYS_set_assert_behaviour(assert_behaviour_t b) {
  assert_behaviour = b;
}

void SYS_break_if_dbg(void) {
  arch_break_if_dbg();
 800082a:	f7ff fca5 	bl	8000178 <arch_break_if_dbg>
  SYS_dump_trace(IODBG);
  IO_tx_flush(IODBG);

  SYS_break_if_dbg();

  if (assert_behaviour == ASSERT_RESET) {
 800082e:	7f2b      	ldrb	r3, [r5, #28]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d102      	bne.n	800083a <SYS_assert+0x5a>
    SYS_reboot(REBOOT_ASSERT);
 8000834:	2003      	movs	r0, #3
 8000836:	f7ff ff4f 	bl	80006d8 <SYS_reboot>
  }

  const int ASSERT_BLINK = 0x100000;
  volatile int asserted;
  while (1) {
    asserted = ASSERT_BLINK;
 800083a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800083e:	9201      	str	r2, [sp, #4]
    while (asserted--) {
 8000840:	9b01      	ldr	r3, [sp, #4]
 8000842:	1e59      	subs	r1, r3, #1
 8000844:	9101      	str	r1, [sp, #4]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d1fa      	bne.n	8000840 <SYS_assert+0x60>
 800084a:	e7f8      	b.n	800083e <SYS_assert+0x5e>
 800084c:	200001ac 	.word	0x200001ac
 8000850:	0800fea8 	.word	0x0800fea8

08000854 <io_usb_cb>:
  }
}
#endif

#ifdef CONFIG_USB_VCD
static void io_usb_cb(u16_t available, void *arg) {
 8000854:	b510      	push	{r4, lr}
  u8_t io = (u8_t)((u32_t)arg);
  if (io_bus[io].cb) {
 8000856:	4c05      	ldr	r4, [pc, #20]	; (800086c <io_usb_cb+0x18>)
  }
}
#endif

#ifdef CONFIG_USB_VCD
static void io_usb_cb(u16_t available, void *arg) {
 8000858:	4602      	mov	r2, r0
  u8_t io = (u8_t)((u32_t)arg);
 800085a:	b2c8      	uxtb	r0, r1
  if (io_bus[io].cb) {
 800085c:	eb04 1400 	add.w	r4, r4, r0, lsl #4
 8000860:	68a3      	ldr	r3, [r4, #8]
 8000862:	b10b      	cbz	r3, 8000868 <io_usb_cb+0x14>
    io_bus[io].cb(io, io_bus[io].cb_arg, available);
 8000864:	68e1      	ldr	r1, [r4, #12]
 8000866:	4798      	blx	r3
 8000868:	bd10      	pop	{r4, pc}
 800086a:	bf00      	nop
 800086c:	200001cc 	.word	0x200001cc

08000870 <io_uart_cb>:
static io_bus_def io_bus[CONFIG_IO_MAX];

#ifdef CONFIG_UART
static void io_uart_cb(void *arg, u8_t c) {
  u8_t io = (u8_t)((u32_t)arg);
  if (io_bus[io].cb) {
 8000870:	4b0a      	ldr	r3, [pc, #40]	; (800089c <io_uart_cb+0x2c>)
} io_bus_def;

static io_bus_def io_bus[CONFIG_IO_MAX];

#ifdef CONFIG_UART
static void io_uart_cb(void *arg, u8_t c) {
 8000872:	b570      	push	{r4, r5, r6, lr}
  u8_t io = (u8_t)((u32_t)arg);
 8000874:	b2c5      	uxtb	r5, r0
  if (io_bus[io].cb) {
 8000876:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 800087a:	689c      	ldr	r4, [r3, #8]
 800087c:	b164      	cbz	r4, 8000898 <io_uart_cb+0x28>
    io_bus[io].cb(io, io_bus[io].cb_arg, UART_rx_available(_UART(io_bus[io].media_id)));
 800087e:	685a      	ldr	r2, [r3, #4]
 8000880:	68de      	ldr	r6, [r3, #12]
 8000882:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <io_uart_cb+0x30>)
 8000884:	f44f 6083 	mov.w	r0, #1048	; 0x418
 8000888:	fb00 3002 	mla	r0, r0, r2, r3
 800088c:	f002 fb00 	bl	8002e90 <UART_rx_available>
 8000890:	4631      	mov	r1, r6
 8000892:	4602      	mov	r2, r0
 8000894:	4628      	mov	r0, r5
 8000896:	47a0      	blx	r4
 8000898:	bd70      	pop	{r4, r5, r6, pc}
 800089a:	bf00      	nop
 800089c:	200001cc 	.word	0x200001cc
 80008a0:	20000d34 	.word	0x20000d34

080008a4 <IO_assure_tx>:
}
#endif

#ifndef CONFIG_IO_NOASSURE
bool IO_assure_tx(u8_t io, bool on) {
  switch (io_bus[io].media) {
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <IO_assure_tx+0x34>)
 80008a6:	0102      	lsls	r2, r0, #4
 80008a8:	1898      	adds	r0, r3, r2
 80008aa:	5c9b      	ldrb	r3, [r3, r2]
  }
}
#endif

#ifndef CONFIG_IO_NOASSURE
bool IO_assure_tx(u8_t io, bool on) {
 80008ac:	b510      	push	{r4, lr}
  switch (io_bus[io].media) {
 80008ae:	b133      	cbz	r3, 80008be <IO_assure_tx+0x1a>
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d10e      	bne.n	80008d2 <IO_assure_tx+0x2e>
  case io_memory:
  case io_file:
    return FALSE;
  }
  return FALSE;
}
 80008b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  switch (io_bus[io].media) {
  case io_uart:
    return UART_assure_tx(_UART(io_bus[io].media_id), on);
#ifdef CONFIG_USB_VCD
  case io_usb:
    return USB_SER_assure_tx(on);
 80008b8:	4608      	mov	r0, r1
 80008ba:	f00a bf59 	b.w	800b770 <USB_SER_assure_tx>

#ifndef CONFIG_IO_NOASSURE
bool IO_assure_tx(u8_t io, bool on) {
  switch (io_bus[io].media) {
  case io_uart:
    return UART_assure_tx(_UART(io_bus[io].media_id), on);
 80008be:	6842      	ldr	r2, [r0, #4]
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <IO_assure_tx+0x38>)
 80008c2:	f44f 6083 	mov.w	r0, #1048	; 0x418
 80008c6:	fb00 3002 	mla	r0, r0, r2, r3
  case io_memory:
  case io_file:
    return FALSE;
  }
  return FALSE;
}
 80008ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#ifndef CONFIG_IO_NOASSURE
bool IO_assure_tx(u8_t io, bool on) {
  switch (io_bus[io].media) {
  case io_uart:
    return UART_assure_tx(_UART(io_bus[io].media_id), on);
 80008ce:	f002 bc80 	b.w	80031d2 <UART_assure_tx>
  case io_memory:
  case io_file:
    return FALSE;
  }
  return FALSE;
}
 80008d2:	2000      	movs	r0, #0
 80008d4:	bd10      	pop	{r4, pc}
 80008d6:	bf00      	nop
 80008d8:	200001cc 	.word	0x200001cc
 80008dc:	20000d34 	.word	0x20000d34

080008e0 <IO_blocking_tx>:
#endif

#ifndef CONFIG_IO_NOBLOCK
bool IO_blocking_tx(u8_t io, bool on) {
  switch (io_bus[io].media) {
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <IO_blocking_tx+0x34>)
 80008e2:	0102      	lsls	r2, r0, #4
 80008e4:	1898      	adds	r0, r3, r2
 80008e6:	5c9b      	ldrb	r3, [r3, r2]
  return FALSE;
}
#endif

#ifndef CONFIG_IO_NOBLOCK
bool IO_blocking_tx(u8_t io, bool on) {
 80008e8:	b510      	push	{r4, lr}
  switch (io_bus[io].media) {
 80008ea:	b133      	cbz	r3, 80008fa <IO_blocking_tx+0x1a>
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d10e      	bne.n	800090e <IO_blocking_tx+0x2e>
  case io_memory:
  case io_file:
    return FALSE;
  }
  return FALSE;
}
 80008f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  switch (io_bus[io].media) {
  case io_uart:
    return UART_sync_tx(_UART(io_bus[io].media_id), on);
#ifdef CONFIG_USB_VCD
  case io_usb:
    return USB_SER_assure_tx(on);
 80008f4:	4608      	mov	r0, r1
 80008f6:	f00a bf3b 	b.w	800b770 <USB_SER_assure_tx>

#ifndef CONFIG_IO_NOBLOCK
bool IO_blocking_tx(u8_t io, bool on) {
  switch (io_bus[io].media) {
  case io_uart:
    return UART_sync_tx(_UART(io_bus[io].media_id), on);
 80008fa:	6842      	ldr	r2, [r0, #4]
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <IO_blocking_tx+0x38>)
 80008fe:	f44f 6083 	mov.w	r0, #1048	; 0x418
 8000902:	fb00 3002 	mla	r0, r0, r2, r3
  case io_memory:
  case io_file:
    return FALSE;
  }
  return FALSE;
}
 8000906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#ifndef CONFIG_IO_NOBLOCK
bool IO_blocking_tx(u8_t io, bool on) {
  switch (io_bus[io].media) {
  case io_uart:
    return UART_sync_tx(_UART(io_bus[io].media_id), on);
 800090a:	f002 bc68 	b.w	80031de <UART_sync_tx>
  case io_memory:
  case io_file:
    return FALSE;
  }
  return FALSE;
}
 800090e:	2000      	movs	r0, #0
 8000910:	bd10      	pop	{r4, pc}
 8000912:	bf00      	nop
 8000914:	200001cc 	.word	0x200001cc
 8000918:	20000d34 	.word	0x20000d34

0800091c <IO_set_callback>:
#endif

void IO_set_callback(u8_t io, io_rx_cb cb, void *arg) {
 800091c:	b570      	push	{r4, r5, r6, lr}
  if (cb) {
 800091e:	460b      	mov	r3, r1
  }
  return FALSE;
}
#endif

void IO_set_callback(u8_t io, io_rx_cb cb, void *arg) {
 8000920:	4606      	mov	r6, r0
 8000922:	4d12      	ldr	r5, [pc, #72]	; (800096c <IO_set_callback+0x50>)
 8000924:	0104      	lsls	r4, r0, #4
  if (cb) {
 8000926:	b119      	cbz	r1, 8000930 <IO_set_callback+0x14>
    io_bus[io].cb = cb;
 8000928:	1929      	adds	r1, r5, r4
 800092a:	608b      	str	r3, [r1, #8]
    io_bus[io].cb_arg = arg;
 800092c:	60ca      	str	r2, [r1, #12]
 800092e:	e001      	b.n	8000934 <IO_set_callback+0x18>
  } else {
    io_bus[io].cb = NULL;
 8000930:	192a      	adds	r2, r5, r4
 8000932:	6091      	str	r1, [r2, #8]
  }

  switch (io_bus[io].media) {
 8000934:	5d2a      	ldrb	r2, [r5, r4]
 8000936:	1929      	adds	r1, r5, r4
 8000938:	b112      	cbz	r2, 8000940 <IO_set_callback+0x24>
 800093a:	2a01      	cmp	r2, #1
 800093c:	d00f      	beq.n	800095e <IO_set_callback+0x42>
 800093e:	bd70      	pop	{r4, r5, r6, pc}
  case io_uart:
    UART_set_callback(_UART(io_bus[io].media_id), cb ? io_uart_cb : (void*)NULL, (void*)(u32_t)io);
 8000940:	6849      	ldr	r1, [r1, #4]
 8000942:	4a0b      	ldr	r2, [pc, #44]	; (8000970 <IO_set_callback+0x54>)
 8000944:	f44f 6083 	mov.w	r0, #1048	; 0x418
 8000948:	fb00 2001 	mla	r0, r0, r1, r2
 800094c:	4909      	ldr	r1, [pc, #36]	; (8000974 <IO_set_callback+0x58>)
 800094e:	4632      	mov	r2, r6
 8000950:	2b00      	cmp	r3, #0
 8000952:	bf08      	it	eq
 8000954:	2100      	moveq	r1, #0
  case io_ringbuffer:
  case io_memory:
  case io_file:
    break;
  }
}
 8000956:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    io_bus[io].cb = NULL;
  }

  switch (io_bus[io].media) {
  case io_uart:
    UART_set_callback(_UART(io_bus[io].media_id), cb ? io_uart_cb : (void*)NULL, (void*)(u32_t)io);
 800095a:	f002 bc2e 	b.w	80031ba <UART_set_callback>
    break;
#ifdef CONFIG_USB_VCD
  case io_usb:
    USB_SER_set_rx_callback(io_usb_cb, (void*)(u32_t)io);
 800095e:	4631      	mov	r1, r6
 8000960:	4805      	ldr	r0, [pc, #20]	; (8000978 <IO_set_callback+0x5c>)
  case io_ringbuffer:
  case io_memory:
  case io_file:
    break;
  }
}
 8000962:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  case io_uart:
    UART_set_callback(_UART(io_bus[io].media_id), cb ? io_uart_cb : (void*)NULL, (void*)(u32_t)io);
    break;
#ifdef CONFIG_USB_VCD
  case io_usb:
    USB_SER_set_rx_callback(io_usb_cb, (void*)(u32_t)io);
 8000966:	f00a bef5 	b.w	800b754 <USB_SER_set_rx_callback>
 800096a:	bf00      	nop
 800096c:	200001cc 	.word	0x200001cc
 8000970:	20000d34 	.word	0x20000d34
 8000974:	08000871 	.word	0x08000871
 8000978:	08000855 	.word	0x08000855

0800097c <IO_get_callback>:
    break;
  }
}

void IO_get_callback(u8_t io, io_rx_cb *cb, void **arg) {
  *cb = io_bus[io].cb;
 800097c:	4b03      	ldr	r3, [pc, #12]	; (800098c <IO_get_callback+0x10>)
 800097e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8000982:	6883      	ldr	r3, [r0, #8]
 8000984:	600b      	str	r3, [r1, #0]
  *arg = io_bus[io].cb_arg;
 8000986:	68c3      	ldr	r3, [r0, #12]
 8000988:	6013      	str	r3, [r2, #0]
 800098a:	4770      	bx	lr
 800098c:	200001cc 	.word	0x200001cc

08000990 <IO_get_char>:
}

s32_t IO_get_char(u8_t io) {
 8000990:	b507      	push	{r0, r1, r2, lr}
  u8_t c = -1;
 8000992:	23ff      	movs	r3, #255	; 0xff
 8000994:	f88d 3007 	strb.w	r3, [sp, #7]
  s32_t res;
  switch (io_bus[io].media) {
 8000998:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <IO_get_char+0x64>)
 800099a:	0100      	lsls	r0, r0, #4
 800099c:	5c1a      	ldrb	r2, [r3, r0]
 800099e:	2a04      	cmp	r2, #4
 80009a0:	d823      	bhi.n	80009ea <IO_get_char+0x5a>
 80009a2:	e8df f002 	tbb	[pc, r2]
 80009a6:	0d03      	.short	0x0d03
 80009a8:	1c22      	.short	0x1c22
 80009aa:	12          	.byte	0x12
 80009ab:	00          	.byte	0x00
  case io_uart:
    return UART_get_char(_UART(io_bus[io].media_id));
 80009ac:	4418      	add	r0, r3
 80009ae:	6842      	ldr	r2, [r0, #4]
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <IO_get_char+0x68>)
 80009b2:	f44f 6083 	mov.w	r0, #1048	; 0x418
 80009b6:	fb00 3002 	mla	r0, r0, r2, r3
 80009ba:	f002 faaf 	bl	8002f1c <UART_get_char>
 80009be:	e016      	b.n	80009ee <IO_get_char+0x5e>
#ifdef CONFIG_USB_VCD
  case io_usb:
    res = USB_SER_rx_char(&c);
 80009c0:	f10d 0007 	add.w	r0, sp, #7
 80009c4:	f00a feaa 	bl	800b71c <USB_SER_rx_char>
 80009c8:	e005      	b.n	80009d6 <IO_get_char+0x46>
    return res ? res : c;
#endif
  case io_file:
    return -1;
  case io_ringbuffer:
    res = ringbuf_getc((ringbuf *)io_bus[io].media_id, &c);
 80009ca:	4418      	add	r0, r3
 80009cc:	6840      	ldr	r0, [r0, #4]
 80009ce:	f10d 0107 	add.w	r1, sp, #7
 80009d2:	f001 fdcb 	bl	800256c <ringbuf_getc>
    return res ? res : c;
 80009d6:	b950      	cbnz	r0, 80009ee <IO_get_char+0x5e>
 80009d8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80009dc:	e007      	b.n	80009ee <IO_get_char+0x5e>
  case io_memory: {
    u8_t *p = (u8_t *)io_bus[io].media_id;
 80009de:	181a      	adds	r2, r3, r0
    c = *p++;
 80009e0:	6853      	ldr	r3, [r2, #4]
 80009e2:	f813 0b01 	ldrb.w	r0, [r3], #1
    io_bus[io].media_id = (u32_t)p;
 80009e6:	6053      	str	r3, [r2, #4]
    return c;
 80009e8:	e001      	b.n	80009ee <IO_get_char+0x5e>
  case io_usb:
    res = USB_SER_rx_char(&c);
    return res ? res : c;
#endif
  case io_file:
    return -1;
 80009ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return c;
  }
  }

  return -1;
}
 80009ee:	b003      	add	sp, #12
 80009f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80009f4:	200001cc 	.word	0x200001cc
 80009f8:	20000d34 	.word	0x20000d34

080009fc <IO_get_buf>:

s32_t IO_get_buf(u8_t io, u8_t *buf, u16_t len) {
  switch (io_bus[io].media) {
 80009fc:	4b19      	ldr	r3, [pc, #100]	; (8000a64 <IO_get_buf+0x68>)
 80009fe:	0100      	lsls	r0, r0, #4
  }

  return -1;
}

s32_t IO_get_buf(u8_t io, u8_t *buf, u16_t len) {
 8000a00:	b570      	push	{r4, r5, r6, lr}
 8000a02:	4614      	mov	r4, r2
  switch (io_bus[io].media) {
 8000a04:	5c1a      	ldrb	r2, [r3, r0]
 8000a06:	2a04      	cmp	r2, #4
 8000a08:	d828      	bhi.n	8000a5c <IO_get_buf+0x60>
 8000a0a:	e8df f002 	tbb	[pc, r2]
 8000a0e:	0f03      	.short	0x0f03
 8000a10:	1c27      	.short	0x1c27
 8000a12:	15          	.byte	0x15
 8000a13:	00          	.byte	0x00
  case io_uart:
    return UART_get_buf(_UART(io_bus[io].media_id), buf, len);
 8000a14:	4418      	add	r0, r3
 8000a16:	6842      	ldr	r2, [r0, #4]
 8000a18:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <IO_get_buf+0x6c>)
 8000a1a:	f44f 6083 	mov.w	r0, #1048	; 0x418
 8000a1e:	fb00 3002 	mla	r0, r0, r2, r3
 8000a22:	4622      	mov	r2, r4
    io_bus[io].media_id = (u32_t)p + len;
    return len;
  }
  }
  return -1;
}
 8000a24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
}

s32_t IO_get_buf(u8_t io, u8_t *buf, u16_t len) {
  switch (io_bus[io].media) {
  case io_uart:
    return UART_get_buf(_UART(io_bus[io].media_id), buf, len);
 8000a28:	f002 baa5 	b.w	8002f76 <UART_get_buf>
#ifdef CONFIG_USB_VCD
  case io_usb:
    return USB_SER_rx_buf(buf, len);
 8000a2c:	4608      	mov	r0, r1
 8000a2e:	4621      	mov	r1, r4
    io_bus[io].media_id = (u32_t)p + len;
    return len;
  }
  }
  return -1;
}
 8000a30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  switch (io_bus[io].media) {
  case io_uart:
    return UART_get_buf(_UART(io_bus[io].media_id), buf, len);
#ifdef CONFIG_USB_VCD
  case io_usb:
    return USB_SER_rx_buf(buf, len);
 8000a34:	f00a be78 	b.w	800b728 <USB_SER_rx_buf>
#endif
  case io_file:
    return -1;
  case io_ringbuffer:
    return ringbuf_get((ringbuf *)io_bus[io].media_id, buf, len);
 8000a38:	4418      	add	r0, r3
 8000a3a:	4622      	mov	r2, r4
 8000a3c:	6840      	ldr	r0, [r0, #4]
    io_bus[io].media_id = (u32_t)p + len;
    return len;
  }
  }
  return -1;
}
 8000a3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return USB_SER_rx_buf(buf, len);
#endif
  case io_file:
    return -1;
  case io_ringbuffer:
    return ringbuf_get((ringbuf *)io_bus[io].media_id, buf, len);
 8000a42:	f001 be7f 	b.w	8002744 <ringbuf_get>
  case io_memory: {
    u8_t *p = (u8_t *)io_bus[io].media_id;
 8000a46:	181d      	adds	r5, r3, r0
 8000a48:	686e      	ldr	r6, [r5, #4]
    memcpy(buf, p, len);
 8000a4a:	4608      	mov	r0, r1
 8000a4c:	4622      	mov	r2, r4
 8000a4e:	4631      	mov	r1, r6
    io_bus[io].media_id = (u32_t)p + len;
 8000a50:	4426      	add	r6, r4
    return -1;
  case io_ringbuffer:
    return ringbuf_get((ringbuf *)io_bus[io].media_id, buf, len);
  case io_memory: {
    u8_t *p = (u8_t *)io_bus[io].media_id;
    memcpy(buf, p, len);
 8000a52:	f00d fc49 	bl	800e2e8 <memcpy>
    io_bus[io].media_id = (u32_t)p + len;
 8000a56:	606e      	str	r6, [r5, #4]
    return len;
 8000a58:	4620      	mov	r0, r4
 8000a5a:	bd70      	pop	{r4, r5, r6, pc}
#ifdef CONFIG_USB_VCD
  case io_usb:
    return USB_SER_rx_buf(buf, len);
#endif
  case io_file:
    return -1;
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    io_bus[io].media_id = (u32_t)p + len;
    return len;
  }
  }
  return -1;
}
 8000a60:	bd70      	pop	{r4, r5, r6, pc}
 8000a62:	bf00      	nop
 8000a64:	200001cc 	.word	0x200001cc
 8000a68:	20000d34 	.word	0x20000d34

08000a6c <IO_put_char>:

s32_t IO_put_char(u8_t io, u8_t c) {
  switch (io_bus[io].media) {
 8000a6c:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <IO_put_char+0x58>)
 8000a6e:	0100      	lsls	r0, r0, #4
 8000a70:	5c1a      	ldrb	r2, [r3, r0]
  }
  }
  return -1;
}

s32_t IO_put_char(u8_t io, u8_t c) {
 8000a72:	b510      	push	{r4, lr}
  switch (io_bus[io].media) {
 8000a74:	2a04      	cmp	r2, #4
 8000a76:	d821      	bhi.n	8000abc <IO_put_char+0x50>
 8000a78:	e8df f002 	tbb	[pc, r2]
 8000a7c:	19200e03 	.word	0x19200e03
 8000a80:	13          	.byte	0x13
 8000a81:	00          	.byte	0x00
  case io_uart:
    return UART_put_char(_UART(io_bus[io].media_id), c);
 8000a82:	4418      	add	r0, r3
 8000a84:	6842      	ldr	r2, [r0, #4]
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <IO_put_char+0x5c>)
 8000a88:	f44f 6083 	mov.w	r0, #1048	; 0x418
 8000a8c:	fb00 3002 	mla	r0, r0, r2, r3
    io_bus[io].media_id = (u32_t)p;
    return c;
  }
  }
  return -1;
}
 8000a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

s32_t IO_put_char(u8_t io, u8_t c) {
  switch (io_bus[io].media) {
  case io_uart:
    return UART_put_char(_UART(io_bus[io].media_id), c);
 8000a94:	f002 baeb 	b.w	800306e <UART_put_char>
#ifdef CONFIG_USB_VCD
  case io_usb:
    return USB_SER_tx_char(c);
 8000a98:	4608      	mov	r0, r1
    io_bus[io].media_id = (u32_t)p;
    return c;
  }
  }
  return -1;
}
 8000a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  switch (io_bus[io].media) {
  case io_uart:
    return UART_put_char(_UART(io_bus[io].media_id), c);
#ifdef CONFIG_USB_VCD
  case io_usb:
    return USB_SER_tx_char(c);
 8000a9e:	f00a be4b 	b.w	800b738 <USB_SER_tx_char>
#endif
  case io_file:
    return -1;
  case io_ringbuffer:
    return ringbuf_putc((ringbuf *)io_bus[io].media_id, c);
 8000aa2:	4418      	add	r0, r3
 8000aa4:	6840      	ldr	r0, [r0, #4]
    io_bus[io].media_id = (u32_t)p;
    return c;
  }
  }
  return -1;
}
 8000aa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return USB_SER_tx_char(c);
#endif
  case io_file:
    return -1;
  case io_ringbuffer:
    return ringbuf_putc((ringbuf *)io_bus[io].media_id, c);
 8000aaa:	f001 bd77 	b.w	800259c <ringbuf_putc>
  case io_memory: {
    u8_t *p = (u8_t *)io_bus[io].media_id;
 8000aae:	4418      	add	r0, r3
    *p++ = c;
 8000ab0:	6843      	ldr	r3, [r0, #4]
 8000ab2:	f803 1b01 	strb.w	r1, [r3], #1
    io_bus[io].media_id = (u32_t)p;
 8000ab6:	6043      	str	r3, [r0, #4]
    return c;
 8000ab8:	4608      	mov	r0, r1
 8000aba:	bd10      	pop	{r4, pc}
#ifdef CONFIG_USB_VCD
  case io_usb:
    return USB_SER_tx_char(c);
#endif
  case io_file:
    return -1;
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    io_bus[io].media_id = (u32_t)p;
    return c;
  }
  }
  return -1;
}
 8000ac0:	bd10      	pop	{r4, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200001cc 	.word	0x200001cc
 8000ac8:	20000d34 	.word	0x20000d34

08000acc <IO_tx_force_char>:

void IO_tx_force_char(u8_t io, u8_t c) {
  switch (io_bus[io].media) {
 8000acc:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <IO_tx_force_char+0x50>)
 8000ace:	0100      	lsls	r0, r0, #4
 8000ad0:	5c1a      	ldrb	r2, [r3, r0]
  }
  }
  return -1;
}

void IO_tx_force_char(u8_t io, u8_t c) {
 8000ad2:	b510      	push	{r4, lr}
  switch (io_bus[io].media) {
 8000ad4:	2a04      	cmp	r2, #4
 8000ad6:	d81f      	bhi.n	8000b18 <IO_tx_force_char+0x4c>
 8000ad8:	e8df f002 	tbb	[pc, r2]
 8000adc:	191e0e03 	.word	0x191e0e03
 8000ae0:	13          	.byte	0x13
 8000ae1:	00          	.byte	0x00
  case io_uart:
    UART_tx_force_char(_UART(io_bus[io].media_id), c);
 8000ae2:	4418      	add	r0, r3
 8000ae4:	6842      	ldr	r2, [r0, #4]
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <IO_tx_force_char+0x54>)
 8000ae8:	f44f 6083 	mov.w	r0, #1048	; 0x418
 8000aec:	fb00 3002 	mla	r0, r0, r2, r3
    *p++ = c;
    io_bus[io].media_id = (u32_t)p;
    break;
  }
  }
}
 8000af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void IO_tx_force_char(u8_t io, u8_t c) {
  switch (io_bus[io].media) {
  case io_uart:
    UART_tx_force_char(_UART(io_bus[io].media_id), c);
 8000af4:	f002 ba8e 	b.w	8003014 <UART_tx_force_char>
    break;
#ifdef CONFIG_USB_VCD
  case io_usb:
    USB_SER_tx_char(c);
 8000af8:	4608      	mov	r0, r1
    *p++ = c;
    io_bus[io].media_id = (u32_t)p;
    break;
  }
  }
}
 8000afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  case io_uart:
    UART_tx_force_char(_UART(io_bus[io].media_id), c);
    break;
#ifdef CONFIG_USB_VCD
  case io_usb:
    USB_SER_tx_char(c);
 8000afe:	f00a be1b 	b.w	800b738 <USB_SER_tx_char>
    break;
#endif
  case io_file:
    break;
  case io_ringbuffer:
    ringbuf_putc((ringbuf *)io_bus[io].media_id, c);
 8000b02:	4418      	add	r0, r3
 8000b04:	6840      	ldr	r0, [r0, #4]
    *p++ = c;
    io_bus[io].media_id = (u32_t)p;
    break;
  }
  }
}
 8000b06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    break;
#endif
  case io_file:
    break;
  case io_ringbuffer:
    ringbuf_putc((ringbuf *)io_bus[io].media_id, c);
 8000b0a:	f001 bd47 	b.w	800259c <ringbuf_putc>
    break;
  case io_memory: {
    u8_t *p = (u8_t *)io_bus[io].media_id;
 8000b0e:	4418      	add	r0, r3
    *p++ = c;
 8000b10:	6843      	ldr	r3, [r0, #4]
 8000b12:	f803 1b01 	strb.w	r1, [r3], #1
    io_bus[io].media_id = (u32_t)p;
 8000b16:	6043      	str	r3, [r0, #4]
 8000b18:	bd10      	pop	{r4, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200001cc 	.word	0x200001cc
 8000b20:	20000d34 	.word	0x20000d34

08000b24 <IO_tx_drain>:
  }
}

#ifndef CONFIG_IO_NODRAIN
void IO_tx_drain(u8_t io) {
  switch (io_bus[io].media) {
 8000b24:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <IO_tx_drain+0x30>)
 8000b26:	0100      	lsls	r0, r0, #4
 8000b28:	181a      	adds	r2, r3, r0
 8000b2a:	5c1b      	ldrb	r3, [r3, r0]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d00b      	beq.n	8000b48 <IO_tx_drain+0x24>
 8000b30:	d302      	bcc.n	8000b38 <IO_tx_drain+0x14>
 8000b32:	2b04      	cmp	r3, #4
 8000b34:	d00a      	beq.n	8000b4c <IO_tx_drain+0x28>
 8000b36:	4770      	bx	lr
  case io_uart:
    UART_tx_drain(_UART(io_bus[io].media_id));
 8000b38:	6852      	ldr	r2, [r2, #4]
 8000b3a:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <IO_tx_drain+0x34>)
 8000b3c:	f44f 6083 	mov.w	r0, #1048	; 0x418
 8000b40:	fb00 3002 	mla	r0, r0, r2, r3
 8000b44:	f002 b9e4 	b.w	8002f10 <UART_tx_drain>
    break;
#ifdef CONFIG_USB_VCD
  case io_usb:
    USB_SER_tx_drain();
 8000b48:	f00a be14 	b.w	800b774 <USB_SER_tx_drain>
    break;
#endif
  case io_file:
    break;
  case io_ringbuffer:
    ringbuf_clear((ringbuf *)io_bus[io].media_id);
 8000b4c:	6850      	ldr	r0, [r2, #4]
 8000b4e:	f001 bd4e 	b.w	80025ee <ringbuf_clear>
 8000b52:	bf00      	nop
 8000b54:	200001cc 	.word	0x200001cc
 8000b58:	20000d34 	.word	0x20000d34

08000b5c <IO_tx_flush>:
}
#endif

#ifndef CONFIG_IO_NOFLUSH
void IO_tx_flush(u8_t io) {
  switch (io_bus[io].media) {
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <IO_tx_flush+0x24>)
 8000b5e:	0100      	lsls	r0, r0, #4
 8000b60:	181a      	adds	r2, r3, r0
 8000b62:	5c1b      	ldrb	r3, [r3, r0]
 8000b64:	b113      	cbz	r3, 8000b6c <IO_tx_flush+0x10>
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d008      	beq.n	8000b7c <IO_tx_flush+0x20>
 8000b6a:	4770      	bx	lr
  case io_uart:
    UART_tx_flush(_UART(io_bus[io].media_id));
 8000b6c:	6852      	ldr	r2, [r2, #4]
 8000b6e:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <IO_tx_flush+0x28>)
 8000b70:	f44f 6083 	mov.w	r0, #1048	; 0x418
 8000b74:	fb00 3002 	mla	r0, r0, r2, r3
 8000b78:	f002 ba52 	b.w	8003020 <UART_tx_flush>
    break;
#ifdef CONFIG_USB_VCD
  case io_usb:
    USB_SER_tx_flush();
 8000b7c:	f00a be00 	b.w	800b780 <USB_SER_tx_flush>
 8000b80:	200001cc 	.word	0x200001cc
 8000b84:	20000d34 	.word	0x20000d34

08000b88 <IO_put_buf>:
  }
}
#endif

s32_t IO_put_buf(u8_t io, u8_t *buf, u16_t len) {
  switch (io_bus[io].media) {
 8000b88:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <IO_put_buf+0x70>)
    break;
  }
}
#endif

s32_t IO_put_buf(u8_t io, u8_t *buf, u16_t len) {
 8000b8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (io_bus[io].media) {
 8000b8c:	0100      	lsls	r0, r0, #4
    break;
  }
}
#endif

s32_t IO_put_buf(u8_t io, u8_t *buf, u16_t len) {
 8000b8e:	4614      	mov	r4, r2
  switch (io_bus[io].media) {
 8000b90:	5c1a      	ldrb	r2, [r3, r0]
 8000b92:	2a04      	cmp	r2, #4
 8000b94:	d82b      	bhi.n	8000bee <IO_put_buf+0x66>
 8000b96:	e8df f002 	tbb	[pc, r2]
 8000b9a:	1003      	.short	0x1003
 8000b9c:	1f2a      	.short	0x1f2a
 8000b9e:	17          	.byte	0x17
 8000b9f:	00          	.byte	0x00
  case io_uart:
    return UART_put_buf(_UART(io_bus[io].media_id), buf, len);
 8000ba0:	4418      	add	r0, r3
 8000ba2:	6842      	ldr	r2, [r0, #4]
 8000ba4:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <IO_put_buf+0x74>)
 8000ba6:	f44f 6083 	mov.w	r0, #1048	; 0x418
 8000baa:	fb00 3002 	mla	r0, r0, r2, r3
 8000bae:	4622      	mov	r2, r4
    io_bus[io].media_id = (u32_t)p + len;
    return len;
  }
  }
  return -1;
}
 8000bb0:	b003      	add	sp, #12
 8000bb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
#endif

s32_t IO_put_buf(u8_t io, u8_t *buf, u16_t len) {
  switch (io_bus[io].media) {
  case io_uart:
    return UART_put_buf(_UART(io_bus[io].media_id), buf, len);
 8000bb6:	f002 ba95 	b.w	80030e4 <UART_put_buf>
#ifdef CONFIG_USB_VCD
  case io_usb:
    return USB_SER_tx_buf(buf, len);
 8000bba:	4608      	mov	r0, r1
 8000bbc:	4621      	mov	r1, r4
    io_bus[io].media_id = (u32_t)p + len;
    return len;
  }
  }
  return -1;
}
 8000bbe:	b003      	add	sp, #12
 8000bc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  switch (io_bus[io].media) {
  case io_uart:
    return UART_put_buf(_UART(io_bus[io].media_id), buf, len);
#ifdef CONFIG_USB_VCD
  case io_usb:
    return USB_SER_tx_buf(buf, len);
 8000bc4:	f00a bdbe 	b.w	800b744 <USB_SER_tx_buf>
#endif
  case io_file:
    return -1;
  case io_ringbuffer:
    return ringbuf_put((ringbuf *)io_bus[io].media_id, buf, len);
 8000bc8:	4418      	add	r0, r3
 8000bca:	6840      	ldr	r0, [r0, #4]
 8000bcc:	4622      	mov	r2, r4
    io_bus[io].media_id = (u32_t)p + len;
    return len;
  }
  }
  return -1;
}
 8000bce:	b003      	add	sp, #12
 8000bd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return USB_SER_tx_buf(buf, len);
#endif
  case io_file:
    return -1;
  case io_ringbuffer:
    return ringbuf_put((ringbuf *)io_bus[io].media_id, buf, len);
 8000bd4:	f001 bd40 	b.w	8002658 <ringbuf_put>
  case io_memory: {
    u8_t *p = (u8_t *)io_bus[io].media_id;
 8000bd8:	181d      	adds	r5, r3, r0
 8000bda:	686b      	ldr	r3, [r5, #4]
    memcpy(p, buf, len);
 8000bdc:	4622      	mov	r2, r4
 8000bde:	4618      	mov	r0, r3
 8000be0:	f00d fb82 	bl	800e2e8 <memcpy>
 8000be4:	4603      	mov	r3, r0
    io_bus[io].media_id = (u32_t)p + len;
 8000be6:	4423      	add	r3, r4
 8000be8:	606b      	str	r3, [r5, #4]
    return len;
 8000bea:	4620      	mov	r0, r4
 8000bec:	e001      	b.n	8000bf2 <IO_put_buf+0x6a>
#ifdef CONFIG_USB_VCD
  case io_usb:
    return USB_SER_tx_buf(buf, len);
#endif
  case io_file:
    return -1;
 8000bee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    io_bus[io].media_id = (u32_t)p + len;
    return len;
  }
  }
  return -1;
}
 8000bf2:	b003      	add	sp, #12
 8000bf4:	bd30      	pop	{r4, r5, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200001cc 	.word	0x200001cc
 8000bfc:	20000d34 	.word	0x20000d34

08000c00 <IO_rx_available>:

s32_t IO_rx_available(u8_t io) {
 8000c00:	b508      	push	{r3, lr}
  switch (io_bus[io].media) {
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <IO_rx_available+0x48>)
 8000c04:	0100      	lsls	r0, r0, #4
 8000c06:	5c1a      	ldrb	r2, [r3, r0]
 8000c08:	2a04      	cmp	r2, #4
 8000c0a:	d804      	bhi.n	8000c16 <IO_rx_available+0x16>
 8000c0c:	e8df f002 	tbb	[pc, r2]
 8000c10:	19031006 	.word	0x19031006
 8000c14:	13          	.byte	0x13
 8000c15:	00          	.byte	0x00
#ifdef CONFIG_USB_VCD
  case io_usb:
    return USB_SER_rx_avail();
#endif
  case io_file:
    return -1;
 8000c16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c1a:	bd08      	pop	{r3, pc}
}

s32_t IO_rx_available(u8_t io) {
  switch (io_bus[io].media) {
  case io_uart:
    return UART_rx_available(_UART(io_bus[io].media_id));
 8000c1c:	4403      	add	r3, r0
 8000c1e:	685a      	ldr	r2, [r3, #4]
 8000c20:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <IO_rx_available+0x4c>)
 8000c22:	f44f 6083 	mov.w	r0, #1048	; 0x418
 8000c26:	fb00 3002 	mla	r0, r0, r2, r3
 8000c2a:	f002 f931 	bl	8002e90 <UART_rx_available>
 8000c2e:	bd08      	pop	{r3, pc}
#ifdef CONFIG_USB_VCD
  case io_usb:
    return USB_SER_rx_avail();
 8000c30:	f00a fd6c 	bl	800b70c <USB_SER_rx_avail>
 8000c34:	bd08      	pop	{r3, pc}
#endif
  case io_file:
    return -1;
  case io_ringbuffer:
    return ringbuf_available((ringbuf *)io_bus[io].media_id);
 8000c36:	4403      	add	r3, r0
 8000c38:	6858      	ldr	r0, [r3, #4]
  case io_memory:
    return sizeof(void *);
  }
  return -1;
}
 8000c3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return USB_SER_rx_avail();
#endif
  case io_file:
    return -1;
  case io_ringbuffer:
    return ringbuf_available((ringbuf *)io_bus[io].media_id);
 8000c3e:	f001 bcc9 	b.w	80025d4 <ringbuf_available>
  case io_memory:
    return sizeof(void *);
 8000c42:	2004      	movs	r0, #4
  }
  return -1;
}
 8000c44:	bd08      	pop	{r3, pc}
 8000c46:	bf00      	nop
 8000c48:	200001cc 	.word	0x200001cc
 8000c4c:	20000d34 	.word	0x20000d34

08000c50 <IO_tx_available>:

s32_t IO_tx_available(u8_t io) {
 8000c50:	b508      	push	{r3, lr}
  switch (io_bus[io].media) {
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <IO_tx_available+0x44>)
 8000c54:	0100      	lsls	r0, r0, #4
 8000c56:	5c1a      	ldrb	r2, [r3, r0]
 8000c58:	2a04      	cmp	r2, #4
 8000c5a:	d818      	bhi.n	8000c8e <IO_tx_available+0x3e>
 8000c5c:	e8df f002 	tbb	[pc, r2]
 8000c60:	15170305 	.word	0x15170305
 8000c64:	0f          	.byte	0x0f
 8000c65:	00          	.byte	0x00
  case io_uart:
    return UART_tx_available(_UART(io_bus[io].media_id));
#ifdef CONFIG_USB_VCD
  case io_usb:
    return 8; // TODO PETER
 8000c66:	2008      	movs	r0, #8
 8000c68:	bd08      	pop	{r3, pc}
}

s32_t IO_tx_available(u8_t io) {
  switch (io_bus[io].media) {
  case io_uart:
    return UART_tx_available(_UART(io_bus[io].media_id));
 8000c6a:	4403      	add	r3, r0
 8000c6c:	685a      	ldr	r2, [r3, #4]
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <IO_tx_available+0x48>)
 8000c70:	f44f 6083 	mov.w	r0, #1048	; 0x418
 8000c74:	fb00 3002 	mla	r0, r0, r2, r3
 8000c78:	f002 f929 	bl	8002ece <UART_tx_available>
 8000c7c:	bd08      	pop	{r3, pc}
    return 8; // TODO PETER
#endif
  case io_file:
    return -1;
  case io_ringbuffer:
    return ringbuf_free((ringbuf *)io_bus[io].media_id);
 8000c7e:	4403      	add	r3, r0
 8000c80:	6858      	ldr	r0, [r3, #4]
  case io_memory:
    return sizeof(void *);
  }
  return -1;
}
 8000c82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return 8; // TODO PETER
#endif
  case io_file:
    return -1;
  case io_ringbuffer:
    return ringbuf_free((ringbuf *)io_bus[io].media_id);
 8000c86:	f001 bcda 	b.w	800263e <ringbuf_free>
  case io_memory:
    return sizeof(void *);
 8000c8a:	2004      	movs	r0, #4
 8000c8c:	bd08      	pop	{r3, pc}
#ifdef CONFIG_USB_VCD
  case io_usb:
    return 8; // TODO PETER
#endif
  case io_file:
    return -1;
 8000c8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return ringbuf_free((ringbuf *)io_bus[io].media_id);
  case io_memory:
    return sizeof(void *);
  }
  return -1;
}
 8000c92:	bd08      	pop	{r3, pc}
 8000c94:	200001cc 	.word	0x200001cc
 8000c98:	20000d34 	.word	0x20000d34

08000c9c <IO_define>:

void IO_define(u8_t io, io_media media, u32_t id) {
 8000c9c:	b510      	push	{r4, lr}
  io_bus[io].media = media;
 8000c9e:	4b03      	ldr	r3, [pc, #12]	; (8000cac <IO_define+0x10>)
 8000ca0:	0100      	lsls	r0, r0, #4
 8000ca2:	181c      	adds	r4, r3, r0
 8000ca4:	5419      	strb	r1, [r3, r0]
  io_bus[io].media_id = id;
 8000ca6:	6062      	str	r2, [r4, #4]
 8000ca8:	bd10      	pop	{r4, pc}
 8000caa:	bf00      	nop
 8000cac:	200001cc 	.word	0x200001cc

08000cb0 <u_itoa>:
}

static const char *I_BASE_ARR_L = "0123456789abcdefghijklmnopqrstuvwxyz";
static const char *I_BASE_ARR_U = "0123456789ABCDEFGHIJKLMNOPQRTSUVWXYZ";

static void u_itoa(utype_t v, char* dst, int base, int num, int flags) {
 8000cb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  // check that the base if valid
  if (base < 2 || base > 36) {
 8000cb4:	1e94      	subs	r4, r2, #2
 8000cb6:	2c22      	cmp	r4, #34	; 0x22
}

static const char *I_BASE_ARR_L = "0123456789abcdefghijklmnopqrstuvwxyz";
static const char *I_BASE_ARR_U = "0123456789ABCDEFGHIJKLMNOPQRTSUVWXYZ";

static void u_itoa(utype_t v, char* dst, int base, int num, int flags) {
 8000cb8:	9e07      	ldr	r6, [sp, #28]
  // check that the base if valid
  if (base < 2 || base > 36) {
 8000cba:	d905      	bls.n	8000cc8 <u_itoa+0x18>
    if ((flags & ITOA_NO_ZERO_END) == 0) {
 8000cbc:	f016 0602 	ands.w	r6, r6, #2
 8000cc0:	d15a      	bne.n	8000d78 <u_itoa+0xc8>
      *dst = '\0';
 8000cc2:	700e      	strb	r6, [r1, #0]
 8000cc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    return;
  }

  const char *arr = (flags & ITOA_CAPITALS) ? I_BASE_ARR_U : I_BASE_ARR_L;
 8000cc8:	4d2c      	ldr	r5, [pc, #176]	; (8000d7c <u_itoa+0xcc>)
 8000cca:	4c2d      	ldr	r4, [pc, #180]	; (8000d80 <u_itoa+0xd0>)
 8000ccc:	f016 0f20 	tst.w	r6, #32
 8000cd0:	bf0c      	ite	eq
 8000cd2:	46a8      	moveq	r8, r5
 8000cd4:	46a0      	movne	r8, r4
  char* ptr = dst, *ptr_o = dst, tmp_char;
  utype_t tmp_value;
  int ix = 0;
  char zero_char = flags & ITOA_FILL_SPACE ? ' ' : '0';
 8000cd6:	f016 0f04 	tst.w	r6, #4
 8000cda:	bf0c      	ite	eq
 8000cdc:	f04f 0930 	moveq.w	r9, #48	; 0x30
 8000ce0:	f04f 0920 	movne.w	r9, #32
 8000ce4:	1c4d      	adds	r5, r1, #1
  }

  const char *arr = (flags & ITOA_CAPITALS) ? I_BASE_ARR_U : I_BASE_ARR_L;
  char* ptr = dst, *ptr_o = dst, tmp_char;
  utype_t tmp_value;
  int ix = 0;
 8000ce6:	2700      	movs	r7, #0
  char zero_char = flags & ITOA_FILL_SPACE ? ' ' : '0';
  do {
    tmp_value = v;
    v /= base;
 8000ce8:	fbb0 fcf2 	udiv	ip, r0, r2
    if (tmp_value != 0 || (tmp_value == 0 && ix == 0)) {
      *ptr++ = arr[(tmp_value - v * base)];
 8000cec:	462c      	mov	r4, r5
  int ix = 0;
  char zero_char = flags & ITOA_FILL_SPACE ? ' ' : '0';
  do {
    tmp_value = v;
    v /= base;
    if (tmp_value != 0 || (tmp_value == 0 && ix == 0)) {
 8000cee:	b900      	cbnz	r0, 8000cf2 <u_itoa+0x42>
 8000cf0:	b937      	cbnz	r7, 8000d00 <u_itoa+0x50>
      *ptr++ = arr[(tmp_value - v * base)];
 8000cf2:	fb02 001c 	mls	r0, r2, ip, r0
 8000cf6:	f818 0000 	ldrb.w	r0, [r8, r0]
 8000cfa:	f805 0c01 	strb.w	r0, [r5, #-1]
 8000cfe:	e001      	b.n	8000d04 <u_itoa+0x54>
    } else {
      *ptr++ = zero_char;
 8000d00:	f805 9c01 	strb.w	r9, [r5, #-1]
    }
    ix++;
 8000d04:	3701      	adds	r7, #1
  } while ((v && num == 0) || (num != 0 && ix < num));
 8000d06:	f1bc 0f00 	cmp.w	ip, #0
 8000d0a:	d003      	beq.n	8000d14 <u_itoa+0x64>
 8000d0c:	b933      	cbnz	r3, 8000d1c <u_itoa+0x6c>
 8000d0e:	3501      	adds	r5, #1

  const char *arr = (flags & ITOA_CAPITALS) ? I_BASE_ARR_U : I_BASE_ARR_L;
  char* ptr = dst, *ptr_o = dst, tmp_char;
  utype_t tmp_value;
  int ix = 0;
  char zero_char = flags & ITOA_FILL_SPACE ? ' ' : '0';
 8000d10:	4660      	mov	r0, ip
 8000d12:	e7e9      	b.n	8000ce8 <u_itoa+0x38>
      *ptr++ = arr[(tmp_value - v * base)];
    } else {
      *ptr++ = zero_char;
    }
    ix++;
  } while ((v && num == 0) || (num != 0 && ix < num));
 8000d14:	b913      	cbnz	r3, 8000d1c <u_itoa+0x6c>

  if (flags & ITOA_BASE_SIG) {
 8000d16:	06f0      	lsls	r0, r6, #27
 8000d18:	d403      	bmi.n	8000d22 <u_itoa+0x72>
 8000d1a:	e015      	b.n	8000d48 <u_itoa+0x98>
      *ptr++ = arr[(tmp_value - v * base)];
    } else {
      *ptr++ = zero_char;
    }
    ix++;
  } while ((v && num == 0) || (num != 0 && ix < num));
 8000d1c:	429f      	cmp	r7, r3
 8000d1e:	dbf6      	blt.n	8000d0e <u_itoa+0x5e>
 8000d20:	e7f9      	b.n	8000d16 <u_itoa+0x66>

  if (flags & ITOA_BASE_SIG) {
    if (base == 16) {
 8000d22:	2a10      	cmp	r2, #16
 8000d24:	d106      	bne.n	8000d34 <u_itoa+0x84>
      *ptr++ = 'x';
 8000d26:	2378      	movs	r3, #120	; 0x78
 8000d28:	462c      	mov	r4, r5
 8000d2a:	f804 3b02 	strb.w	r3, [r4], #2
      *ptr++ = '0';
 8000d2e:	2330      	movs	r3, #48	; 0x30
 8000d30:	706b      	strb	r3, [r5, #1]
 8000d32:	e009      	b.n	8000d48 <u_itoa+0x98>
    } else if (base == 8) {
 8000d34:	2a08      	cmp	r2, #8
 8000d36:	d102      	bne.n	8000d3e <u_itoa+0x8e>
      *ptr++ = '0';
 8000d38:	1c6c      	adds	r4, r5, #1
 8000d3a:	2330      	movs	r3, #48	; 0x30
 8000d3c:	e003      	b.n	8000d46 <u_itoa+0x96>
    } else if (base == 2) {
 8000d3e:	2a02      	cmp	r2, #2
 8000d40:	d102      	bne.n	8000d48 <u_itoa+0x98>
      *ptr++ = 'b';
 8000d42:	1c6c      	adds	r4, r5, #1
 8000d44:	2362      	movs	r3, #98	; 0x62
 8000d46:	702b      	strb	r3, [r5, #0]
    }
  }

  // apply sign
  if (flags & ITOA_NEGATE) {
 8000d48:	07f2      	lsls	r2, r6, #31
 8000d4a:	d501      	bpl.n	8000d50 <u_itoa+0xa0>
    *ptr++ = '-';
 8000d4c:	232d      	movs	r3, #45	; 0x2d
 8000d4e:	e002      	b.n	8000d56 <u_itoa+0xa6>
  } else if (flags & ITOA_FORCE_SIGN) {
 8000d50:	0733      	lsls	r3, r6, #28
 8000d52:	d502      	bpl.n	8000d5a <u_itoa+0xaa>
    *ptr++ = '+';
 8000d54:	232b      	movs	r3, #43	; 0x2b
 8000d56:	7023      	strb	r3, [r4, #0]
 8000d58:	3401      	adds	r4, #1
  }

  // end
  if (flags & ITOA_NO_ZERO_END) {
 8000d5a:	f016 0602 	ands.w	r6, r6, #2
 8000d5e:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
 8000d62:	d100      	bne.n	8000d66 <u_itoa+0xb6>
    ptr--;
  } else {
    *ptr-- = '\0';
 8000d64:	7026      	strb	r6, [r4, #0]
  }
  while (ptr_o < ptr) {
 8000d66:	4299      	cmp	r1, r3
 8000d68:	d206      	bcs.n	8000d78 <u_itoa+0xc8>
    tmp_char = *ptr;
 8000d6a:	781a      	ldrb	r2, [r3, #0]
    *ptr-- = *ptr_o;
 8000d6c:	7808      	ldrb	r0, [r1, #0]
 8000d6e:	f803 0901 	strb.w	r0, [r3], #-1
    *ptr_o++ = tmp_char;
 8000d72:	f801 2b01 	strb.w	r2, [r1], #1
 8000d76:	e7f6      	b.n	8000d66 <u_itoa+0xb6>
 8000d78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d7c:	0801033a 	.word	0x0801033a
 8000d80:	08010315 	.word	0x08010315

08000d84 <c_next>:
}

#endif

static void c_next(cursor *c) {
  if (c->len > 0) {
 8000d84:	6883      	ldr	r3, [r0, #8]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	dd04      	ble.n	8000d94 <c_next+0x10>
    c->len--;
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	6083      	str	r3, [r0, #8]
    c->s++;
 8000d8e:	6803      	ldr	r3, [r0, #0]
 8000d90:	3301      	adds	r3, #1
 8000d92:	6003      	str	r3, [r0, #0]
 8000d94:	4770      	bx	lr

08000d96 <c_advance>:
  }
}

static void c_advance(cursor *c, int l) {
  l = MIN(l, c->len);
 8000d96:	6883      	ldr	r3, [r0, #8]
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	bfa8      	it	ge
 8000d9c:	4619      	movge	r1, r3
  c->len -= l;
 8000d9e:	1a5b      	subs	r3, r3, r1
 8000da0:	6083      	str	r3, [r0, #8]
  c->s += l;
 8000da2:	6803      	ldr	r3, [r0, #0]
 8000da4:	4419      	add	r1, r3
 8000da6:	6001      	str	r1, [r0, #0]
 8000da8:	4770      	bx	lr

08000daa <itoa>:
    *ptr_o++ = tmp_char;
  }
}

void itoa(int v, char* dst, int base) {
  if (base == 10) {
 8000daa:	2a0a      	cmp	r2, #10
    *ptr-- = *ptr_o;
    *ptr_o++ = tmp_char;
  }
}

void itoa(int v, char* dst, int base) {
 8000dac:	b507      	push	{r0, r1, r2, lr}
 8000dae:	4603      	mov	r3, r0
  if (base == 10) {
 8000db0:	d106      	bne.n	8000dc0 <itoa+0x16>
    if (v < 0) {
 8000db2:	2800      	cmp	r0, #0
 8000db4:	da04      	bge.n	8000dc0 <itoa+0x16>
      u_itoa(-v, dst, base, 0, ITOA_NEGATE);
 8000db6:	2001      	movs	r0, #1
 8000db8:	9000      	str	r0, [sp, #0]
 8000dba:	4258      	negs	r0, r3
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	e001      	b.n	8000dc4 <itoa+0x1a>
    } else {
      u_itoa(v, dst, base, 0, 0);
    }
  } else {
    u_itoa((unsigned int) v, dst, base, 0, 0);
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	f7ff ff74 	bl	8000cb0 <u_itoa>
  }
}
 8000dc8:	b003      	add	sp, #12
 8000dca:	f85d fb04 	ldr.w	pc, [sp], #4

08000dce <itoan>:

void itoan(int v, char* dst, int base, int num) {
  if (base == 10) {
 8000dce:	2a0a      	cmp	r2, #10
  } else {
    u_itoa((unsigned int) v, dst, base, 0, 0);
  }
}

void itoan(int v, char* dst, int base, int num) {
 8000dd0:	b513      	push	{r0, r1, r4, lr}
 8000dd2:	4604      	mov	r4, r0
  if (base == 10) {
 8000dd4:	d105      	bne.n	8000de2 <itoan+0x14>
    if (v < 0) {
 8000dd6:	2800      	cmp	r0, #0
 8000dd8:	da03      	bge.n	8000de2 <itoan+0x14>
      u_itoa(-v, dst, base, num, ITOA_NEGATE | ITOA_NO_ZERO_END);
 8000dda:	2003      	movs	r0, #3
 8000ddc:	9000      	str	r0, [sp, #0]
 8000dde:	4260      	negs	r0, r4
 8000de0:	e001      	b.n	8000de6 <itoan+0x18>
    } else {
      u_itoa(v, dst, base, num, ITOA_NO_ZERO_END);
    }
  } else {
    u_itoa((unsigned int) v, dst, base, num, ITOA_NO_ZERO_END);
 8000de2:	2402      	movs	r4, #2
 8000de4:	9400      	str	r4, [sp, #0]
 8000de6:	f7ff ff63 	bl	8000cb0 <u_itoa>
  }
}
 8000dea:	b002      	add	sp, #8
 8000dec:	bd10      	pop	{r4, pc}

08000dee <atoin>:

int atoi(const char* s) {
  return atoin(s, 10, strlen(s));
}

int atoin(const char* s, int base, int len) {
 8000dee:	b5f0      	push	{r4, r5, r6, r7, lr}
  int val = 0;
  char negate = FALSE;
  if (*s == '-') {
 8000df0:	7803      	ldrb	r3, [r0, #0]
 8000df2:	2b2d      	cmp	r3, #45	; 0x2d
 8000df4:	d103      	bne.n	8000dfe <atoin+0x10>
    negate = TRUE;
    s++;
 8000df6:	3001      	adds	r0, #1
    len--;
 8000df8:	3a01      	subs	r2, #1

int atoin(const char* s, int base, int len) {
  int val = 0;
  char negate = FALSE;
  if (*s == '-') {
    negate = TRUE;
 8000dfa:	2601      	movs	r6, #1
 8000dfc:	e005      	b.n	8000e0a <atoin+0x1c>
    s++;
    len--;
  } else if (*s == '+') {
 8000dfe:	2b2b      	cmp	r3, #43	; 0x2b
    s++;
 8000e00:	bf04      	itt	eq
 8000e02:	3001      	addeq	r0, #1
    len--;
 8000e04:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
  return atoin(s, 10, strlen(s));
}

int atoin(const char* s, int base, int len) {
  int val = 0;
  char negate = FALSE;
 8000e08:	2600      	movs	r6, #0
  } else if (*s == '+') {
    s++;
    len--;
  }
  while (len-- > 0) {
    int b = -1;
 8000e0a:	2500      	movs	r5, #0
 8000e0c:	4402      	add	r2, r0
 8000e0e:	1a13      	subs	r3, r2, r0
    len--;
  } else if (*s == '+') {
    s++;
    len--;
  }
  while (len-- > 0) {
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	dd1c      	ble.n	8000e4e <atoin+0x60>
    int b = -1;
    char c = *s++;
 8000e14:	f810 4b01 	ldrb.w	r4, [r0], #1
    if (c >= '0' && c <= '9') {
 8000e18:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8000e1c:	b2df      	uxtb	r7, r3
 8000e1e:	2f09      	cmp	r7, #9
 8000e20:	d910      	bls.n	8000e44 <atoin+0x56>
      b = c - '0';
    } else if (c >= 'a' && c <= 'z') {
 8000e22:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	2b19      	cmp	r3, #25
 8000e2a:	d802      	bhi.n	8000e32 <atoin+0x44>
      b = c - 'a' + 10;
 8000e2c:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
 8000e30:	e008      	b.n	8000e44 <atoin+0x56>
    } else if (c >= 'A' && c <= 'Z') {
 8000e32:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2b19      	cmp	r3, #25
      b = c - 'A' + 10;
 8000e3a:	bf94      	ite	ls
 8000e3c:	f1a4 0337 	subls.w	r3, r4, #55	; 0x37
  } else if (*s == '+') {
    s++;
    len--;
  }
  while (len-- > 0) {
    int b = -1;
 8000e40:	f04f 33ff 	movhi.w	r3, #4294967295	; 0xffffffff
    } else if (c >= 'a' && c <= 'z') {
      b = c - 'a' + 10;
    } else if (c >= 'A' && c <= 'Z') {
      b = c - 'A' + 10;
    }
    if (b >= base) {
 8000e44:	428b      	cmp	r3, r1
 8000e46:	da05      	bge.n	8000e54 <atoin+0x66>
      return 0;
    }
    val = val * base + b;
 8000e48:	fb01 3505 	mla	r5, r1, r5, r3
 8000e4c:	e7df      	b.n	8000e0e <atoin+0x20>
  }
  return negate ? -val : val;
 8000e4e:	b11e      	cbz	r6, 8000e58 <atoin+0x6a>
 8000e50:	4268      	negs	r0, r5
 8000e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
      b = c - 'a' + 10;
    } else if (c >= 'A' && c <= 'Z') {
      b = c - 'A' + 10;
    }
    if (b >= base) {
      return 0;
 8000e54:	2000      	movs	r0, #0
 8000e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e58:	4628      	mov	r0, r5
    }
    val = val * base + b;
  }
  return negate ? -val : val;
}
 8000e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e5c <strlen>:

int strlen(const char* c) {
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	461a      	mov	r2, r3
  const char *s;
  for (s = c; *s; ++s)
 8000e60:	7811      	ldrb	r1, [r2, #0]
 8000e62:	3301      	adds	r3, #1
 8000e64:	2900      	cmp	r1, #0
 8000e66:	d1fa      	bne.n	8000e5e <strlen+0x2>
    ;
  return (int) (s - c);
}
 8000e68:	1a10      	subs	r0, r2, r0
 8000e6a:	4770      	bx	lr

08000e6c <v_printf>:
#else
typedef unsigned int utype_t;
typedef signed int stype_t;
#endif

void v_printf(long p, const char* f, va_list arg_p) {
 8000e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  register const char* tmp_f = f;
  register const char* start_f = f;
  char c;
  bool num_neg = FALSE;
  bool format = FALSE;
  int num = 0;
 8000e70:	2600      	movs	r6, #0
#else
typedef unsigned int utype_t;
typedef signed int stype_t;
#endif

void v_printf(long p, const char* f, va_list arg_p) {
 8000e72:	b097      	sub	sp, #92	; 0x5c
 8000e74:	4604      	mov	r4, r0
 8000e76:	460d      	mov	r5, r1
 8000e78:	4693      	mov	fp, r2
  register const char* tmp_f = f;
  register const char* start_f = f;
 8000e7a:	4689      	mov	r9, r1
  bool fracspec = FALSE;
  int fracnum = 5;
#endif
  int lcnt = 0;
  char buf[32*2 + 4];
  int flags = ITOA_FILL_SPACE;
 8000e7c:	2704      	movs	r7, #4
void v_printf(long p, const char* f, va_list arg_p) {
  register const char* tmp_f = f;
  register const char* start_f = f;
  char c;
  bool num_neg = FALSE;
  bool format = FALSE;
 8000e7e:	46b2      	mov	sl, r6
      if (c == '%') {
        if (tmp_f > start_f + 1) {
          PUTB(p, start_f, (int)(tmp_f - start_f - 1));
        }
        num = 0;
        num_neg = FALSE;
 8000e80:	46b0      	mov	r8, r6
#endif
  int lcnt = 0;
  char buf[32*2 + 4];
  int flags = ITOA_FILL_SPACE;

  while ((c = *tmp_f++) != 0) {
 8000e82:	f815 1b01 	ldrb.w	r1, [r5], #1
 8000e86:	2900      	cmp	r1, #0
 8000e88:	f000 8175 	beq.w	8001176 <v_printf+0x30a>
    if (format) {
 8000e8c:	f1ba 0f00 	cmp.w	sl, #0
 8000e90:	f000 8138 	beq.w	8001104 <v_printf+0x298>
      // formatting
      switch (c) {
 8000e94:	2962      	cmp	r1, #98	; 0x62
 8000e96:	d07e      	beq.n	8000f96 <v_printf+0x12a>
 8000e98:	d817      	bhi.n	8000eca <v_printf+0x5e>
 8000e9a:	292d      	cmp	r1, #45	; 0x2d
 8000e9c:	d04d      	beq.n	8000f3a <v_printf+0xce>
 8000e9e:	d809      	bhi.n	8000eb4 <v_printf+0x48>
 8000ea0:	2925      	cmp	r1, #37	; 0x25
 8000ea2:	d031      	beq.n	8000f08 <v_printf+0x9c>
 8000ea4:	292b      	cmp	r1, #43	; 0x2b
 8000ea6:	d04e      	beq.n	8000f46 <v_printf+0xda>
 8000ea8:	2923      	cmp	r1, #35	; 0x23
 8000eaa:	f040 8118 	bne.w	80010de <v_printf+0x272>
        continue;
      case '+':
        flags |= ITOA_FORCE_SIGN;
        continue;
      case '#':
        flags |= ITOA_BASE_SIG;
 8000eae:	f047 0710 	orr.w	r7, r7, #16
 8000eb2:	e04a      	b.n	8000f4a <v_printf+0xde>
  int flags = ITOA_FILL_SPACE;

  while ((c = *tmp_f++) != 0) {
    if (format) {
      // formatting
      switch (c) {
 8000eb4:	2930      	cmp	r1, #48	; 0x30
 8000eb6:	f0c0 8112 	bcc.w	80010de <v_printf+0x272>
 8000eba:	2939      	cmp	r1, #57	; 0x39
 8000ebc:	d930      	bls.n	8000f20 <v_printf+0xb4>
 8000ebe:	2958      	cmp	r1, #88	; 0x58
        u_itoa(va_arg(arg_p, int), &buf[0], 16, sizeof(void *)*2, flags);
        PUTB(p, &buf[0], strlen(&buf[0]));
        break;
      }
      case 'X':
        flags |= ITOA_CAPITALS;
 8000ec0:	bf08      	it	eq
 8000ec2:	f047 0720 	orreq.w	r7, r7, #32
  int flags = ITOA_FILL_SPACE;

  while ((c = *tmp_f++) != 0) {
    if (format) {
      // formatting
      switch (c) {
 8000ec6:	d056      	beq.n	8000f76 <v_printf+0x10a>
 8000ec8:	e109      	b.n	80010de <v_printf+0x272>
 8000eca:	296f      	cmp	r1, #111	; 0x6f
 8000ecc:	d05b      	beq.n	8000f86 <v_printf+0x11a>
 8000ece:	d806      	bhi.n	8000ede <v_printf+0x72>
 8000ed0:	2964      	cmp	r1, #100	; 0x64
 8000ed2:	d03d      	beq.n	8000f50 <v_printf+0xe4>
 8000ed4:	f0c0 808b 	bcc.w	8000fee <v_printf+0x182>
 8000ed8:	2969      	cmp	r1, #105	; 0x69
 8000eda:	d039      	beq.n	8000f50 <v_printf+0xe4>
 8000edc:	e0ff      	b.n	80010de <v_printf+0x272>
 8000ede:	2973      	cmp	r1, #115	; 0x73
 8000ee0:	f000 809b 	beq.w	800101a <v_printf+0x1ae>
 8000ee4:	d80b      	bhi.n	8000efe <v_printf+0x92>
 8000ee6:	2970      	cmp	r1, #112	; 0x70
 8000ee8:	f040 80f9 	bne.w	80010de <v_printf+0x272>
        PUTB(p, &buf[0], strlen(&buf[0]));
        break;
      }
#endif
      case 'p': {
        u_itoa(va_arg(arg_p, int), &buf[0], 16, sizeof(void *)*2, flags);
 8000eec:	9700      	str	r7, [sp, #0]
 8000eee:	f10b 0904 	add.w	r9, fp, #4
 8000ef2:	f8db 0000 	ldr.w	r0, [fp]
 8000ef6:	a905      	add	r1, sp, #20
 8000ef8:	2210      	movs	r2, #16
 8000efa:	2308      	movs	r3, #8
 8000efc:	e053      	b.n	8000fa6 <v_printf+0x13a>
  int flags = ITOA_FILL_SPACE;

  while ((c = *tmp_f++) != 0) {
    if (format) {
      // formatting
      switch (c) {
 8000efe:	2975      	cmp	r1, #117	; 0x75
 8000f00:	d031      	beq.n	8000f66 <v_printf+0xfa>
 8000f02:	2978      	cmp	r1, #120	; 0x78
 8000f04:	d037      	beq.n	8000f76 <v_printf+0x10a>
 8000f06:	e0ea      	b.n	80010de <v_printf+0x272>
      case '%': {
        PUTC(p, '%');
 8000f08:	2cff      	cmp	r4, #255	; 0xff
 8000f0a:	dc07      	bgt.n	8000f1c <v_printf+0xb0>
 8000f0c:	b90c      	cbnz	r4, 8000f12 <v_printf+0xa6>
 8000f0e:	48ac      	ldr	r0, [pc, #688]	; (80011c0 <v_printf+0x354>)
 8000f10:	e0ea      	b.n	80010e8 <v_printf+0x27c>
 8000f12:	2c01      	cmp	r4, #1
 8000f14:	f040 8126 	bne.w	8001164 <v_printf+0x2f8>
 8000f18:	2025      	movs	r0, #37	; 0x25
 8000f1a:	e0eb      	b.n	80010f4 <v_printf+0x288>
 8000f1c:	7021      	strb	r1, [r4, #0]
 8000f1e:	e0ee      	b.n	80010fe <v_printf+0x292>
      case '8':
      case '9':
#ifdef MINIUTILS_PRINT_FLOAT
        if (!fracspec) {
#endif
          if (c == '0' && num == 0) {
 8000f20:	2930      	cmp	r1, #48	; 0x30
 8000f22:	d102      	bne.n	8000f2a <v_printf+0xbe>
 8000f24:	b90e      	cbnz	r6, 8000f2a <v_printf+0xbe>
            flags &= ~ITOA_FILL_SPACE;
 8000f26:	f027 0704 	bic.w	r7, r7, #4
          }
          num = num * 10 + (c - '0');
 8000f2a:	3930      	subs	r1, #48	; 0x30
 8000f2c:	230a      	movs	r3, #10
 8000f2e:	fb03 1606 	mla	r6, r3, r6, r1
          num = MIN(sizeof(buf)/2-1, num);
 8000f32:	2e21      	cmp	r6, #33	; 0x21
 8000f34:	bf28      	it	cs
 8000f36:	2621      	movcs	r6, #33	; 0x21
 8000f38:	e007      	b.n	8000f4a <v_printf+0xde>
          fracnum = MIN(sizeof(buf)/2-1, fracnum);
        }
#endif
        continue;
      case '-':
        num_neg = num == 0;
 8000f3a:	f1d6 0801 	rsbs	r8, r6, #1
 8000f3e:	bf38      	it	cc
 8000f40:	f04f 0800 	movcc.w	r8, #0
 8000f44:	e001      	b.n	8000f4a <v_printf+0xde>
        continue;
      case '+':
        flags |= ITOA_FORCE_SIGN;
 8000f46:	f047 0708 	orr.w	r7, r7, #8
        continue;
      case '#':
        flags |= ITOA_BASE_SIG;
        continue;
 8000f4a:	f04f 0a01 	mov.w	sl, #1
 8000f4e:	e798      	b.n	8000e82 <v_printf+0x16>
      case 'i': {
        stype_t v;
        if (lcnt)
          v = va_arg(arg_p, stype_t);
        else
          v = va_arg(arg_p, int);
 8000f50:	f8db 0000 	ldr.w	r0, [fp]
 8000f54:	f10b 0904 	add.w	r9, fp, #4
        if (v < 0) {
 8000f58:	2800      	cmp	r0, #0
          v = -v;
          flags |= ITOA_NEGATE;
 8000f5a:	bfbc      	itt	lt
 8000f5c:	f047 0701 	orrlt.w	r7, r7, #1
        if (lcnt)
          v = va_arg(arg_p, stype_t);
        else
          v = va_arg(arg_p, int);
        if (v < 0) {
          v = -v;
 8000f60:	4240      	neglt	r0, r0
          flags |= ITOA_NEGATE;
        }
        u_itoa(v, &buf[0], 10, num, flags);
 8000f62:	9700      	str	r7, [sp, #0]
 8000f64:	e004      	b.n	8000f70 <v_printf+0x104>
        utype_t v;
        if (lcnt)
          v = va_arg(arg_p, utype_t);
        else
          v = va_arg(arg_p, unsigned int);
        u_itoa(v, &buf[0], 10, num, flags);
 8000f66:	9700      	str	r7, [sp, #0]
 8000f68:	f8db 0000 	ldr.w	r0, [fp]
      case 'u': {
        utype_t v;
        if (lcnt)
          v = va_arg(arg_p, utype_t);
        else
          v = va_arg(arg_p, unsigned int);
 8000f6c:	f10b 0904 	add.w	r9, fp, #4
        u_itoa(v, &buf[0], 10, num, flags);
 8000f70:	a905      	add	r1, sp, #20
 8000f72:	220a      	movs	r2, #10
 8000f74:	e016      	b.n	8000fa4 <v_printf+0x138>
        stype_t v;
        if (lcnt)
          v = va_arg(arg_p, stype_t);
        else
          v = va_arg(arg_p, int);
        u_itoa(v, &buf[0], 16, num, flags);
 8000f76:	9700      	str	r7, [sp, #0]
      case 'x': {
        stype_t v;
        if (lcnt)
          v = va_arg(arg_p, stype_t);
        else
          v = va_arg(arg_p, int);
 8000f78:	f10b 0904 	add.w	r9, fp, #4
        u_itoa(v, &buf[0], 16, num, flags);
 8000f7c:	f8db 0000 	ldr.w	r0, [fp]
 8000f80:	a905      	add	r1, sp, #20
 8000f82:	2210      	movs	r2, #16
 8000f84:	e00e      	b.n	8000fa4 <v_printf+0x138>
        stype_t v;
        if (lcnt)
          v = va_arg(arg_p, stype_t);
        else
          v = va_arg(arg_p, int);
        u_itoa(v, &buf[0], 8, num, flags);
 8000f86:	9700      	str	r7, [sp, #0]
      case 'o': {
        stype_t v;
        if (lcnt)
          v = va_arg(arg_p, stype_t);
        else
          v = va_arg(arg_p, int);
 8000f88:	f10b 0904 	add.w	r9, fp, #4
        u_itoa(v, &buf[0], 8, num, flags);
 8000f8c:	f8db 0000 	ldr.w	r0, [fp]
 8000f90:	a905      	add	r1, sp, #20
 8000f92:	2208      	movs	r2, #8
 8000f94:	e006      	b.n	8000fa4 <v_printf+0x138>
        stype_t v;
        if (lcnt)
          v = va_arg(arg_p, stype_t);
        else
          v = va_arg(arg_p, int);
        u_itoa(v, &buf[0], 2, num, flags);
 8000f96:	9700      	str	r7, [sp, #0]
 8000f98:	f8db 0000 	ldr.w	r0, [fp]
      case 'b': {
        stype_t v;
        if (lcnt)
          v = va_arg(arg_p, stype_t);
        else
          v = va_arg(arg_p, int);
 8000f9c:	f10b 0904 	add.w	r9, fp, #4
        u_itoa(v, &buf[0], 2, num, flags);
 8000fa0:	a905      	add	r1, sp, #20
 8000fa2:	2202      	movs	r2, #2
 8000fa4:	4633      	mov	r3, r6
 8000fa6:	f7ff fe83 	bl	8000cb0 <u_itoa>
        PUTB(p, &buf[0], strlen(&buf[0]));
 8000faa:	2cff      	cmp	r4, #255	; 0xff
 8000fac:	dc14      	bgt.n	8000fd8 <v_printf+0x16c>
 8000fae:	b944      	cbnz	r4, 8000fc2 <v_printf+0x156>
 8000fb0:	a805      	add	r0, sp, #20
 8000fb2:	f7ff ff53 	bl	8000e5c <strlen>
 8000fb6:	a905      	add	r1, sp, #20
 8000fb8:	b282      	uxth	r2, r0
 8000fba:	4881      	ldr	r0, [pc, #516]	; (80011c0 <v_printf+0x354>)
 8000fbc:	f002 f892 	bl	80030e4 <UART_put_buf>
 8000fc0:	e0cc      	b.n	800115c <v_printf+0x2f0>
 8000fc2:	2c01      	cmp	r4, #1
 8000fc4:	f040 80ca 	bne.w	800115c <v_printf+0x2f0>
 8000fc8:	a805      	add	r0, sp, #20
 8000fca:	f7ff ff47 	bl	8000e5c <strlen>
 8000fce:	b281      	uxth	r1, r0
 8000fd0:	a805      	add	r0, sp, #20
 8000fd2:	f00a fbb7 	bl	800b744 <USB_SER_tx_buf>
 8000fd6:	e0c1      	b.n	800115c <v_printf+0x2f0>
 8000fd8:	a805      	add	r0, sp, #20
 8000fda:	f7ff ff3f 	bl	8000e5c <strlen>
 8000fde:	4682      	mov	sl, r0
 8000fe0:	a905      	add	r1, sp, #20
 8000fe2:	4620      	mov	r0, r4
 8000fe4:	4652      	mov	r2, sl
 8000fe6:	f00d f97f 	bl	800e2e8 <memcpy>
 8000fea:	4454      	add	r4, sl
 8000fec:	e0b6      	b.n	800115c <v_printf+0x2f0>
        break;
      }
      case 'c': {
        int d = va_arg(arg_p, int);
        PUTC(p, d);
 8000fee:	2cff      	cmp	r4, #255	; 0xff
        u_itoa(v, &buf[0], 2, num, flags);
        PUTB(p, &buf[0], strlen(&buf[0]));
        break;
      }
      case 'c': {
        int d = va_arg(arg_p, int);
 8000ff0:	f10b 0904 	add.w	r9, fp, #4
 8000ff4:	f8db 1000 	ldr.w	r1, [fp]
        PUTC(p, d);
 8000ff8:	dc0c      	bgt.n	8001014 <v_printf+0x1a8>
 8000ffa:	b924      	cbnz	r4, 8001006 <v_printf+0x19a>
 8000ffc:	b2c9      	uxtb	r1, r1
 8000ffe:	4870      	ldr	r0, [pc, #448]	; (80011c0 <v_printf+0x354>)
 8001000:	f002 f835 	bl	800306e <UART_put_char>
 8001004:	e0aa      	b.n	800115c <v_printf+0x2f0>
 8001006:	2c01      	cmp	r4, #1
 8001008:	f040 80a8 	bne.w	800115c <v_printf+0x2f0>
 800100c:	b2c8      	uxtb	r0, r1
 800100e:	f00a fb93 	bl	800b738 <USB_SER_tx_char>
 8001012:	e0a3      	b.n	800115c <v_printf+0x2f0>
 8001014:	7021      	strb	r1, [r4, #0]
        u_itoa(v, &buf[0], 2, num, flags);
        PUTB(p, &buf[0], strlen(&buf[0]));
        break;
      }
      case 'c': {
        int d = va_arg(arg_p, int);
 8001016:	46cb      	mov	fp, r9
 8001018:	e071      	b.n	80010fe <v_printf+0x292>
        PUTC(p, d);
        break;
      }
      case 's': {
        char *s = va_arg(arg_p, char*);
 800101a:	f8db a000 	ldr.w	sl, [fp]
 800101e:	f10b 0304 	add.w	r3, fp, #4
        int s_len = strlen(s);
 8001022:	4650      	mov	r0, sl
        int d = va_arg(arg_p, int);
        PUTC(p, d);
        break;
      }
      case 's': {
        char *s = va_arg(arg_p, char*);
 8001024:	9302      	str	r3, [sp, #8]
        int s_len = strlen(s);
 8001026:	f7ff ff19 	bl	8000e5c <strlen>
        if (s_len < num && !num_neg) {
 800102a:	42b0      	cmp	r0, r6
        PUTC(p, d);
        break;
      }
      case 's': {
        char *s = va_arg(arg_p, char*);
        int s_len = strlen(s);
 800102c:	4681      	mov	r9, r0
        if (s_len < num && !num_neg) {
 800102e:	da1d      	bge.n	800106c <v_printf+0x200>
 8001030:	f1b8 0f00 	cmp.w	r8, #0
 8001034:	d11a      	bne.n	800106c <v_printf+0x200>
          int i;
          for (i = 0; i < num-s_len; i++) PUTC(p, ' ');
 8001036:	1a33      	subs	r3, r6, r0
        break;
      }
      case 's': {
        char *s = va_arg(arg_p, char*);
        int s_len = strlen(s);
        if (s_len < num && !num_neg) {
 8001038:	46c3      	mov	fp, r8
          int i;
          for (i = 0; i < num-s_len; i++) PUTC(p, ' ');
 800103a:	9303      	str	r3, [sp, #12]
 800103c:	9b03      	ldr	r3, [sp, #12]
 800103e:	459b      	cmp	fp, r3
 8001040:	da14      	bge.n	800106c <v_printf+0x200>
 8001042:	2cff      	cmp	r4, #255	; 0xff
 8001044:	dc0b      	bgt.n	800105e <v_printf+0x1f2>
 8001046:	b924      	cbnz	r4, 8001052 <v_printf+0x1e6>
 8001048:	2120      	movs	r1, #32
 800104a:	485d      	ldr	r0, [pc, #372]	; (80011c0 <v_printf+0x354>)
 800104c:	f002 f80f 	bl	800306e <UART_put_char>
 8001050:	e009      	b.n	8001066 <v_printf+0x1fa>
 8001052:	2c01      	cmp	r4, #1
 8001054:	d107      	bne.n	8001066 <v_printf+0x1fa>
 8001056:	2020      	movs	r0, #32
 8001058:	f00a fb6e 	bl	800b738 <USB_SER_tx_char>
 800105c:	e003      	b.n	8001066 <v_printf+0x1fa>
 800105e:	f04f 0320 	mov.w	r3, #32
 8001062:	7023      	strb	r3, [r4, #0]
 8001064:	3401      	adds	r4, #1
 8001066:	f10b 0b01 	add.w	fp, fp, #1
 800106a:	e7e7      	b.n	800103c <v_printf+0x1d0>
        }
        PUTB(p, s, s_len);
 800106c:	2cff      	cmp	r4, #255	; 0xff
 800106e:	dc0f      	bgt.n	8001090 <v_printf+0x224>
 8001070:	b934      	cbnz	r4, 8001080 <v_printf+0x214>
 8001072:	4651      	mov	r1, sl
 8001074:	fa1f f289 	uxth.w	r2, r9
 8001078:	4851      	ldr	r0, [pc, #324]	; (80011c0 <v_printf+0x354>)
 800107a:	f002 f833 	bl	80030e4 <UART_put_buf>
 800107e:	e00d      	b.n	800109c <v_printf+0x230>
 8001080:	2c01      	cmp	r4, #1
 8001082:	d10b      	bne.n	800109c <v_printf+0x230>
 8001084:	4650      	mov	r0, sl
 8001086:	fa1f f189 	uxth.w	r1, r9
 800108a:	f00a fb5b 	bl	800b744 <USB_SER_tx_buf>
 800108e:	e005      	b.n	800109c <v_printf+0x230>
 8001090:	4620      	mov	r0, r4
 8001092:	4651      	mov	r1, sl
 8001094:	464a      	mov	r2, r9
 8001096:	f00d f927 	bl	800e2e8 <memcpy>
 800109a:	444c      	add	r4, r9
        if (s_len < num && num_neg) {
 800109c:	45b1      	cmp	r9, r6
 800109e:	da5f      	bge.n	8001160 <v_printf+0x2f4>
 80010a0:	f1b8 0f00 	cmp.w	r8, #0
 80010a4:	d05c      	beq.n	8001160 <v_printf+0x2f4>
 80010a6:	f04f 0b00 	mov.w	fp, #0
          int i;
          for (i = 0; i < num-s_len; i++) PUTC(p, ' ');
 80010aa:	ebc9 0906 	rsb	r9, r9, r6
 80010ae:	f04f 0a20 	mov.w	sl, #32
 80010b2:	45cb      	cmp	fp, r9
 80010b4:	da54      	bge.n	8001160 <v_printf+0x2f4>
 80010b6:	2cff      	cmp	r4, #255	; 0xff
 80010b8:	dc0b      	bgt.n	80010d2 <v_printf+0x266>
 80010ba:	b924      	cbnz	r4, 80010c6 <v_printf+0x25a>
 80010bc:	2120      	movs	r1, #32
 80010be:	4840      	ldr	r0, [pc, #256]	; (80011c0 <v_printf+0x354>)
 80010c0:	f001 ffd5 	bl	800306e <UART_put_char>
 80010c4:	e008      	b.n	80010d8 <v_printf+0x26c>
 80010c6:	2c01      	cmp	r4, #1
 80010c8:	d106      	bne.n	80010d8 <v_printf+0x26c>
 80010ca:	2020      	movs	r0, #32
 80010cc:	f00a fb34 	bl	800b738 <USB_SER_tx_char>
 80010d0:	e002      	b.n	80010d8 <v_printf+0x26c>
 80010d2:	f884 a000 	strb.w	sl, [r4]
 80010d6:	3401      	adds	r4, #1
 80010d8:	f10b 0b01 	add.w	fp, fp, #1
 80010dc:	e7e9      	b.n	80010b2 <v_printf+0x246>
        }
        break;
      }
      default:
        PUTC(p, '?');
 80010de:	2cff      	cmp	r4, #255	; 0xff
 80010e0:	dc0b      	bgt.n	80010fa <v_printf+0x28e>
 80010e2:	b924      	cbnz	r4, 80010ee <v_printf+0x282>
 80010e4:	4836      	ldr	r0, [pc, #216]	; (80011c0 <v_printf+0x354>)
 80010e6:	213f      	movs	r1, #63	; 0x3f
 80010e8:	f001 ffc1 	bl	800306e <UART_put_char>
 80010ec:	e03a      	b.n	8001164 <v_printf+0x2f8>
 80010ee:	2c01      	cmp	r4, #1
 80010f0:	d138      	bne.n	8001164 <v_printf+0x2f8>
 80010f2:	203f      	movs	r0, #63	; 0x3f
 80010f4:	f00a fb20 	bl	800b738 <USB_SER_tx_char>
 80010f8:	e034      	b.n	8001164 <v_printf+0x2f8>
 80010fa:	233f      	movs	r3, #63	; 0x3f
 80010fc:	7023      	strb	r3, [r4, #0]
#endif
  int lcnt = 0;
  char buf[32*2 + 4];
  int flags = ITOA_FILL_SPACE;

  while ((c = *tmp_f++) != 0) {
 80010fe:	46a9      	mov	r9, r5
          for (i = 0; i < num-s_len; i++) PUTC(p, ' ');
        }
        break;
      }
      default:
        PUTC(p, '?');
 8001100:	3401      	adds	r4, #1
 8001102:	e030      	b.n	8001166 <v_printf+0x2fa>
      }
      start_f = tmp_f;
      format = FALSE;
    } else {
      // not formatting
      if (c == '%') {
 8001104:	2925      	cmp	r1, #37	; 0x25
 8001106:	f47f aebc 	bne.w	8000e82 <v_printf+0x16>
        if (tmp_f > start_f + 1) {
 800110a:	f109 0301 	add.w	r3, r9, #1
 800110e:	429d      	cmp	r5, r3
 8001110:	d92c      	bls.n	800116c <v_printf+0x300>
          PUTB(p, start_f, (int)(tmp_f - start_f - 1));
 8001112:	2cff      	cmp	r4, #255	; 0xff
 8001114:	dc18      	bgt.n	8001148 <v_printf+0x2dc>
 8001116:	b96c      	cbnz	r4, 8001134 <v_printf+0x2c8>
 8001118:	ebc9 0205 	rsb	r2, r9, r5
 800111c:	3a01      	subs	r2, #1
 800111e:	4828      	ldr	r0, [pc, #160]	; (80011c0 <v_printf+0x354>)
 8001120:	4649      	mov	r1, r9
 8001122:	b292      	uxth	r2, r2
 8001124:	f001 ffde 	bl	80030e4 <UART_put_buf>
        }
        num = 0;
        num_neg = FALSE;
        format = TRUE;
        flags = ITOA_FILL_SPACE;
 8001128:	2704      	movs	r7, #4
      // not formatting
      if (c == '%') {
        if (tmp_f > start_f + 1) {
          PUTB(p, start_f, (int)(tmp_f - start_f - 1));
        }
        num = 0;
 800112a:	4626      	mov	r6, r4
        num_neg = FALSE;
        format = TRUE;
 800112c:	f04f 0a01 	mov.w	sl, #1
      if (c == '%') {
        if (tmp_f > start_f + 1) {
          PUTB(p, start_f, (int)(tmp_f - start_f - 1));
        }
        num = 0;
        num_neg = FALSE;
 8001130:	46a0      	mov	r8, r4
 8001132:	e6a6      	b.n	8000e82 <v_printf+0x16>
      format = FALSE;
    } else {
      // not formatting
      if (c == '%') {
        if (tmp_f > start_f + 1) {
          PUTB(p, start_f, (int)(tmp_f - start_f - 1));
 8001134:	2c01      	cmp	r4, #1
 8001136:	d119      	bne.n	800116c <v_printf+0x300>
 8001138:	ebc9 0105 	rsb	r1, r9, r5
 800113c:	3901      	subs	r1, #1
 800113e:	4648      	mov	r0, r9
 8001140:	b289      	uxth	r1, r1
 8001142:	f00a faff 	bl	800b744 <USB_SER_tx_buf>
 8001146:	e011      	b.n	800116c <v_printf+0x300>
 8001148:	ebc9 0605 	rsb	r6, r9, r5
 800114c:	3e01      	subs	r6, #1
 800114e:	4620      	mov	r0, r4
 8001150:	4649      	mov	r1, r9
 8001152:	4632      	mov	r2, r6
 8001154:	f00d f8c8 	bl	800e2e8 <memcpy>
 8001158:	4434      	add	r4, r6
 800115a:	e007      	b.n	800116c <v_printf+0x300>
        u_itoa(v, &buf[0], 2, num, flags);
        PUTB(p, &buf[0], strlen(&buf[0]));
        break;
      }
      case 'c': {
        int d = va_arg(arg_p, int);
 800115c:	46cb      	mov	fp, r9
 800115e:	e001      	b.n	8001164 <v_printf+0x2f8>
        PUTC(p, d);
        break;
      }
      case 's': {
        char *s = va_arg(arg_p, char*);
 8001160:	f8dd b008 	ldr.w	fp, [sp, #8]
#endif
  int lcnt = 0;
  char buf[32*2 + 4];
  int flags = ITOA_FILL_SPACE;

  while ((c = *tmp_f++) != 0) {
 8001164:	46a9      	mov	r9, r5
      default:
        PUTC(p, '?');
        break;
      }
      start_f = tmp_f;
      format = FALSE;
 8001166:	f04f 0a00 	mov.w	sl, #0
 800116a:	e68a      	b.n	8000e82 <v_printf+0x16>
      // not formatting
      if (c == '%') {
        if (tmp_f > start_f + 1) {
          PUTB(p, start_f, (int)(tmp_f - start_f - 1));
        }
        num = 0;
 800116c:	4656      	mov	r6, sl
        num_neg = FALSE;
        format = TRUE;
        flags = ITOA_FILL_SPACE;
 800116e:	2704      	movs	r7, #4
        if (tmp_f > start_f + 1) {
          PUTB(p, start_f, (int)(tmp_f - start_f - 1));
        }
        num = 0;
        num_neg = FALSE;
        format = TRUE;
 8001170:	f04f 0a01 	mov.w	sl, #1
 8001174:	e684      	b.n	8000e80 <v_printf+0x14>
        lcnt = 0;
#endif
      }
    }
  } // while string
  if (tmp_f > start_f + 1) {
 8001176:	f109 0301 	add.w	r3, r9, #1
 800117a:	429d      	cmp	r5, r3
 800117c:	d91c      	bls.n	80011b8 <v_printf+0x34c>
    PUTB(p, start_f, (int)(tmp_f - start_f - 1));
 800117e:	2cff      	cmp	r4, #255	; 0xff
 8001180:	dc13      	bgt.n	80011aa <v_printf+0x33e>
 8001182:	b944      	cbnz	r4, 8001196 <v_printf+0x32a>
 8001184:	ebc9 0505 	rsb	r5, r9, r5
 8001188:	1e6a      	subs	r2, r5, #1
 800118a:	4649      	mov	r1, r9
 800118c:	b292      	uxth	r2, r2
 800118e:	480c      	ldr	r0, [pc, #48]	; (80011c0 <v_printf+0x354>)
 8001190:	f001 ffa8 	bl	80030e4 <UART_put_buf>
 8001194:	e010      	b.n	80011b8 <v_printf+0x34c>
 8001196:	2c01      	cmp	r4, #1
 8001198:	d10e      	bne.n	80011b8 <v_printf+0x34c>
 800119a:	ebc9 0505 	rsb	r5, r9, r5
 800119e:	1e69      	subs	r1, r5, #1
 80011a0:	4648      	mov	r0, r9
 80011a2:	b289      	uxth	r1, r1
 80011a4:	f00a face 	bl	800b744 <USB_SER_tx_buf>
 80011a8:	e006      	b.n	80011b8 <v_printf+0x34c>
 80011aa:	ebc9 0205 	rsb	r2, r9, r5
 80011ae:	4620      	mov	r0, r4
 80011b0:	4649      	mov	r1, r9
 80011b2:	3a01      	subs	r2, #1
 80011b4:	f00d f898 	bl	800e2e8 <memcpy>
  }
}
 80011b8:	b017      	add	sp, #92	; 0x5c
 80011ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011be:	bf00      	nop
 80011c0:	20000d34 	.word	0x20000d34

080011c4 <ioprint>:

void ioprint(int io, const char* f, ...) {
 80011c4:	b40e      	push	{r1, r2, r3}
 80011c6:	b503      	push	{r0, r1, lr}
 80011c8:	aa03      	add	r2, sp, #12
 80011ca:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list arg_p;
  va_start(arg_p, f);
 80011ce:	9201      	str	r2, [sp, #4]
  v_printf(io, f, arg_p);
 80011d0:	f7ff fe4c 	bl	8000e6c <v_printf>
  va_end(arg_p);
}
 80011d4:	b002      	add	sp, #8
 80011d6:	f85d eb04 	ldr.w	lr, [sp], #4
 80011da:	b003      	add	sp, #12
 80011dc:	4770      	bx	lr

080011de <printbuf>:
  v_printf(IOSTD, f, arg_p);
  va_end(arg_p);
}
#endif

void printbuf(u8_t io, u8_t *buf, u16_t len) {
 80011de:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int i = 0, ix = 0;
  while (i < len) {
 80011e2:	2400      	movs	r4, #0
  v_printf(IOSTD, f, arg_p);
  va_end(arg_p);
}
#endif

void printbuf(u8_t io, u8_t *buf, u16_t len) {
 80011e4:	4606      	mov	r6, r0
 80011e6:	468a      	mov	sl, r1
 80011e8:	4690      	mov	r8, r2
  int i = 0, ix = 0;
 80011ea:	4625      	mov	r5, r4
  while (i < len) {
 80011ec:	4545      	cmp	r5, r8
 80011ee:	da31      	bge.n	8001254 <printbuf+0x76>
 80011f0:	f104 0920 	add.w	r9, r4, #32
 80011f4:	4625      	mov	r5, r4
    for (i = ix; i < MIN(ix+32, len); i++) {
 80011f6:	45c1      	cmp	r9, r8
 80011f8:	bfb4      	ite	lt
 80011fa:	464f      	movlt	r7, r9
 80011fc:	4647      	movge	r7, r8
 80011fe:	42bd      	cmp	r5, r7
 8001200:	da07      	bge.n	8001212 <printbuf+0x34>
      ioprint(io, "%02x", buf[i]);
 8001202:	f81a 2005 	ldrb.w	r2, [sl, r5]
 8001206:	4630      	mov	r0, r6
 8001208:	4913      	ldr	r1, [pc, #76]	; (8001258 <printbuf+0x7a>)
 800120a:	f7ff ffdb 	bl	80011c4 <ioprint>
#endif

void printbuf(u8_t io, u8_t *buf, u16_t len) {
  int i = 0, ix = 0;
  while (i < len) {
    for (i = ix; i < MIN(ix+32, len); i++) {
 800120e:	3501      	adds	r5, #1
 8001210:	e7f5      	b.n	80011fe <printbuf+0x20>
 8001212:	f104 0b1f 	add.w	fp, r4, #31
      ioprint(io, "%02x", buf[i]);
    }
    while (i++ < ix+32) {
 8001216:	45ab      	cmp	fp, r5
      ioprint(io, "   ");
 8001218:	4630      	mov	r0, r6
  int i = 0, ix = 0;
  while (i < len) {
    for (i = ix; i < MIN(ix+32, len); i++) {
      ioprint(io, "%02x", buf[i]);
    }
    while (i++ < ix+32) {
 800121a:	db04      	blt.n	8001226 <printbuf+0x48>
      ioprint(io, "   ");
 800121c:	490f      	ldr	r1, [pc, #60]	; (800125c <printbuf+0x7e>)
 800121e:	f7ff ffd1 	bl	80011c4 <ioprint>
 8001222:	3501      	adds	r5, #1
 8001224:	e7f7      	b.n	8001216 <printbuf+0x38>
    }
    ioprint (io, "  ");
 8001226:	490e      	ldr	r1, [pc, #56]	; (8001260 <printbuf+0x82>)
 8001228:	f7ff ffcc 	bl	80011c4 <ioprint>
    for (i = ix; i < MIN(ix+32, len); i++) {
 800122c:	4625      	mov	r5, r4
 800122e:	42bd      	cmp	r5, r7
 8001230:	da0a      	bge.n	8001248 <printbuf+0x6a>
      ioprint(io, "%c", buf[i] < 32 ? '.' : buf[i]);
 8001232:	f81a 2005 	ldrb.w	r2, [sl, r5]
 8001236:	4630      	mov	r0, r6
 8001238:	490a      	ldr	r1, [pc, #40]	; (8001264 <printbuf+0x86>)
 800123a:	2a1f      	cmp	r2, #31
 800123c:	bf98      	it	ls
 800123e:	222e      	movls	r2, #46	; 0x2e
 8001240:	f7ff ffc0 	bl	80011c4 <ioprint>
    }
    while (i++ < ix+32) {
      ioprint(io, "   ");
    }
    ioprint (io, "  ");
    for (i = ix; i < MIN(ix+32, len); i++) {
 8001244:	3501      	adds	r5, #1
 8001246:	e7f2      	b.n	800122e <printbuf+0x50>
      ioprint(io, "%c", buf[i] < 32 ? '.' : buf[i]);
    }
    ix += 32;
    ioprint(io, "\n");
 8001248:	4630      	mov	r0, r6
 800124a:	4907      	ldr	r1, [pc, #28]	; (8001268 <printbuf+0x8a>)
 800124c:	f7ff ffba 	bl	80011c4 <ioprint>
 8001250:	464c      	mov	r4, r9
 8001252:	e7cb      	b.n	80011ec <printbuf+0xe>
 8001254:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001258:	080112ff 	.word	0x080112ff
 800125c:	08011206 	.word	0x08011206
 8001260:	08011745 	.word	0x08011745
 8001264:	0801035f 	.word	0x0801035f
 8001268:	0801197d 	.word	0x0801197d

0800126c <vprint>:
  }
}

void vprint(const char* f, va_list arg_p) {
 800126c:	4603      	mov	r3, r0
 800126e:	460a      	mov	r2, r1
  v_printf(IOSTD, f, arg_p);
 8001270:	2000      	movs	r0, #0
 8001272:	4619      	mov	r1, r3
 8001274:	f7ff bdfa 	b.w	8000e6c <v_printf>

08001278 <vioprint>:
}

void vioprint(int io, const char* f, va_list arg_p) {
  v_printf(io, f, arg_p);
 8001278:	f7ff bdf8 	b.w	8000e6c <v_printf>

0800127c <sprint>:
}

void sprint(char *s, const char* f, ...) {
 800127c:	b40e      	push	{r1, r2, r3}
 800127e:	b503      	push	{r0, r1, lr}
 8001280:	aa03      	add	r2, sp, #12
 8001282:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list arg_p;
  va_start(arg_p, f);
 8001286:	9201      	str	r2, [sp, #4]
  v_printf((long)s, f, arg_p);
 8001288:	f7ff fdf0 	bl	8000e6c <v_printf>
  va_end(arg_p);
}
 800128c:	b002      	add	sp, #8
 800128e:	f85d eb04 	ldr.w	lr, [sp], #4
 8001292:	b003      	add	sp, #12
 8001294:	4770      	bx	lr

08001296 <vsprint>:

void vsprint(char *s, const char* f, va_list arg_p) {
  v_printf((long)s, f, arg_p);
 8001296:	f7ff bde9 	b.w	8000e6c <v_printf>

0800129a <atoi>:
  } else {
    u_itoa((unsigned int) v, dst, base, num, ITOA_NO_ZERO_END);
  }
}

int atoi(const char* s) {
 800129a:	b510      	push	{r4, lr}
 800129c:	4604      	mov	r4, r0
  return atoin(s, 10, strlen(s));
 800129e:	f7ff fddd 	bl	8000e5c <strlen>
 80012a2:	210a      	movs	r1, #10
 80012a4:	4602      	mov	r2, r0
 80012a6:	4620      	mov	r0, r4
}
 80012a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    u_itoa((unsigned int) v, dst, base, num, ITOA_NO_ZERO_END);
  }
}

int atoi(const char* s) {
  return atoin(s, 10, strlen(s));
 80012ac:	f7ff bd9f 	b.w	8000dee <atoin>

080012b0 <strnlen>:
  for (s = c; *s; ++s)
    ;
  return (int) (s - c);
}

int strnlen(const char *c, int size) {
 80012b0:	b510      	push	{r4, lr}
 80012b2:	4603      	mov	r3, r0
  const char *s;
  for (s = c; size > 0 && *s; ++s, --size)
 80012b4:	2900      	cmp	r1, #0
 80012b6:	461a      	mov	r2, r3
 80012b8:	dd06      	ble.n	80012c8 <strnlen+0x18>
 80012ba:	7814      	ldrb	r4, [r2, #0]
 80012bc:	3301      	adds	r3, #1
 80012be:	b10c      	cbz	r4, 80012c4 <strnlen+0x14>
 80012c0:	3901      	subs	r1, #1
 80012c2:	e7f7      	b.n	80012b4 <strnlen+0x4>
    ;
  return size >= 0 ? (int) (s - c) : 0;
 80012c4:	1a10      	subs	r0, r2, r0
 80012c6:	bd10      	pop	{r4, pc}
 80012c8:	d0fc      	beq.n	80012c4 <strnlen+0x14>
 80012ca:	2000      	movs	r0, #0
}
 80012cc:	bd10      	pop	{r4, pc}

080012ce <strcmp>:

int strcmp(const char* s1, const char* s2) {
 80012ce:	b510      	push	{r4, lr}
  char c1, c2;
  while (((c1 = *s1++) != 0) & ((c2 = *s2++) != 0)) {
 80012d0:	2300      	movs	r3, #0
 80012d2:	5cca      	ldrb	r2, [r1, r3]
 80012d4:	5cc4      	ldrb	r4, [r0, r3]
 80012d6:	b13a      	cbz	r2, 80012e8 <strcmp+0x1a>
 80012d8:	b134      	cbz	r4, 80012e8 <strcmp+0x1a>
    if (c1 != c2) {
 80012da:	4294      	cmp	r4, r2
 80012dc:	f103 0301 	add.w	r3, r3, #1
 80012e0:	d0f7      	beq.n	80012d2 <strcmp+0x4>
      return -1;
 80012e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
  }
  return c1 - c2;
}
 80012e6:	bd10      	pop	{r4, pc}
  while (((c1 = *s1++) != 0) & ((c2 = *s2++) != 0)) {
    if (c1 != c2) {
      return -1;
    }
  }
  return c1 - c2;
 80012e8:	1aa0      	subs	r0, r4, r2
 80012ea:	bd10      	pop	{r4, pc}

080012ec <strcmpbegin>:
}

int strcmpbegin(const char* prefix, const char* s) {
 80012ec:	b510      	push	{r4, lr}
  char c1, c2;
  while (((c1 = *prefix++) != 0) & ((c2 = *s++) != 0)) {
 80012ee:	2200      	movs	r2, #0
 80012f0:	5c8c      	ldrb	r4, [r1, r2]
 80012f2:	5c83      	ldrb	r3, [r0, r2]
 80012f4:	b13c      	cbz	r4, 8001306 <strcmpbegin+0x1a>
 80012f6:	b133      	cbz	r3, 8001306 <strcmpbegin+0x1a>
    if (c1 != c2) {
 80012f8:	42a3      	cmp	r3, r4
 80012fa:	f102 0201 	add.w	r2, r2, #1
 80012fe:	d0f7      	beq.n	80012f0 <strcmpbegin+0x4>
      return -1;
 8001300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001304:	bd10      	pop	{r4, pc}
    }
  }
  return c1 == 0 ? 0 : c1 - c2;
 8001306:	b10b      	cbz	r3, 800130c <strcmpbegin+0x20>
 8001308:	1b18      	subs	r0, r3, r4
 800130a:	bd10      	pop	{r4, pc}
 800130c:	4618      	mov	r0, r3
}
 800130e:	bd10      	pop	{r4, pc}

08001310 <strncmp>:

int strncmp(const char* s1, const char* s2, int len) {
 8001310:	b570      	push	{r4, r5, r6, lr}
  while (len > 0 && *s1++ == *s2++) {
 8001312:	2300      	movs	r3, #0
    }
  }
  return c1 == 0 ? 0 : c1 - c2;
}

int strncmp(const char* s1, const char* s2, int len) {
 8001314:	4604      	mov	r4, r0
 8001316:	1ad0      	subs	r0, r2, r3
  while (len > 0 && *s1++ == *s2++) {
 8001318:	2800      	cmp	r0, #0
 800131a:	dd06      	ble.n	800132a <strncmp+0x1a>
 800131c:	5ce5      	ldrb	r5, [r4, r3]
 800131e:	3301      	adds	r3, #1
 8001320:	18ce      	adds	r6, r1, r3
 8001322:	f816 6c01 	ldrb.w	r6, [r6, #-1]
 8001326:	42ae      	cmp	r6, r5
 8001328:	d0f5      	beq.n	8001316 <strncmp+0x6>
    len--;
  }
  return len;
}
 800132a:	bd70      	pop	{r4, r5, r6, pc}

0800132c <strncpy>:

char* strncpy(char* d, const char* s, int num) {
 800132c:	b510      	push	{r4, lr}
  char* oldd = d;
  char c;
  while (num > 0 && (c = *s++) != 0) {
 800132e:	4603      	mov	r3, r0
 8001330:	2a00      	cmp	r2, #0
 8001332:	dc02      	bgt.n	800133a <strncpy+0xe>
 8001334:	441a      	add	r2, r3
    *d++ = c;
    num--;
  }
  while (num-- > 0) {
    *d++ = 0;
 8001336:	2400      	movs	r4, #0
 8001338:	e007      	b.n	800134a <strncpy+0x1e>
}

char* strncpy(char* d, const char* s, int num) {
  char* oldd = d;
  char c;
  while (num > 0 && (c = *s++) != 0) {
 800133a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800133e:	2c00      	cmp	r4, #0
 8001340:	d0f8      	beq.n	8001334 <strncpy+0x8>
    *d++ = c;
 8001342:	f803 4b01 	strb.w	r4, [r3], #1
    num--;
 8001346:	3a01      	subs	r2, #1
 8001348:	e7f2      	b.n	8001330 <strncpy+0x4>
 800134a:	1ad1      	subs	r1, r2, r3
  }
  while (num-- > 0) {
 800134c:	2900      	cmp	r1, #0
 800134e:	dd02      	ble.n	8001356 <strncpy+0x2a>
    *d++ = 0;
 8001350:	f803 4b01 	strb.w	r4, [r3], #1
 8001354:	e7f9      	b.n	800134a <strncpy+0x1e>
  }
  return oldd;
}
 8001356:	bd10      	pop	{r4, pc}

08001358 <strcpy>:

char* strcpy(char* d, const char* s) {
 8001358:	2300      	movs	r3, #0
  char* oldd = d;
  char c;
  do {
    c = *s++;
 800135a:	5cca      	ldrb	r2, [r1, r3]
    *d++ = c;
 800135c:	54c2      	strb	r2, [r0, r3]
 800135e:	3301      	adds	r3, #1
  } while (c != 0);
 8001360:	2a00      	cmp	r2, #0
 8001362:	d1fa      	bne.n	800135a <strcpy+0x2>
  return oldd;
}
 8001364:	4770      	bx	lr

08001366 <strchr>:

const char* strchr(const char* str, int ch) {
 8001366:	4602      	mov	r2, r0
  char d;
  while ((d = *str) != 0 && d != ch) {
 8001368:	f810 3b01 	ldrb.w	r3, [r0], #1
 800136c:	b11b      	cbz	r3, 8001376 <strchr+0x10>
 800136e:	428b      	cmp	r3, r1
 8001370:	d1f9      	bne.n	8001366 <strchr>
 8001372:	4610      	mov	r0, r2
 8001374:	4770      	bx	lr
    str++;
  }
  if (d == 0) {
    return 0;
 8001376:	4618      	mov	r0, r3
  } else {
    return str;
  }
}
 8001378:	4770      	bx	lr

0800137a <strpbrk>:

char* strpbrk(const char* str, const char* key) {
 800137a:	b570      	push	{r4, r5, r6, lr}
 800137c:	4604      	mov	r4, r0
 800137e:	460e      	mov	r6, r1
  char c;
  while ((c = *str++) != 0) {
 8001380:	4625      	mov	r5, r4
 8001382:	f815 1b01 	ldrb.w	r1, [r5], #1
 8001386:	b129      	cbz	r1, 8001394 <strpbrk+0x1a>
    if (strchr(key, c)) {
 8001388:	4630      	mov	r0, r6
 800138a:	f7ff ffec 	bl	8001366 <strchr>
 800138e:	b918      	cbnz	r0, 8001398 <strpbrk+0x1e>
  }
}

char* strpbrk(const char* str, const char* key) {
  char c;
  while ((c = *str++) != 0) {
 8001390:	462c      	mov	r4, r5
 8001392:	e7f5      	b.n	8001380 <strpbrk+0x6>
    if (strchr(key, c)) {
      return (char*)--str;
    }
  }
  return 0;
 8001394:	4608      	mov	r0, r1
 8001396:	bd70      	pop	{r4, r5, r6, pc}
 8001398:	4620      	mov	r0, r4
}
 800139a:	bd70      	pop	{r4, r5, r6, pc}

0800139c <strnpbrk>:

char* strnpbrk(const char* str, const char* key, int len) {
 800139c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800139e:	460e      	mov	r6, r1
  char c;
  while (len-- > 0) {
 80013a0:	4604      	mov	r4, r0
 80013a2:	1887      	adds	r7, r0, r2
 80013a4:	1b3b      	subs	r3, r7, r4
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	dd08      	ble.n	80013bc <strnpbrk+0x20>
    c = *str++;
 80013aa:	4625      	mov	r5, r4
    if (strchr(key, c)) {
 80013ac:	4630      	mov	r0, r6
 80013ae:	f815 1b01 	ldrb.w	r1, [r5], #1
 80013b2:	f7ff ffd8 	bl	8001366 <strchr>
 80013b6:	b918      	cbnz	r0, 80013c0 <strnpbrk+0x24>
}

char* strnpbrk(const char* str, const char* key, int len) {
  char c;
  while (len-- > 0) {
    c = *str++;
 80013b8:	462c      	mov	r4, r5
 80013ba:	e7f3      	b.n	80013a4 <strnpbrk+0x8>
    if (strchr(key, c)) {
      return (char*)--str;
    }
  }
  return 0;
 80013bc:	2000      	movs	r0, #0
 80013be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013c0:	4620      	mov	r0, r4
}
 80013c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080013c4 <strstr>:

char* strstr(const char* str, const char* sub) {
 80013c4:	b538      	push	{r3, r4, r5, lr}
 80013c6:	4604      	mov	r4, r0
  int len = strlen(sub);
 80013c8:	4608      	mov	r0, r1
    }
  }
  return 0;
}

char* strstr(const char* str, const char* sub) {
 80013ca:	460d      	mov	r5, r1
  int len = strlen(sub);
 80013cc:	f7ff fd46 	bl	8000e5c <strlen>
  char c;
  while ((c = *str++) != 0 && ix < len) {
    if (c == sub[ix]) {
      ix++;
    } else {
      ix = 0;
 80013d0:	2300      	movs	r3, #0

char* strstr(const char* str, const char* sub) {
  int len = strlen(sub);
  int ix = 0;
  char c;
  while ((c = *str++) != 0 && ix < len) {
 80013d2:	f814 2b01 	ldrb.w	r2, [r4], #1
 80013d6:	b91a      	cbnz	r2, 80013e0 <strstr+0x1c>
      ix++;
    } else {
      ix = 0;
    }
  }
  if (ix == len) {
 80013d8:	4283      	cmp	r3, r0
 80013da:	d008      	beq.n	80013ee <strstr+0x2a>
    return (char*)(str - len - 1);
  } else {
    return 0;
 80013dc:	2000      	movs	r0, #0
 80013de:	bd38      	pop	{r3, r4, r5, pc}

char* strstr(const char* str, const char* sub) {
  int len = strlen(sub);
  int ix = 0;
  char c;
  while ((c = *str++) != 0 && ix < len) {
 80013e0:	4283      	cmp	r3, r0
 80013e2:	daf9      	bge.n	80013d8 <strstr+0x14>
    if (c == sub[ix]) {
 80013e4:	5ce9      	ldrb	r1, [r5, r3]
 80013e6:	4291      	cmp	r1, r2
 80013e8:	d1f2      	bne.n	80013d0 <strstr+0xc>
      ix++;
 80013ea:	3301      	adds	r3, #1
 80013ec:	e7f1      	b.n	80013d2 <strstr+0xe>
    } else {
      ix = 0;
    }
  }
  if (ix == len) {
    return (char*)(str - len - 1);
 80013ee:	43db      	mvns	r3, r3
 80013f0:	18e0      	adds	r0, r4, r3
  } else {
    return 0;
  }
}
 80013f2:	bd38      	pop	{r3, r4, r5, pc}

080013f4 <strncontainex>:

char* strncontainex(const char* s, const char* content, int len) {
 80013f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013f6:	460e      	mov	r6, r1
  while (len-- > 0) {
 80013f8:	4604      	mov	r4, r0
 80013fa:	1887      	adds	r7, r0, r2
 80013fc:	1b3b      	subs	r3, r7, r4
 80013fe:	2b00      	cmp	r3, #0
 8001400:	dd08      	ble.n	8001414 <strncontainex+0x20>
    if (strchr(content, *s++) == 0) {
 8001402:	4625      	mov	r5, r4
 8001404:	4630      	mov	r0, r6
 8001406:	f815 1b01 	ldrb.w	r1, [r5], #1
 800140a:	f7ff ffac 	bl	8001366 <strchr>
 800140e:	b118      	cbz	r0, 8001418 <strncontainex+0x24>
 8001410:	462c      	mov	r4, r5
 8001412:	e7f3      	b.n	80013fc <strncontainex+0x8>
      return (char*)--s;
    }
  }
  return 0;
 8001414:	2000      	movs	r0, #0
 8001416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001418:	4620      	mov	r0, r4
}
 800141a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800141c <_strarg_next>:
  if (state == BS_OCT || state == BS_HEX) {
    *c->wrk++ = val;
  }
}

static int _strarg_next(cursor *c, strarg* arg, const char *delim, bool string) {
 800141c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001420:	4604      	mov	r4, r0
 8001422:	460d      	mov	r5, r1
 8001424:	4699      	mov	r9, r3
  if (delim) {
 8001426:	4692      	mov	sl, r2
 8001428:	b1ea      	cbz	r2, 8001466 <_strarg_next+0x4a>
    if (strchr(delim, *c->s)) {
 800142a:	6803      	ldr	r3, [r0, #0]
 800142c:	4610      	mov	r0, r2
 800142e:	7819      	ldrb	r1, [r3, #0]
 8001430:	f7ff ff99 	bl	8001366 <strchr>
 8001434:	b910      	cbnz	r0, 800143c <_strarg_next+0x20>
//      return TRUE;
    }
  } else {
    c_skip_blanks(c);
  }
  if (c->len == 0) {
 8001436:	68a6      	ldr	r6, [r4, #8]
 8001438:	bb0e      	cbnz	r6, 800147e <_strarg_next+0x62>
 800143a:	e19e      	b.n	800177a <_strarg_next+0x35e>

static int _strarg_next(cursor *c, strarg* arg, const char *delim, bool string) {
  if (delim) {
    if (strchr(delim, *c->s)) {
      do {
        c_next(c);
 800143c:	4620      	mov	r0, r4
 800143e:	f7ff fca1 	bl	8000d84 <c_next>
      } while (strchr(delim, *c->s));
 8001442:	6823      	ldr	r3, [r4, #0]
 8001444:	4650      	mov	r0, sl
 8001446:	7819      	ldrb	r1, [r3, #0]
 8001448:	f7ff ff8d 	bl	8001366 <strchr>
 800144c:	2800      	cmp	r0, #0
 800144e:	d1f5      	bne.n	800143c <_strarg_next+0x20>
      if (c->len == 0) return FALSE;
 8001450:	68a6      	ldr	r6, [r4, #8]
 8001452:	2e00      	cmp	r6, #0
 8001454:	d1ef      	bne.n	8001436 <_strarg_next+0x1a>
 8001456:	e190      	b.n	800177a <_strarg_next+0x35e>
}

static void c_skip_blanks(cursor *curs) {
  char c;
  while (curs->len > 0) {
    c = *(curs->s);
 8001458:	6823      	ldr	r3, [r4, #0]
 800145a:	781b      	ldrb	r3, [r3, #0]
    if (c != ' ' && c != '\t' && c != '\n' && c != '\r') {
 800145c:	2b20      	cmp	r3, #32
 800145e:	d106      	bne.n	800146e <_strarg_next+0x52>
      break;
    }
    c_next(curs);
 8001460:	4620      	mov	r0, r4
 8001462:	f7ff fc8f 	bl	8000d84 <c_next>
  c->s--;
}

static void c_skip_blanks(cursor *curs) {
  char c;
  while (curs->len > 0) {
 8001466:	68a3      	ldr	r3, [r4, #8]
 8001468:	2b00      	cmp	r3, #0
 800146a:	dcf5      	bgt.n	8001458 <_strarg_next+0x3c>
 800146c:	e7e3      	b.n	8001436 <_strarg_next+0x1a>
    c = *(curs->s);
    if (c != ' ' && c != '\t' && c != '\n' && c != '\r') {
 800146e:	f1a3 0209 	sub.w	r2, r3, #9
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	2a01      	cmp	r2, #1
 8001476:	d9f3      	bls.n	8001460 <_strarg_next+0x44>
 8001478:	2b0d      	cmp	r3, #13
 800147a:	d0f1      	beq.n	8001460 <_strarg_next+0x44>
 800147c:	e7db      	b.n	8001436 <_strarg_next+0x1a>
    return FALSE;
  }

  // find starting string definition
  char str_def = 0;
  if (*c->s == '"') {
 800147e:	6827      	ldr	r7, [r4, #0]
 8001480:	f897 8000 	ldrb.w	r8, [r7]
 8001484:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
 8001488:	d003      	beq.n	8001492 <_strarg_next+0x76>
    str_def = '"';
  } else if (*c->s == '\'') {
 800148a:	f1b8 0f27 	cmp.w	r8, #39	; 0x27
 800148e:	f040 80ac 	bne.w	80015ea <_strarg_next+0x1ce>
    str_def = '\'';
  }

  // is a defined string, handle further
  if (str_def) {
    arg->type = STR;
 8001492:	2301      	movs	r3, #1
 8001494:	702b      	strb	r3, [r5, #0]
    arg->str = c->wrk;
 8001496:	6863      	ldr	r3, [r4, #4]
    // skip str def char
    c_next(c);
 8001498:	4620      	mov	r0, r4
  }

  // is a defined string, handle further
  if (str_def) {
    arg->type = STR;
    arg->str = c->wrk;
 800149a:	606b      	str	r3, [r5, #4]
    // skip str def char
    c_next(c);
 800149c:	f7ff fc72 	bl	8000d84 <c_next>
static void c_strnparse(cursor *c, char str_def) {
  typedef enum {
    STR, BS_FIRST, BS_OCT, BS_HEX
  } pstate;
  pstate state = STR;
  int val = -1;
 80014a0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

static void c_strnparse(cursor *c, char str_def) {
  typedef enum {
    STR, BS_FIRST, BS_OCT, BS_HEX
  } pstate;
  pstate state = STR;
 80014a4:	2600      	movs	r6, #0
    case BS_FIRST: {
      char advance = TRUE;
      // first backslash char
      switch (h) {
      case 'a':
        *c->wrk++ = '\a';
 80014a6:	f04f 0907 	mov.w	r9, #7
  typedef enum {
    STR, BS_FIRST, BS_OCT, BS_HEX
  } pstate;
  pstate state = STR;
  int val = -1;
  while (c->len > 0) {
 80014aa:	68a3      	ldr	r3, [r4, #8]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f340 808a 	ble.w	80015c6 <_strarg_next+0x1aa>
    char h = *c->s;
 80014b2:	6823      	ldr	r3, [r4, #0]
 80014b4:	781b      	ldrb	r3, [r3, #0]

    switch (state) {
 80014b6:	2e03      	cmp	r6, #3
 80014b8:	d8fb      	bhi.n	80014b2 <_strarg_next+0x96>
 80014ba:	e8df f006 	tbb	[pc, r6]
 80014be:	1102      	.short	0x1102
 80014c0:	6760      	.short	0x6760
    case STR: {
      if (h == '\\') {
 80014c2:	2b5c      	cmp	r3, #92	; 0x5c
 80014c4:	d00a      	beq.n	80014dc <_strarg_next+0xc0>
        state = BS_FIRST;
      } else if (h == str_def) {
 80014c6:	4543      	cmp	r3, r8
 80014c8:	d103      	bne.n	80014d2 <_strarg_next+0xb6>
        c_next(c);
 80014ca:	4620      	mov	r0, r4
 80014cc:	f7ff fc5a 	bl	8000d84 <c_next>
 80014d0:	e081      	b.n	80015d6 <_strarg_next+0x1ba>
        return;
      } else {
        *c->wrk++ = h;
 80014d2:	6862      	ldr	r2, [r4, #4]
 80014d4:	1c51      	adds	r1, r2, #1
 80014d6:	6061      	str	r1, [r4, #4]
 80014d8:	7013      	strb	r3, [r2, #0]
 80014da:	e13c      	b.n	8001756 <_strarg_next+0x33a>
    char h = *c->s;

    switch (state) {
    case STR: {
      if (h == '\\') {
        state = BS_FIRST;
 80014dc:	2601      	movs	r6, #1
 80014de:	e13a      	b.n	8001756 <_strarg_next+0x33a>
    } // case SR

    case BS_FIRST: {
      char advance = TRUE;
      // first backslash char
      switch (h) {
 80014e0:	2b61      	cmp	r3, #97	; 0x61
 80014e2:	d02b      	beq.n	800153c <_strarg_next+0x120>
 80014e4:	d810      	bhi.n	8001508 <_strarg_next+0xec>
 80014e6:	2b37      	cmp	r3, #55	; 0x37
 80014e8:	d806      	bhi.n	80014f8 <_strarg_next+0xdc>
 80014ea:	2b30      	cmp	r3, #48	; 0x30
 80014ec:	f080 812e 	bcs.w	800174c <_strarg_next+0x330>
 80014f0:	2b22      	cmp	r3, #34	; 0x22
 80014f2:	d03e      	beq.n	8001572 <_strarg_next+0x156>
 80014f4:	2b27      	cmp	r3, #39	; 0x27
 80014f6:	e005      	b.n	8001504 <_strarg_next+0xe8>
 80014f8:	2b58      	cmp	r3, #88	; 0x58
 80014fa:	f000 812a 	beq.w	8001752 <_strarg_next+0x336>
 80014fe:	2b5c      	cmp	r3, #92	; 0x5c
 8001500:	d037      	beq.n	8001572 <_strarg_next+0x156>
 8001502:	2b3f      	cmp	r3, #63	; 0x3f
 8001504:	d15d      	bne.n	80015c2 <_strarg_next+0x1a6>
 8001506:	e034      	b.n	8001572 <_strarg_next+0x156>
 8001508:	2b72      	cmp	r3, #114	; 0x72
 800150a:	d027      	beq.n	800155c <_strarg_next+0x140>
 800150c:	d80a      	bhi.n	8001524 <_strarg_next+0x108>
 800150e:	2b66      	cmp	r3, #102	; 0x66
 8001510:	d01a      	beq.n	8001548 <_strarg_next+0x12c>
 8001512:	2b6e      	cmp	r3, #110	; 0x6e
 8001514:	d01d      	beq.n	8001552 <_strarg_next+0x136>
 8001516:	2b62      	cmp	r3, #98	; 0x62
 8001518:	d153      	bne.n	80015c2 <_strarg_next+0x1a6>
      case 'a':
        *c->wrk++ = '\a';
        state = STR;
        break;
      case 'b':
        *c->wrk++ = '\b';
 800151a:	6863      	ldr	r3, [r4, #4]
 800151c:	1c5a      	adds	r2, r3, #1
 800151e:	6062      	str	r2, [r4, #4]
 8001520:	2208      	movs	r2, #8
 8001522:	e024      	b.n	800156e <_strarg_next+0x152>
    } // case SR

    case BS_FIRST: {
      char advance = TRUE;
      // first backslash char
      switch (h) {
 8001524:	2b76      	cmp	r3, #118	; 0x76
 8001526:	d01e      	beq.n	8001566 <_strarg_next+0x14a>
 8001528:	2b78      	cmp	r3, #120	; 0x78
 800152a:	f000 8112 	beq.w	8001752 <_strarg_next+0x336>
 800152e:	2b74      	cmp	r3, #116	; 0x74
 8001530:	d147      	bne.n	80015c2 <_strarg_next+0x1a6>
      case 'r':
        *c->wrk++ = '\r';
        state = STR;
        break;
      case 't':
        *c->wrk++ = '\t';
 8001532:	6863      	ldr	r3, [r4, #4]
 8001534:	1c5a      	adds	r2, r3, #1
 8001536:	6062      	str	r2, [r4, #4]
 8001538:	2209      	movs	r2, #9
 800153a:	e018      	b.n	800156e <_strarg_next+0x152>
    case BS_FIRST: {
      char advance = TRUE;
      // first backslash char
      switch (h) {
      case 'a':
        *c->wrk++ = '\a';
 800153c:	6863      	ldr	r3, [r4, #4]
 800153e:	1c5a      	adds	r2, r3, #1
 8001540:	6062      	str	r2, [r4, #4]
 8001542:	f883 9000 	strb.w	r9, [r3]
 8001546:	e018      	b.n	800157a <_strarg_next+0x15e>
      case 'b':
        *c->wrk++ = '\b';
        state = STR;
        break;
      case 'f':
        *c->wrk++ = '\f';
 8001548:	6863      	ldr	r3, [r4, #4]
 800154a:	1c5a      	adds	r2, r3, #1
 800154c:	6062      	str	r2, [r4, #4]
 800154e:	220c      	movs	r2, #12
 8001550:	e00d      	b.n	800156e <_strarg_next+0x152>
        state = STR;
        break;
      case 'n':
        *c->wrk++ = '\n';
 8001552:	6863      	ldr	r3, [r4, #4]
 8001554:	1c5a      	adds	r2, r3, #1
 8001556:	6062      	str	r2, [r4, #4]
 8001558:	220a      	movs	r2, #10
 800155a:	e008      	b.n	800156e <_strarg_next+0x152>
        state = STR;
        break;
      case 'r':
        *c->wrk++ = '\r';
 800155c:	6863      	ldr	r3, [r4, #4]
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	6062      	str	r2, [r4, #4]
 8001562:	220d      	movs	r2, #13
 8001564:	e003      	b.n	800156e <_strarg_next+0x152>
      case 't':
        *c->wrk++ = '\t';
        state = STR;
        break;
      case 'v':
        *c->wrk++ = '\v';
 8001566:	6863      	ldr	r3, [r4, #4]
 8001568:	1c5a      	adds	r2, r3, #1
 800156a:	6062      	str	r2, [r4, #4]
 800156c:	220b      	movs	r2, #11
 800156e:	701a      	strb	r2, [r3, #0]
 8001570:	e003      	b.n	800157a <_strarg_next+0x15e>
        break;
      case '\\':
      case '?':
      case '\'':
      case '\"':
        *c->wrk++ = h;
 8001572:	6862      	ldr	r2, [r4, #4]
 8001574:	1c51      	adds	r1, r2, #1
 8001576:	6061      	str	r1, [r4, #4]
 8001578:	7013      	strb	r3, [r2, #0]
        state = STR;
 800157a:	2600      	movs	r6, #0
 800157c:	e0eb      	b.n	8001756 <_strarg_next+0x33a>
      }
      break;
    } // case BS_FIRST

    case BS_OCT: {
      if (h >= '0' && h <= '7') {
 800157e:	3b30      	subs	r3, #48	; 0x30
 8001580:	b2da      	uxtb	r2, r3
 8001582:	2a07      	cmp	r2, #7
 8001584:	d819      	bhi.n	80015ba <_strarg_next+0x19e>
        val = val * 8 + (h-'0');
 8001586:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800158a:	e0e4      	b.n	8001756 <_strarg_next+0x33a>
      }
      break;
    } // case BS_OCT

    case BS_HEX: {
      if (h >= 'A' && h <= 'F') {
 800158c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8001590:	b2d2      	uxtb	r2, r2
 8001592:	2a05      	cmp	r2, #5
        h = h - 'A' + 'a';
 8001594:	bf9c      	itt	ls
 8001596:	3320      	addls	r3, #32
 8001598:	b2db      	uxtbls	r3, r3
      }
      if (h >= '0' && h <= '9') {
 800159a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800159e:	b2d1      	uxtb	r1, r2
 80015a0:	2909      	cmp	r1, #9
 80015a2:	d802      	bhi.n	80015aa <_strarg_next+0x18e>
        val = val * 16 + (h-'0');
 80015a4:	eb02 1707 	add.w	r7, r2, r7, lsl #4
 80015a8:	e0d5      	b.n	8001756 <_strarg_next+0x33a>
        c_next(c);
      } else if ( h >= 'a' && h <= 'f') {
 80015aa:	3b61      	subs	r3, #97	; 0x61
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	2a05      	cmp	r2, #5
 80015b0:	d803      	bhi.n	80015ba <_strarg_next+0x19e>
        val = val * 16 + (h-'a') + 10;
 80015b2:	eb03 1707 	add.w	r7, r3, r7, lsl #4
 80015b6:	370a      	adds	r7, #10
 80015b8:	e0cd      	b.n	8001756 <_strarg_next+0x33a>
        c_next(c);
      } else {
        *c->wrk++ = val;
 80015ba:	6863      	ldr	r3, [r4, #4]
 80015bc:	1c5a      	adds	r2, r3, #1
 80015be:	6062      	str	r2, [r4, #4]
 80015c0:	701f      	strb	r7, [r3, #0]
        state = STR;
 80015c2:	2600      	movs	r6, #0
 80015c4:	e771      	b.n	80014aa <_strarg_next+0x8e>
      }
      break;
    } // case BS_HEX
    } // switch state
  } // while
  if (state == BS_OCT || state == BS_HEX) {
 80015c6:	3e02      	subs	r6, #2
 80015c8:	b2f6      	uxtb	r6, r6
 80015ca:	2e01      	cmp	r6, #1
 80015cc:	d803      	bhi.n	80015d6 <_strarg_next+0x1ba>
    *c->wrk++ = val;
 80015ce:	6863      	ldr	r3, [r4, #4]
 80015d0:	1c5a      	adds	r2, r3, #1
 80015d2:	6062      	str	r2, [r4, #4]
 80015d4:	701f      	strb	r7, [r3, #0]
    // skip str def char
    c_next(c);
    // fill up c->wrk buffer with string parsed string
    c_strnparse(c, str_def);
    // and zero end
    *c->wrk++ = '\0';
 80015d6:	6863      	ldr	r3, [r4, #4]
 80015d8:	1c5a      	adds	r2, r3, #1
 80015da:	6062      	str	r2, [r4, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]
    // calc len
    arg->len = c->wrk - arg->str;
 80015e0:	6862      	ldr	r2, [r4, #4]
 80015e2:	686b      	ldr	r3, [r5, #4]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	60ab      	str	r3, [r5, #8]
 80015e8:	e045      	b.n	8001676 <_strarg_next+0x25a>
    return TRUE;
  }

  // no defined string, find arg end ptr
  char *arg_end = strnpbrk(c->s, delim ? delim : " \n\r\t", c->len);
 80015ea:	4965      	ldr	r1, [pc, #404]	; (8001780 <_strarg_next+0x364>)
 80015ec:	4638      	mov	r0, r7
 80015ee:	f1ba 0f00 	cmp.w	sl, #0
 80015f2:	bf18      	it	ne
 80015f4:	4651      	movne	r1, sl
 80015f6:	4632      	mov	r2, r6
 80015f8:	f7ff fed0 	bl	800139c <strnpbrk>
  // adjust arg end if bad
  if (arg_end == 0 || arg_end - c->s > c->len) {
 80015fc:	2800      	cmp	r0, #0
 80015fe:	d03c      	beq.n	800167a <_strarg_next+0x25e>
 8001600:	1bc3      	subs	r3, r0, r7
 8001602:	42b3      	cmp	r3, r6
 8001604:	dc39      	bgt.n	800167a <_strarg_next+0x25e>
    arg_end = c->s + c->len;
  }
  arg->len = arg_end - c->s;
 8001606:	1bc0      	subs	r0, r0, r7
  // determine type

  // signs
  char possibly_minus = FALSE;
  char possibly_plus = FALSE;
  if (arg->len > 1) {
 8001608:	2801      	cmp	r0, #1
  char *arg_end = strnpbrk(c->s, delim ? delim : " \n\r\t", c->len);
  // adjust arg end if bad
  if (arg_end == 0 || arg_end - c->s > c->len) {
    arg_end = c->s + c->len;
  }
  arg->len = arg_end - c->s;
 800160a:	60a8      	str	r0, [r5, #8]
  // determine type

  // signs
  char possibly_minus = FALSE;
  char possibly_plus = FALSE;
  if (arg->len > 1) {
 800160c:	dd37      	ble.n	800167e <_strarg_next+0x262>
    possibly_minus = *c->s == '-';
 800160e:	f897 a000 	ldrb.w	sl, [r7]
 8001612:	f1ba 0c2d 	subs.w	ip, sl, #45	; 0x2d
 8001616:	f1dc 0800 	rsbs	r8, ip, #0
 800161a:	eb58 080c 	adcs.w	r8, r8, ip
    possibly_plus = *c->s == '+';
 800161e:	f1ba 032b 	subs.w	r3, sl, #43	; 0x2b
 8001622:	f1d3 0a00 	rsbs	sl, r3, #0
 8001626:	eb5a 0a03 	adcs.w	sl, sl, r3
  }
  if (possibly_minus | possibly_plus) {
 800162a:	ea5a 0308 	orrs.w	r3, sl, r8
 800162e:	d005      	beq.n	800163c <_strarg_next+0x220>
    c_next(c);
 8001630:	4620      	mov	r0, r4
 8001632:	f7ff fba7 	bl	8000d84 <c_next>
    arg->len--;
 8001636:	68ab      	ldr	r3, [r5, #8]
 8001638:	3b01      	subs	r3, #1
 800163a:	60ab      	str	r3, [r5, #8]

  // determine content
  char possibly_hex = FALSE;
  char possibly_int = FALSE;
  char possibly_bin = FALSE;
  if (!string) {
 800163c:	f1b9 0f00 	cmp.w	r9, #0
 8001640:	d15e      	bne.n	8001700 <_strarg_next+0x2e4>
    if (arg->len > 2 && *c->s == '0') {
 8001642:	68ae      	ldr	r6, [r5, #8]
 8001644:	6827      	ldr	r7, [r4, #0]
 8001646:	2e02      	cmp	r6, #2
 8001648:	dc1d      	bgt.n	8001686 <_strarg_next+0x26a>
    }
    if (!possibly_bin && possibly_hex) {
      possibly_hex = strncontainex(c->s + 2, "0123456789abcdefABCDEF", arg->len-2) == 0;
    }
    if (!possibly_bin && !possibly_hex) {
      possibly_int = strncontainex(c->s, "0123456789", arg->len) == 0;
 800164a:	4638      	mov	r0, r7
 800164c:	494d      	ldr	r1, [pc, #308]	; (8001784 <_strarg_next+0x368>)
 800164e:	4632      	mov	r2, r6
 8001650:	f7ff fed0 	bl	80013f4 <strncontainex>
  if (possibly_bin) {
    c_advance(c,2); // adjust for 0b
    arg->type = INT;
    arg->val = possibly_minus ? -atoin(c->s, 2, arg->len-2) : atoin(c->s, 2, arg->len-2);
    c_advance(c, arg->len - 2);
  } else if (possibly_int) {
 8001654:	2800      	cmp	r0, #0
 8001656:	d153      	bne.n	8001700 <_strarg_next+0x2e4>
    arg->type = INT;
 8001658:	7028      	strb	r0, [r5, #0]
    arg->val = possibly_minus ? -atoin(c->s, 10, arg->len) : atoin(c->s, 10, arg->len);
 800165a:	210a      	movs	r1, #10
 800165c:	4638      	mov	r0, r7
 800165e:	4632      	mov	r2, r6
 8001660:	f1b8 0f00 	cmp.w	r8, #0
 8001664:	d02f      	beq.n	80016c6 <_strarg_next+0x2aa>
 8001666:	f7ff fbc2 	bl	8000dee <atoin>
 800166a:	4240      	negs	r0, r0
 800166c:	6068      	str	r0, [r5, #4]
    c_advance(c, arg->len+1);
 800166e:	1c71      	adds	r1, r6, #1
 8001670:	4620      	mov	r0, r4
  } else if (possibly_hex) {
    c_advance(c,2); // adjust for 0x
    arg->type = INT;
    arg->val = possibly_minus ? -atoin(c->s, 16, arg->len-2) : atoin(c->s, 16, arg->len-2);
    c_advance(c, arg->len - 2);
 8001672:	f7ff fb90 	bl	8000d96 <c_advance>
    arg->str[arg->len] = 0;
    c_advance(c, arg->len + 1);
    c->wrk += arg->len + 1;
  }

  return TRUE;
 8001676:	2601      	movs	r6, #1
 8001678:	e07f      	b.n	800177a <_strarg_next+0x35e>

  // no defined string, find arg end ptr
  char *arg_end = strnpbrk(c->s, delim ? delim : " \n\r\t", c->len);
  // adjust arg end if bad
  if (arg_end == 0 || arg_end - c->s > c->len) {
    arg_end = c->s + c->len;
 800167a:	19b8      	adds	r0, r7, r6
 800167c:	e7c3      	b.n	8001606 <_strarg_next+0x1ea>

  // determine type

  // signs
  char possibly_minus = FALSE;
  char possibly_plus = FALSE;
 800167e:	f04f 0a00 	mov.w	sl, #0
  arg->len = arg_end - c->s;

  // determine type

  // signs
  char possibly_minus = FALSE;
 8001682:	46d0      	mov	r8, sl
 8001684:	e7d1      	b.n	800162a <_strarg_next+0x20e>
  // determine content
  char possibly_hex = FALSE;
  char possibly_int = FALSE;
  char possibly_bin = FALSE;
  if (!string) {
    if (arg->len > 2 && *c->s == '0') {
 8001686:	783b      	ldrb	r3, [r7, #0]
 8001688:	2b30      	cmp	r3, #48	; 0x30
 800168a:	d1de      	bne.n	800164a <_strarg_next+0x22e>
      possibly_hex = ((*(c->s+1) == 'x' || *(c->s+1) == 'X'));
 800168c:	787b      	ldrb	r3, [r7, #1]
 800168e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8001692:	f1b3 0e58 	subs.w	lr, r3, #88	; 0x58
 8001696:	f1de 0b00 	rsbs	fp, lr, #0
 800169a:	eb5b 0b0e 	adcs.w	fp, fp, lr
      possibly_bin = ((*(c->s+1) == 'b' || *(c->s+1) == 'B'));
    }

    if (possibly_bin) {
 800169e:	2b42      	cmp	r3, #66	; 0x42
 80016a0:	d106      	bne.n	80016b0 <_strarg_next+0x294>
      possibly_bin = strncontainex(c->s + 2, "01", arg->len-2) == 0;
 80016a2:	1cb8      	adds	r0, r7, #2
 80016a4:	4938      	ldr	r1, [pc, #224]	; (8001788 <_strarg_next+0x36c>)
 80016a6:	1eb2      	subs	r2, r6, #2
 80016a8:	f7ff fea4 	bl	80013f4 <strncontainex>
    }
    if (!possibly_bin && possibly_hex) {
 80016ac:	2800      	cmp	r0, #0
 80016ae:	d056      	beq.n	800175e <_strarg_next+0x342>
 80016b0:	f1bb 0f00 	cmp.w	fp, #0
 80016b4:	d0c9      	beq.n	800164a <_strarg_next+0x22e>
      possibly_hex = strncontainex(c->s + 2, "0123456789abcdefABCDEF", arg->len-2) == 0;
 80016b6:	1cb8      	adds	r0, r7, #2
 80016b8:	4934      	ldr	r1, [pc, #208]	; (800178c <_strarg_next+0x370>)
 80016ba:	1eb2      	subs	r2, r6, #2
 80016bc:	f7ff fe9a 	bl	80013f4 <strncontainex>
    }
    if (!possibly_bin && !possibly_hex) {
 80016c0:	4681      	mov	r9, r0
 80016c2:	b118      	cbz	r0, 80016cc <_strarg_next+0x2b0>
 80016c4:	e7c1      	b.n	800164a <_strarg_next+0x22e>
    arg->type = INT;
    arg->val = possibly_minus ? -atoin(c->s, 2, arg->len-2) : atoin(c->s, 2, arg->len-2);
    c_advance(c, arg->len - 2);
  } else if (possibly_int) {
    arg->type = INT;
    arg->val = possibly_minus ? -atoin(c->s, 10, arg->len) : atoin(c->s, 10, arg->len);
 80016c6:	f7ff fb92 	bl	8000dee <atoin>
 80016ca:	e7cf      	b.n	800166c <_strarg_next+0x250>
    c_advance(c, arg->len+1);
  } else if (possibly_hex) {
    c_advance(c,2); // adjust for 0x
 80016cc:	4620      	mov	r0, r4
 80016ce:	2102      	movs	r1, #2
 80016d0:	f7ff fb61 	bl	8000d96 <c_advance>
 80016d4:	68ae      	ldr	r6, [r5, #8]
    arg->type = INT;
 80016d6:	f885 9000 	strb.w	r9, [r5]
    arg->val = possibly_minus ? -atoin(c->s, 16, arg->len-2) : atoin(c->s, 16, arg->len-2);
 80016da:	6820      	ldr	r0, [r4, #0]
 80016dc:	2110      	movs	r1, #16
 80016de:	1eb2      	subs	r2, r6, #2
 80016e0:	f1b8 0f00 	cmp.w	r8, #0
 80016e4:	d006      	beq.n	80016f4 <_strarg_next+0x2d8>
 80016e6:	f7ff fb82 	bl	8000dee <atoin>
 80016ea:	4240      	negs	r0, r0
 80016ec:	e004      	b.n	80016f8 <_strarg_next+0x2dc>

  // ok, determined
  if (possibly_bin) {
    c_advance(c,2); // adjust for 0b
    arg->type = INT;
    arg->val = possibly_minus ? -atoin(c->s, 2, arg->len-2) : atoin(c->s, 2, arg->len-2);
 80016ee:	6820      	ldr	r0, [r4, #0]
 80016f0:	2102      	movs	r1, #2
 80016f2:	1eb2      	subs	r2, r6, #2
    arg->val = possibly_minus ? -atoin(c->s, 10, arg->len) : atoin(c->s, 10, arg->len);
    c_advance(c, arg->len+1);
  } else if (possibly_hex) {
    c_advance(c,2); // adjust for 0x
    arg->type = INT;
    arg->val = possibly_minus ? -atoin(c->s, 16, arg->len-2) : atoin(c->s, 16, arg->len-2);
 80016f4:	f7ff fb7b 	bl	8000dee <atoin>
 80016f8:	6068      	str	r0, [r5, #4]
    c_advance(c, arg->len - 2);
 80016fa:	1eb1      	subs	r1, r6, #2
 80016fc:	4620      	mov	r0, r4
 80016fe:	e7b8      	b.n	8001672 <_strarg_next+0x256>
  } else {
    arg->type = STR;
    arg->str = c->wrk;
 8001700:	6860      	ldr	r0, [r4, #4]
    c_advance(c,2); // adjust for 0x
    arg->type = INT;
    arg->val = possibly_minus ? -atoin(c->s, 16, arg->len-2) : atoin(c->s, 16, arg->len-2);
    c_advance(c, arg->len - 2);
  } else {
    arg->type = STR;
 8001702:	2301      	movs	r3, #1
 8001704:	702b      	strb	r3, [r5, #0]
    arg->str = c->wrk;
 8001706:	6068      	str	r0, [r5, #4]
    if (possibly_minus || possibly_plus) {
 8001708:	f1b8 0f00 	cmp.w	r8, #0
 800170c:	d102      	bne.n	8001714 <_strarg_next+0x2f8>
 800170e:	f1ba 0f00 	cmp.w	sl, #0
 8001712:	d008      	beq.n	8001726 <_strarg_next+0x30a>
  c->len -= l;
  c->s += l;
}

static void c_back(cursor *c) {
  c->len++;
 8001714:	68a3      	ldr	r3, [r4, #8]
 8001716:	3301      	adds	r3, #1
 8001718:	60a3      	str	r3, [r4, #8]
  c->s--;
 800171a:	6823      	ldr	r3, [r4, #0]
 800171c:	3b01      	subs	r3, #1
 800171e:	6023      	str	r3, [r4, #0]
  } else {
    arg->type = STR;
    arg->str = c->wrk;
    if (possibly_minus || possibly_plus) {
      c_back(c);
      arg->len++;
 8001720:	68ab      	ldr	r3, [r5, #8]
 8001722:	3301      	adds	r3, #1
 8001724:	60ab      	str	r3, [r5, #8]
    }
    strncpy(arg->str, c->s, arg->len);
 8001726:	6821      	ldr	r1, [r4, #0]
 8001728:	68aa      	ldr	r2, [r5, #8]
 800172a:	f7ff fdff 	bl	800132c <strncpy>
    arg->str[arg->len] = 0;
 800172e:	686a      	ldr	r2, [r5, #4]
 8001730:	68ab      	ldr	r3, [r5, #8]
 8001732:	2100      	movs	r1, #0
 8001734:	54d1      	strb	r1, [r2, r3]
    c_advance(c, arg->len + 1);
 8001736:	68a9      	ldr	r1, [r5, #8]
 8001738:	4620      	mov	r0, r4
 800173a:	3101      	adds	r1, #1
 800173c:	f7ff fb2b 	bl	8000d96 <c_advance>
    c->wrk += arg->len + 1;
 8001740:	68aa      	ldr	r2, [r5, #8]
 8001742:	6863      	ldr	r3, [r4, #4]
 8001744:	3201      	adds	r2, #1
 8001746:	4413      	add	r3, r2
 8001748:	6063      	str	r3, [r4, #4]
 800174a:	e794      	b.n	8001676 <_strarg_next+0x25a>
      case '4':
      case '5':
      case '6':
      case '7':
        advance = FALSE;
        val = 0;
 800174c:	2700      	movs	r7, #0
        state = BS_OCT;
 800174e:	2602      	movs	r6, #2
 8001750:	e6ab      	b.n	80014aa <_strarg_next+0x8e>
        *c->wrk++ = h;
        state = STR;
        break;
      case 'x':
      case 'X':
        val = 0;
 8001752:	2700      	movs	r7, #0
        state = BS_HEX;
 8001754:	2603      	movs	r6, #3
        advance = FALSE;
        state = STR;
        break;
      }
      if (advance) {
        c_next(c);
 8001756:	4620      	mov	r0, r4
 8001758:	f7ff fb14 	bl	8000d84 <c_next>
 800175c:	e6a5      	b.n	80014aa <_strarg_next+0x8e>
    }
  }

  // ok, determined
  if (possibly_bin) {
    c_advance(c,2); // adjust for 0b
 800175e:	4620      	mov	r0, r4
 8001760:	2102      	movs	r1, #2
 8001762:	f7ff fb18 	bl	8000d96 <c_advance>
    arg->type = INT;
 8001766:	f885 9000 	strb.w	r9, [r5]
 800176a:	68ae      	ldr	r6, [r5, #8]
    arg->val = possibly_minus ? -atoin(c->s, 2, arg->len-2) : atoin(c->s, 2, arg->len-2);
 800176c:	f1b8 0f00 	cmp.w	r8, #0
 8001770:	d0bd      	beq.n	80016ee <_strarg_next+0x2d2>
 8001772:	6820      	ldr	r0, [r4, #0]
 8001774:	2102      	movs	r1, #2
 8001776:	1eb2      	subs	r2, r6, #2
 8001778:	e7b5      	b.n	80016e6 <_strarg_next+0x2ca>
    c_advance(c, arg->len + 1);
    c->wrk += arg->len + 1;
  }

  return TRUE;
}
 800177a:	4630      	mov	r0, r6
 800177c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001780:	08010362 	.word	0x08010362
 8001784:	08010381 	.word	0x08010381
 8001788:	08010367 	.word	0x08010367
 800178c:	0801036a 	.word	0x0801036a

08001790 <crc_ccitt_16>:
    }
  }
  return 0;
}

unsigned short crc_ccitt_16(unsigned short crc, unsigned char data) {
 8001790:	ba40      	rev16	r0, r0
 8001792:	b283      	uxth	r3, r0
  crc  = (unsigned char)(crc >> 8) | (crc << 8);
  crc ^= data;
 8001794:	4059      	eors	r1, r3
  crc ^= (unsigned char)(crc & 0xff) >> 4;
 8001796:	f3c1 1303 	ubfx	r3, r1, #4, #4
 800179a:	404b      	eors	r3, r1
  crc ^= (crc << 8) << 4;
 800179c:	ea83 3303 	eor.w	r3, r3, r3, lsl #12
 80017a0:	b29b      	uxth	r3, r3
  crc ^= ((crc & 0xff) << 4) << 1;
 80017a2:	b2d8      	uxtb	r0, r3
  return crc;
}
 80017a4:	ea83 1040 	eor.w	r0, r3, r0, lsl #5
 80017a8:	4770      	bx	lr

080017aa <rand>:

#define TAPMASK       0x80000062U
unsigned int rand(unsigned int seed) {
  if (seed & 1) {
 80017aa:	07c2      	lsls	r2, r0, #31
 80017ac:	d507      	bpl.n	80017be <rand+0x14>
    seed = (1 << 31) | ((seed ^ TAPMASK) >> 1);
 80017ae:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80017b2:	f080 0062 	eor.w	r0, r0, #98	; 0x62
 80017b6:	0840      	lsrs	r0, r0, #1
 80017b8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80017bc:	4770      	bx	lr
  } else {
    seed >>= 1;
 80017be:	0840      	lsrs	r0, r0, #1
  }
  return seed;
}
 80017c0:	4770      	bx	lr

080017c2 <rand_next>:

static unsigned int _rand_seed = 0;
unsigned int rand_next() {
 80017c2:	b510      	push	{r4, lr}
  _rand_seed = rand(_rand_seed);
 80017c4:	4c02      	ldr	r4, [pc, #8]	; (80017d0 <rand_next+0xe>)
 80017c6:	6820      	ldr	r0, [r4, #0]
 80017c8:	f7ff ffef 	bl	80017aa <rand>
 80017cc:	6020      	str	r0, [r4, #0]
  return _rand_seed;
}
 80017ce:	bd10      	pop	{r4, pc}
 80017d0:	200001ec 	.word	0x200001ec

080017d4 <rand_seed>:

void rand_seed(unsigned int seed) {
  _rand_seed = seed;
 80017d4:	4b01      	ldr	r3, [pc, #4]	; (80017dc <rand_seed+0x8>)
 80017d6:	6018      	str	r0, [r3, #0]
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	200001ec 	.word	0x200001ec

080017e0 <quicksort>:
}

void quicksort(int* orders, void** pp, int elements) {
 80017e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int beg[MAX_LEVELS];
  int end[MAX_LEVELS];
  int i = 0;
  int L, R, swap;

  beg[0] = 0;
 80017e4:	2400      	movs	r4, #0

void rand_seed(unsigned int seed) {
  _rand_seed = seed;
}

void quicksort(int* orders, void** pp, int elements) {
 80017e6:	b0c3      	sub	sp, #268	; 0x10c
  int beg[MAX_LEVELS];
  int end[MAX_LEVELS];
  int i = 0;
  int L, R, swap;

  beg[0] = 0;
 80017e8:	9402      	str	r4, [sp, #8]
  end[0] = elements;
 80017ea:	9222      	str	r2, [sp, #136]	; 0x88

  while (i >= 0) {
    void* pivEl;
    L = beg[i];
 80017ec:	aa02      	add	r2, sp, #8
    R = end[i] - 1;
 80017ee:	ad42      	add	r5, sp, #264	; 0x108
  beg[0] = 0;
  end[0] = elements;

  while (i >= 0) {
    void* pivEl;
    L = beg[i];
 80017f0:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    R = end[i] - 1;
 80017f4:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 80017f8:	f852 8c80 	ldr.w	r8, [r2, #-128]
 80017fc:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff

    if (L < R) {
 8001800:	4293      	cmp	r3, r2
 8001802:	da58      	bge.n	80018b6 <quicksort+0xd6>
      pivEl = pp[L];
 8001804:	f851 7023 	ldr.w	r7, [r1, r3, lsl #2]
      piv = orders[L];
 8001808:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
    void* pivEl;
    L = beg[i];
    R = end[i] - 1;

    if (L < R) {
      pivEl = pp[L];
 800180c:	9701      	str	r7, [sp, #4]
 800180e:	0096      	lsls	r6, r2, #2
      piv = orders[L];

      while (L < R) {
        while (orders[R] >= piv && L < R) {
 8001810:	5987      	ldr	r7, [r0, r6]
 8001812:	eb06 0b00 	add.w	fp, r6, r0
 8001816:	4567      	cmp	r7, ip
 8001818:	db06      	blt.n	8001828 <quicksort+0x48>
 800181a:	4293      	cmp	r3, r2
 800181c:	f1a6 0504 	sub.w	r5, r6, #4
 8001820:	da0c      	bge.n	800183c <quicksort+0x5c>
          R--;
 8001822:	3a01      	subs	r2, #1
 8001824:	462e      	mov	r6, r5
 8001826:	e7f3      	b.n	8001810 <quicksort+0x30>
        }
        if (L < R) {
 8001828:	4293      	cmp	r3, r2
 800182a:	da07      	bge.n	800183c <quicksort+0x5c>
          pp[L] = pp[R];
 800182c:	598d      	ldr	r5, [r1, r6]
 800182e:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8001832:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
          orders[L++] = orders[R];
 8001836:	f840 7009 	str.w	r7, [r0, r9]
 800183a:	3301      	adds	r3, #1
 800183c:	009d      	lsls	r5, r3, #2
        }
        while (orders[L] <= piv && L < R) {
 800183e:	f850 9005 	ldr.w	r9, [r0, r5]
 8001842:	eb00 0a05 	add.w	sl, r0, r5
 8001846:	45e1      	cmp	r9, ip
 8001848:	dc06      	bgt.n	8001858 <quicksort+0x78>
 800184a:	4293      	cmp	r3, r2
 800184c:	f105 0904 	add.w	r9, r5, #4
 8001850:	da0b      	bge.n	800186a <quicksort+0x8a>
          L++;
 8001852:	3301      	adds	r3, #1
 8001854:	464d      	mov	r5, r9
 8001856:	e7f2      	b.n	800183e <quicksort+0x5e>
        }
        if (L < R) {
 8001858:	4293      	cmp	r3, r2
 800185a:	da06      	bge.n	800186a <quicksort+0x8a>
          pp[R] = pp[L];
 800185c:	594f      	ldr	r7, [r1, r5]
          orders[R--] = orders[L];
 800185e:	3a01      	subs	r2, #1

    if (L < R) {
      pivEl = pp[L];
      piv = orders[L];

      while (L < R) {
 8001860:	4293      	cmp	r3, r2
        }
        while (orders[L] <= piv && L < R) {
          L++;
        }
        if (L < R) {
          pp[R] = pp[L];
 8001862:	518f      	str	r7, [r1, r6]
          orders[R--] = orders[L];
 8001864:	f8cb 9000 	str.w	r9, [fp]

    if (L < R) {
      pivEl = pp[L];
      piv = orders[L];

      while (L < R) {
 8001868:	dbd1      	blt.n	800180e <quicksort+0x2e>
          pp[R] = pp[L];
          orders[R--] = orders[L];
        }
      }

      pp[L] = pivEl;
 800186a:	9a01      	ldr	r2, [sp, #4]
      orders[L] = piv;
      beg[i + 1] = L + 1;
      end[i + 1] = end[i];
 800186c:	af42      	add	r7, sp, #264	; 0x108
          pp[R] = pp[L];
          orders[R--] = orders[L];
        }
      }

      pp[L] = pivEl;
 800186e:	514a      	str	r2, [r1, r5]
      orders[L] = piv;
      beg[i + 1] = L + 1;
 8001870:	1c5e      	adds	r6, r3, #1
 8001872:	1c62      	adds	r2, r4, #1
 8001874:	ad02      	add	r5, sp, #8
          orders[R--] = orders[L];
        }
      }

      pp[L] = pivEl;
      orders[L] = piv;
 8001876:	f8ca c000 	str.w	ip, [sl]
      beg[i + 1] = L + 1;
 800187a:	f845 6022 	str.w	r6, [r5, r2, lsl #2]
      end[i + 1] = end[i];
      end[i++] = L;
 800187e:	eb07 0c84 	add.w	ip, r7, r4, lsl #2
      }

      pp[L] = pivEl;
      orders[L] = piv;
      beg[i + 1] = L + 1;
      end[i + 1] = end[i];
 8001882:	eb07 0582 	add.w	r5, r7, r2, lsl #2
 8001886:	f845 8c80 	str.w	r8, [r5, #-128]
      end[i++] = L;

      if (end[i] - beg[i] > end[i - 1] - beg[i - 1]) {
 800188a:	af02      	add	r7, sp, #8

      pp[L] = pivEl;
      orders[L] = piv;
      beg[i + 1] = L + 1;
      end[i + 1] = end[i];
      end[i++] = L;
 800188c:	f84c 3c80 	str.w	r3, [ip, #-128]

      if (end[i] - beg[i] > end[i - 1] - beg[i - 1]) {
 8001890:	f855 8c80 	ldr.w	r8, [r5, #-128]
 8001894:	f857 9024 	ldr.w	r9, [r7, r4, lsl #2]
 8001898:	ebc6 0b08 	rsb	fp, r6, r8
 800189c:	ebc9 0a03 	rsb	sl, r9, r3
 80018a0:	45d3      	cmp	fp, sl
 80018a2:	dd09      	ble.n	80018b8 <quicksort+0xd8>
        swap = beg[i];
        beg[i] = beg[i - 1];
 80018a4:	f847 9022 	str.w	r9, [r7, r2, lsl #2]
        beg[i - 1] = swap;

        swap = end[i];
        end[i] = end[i - 1];
 80018a8:	f845 3c80 	str.w	r3, [r5, #-128]
      end[i++] = L;

      if (end[i] - beg[i] > end[i - 1] - beg[i - 1]) {
        swap = beg[i];
        beg[i] = beg[i - 1];
        beg[i - 1] = swap;
 80018ac:	f847 6024 	str.w	r6, [r7, r4, lsl #2]

        swap = end[i];
        end[i] = end[i - 1];
        end[i - 1] = swap;
 80018b0:	f84c 8c80 	str.w	r8, [ip, #-128]
 80018b4:	e000      	b.n	80018b8 <quicksort+0xd8>
      }
    } else {
      i--;
 80018b6:	1e62      	subs	r2, r4, #1
  int L, R, swap;

  beg[0] = 0;
  end[0] = elements;

  while (i >= 0) {
 80018b8:	1c54      	adds	r4, r2, #1
 80018ba:	d001      	beq.n	80018c0 <quicksort+0xe0>
 80018bc:	4614      	mov	r4, r2
 80018be:	e795      	b.n	80017ec <quicksort+0xc>
      }
    } else {
      i--;
    }
  }
}
 80018c0:	b043      	add	sp, #268	; 0x10c
 80018c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080018c6 <quicksort_cmp>:

void quicksort_cmp(int* orders, void** pp, int elements,
    int(*orderfunc)(void* p)) {
 80018c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018ca:	4605      	mov	r5, r0
 80018cc:	460f      	mov	r7, r1
 80018ce:	4616      	mov	r6, r2
 80018d0:	4698      	mov	r8, r3
  int i;
  for (i = 0; i < elements; i++) {
 80018d2:	2400      	movs	r4, #0
 80018d4:	42b4      	cmp	r4, r6
 80018d6:	da06      	bge.n	80018e6 <quicksort_cmp+0x20>
    orders[i] = orderfunc(pp[i]);
 80018d8:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 80018dc:	47c0      	blx	r8
 80018de:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
}

void quicksort_cmp(int* orders, void** pp, int elements,
    int(*orderfunc)(void* p)) {
  int i;
  for (i = 0; i < elements; i++) {
 80018e2:	3401      	adds	r4, #1
 80018e4:	e7f6      	b.n	80018d4 <quicksort_cmp+0xe>
    orders[i] = orderfunc(pp[i]);
  }
  quicksort(orders, pp, elements);
 80018e6:	4628      	mov	r0, r5
 80018e8:	4639      	mov	r1, r7
 80018ea:	4632      	mov	r2, r6
}
 80018ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    int(*orderfunc)(void* p)) {
  int i;
  for (i = 0; i < elements; i++) {
    orders[i] = orderfunc(pp[i]);
  }
  quicksort(orders, pp, elements);
 80018f0:	f7ff bf76 	b.w	80017e0 <quicksort>

080018f4 <strarg_next>:

  return TRUE;
}

int strarg_next(cursor *c, strarg* arg) {
  return _strarg_next(c, arg, 0, FALSE);
 80018f4:	2200      	movs	r2, #0
 80018f6:	4613      	mov	r3, r2
 80018f8:	f7ff bd90 	b.w	800141c <_strarg_next>

080018fc <strarg_next_delim>:
}

int strarg_next_delim(cursor *c, strarg* arg, const char *delim) {
  return _strarg_next(c, arg, delim, FALSE);
 80018fc:	2300      	movs	r3, #0
 80018fe:	f7ff bd8d 	b.w	800141c <_strarg_next>

08001902 <strarg_next_str>:
}

int strarg_next_str(cursor *c, strarg* arg) {
  return _strarg_next(c, arg, 0, TRUE);
 8001902:	2200      	movs	r2, #0
 8001904:	2301      	movs	r3, #1
 8001906:	f7ff bd89 	b.w	800141c <_strarg_next>

0800190a <strarg_next_delim_str>:
}

int strarg_next_delim_str(cursor *c, strarg* arg, const char *delim) {
  return _strarg_next(c, arg, delim, TRUE);
 800190a:	2301      	movs	r3, #1
 800190c:	f7ff bd86 	b.w	800141c <_strarg_next>

08001910 <strarg_init>:
}

void strarg_init(cursor *c, char* s, int len) {
 8001910:	b510      	push	{r4, lr}
 8001912:	4604      	mov	r4, r0
  c->s = s;
 8001914:	6001      	str	r1, [r0, #0]
  c->wrk = s;
 8001916:	6041      	str	r1, [r0, #4]
  if (len) {
 8001918:	b10a      	cbz	r2, 800191e <strarg_init+0xe>
    c->len = len;
 800191a:	6082      	str	r2, [r0, #8]
 800191c:	bd10      	pop	{r4, pc}
  } else {
    c->len = strlen(s);
 800191e:	4608      	mov	r0, r1
 8001920:	f7ff fa9c 	bl	8000e5c <strlen>
 8001924:	60a0      	str	r0, [r4, #8]
 8001926:	bd10      	pop	{r4, pc}

08001928 <print_task>:

volatile static u8_t _g_timer_ix = 0;

static void task_insert_timer(task_timer *timer, sys_time actual_time);

static void print_task(u8_t io, task *t, const char *prefix) {
 8001928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800192c:	b08c      	sub	sp, #48	; 0x30
  if (t) {
 800192e:	2900      	cmp	r1, #0
 8001930:	d045      	beq.n	80019be <print_task+0x96>
        "%s        next:%08x  run_reqs:%i\n"
      ,
      prefix,
      t->_ix,
      t->f,
      t->flags & TASK_EXE ? " E" : "/e",
 8001932:	788c      	ldrb	r4, [r1, #2]

static void task_insert_timer(task_timer *timer, sys_time actual_time);

static void print_task(u8_t io, task *t, const char *prefix) {
  if (t) {
    ioprint(io, "%s ix:%02x  f:%08x  FLAGS:%s%s%s%s%s%s  arg:%08x  argp:%08x\n"
 8001934:	4f25      	ldr	r7, [pc, #148]	; (80019cc <print_task+0xa4>)
 8001936:	4d26      	ldr	r5, [pc, #152]	; (80019d0 <print_task+0xa8>)
 8001938:	f014 0f80 	tst.w	r4, #128	; 0x80
 800193c:	bf0c      	ite	eq
 800193e:	46aa      	moveq	sl, r5
 8001940:	46ba      	movne	sl, r7
 8001942:	4f24      	ldr	r7, [pc, #144]	; (80019d4 <print_task+0xac>)
 8001944:	4d24      	ldr	r5, [pc, #144]	; (80019d8 <print_task+0xb0>)
 8001946:	f014 0f01 	tst.w	r4, #1
 800194a:	bf0c      	ite	eq
 800194c:	46a9      	moveq	r9, r5
 800194e:	46b9      	movne	r9, r7
 8001950:	4f22      	ldr	r7, [pc, #136]	; (80019dc <print_task+0xb4>)
 8001952:	4d23      	ldr	r5, [pc, #140]	; (80019e0 <print_task+0xb8>)
 8001954:	f014 0f40 	tst.w	r4, #64	; 0x40
 8001958:	bf0c      	ite	eq
 800195a:	46a8      	moveq	r8, r5
 800195c:	46b8      	movne	r8, r7
 800195e:	4f21      	ldr	r7, [pc, #132]	; (80019e4 <print_task+0xbc>)
 8001960:	4d21      	ldr	r5, [pc, #132]	; (80019e8 <print_task+0xc0>)
 8001962:	f014 0f08 	tst.w	r4, #8
 8001966:	bf0c      	ite	eq
 8001968:	46ac      	moveq	ip, r5
 800196a:	46bc      	movne	ip, r7
 800196c:	4f1f      	ldr	r7, [pc, #124]	; (80019ec <print_task+0xc4>)
 800196e:	4d20      	ldr	r5, [pc, #128]	; (80019f0 <print_task+0xc8>)
 8001970:	f014 0f02 	tst.w	r4, #2
 8001974:	bf18      	it	ne
 8001976:	463d      	movne	r5, r7
 8001978:	f014 0f04 	tst.w	r4, #4
 800197c:	4f1d      	ldr	r7, [pc, #116]	; (80019f4 <print_task+0xcc>)
 800197e:	4c1e      	ldr	r4, [pc, #120]	; (80019f8 <print_task+0xd0>)
 8001980:	780b      	ldrb	r3, [r1, #0]
 8001982:	bf0c      	ite	eq
 8001984:	46be      	moveq	lr, r7
 8001986:	46a6      	movne	lr, r4
 8001988:	68cc      	ldr	r4, [r1, #12]
      t->flags & TASK_STATIC ? " S" : "/s",
      t->arg,
      t->arg_p,
      prefix,
      t->_next,
      t->run_requests);
 800198a:	78cf      	ldrb	r7, [r1, #3]

static void task_insert_timer(task_timer *timer, sys_time actual_time);

static void print_task(u8_t io, task *t, const char *prefix) {
  if (t) {
    ioprint(io, "%s ix:%02x  f:%08x  FLAGS:%s%s%s%s%s%s  arg:%08x  argp:%08x\n"
 800198c:	e88d 0410 	stmia.w	sp, {r4, sl}
 8001990:	f8cd 9008 	str.w	r9, [sp, #8]
 8001994:	f8cd 800c 	str.w	r8, [sp, #12]
 8001998:	f8cd c010 	str.w	ip, [sp, #16]
 800199c:	9505      	str	r5, [sp, #20]
 800199e:	f8cd e018 	str.w	lr, [sp, #24]
 80019a2:	684c      	ldr	r4, [r1, #4]
 80019a4:	9407      	str	r4, [sp, #28]
 80019a6:	688c      	ldr	r4, [r1, #8]
 80019a8:	9209      	str	r2, [sp, #36]	; 0x24
 80019aa:	9408      	str	r4, [sp, #32]
 80019ac:	6949      	ldr	r1, [r1, #20]
 80019ae:	970b      	str	r7, [sp, #44]	; 0x2c
 80019b0:	910a      	str	r1, [sp, #40]	; 0x28
 80019b2:	4912      	ldr	r1, [pc, #72]	; (80019fc <print_task+0xd4>)
 80019b4:	f7ff fc06 	bl	80011c4 <ioprint>
      t->_next,
      t->run_requests);
  } else {
    ioprint(io, "%s NONE\n", prefix);
  }
}
 80019b8:	b00c      	add	sp, #48	; 0x30
 80019ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      t->arg_p,
      prefix,
      t->_next,
      t->run_requests);
  } else {
    ioprint(io, "%s NONE\n", prefix);
 80019be:	4910      	ldr	r1, [pc, #64]	; (8001a00 <print_task+0xd8>)
  }
}
 80019c0:	b00c      	add	sp, #48	; 0x30
 80019c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      t->arg_p,
      prefix,
      t->_next,
      t->run_requests);
  } else {
    ioprint(io, "%s NONE\n", prefix);
 80019c6:	f7ff bbfd 	b.w	80011c4 <ioprint>
 80019ca:	bf00      	nop
 80019cc:	0801038c 	.word	0x0801038c
 80019d0:	0801038f 	.word	0x0801038f
 80019d4:	08010392 	.word	0x08010392
 80019d8:	08010395 	.word	0x08010395
 80019dc:	08010398 	.word	0x08010398
 80019e0:	0801039b 	.word	0x0801039b
 80019e4:	0801039e 	.word	0x0801039e
 80019e8:	080103a1 	.word	0x080103a1
 80019ec:	080103a4 	.word	0x080103a4
 80019f0:	080103a7 	.word	0x080103a7
 80019f4:	080103ad 	.word	0x080103ad
 80019f8:	080103aa 	.word	0x080103aa
 80019fc:	080103b0 	.word	0x080103b0
 8001a00:	0801040e 	.word	0x0801040e

08001a04 <task_insert_timer>:


static void task_insert_timer(task_timer *timer, sys_time actual_time) {
  timer->start_time = actual_time;

  if (task_sys.first_timer == 0) {
 8001a04:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <task_insert_timer+0x60>)
}

#endif // CONFIG_TASKQ_MUTEX


static void task_insert_timer(task_timer *timer, sys_time actual_time) {
 8001a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  timer->start_time = actual_time;

  if (task_sys.first_timer == 0) {
 8001a0a:	68dd      	ldr	r5, [r3, #12]
}

#endif // CONFIG_TASKQ_MUTEX


static void task_insert_timer(task_timer *timer, sys_time actual_time) {
 8001a0c:	4604      	mov	r4, r0
  timer->start_time = actual_time;
 8001a0e:	6081      	str	r1, [r0, #8]
 8001a10:	4698      	mov	r8, r3

  if (task_sys.first_timer == 0) {
 8001a12:	b115      	cbz	r5, 8001a1a <task_insert_timer+0x16>
 8001a14:	2600      	movs	r6, #0
 8001a16:	4633      	mov	r3, r6
 8001a18:	e00f      	b.n	8001a3a <task_insert_timer+0x36>
    // first only timer entry
    timer->_next = 0;
 8001a1a:	6205      	str	r5, [r0, #32]
    task_sys.first_timer = timer;
 8001a1c:	60d8      	str	r0, [r3, #12]
 8001a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    task_timer *prev_timer = 0;
    int guard = 0;
    while (cur_timer && timer->start_time >= cur_timer->start_time) {
      prev_timer = cur_timer;
      cur_timer = cur_timer->_next;
      guard++;
 8001a22:	3601      	adds	r6, #1
      ASSERT(guard < 128);
 8001a24:	2e7f      	cmp	r6, #127	; 0x7f
    task_timer *cur_timer = task_sys.first_timer;
    task_timer *prev_timer = 0;
    int guard = 0;
    while (cur_timer && timer->start_time >= cur_timer->start_time) {
      prev_timer = cur_timer;
      cur_timer = cur_timer->_next;
 8001a26:	6a2f      	ldr	r7, [r5, #32]
      guard++;
      ASSERT(guard < 128);
 8001a28:	dd04      	ble.n	8001a34 <task_insert_timer+0x30>
 8001a2a:	480f      	ldr	r0, [pc, #60]	; (8001a68 <task_insert_timer+0x64>)
 8001a2c:	f240 2166 	movw	r1, #614	; 0x266
 8001a30:	f7fe fed6 	bl	80007e0 <SYS_assert>
    task_sys.first_timer = timer;
  } else {
    task_timer *cur_timer = task_sys.first_timer;
    task_timer *prev_timer = 0;
    int guard = 0;
    while (cur_timer && timer->start_time >= cur_timer->start_time) {
 8001a34:	b18f      	cbz	r7, 8001a5a <task_insert_timer+0x56>
 8001a36:	462b      	mov	r3, r5
 8001a38:	463d      	mov	r5, r7
 8001a3a:	68a1      	ldr	r1, [r4, #8]
 8001a3c:	68aa      	ldr	r2, [r5, #8]
 8001a3e:	4291      	cmp	r1, r2
 8001a40:	d2ef      	bcs.n	8001a22 <task_insert_timer+0x1e>
      prev_timer = cur_timer;
      cur_timer = cur_timer->_next;
      guard++;
      ASSERT(guard < 128);
    }
    if (prev_timer == 0) {
 8001a42:	b933      	cbnz	r3, 8001a52 <task_insert_timer+0x4e>
      // earliest timer entry
      timer->_next = task_sys.first_timer;
 8001a44:	f8d8 300c 	ldr.w	r3, [r8, #12]
      task_sys.first_timer = timer;
 8001a48:	f8c8 400c 	str.w	r4, [r8, #12]
      guard++;
      ASSERT(guard < 128);
    }
    if (prev_timer == 0) {
      // earliest timer entry
      timer->_next = task_sys.first_timer;
 8001a4c:	6223      	str	r3, [r4, #32]
 8001a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      // latest timer entry
      prev_timer->_next = timer;
      timer->_next = 0;
    } else {
      // in the middle
      prev_timer->_next = timer;
 8001a52:	621c      	str	r4, [r3, #32]
      timer->_next = cur_timer;
 8001a54:	6225      	str	r5, [r4, #32]
 8001a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      // earliest timer entry
      timer->_next = task_sys.first_timer;
      task_sys.first_timer = timer;
    } else if (cur_timer == 0) {
      // latest timer entry
      prev_timer->_next = timer;
 8001a5a:	622c      	str	r4, [r5, #32]
      timer->_next = 0;
 8001a5c:	6227      	str	r7, [r4, #32]
 8001a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a62:	bf00      	nop
 8001a64:	200001f0 	.word	0x200001f0
 8001a68:	08010417 	.word	0x08010417

08001a6c <TASK_dump_pool>:
#define TASK_DUMP_OUTPUT "  task list __ "
#define TASK_TIM_DUMP_OUTPUT "  tmr list __ "
void TASK_dump_pool(u8_t io) {
  int i, j;
  for (i = 0; i <= (CONFIG_TASK_POOL-1)/32; i++) {
       if (task_pool.mask[i]) {
 8001a6c:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <TASK_dump_pool+0x3c>)
  }
}

#define TASK_DUMP_OUTPUT "  task list __ "
#define TASK_TIM_DUMP_OUTPUT "  tmr list __ "
void TASK_dump_pool(u8_t io) {
 8001a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int i, j;
  for (i = 0; i <= (CONFIG_TASK_POOL-1)/32; i++) {
       if (task_pool.mask[i]) {
 8001a72:	f8d3 2314 	ldr.w	r2, [r3, #788]	; 0x314
  }
}

#define TASK_DUMP_OUTPUT "  task list __ "
#define TASK_TIM_DUMP_OUTPUT "  tmr list __ "
void TASK_dump_pool(u8_t io) {
 8001a76:	4605      	mov	r5, r0
  int i, j;
  for (i = 0; i <= (CONFIG_TASK_POOL-1)/32; i++) {
       if (task_pool.mask[i]) {
 8001a78:	b1a2      	cbz	r2, 8001aa4 <TASK_dump_pool+0x38>
 8001a7a:	2400      	movs	r4, #0
 8001a7c:	f04f 0818 	mov.w	r8, #24
 8001a80:	f103 0714 	add.w	r7, r3, #20
 8001a84:	fb08 7604 	mla	r6, r8, r4, r7
         for (j = 0; j < 32; j++) {
           int ix = i*32+j;
           ioprint(io, "TASK %i @ %08x\n", ix, &task_pool.task[ix]);
 8001a88:	4622      	mov	r2, r4
 8001a8a:	4628      	mov	r0, r5
 8001a8c:	4907      	ldr	r1, [pc, #28]	; (8001aac <TASK_dump_pool+0x40>)
 8001a8e:	4633      	mov	r3, r6
 8001a90:	f7ff fb98 	bl	80011c4 <ioprint>
#define TASK_TIM_DUMP_OUTPUT "  tmr list __ "
void TASK_dump_pool(u8_t io) {
  int i, j;
  for (i = 0; i <= (CONFIG_TASK_POOL-1)/32; i++) {
       if (task_pool.mask[i]) {
         for (j = 0; j < 32; j++) {
 8001a94:	3401      	adds	r4, #1
           int ix = i*32+j;
           ioprint(io, "TASK %i @ %08x\n", ix, &task_pool.task[ix]);
           print_task(io, &task_pool.task[ix], "");
 8001a96:	4628      	mov	r0, r5
 8001a98:	4631      	mov	r1, r6
 8001a9a:	4a05      	ldr	r2, [pc, #20]	; (8001ab0 <TASK_dump_pool+0x44>)
 8001a9c:	f7ff ff44 	bl	8001928 <print_task>
#define TASK_TIM_DUMP_OUTPUT "  tmr list __ "
void TASK_dump_pool(u8_t io) {
  int i, j;
  for (i = 0; i <= (CONFIG_TASK_POOL-1)/32; i++) {
       if (task_pool.mask[i]) {
         for (j = 0; j < 32; j++) {
 8001aa0:	2c20      	cmp	r4, #32
 8001aa2:	d1ef      	bne.n	8001a84 <TASK_dump_pool+0x18>
 8001aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001aa8:	200001f0 	.word	0x200001f0
 8001aac:	0801043b 	.word	0x0801043b
 8001ab0:	08012faf 	.word	0x08012faf

08001ab4 <TASK_dump>:
         }
       }
     }
}

void TASK_dump(u8_t io) {
 8001ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ioprint(io, "TASK SYSTEM\n-----------\n");
  print_task(io, task_sys.current, "  current");
 8001ab8:	4e51      	ldr	r6, [pc, #324]	; (8001c00 <TASK_dump+0x14c>)
         }
       }
     }
}

void TASK_dump(u8_t io) {
 8001aba:	b08f      	sub	sp, #60	; 0x3c
 8001abc:	4604      	mov	r4, r0
  ioprint(io, "TASK SYSTEM\n-----------\n");
 8001abe:	4951      	ldr	r1, [pc, #324]	; (8001c04 <TASK_dump+0x150>)
 8001ac0:	f7ff fb80 	bl	80011c4 <ioprint>
  print_task(io, task_sys.current, "  current");
 8001ac4:	4a50      	ldr	r2, [pc, #320]	; (8001c08 <TASK_dump+0x154>)
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	68b1      	ldr	r1, [r6, #8]
 8001aca:	f7ff ff2d 	bl	8001928 <print_task>

  char lst[sizeof(TASK_DUMP_OUTPUT)];
  memcpy(lst, TASK_DUMP_OUTPUT, sizeof(TASK_DUMP_OUTPUT));
 8001ace:	4b4f      	ldr	r3, [pc, #316]	; (8001c0c <TASK_dump+0x158>)
 8001ad0:	ad0a      	add	r5, sp, #40	; 0x28
 8001ad2:	f103 0210 	add.w	r2, r3, #16
 8001ad6:	46a8      	mov	r8, r5
 8001ad8:	6818      	ldr	r0, [r3, #0]
 8001ada:	6859      	ldr	r1, [r3, #4]
 8001adc:	462f      	mov	r7, r5
 8001ade:	c703      	stmia	r7!, {r0, r1}
 8001ae0:	3308      	adds	r3, #8
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	463d      	mov	r5, r7
 8001ae6:	d1f7      	bne.n	8001ad8 <TASK_dump+0x24>
  char* p = (char*)strchr(lst, '_');
 8001ae8:	4640      	mov	r0, r8
 8001aea:	215f      	movs	r1, #95	; 0x5f
 8001aec:	f7ff fc3b 	bl	8001366 <strchr>
  task* ct = (task *)task_sys.head;
 8001af0:	6835      	ldr	r5, [r6, #0]
  ioprint(io, "TASK SYSTEM\n-----------\n");
  print_task(io, task_sys.current, "  current");

  char lst[sizeof(TASK_DUMP_OUTPUT)];
  memcpy(lst, TASK_DUMP_OUTPUT, sizeof(TASK_DUMP_OUTPUT));
  char* p = (char*)strchr(lst, '_');
 8001af2:	4607      	mov	r7, r0
  task* ct = (task *)task_sys.head;
  int ix = 1;
 8001af4:	2201      	movs	r2, #1
  while (ct) {
 8001af6:	b16d      	cbz	r5, 8001b14 <TASK_dump+0x60>
    sprint(p, "%02i", ix++);
 8001af8:	4638      	mov	r0, r7
 8001afa:	4945      	ldr	r1, [pc, #276]	; (8001c10 <TASK_dump+0x15c>)
 8001afc:	f102 0901 	add.w	r9, r2, #1
 8001b00:	f7ff fbbc 	bl	800127c <sprint>
    print_task(io, ct, lst);
 8001b04:	4629      	mov	r1, r5
 8001b06:	4642      	mov	r2, r8
 8001b08:	4620      	mov	r0, r4
 8001b0a:	f7ff ff0d 	bl	8001928 <print_task>
    ct = ct->_next;
 8001b0e:	696d      	ldr	r5, [r5, #20]
  memcpy(lst, TASK_DUMP_OUTPUT, sizeof(TASK_DUMP_OUTPUT));
  char* p = (char*)strchr(lst, '_');
  task* ct = (task *)task_sys.head;
  int ix = 1;
  while (ct) {
    sprint(p, "%02i", ix++);
 8001b10:	464a      	mov	r2, r9
 8001b12:	e7f0      	b.n	8001af6 <TASK_dump+0x42>
    print_task(io, ct, lst);
    ct = ct->_next;
  }
  print_task(io, (task *)task_sys.last, "  last   ");
 8001b14:	4a3f      	ldr	r2, [pc, #252]	; (8001c14 <TASK_dump+0x160>)
 8001b16:	4620      	mov	r0, r4
 8001b18:	6871      	ldr	r1, [r6, #4]
 8001b1a:	f7ff ff05 	bl	8001928 <print_task>

  ioprint(io, "  pool bitmap ");
 8001b1e:	4620      	mov	r0, r4
 8001b20:	493d      	ldr	r1, [pc, #244]	; (8001c18 <TASK_dump+0x164>)
 8001b22:	f7ff fb4f 	bl	80011c4 <ioprint>
  for (ix = 0; ix < sizeof(task_pool.mask)/sizeof(task_pool.mask[0]); ix++) {
    ioprint(io, "%032b ", task_pool.mask[ix]);
 8001b26:	4620      	mov	r0, r4
 8001b28:	493c      	ldr	r1, [pc, #240]	; (8001c1c <TASK_dump+0x168>)
 8001b2a:	f8d6 2314 	ldr.w	r2, [r6, #788]	; 0x314
 8001b2e:	f7ff fb49 	bl	80011c4 <ioprint>
  }
  ioprint(io, "\n");
 8001b32:	4620      	mov	r0, r4
 8001b34:	493a      	ldr	r1, [pc, #232]	; (8001c20 <TASK_dump+0x16c>)
 8001b36:	f7ff fb45 	bl	80011c4 <ioprint>
 8001b3a:	4f3a      	ldr	r7, [pc, #232]	; (8001c24 <TASK_dump+0x170>)

  for (ix = 0; ix < sizeof(task_pool.mask)/sizeof(task_pool.mask[0]); ix++) {
    int bit;
    for (bit = 0; bit < 32; bit++) {
      if ((task_pool.mask[ix] & (1<<bit)) == 0) {
 8001b3c:	f04f 0801 	mov.w	r8, #1
 8001b40:	f04f 0918 	mov.w	r9, #24
 8001b44:	fa08 f205 	lsl.w	r2, r8, r5
 8001b48:	f8d6 3314 	ldr.w	r3, [r6, #788]	; 0x314
 8001b4c:	421a      	tst	r2, r3
 8001b4e:	d105      	bne.n	8001b5c <TASK_dump+0xa8>
        print_task(io, &task_pool.task[ix*32 + bit], " ");
 8001b50:	4620      	mov	r0, r4
 8001b52:	fb09 7105 	mla	r1, r9, r5, r7
 8001b56:	4a34      	ldr	r2, [pc, #208]	; (8001c28 <TASK_dump+0x174>)
 8001b58:	f7ff fee6 	bl	8001928 <print_task>
  }
  ioprint(io, "\n");

  for (ix = 0; ix < sizeof(task_pool.mask)/sizeof(task_pool.mask[0]); ix++) {
    int bit;
    for (bit = 0; bit < 32; bit++) {
 8001b5c:	3501      	adds	r5, #1
 8001b5e:	2d20      	cmp	r5, #32
 8001b60:	d1f0      	bne.n	8001b44 <TASK_dump+0x90>
      if ((task_pool.mask[ix] & (1<<bit)) == 0) {
        print_task(io, &task_pool.task[ix*32 + bit], " ");
      }
    }
  }
  ioprint(io, "\n");
 8001b62:	4620      	mov	r0, r4
 8001b64:	492e      	ldr	r1, [pc, #184]	; (8001c20 <TASK_dump+0x16c>)
 8001b66:	f7ff fb2d 	bl	80011c4 <ioprint>

  ioprint(io, "  timers\n");
 8001b6a:	4620      	mov	r0, r4
 8001b6c:	492f      	ldr	r1, [pc, #188]	; (8001c2c <TASK_dump+0x178>)
 8001b6e:	f7ff fb29 	bl	80011c4 <ioprint>
  char lst2[sizeof(TASK_TIM_DUMP_OUTPUT)];
  memcpy(lst2, TASK_TIM_DUMP_OUTPUT, sizeof(TASK_TIM_DUMP_OUTPUT));
 8001b72:	4b2f      	ldr	r3, [pc, #188]	; (8001c30 <TASK_dump+0x17c>)
 8001b74:	ad06      	add	r5, sp, #24
 8001b76:	f103 0208 	add.w	r2, r3, #8
 8001b7a:	46a8      	mov	r8, r5
 8001b7c:	6818      	ldr	r0, [r3, #0]
 8001b7e:	6859      	ldr	r1, [r3, #4]
 8001b80:	462f      	mov	r7, r5
 8001b82:	c703      	stmia	r7!, {r0, r1}
 8001b84:	3308      	adds	r3, #8
 8001b86:	4293      	cmp	r3, r2
 8001b88:	463d      	mov	r5, r7
 8001b8a:	d1f7      	bne.n	8001b7c <TASK_dump+0xc8>
 8001b8c:	889a      	ldrh	r2, [r3, #4]
 8001b8e:	6818      	ldr	r0, [r3, #0]
 8001b90:	799b      	ldrb	r3, [r3, #6]
 8001b92:	80ba      	strh	r2, [r7, #4]
 8001b94:	6038      	str	r0, [r7, #0]
 8001b96:	71bb      	strb	r3, [r7, #6]
  p = (char*)strchr(lst2, '_');
 8001b98:	215f      	movs	r1, #95	; 0x5f
 8001b9a:	4640      	mov	r0, r8
 8001b9c:	f7ff fbe3 	bl	8001366 <strchr>
  task_timer* tt = task_sys.first_timer;
 8001ba0:	68f5      	ldr	r5, [r6, #12]
  ioprint(io, "\n");

  ioprint(io, "  timers\n");
  char lst2[sizeof(TASK_TIM_DUMP_OUTPUT)];
  memcpy(lst2, TASK_TIM_DUMP_OUTPUT, sizeof(TASK_TIM_DUMP_OUTPUT));
  p = (char*)strchr(lst2, '_');
 8001ba2:	4607      	mov	r7, r0
  task_timer* tt = task_sys.first_timer;
  ix = 1;
  sys_time now = SYS_get_time_ms();
 8001ba4:	f7fe fd12 	bl	80005cc <SYS_get_time_ms>
  }
}

static void print_timer(u8_t io, task_timer *t, const char *prefix, sys_time now) {
  if (t) {
    ioprint(io, "%s %s  start:%08x (%+08x)  recurrent:%08x  next:%08x  [%s]\n",
 8001ba8:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8001c38 <TASK_dump+0x184>
 8001bac:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8001c3c <TASK_dump+0x188>
  char lst2[sizeof(TASK_TIM_DUMP_OUTPUT)];
  memcpy(lst2, TASK_TIM_DUMP_OUTPUT, sizeof(TASK_TIM_DUMP_OUTPUT));
  p = (char*)strchr(lst2, '_');
  task_timer* tt = task_sys.first_timer;
  ix = 1;
  sys_time now = SYS_get_time_ms();
 8001bb0:	4606      	mov	r6, r0
  ioprint(io, "  timers\n");
  char lst2[sizeof(TASK_TIM_DUMP_OUTPUT)];
  memcpy(lst2, TASK_TIM_DUMP_OUTPUT, sizeof(TASK_TIM_DUMP_OUTPUT));
  p = (char*)strchr(lst2, '_');
  task_timer* tt = task_sys.first_timer;
  ix = 1;
 8001bb2:	2201      	movs	r2, #1
  sys_time now = SYS_get_time_ms();
  while (tt) {
 8001bb4:	b30d      	cbz	r5, 8001bfa <TASK_dump+0x146>
    sprint(p, "%02i", ix++);
 8001bb6:	4638      	mov	r0, r7
 8001bb8:	4915      	ldr	r1, [pc, #84]	; (8001c10 <TASK_dump+0x15c>)
 8001bba:	f102 0b01 	add.w	fp, r2, #1
 8001bbe:	f7ff fb5d 	bl	800127c <sprint>
  if (t) {
    ioprint(io, "%s %s  start:%08x (%+08x)  recurrent:%08x  next:%08x  [%s]\n",
        prefix,
        t->alive ? "ALIVE": "DEAD ",
        (u32_t)t->start_time,
        (u32_t)(t->start_time - now),
 8001bc2:	68aa      	ldr	r2, [r5, #8]
  }
}

static void print_timer(u8_t io, task_timer *t, const char *prefix, sys_time now) {
  if (t) {
    ioprint(io, "%s %s  start:%08x (%+08x)  recurrent:%08x  next:%08x  [%s]\n",
 8001bc4:	7e2b      	ldrb	r3, [r5, #24]
 8001bc6:	9200      	str	r2, [sp, #0]
 8001bc8:	1b92      	subs	r2, r2, r6
 8001bca:	9201      	str	r2, [sp, #4]
 8001bcc:	68ea      	ldr	r2, [r5, #12]
 8001bce:	4620      	mov	r0, r4
 8001bd0:	9202      	str	r2, [sp, #8]
 8001bd2:	6a2a      	ldr	r2, [r5, #32]
 8001bd4:	4917      	ldr	r1, [pc, #92]	; (8001c34 <TASK_dump+0x180>)
 8001bd6:	9203      	str	r2, [sp, #12]
 8001bd8:	69ea      	ldr	r2, [r5, #28]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	bf0c      	ite	eq
 8001bde:	464b      	moveq	r3, r9
 8001be0:	4653      	movne	r3, sl
 8001be2:	9204      	str	r2, [sp, #16]
 8001be4:	4642      	mov	r2, r8
 8001be6:	f7ff faed 	bl	80011c4 <ioprint>
        (u32_t)t->start_time,
        (u32_t)(t->start_time - now),
        (u32_t)(t->recurrent_time),
        (u32_t)(t->_next),
        t->name);
    print_task(io, t->task, prefix);
 8001bea:	6869      	ldr	r1, [r5, #4]
 8001bec:	4642      	mov	r2, r8
 8001bee:	4620      	mov	r0, r4
 8001bf0:	f7ff fe9a 	bl	8001928 <print_task>
  ix = 1;
  sys_time now = SYS_get_time_ms();
  while (tt) {
    sprint(p, "%02i", ix++);
    print_timer(io, tt, lst2, now);
    tt = tt->_next;
 8001bf4:	6a2d      	ldr	r5, [r5, #32]
  p = (char*)strchr(lst2, '_');
  task_timer* tt = task_sys.first_timer;
  ix = 1;
  sys_time now = SYS_get_time_ms();
  while (tt) {
    sprint(p, "%02i", ix++);
 8001bf6:	465a      	mov	r2, fp
 8001bf8:	e7dc      	b.n	8001bb4 <TASK_dump+0x100>
    print_timer(io, tt, lst2, now);
    tt = tt->_next;
  }
}
 8001bfa:	b00f      	add	sp, #60	; 0x3c
 8001bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c00:	200001f0 	.word	0x200001f0
 8001c04:	08010457 	.word	0x08010457
 8001c08:	08010470 	.word	0x08010470
 8001c0c:	080104e5 	.word	0x080104e5
 8001c10:	0801047a 	.word	0x0801047a
 8001c14:	0801047f 	.word	0x0801047f
 8001c18:	08010489 	.word	0x08010489
 8001c1c:	08010498 	.word	0x08010498
 8001c20:	0801197d 	.word	0x0801197d
 8001c24:	20000204 	.word	0x20000204
 8001c28:	08011746 	.word	0x08011746
 8001c2c:	0801049f 	.word	0x0801049f
 8001c30:	080104f5 	.word	0x080104f5
 8001c34:	080104a9 	.word	0x080104a9
 8001c38:	08010451 	.word	0x08010451
 8001c3c:	0801044b 	.word	0x0801044b

08001c40 <TASK_init>:

void TASK_init() {
 8001c40:	b538      	push	{r3, r4, r5, lr}
  int i;
  DBG(D_TASK, D_DEBUG, "TASK init\n");
 8001c42:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <TASK_init+0x54>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	075b      	lsls	r3, r3, #29
 8001c48:	d505      	bpl.n	8001c56 <TASK_init+0x16>
 8001c4a:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <TASK_init+0x58>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	b913      	cbnz	r3, 8001c56 <TASK_init+0x16>
 8001c50:	4812      	ldr	r0, [pc, #72]	; (8001c9c <TASK_init+0x5c>)
 8001c52:	f007 faa3 	bl	800919c <arcprint>
  memset(&task_sys, 0, sizeof(task_sys));
 8001c56:	4c12      	ldr	r4, [pc, #72]	; (8001ca0 <TASK_init+0x60>)
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	2214      	movs	r2, #20
 8001c5e:	f00c fb97 	bl	800e390 <memset>
  memset(&task_pool, 0, sizeof(task_pool));
 8001c62:	f104 0014 	add.w	r0, r4, #20
 8001c66:	2100      	movs	r1, #0
 8001c68:	f44f 7241 	mov.w	r2, #772	; 0x304
 8001c6c:	f00c fb90 	bl	800e390 <memset>
 8001c70:	2100      	movs	r1, #0
  for (i = 0; i < CONFIG_TASK_POOL; i++) {
 8001c72:	460b      	mov	r3, r1
 8001c74:	2018      	movs	r0, #24
    task_pool.task[i]._ix = i;
    task_pool.mask[i/32] |= (1<<(i&0x1f));
 8001c76:	2401      	movs	r4, #1
  int i;
  DBG(D_TASK, D_DEBUG, "TASK init\n");
  memset(&task_sys, 0, sizeof(task_sys));
  memset(&task_pool, 0, sizeof(task_pool));
  for (i = 0; i < CONFIG_TASK_POOL; i++) {
    task_pool.task[i]._ix = i;
 8001c78:	4a09      	ldr	r2, [pc, #36]	; (8001ca0 <TASK_init+0x60>)
 8001c7a:	fb00 2503 	mla	r5, r0, r3, r2
 8001c7e:	752b      	strb	r3, [r5, #20]
    task_pool.mask[i/32] |= (1<<(i&0x1f));
 8001c80:	fa04 f503 	lsl.w	r5, r4, r3
void TASK_init() {
  int i;
  DBG(D_TASK, D_DEBUG, "TASK init\n");
  memset(&task_sys, 0, sizeof(task_sys));
  memset(&task_pool, 0, sizeof(task_pool));
  for (i = 0; i < CONFIG_TASK_POOL; i++) {
 8001c84:	3301      	adds	r3, #1
 8001c86:	2b20      	cmp	r3, #32
    task_pool.task[i]._ix = i;
    task_pool.mask[i/32] |= (1<<(i&0x1f));
 8001c88:	ea41 0105 	orr.w	r1, r1, r5
void TASK_init() {
  int i;
  DBG(D_TASK, D_DEBUG, "TASK init\n");
  memset(&task_sys, 0, sizeof(task_sys));
  memset(&task_pool, 0, sizeof(task_pool));
  for (i = 0; i < CONFIG_TASK_POOL; i++) {
 8001c8c:	d1f4      	bne.n	8001c78 <TASK_init+0x38>
 8001c8e:	f8c2 1314 	str.w	r1, [r2, #788]	; 0x314
 8001c92:	bd38      	pop	{r3, r4, r5, pc}
 8001c94:	20004f80 	.word	0x20004f80
 8001c98:	20004f84 	.word	0x20004f84
 8001c9c:	08010504 	.word	0x08010504
 8001ca0:	200001f0 	.word	0x200001f0

08001ca4 <TASK_create>:
  TRACE_TASK_ALLO(task->_ix);
  return task;

}

task* TASK_create(task_f f, u8_t flags) {
 8001ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ca6:	460e      	mov	r6, r1
 8001ca8:	4607      	mov	r7, r0
  enter_critical();
 8001caa:	f7fe fa2f 	bl	800010c <enter_critical>
  TQ_ENTER_CRITICAL;
  task* task = TASK_snatch_free(flags & TASK_STATIC);
 8001cae:	f006 0204 	and.w	r2, r6, #4
#endif
}

static task* TASK_snatch_free(int dir) {
  int i, j;
  if (dir) {
 8001cb2:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8001cb6:	4d24      	ldr	r5, [pc, #144]	; (8001d48 <TASK_create+0xa4>)
 8001cb8:	b962      	cbnz	r2, 8001cd4 <TASK_create+0x30>
        }
      }
    }
  } else {
    for (i = 0; i <= (CONFIG_TASK_POOL-1)/32; i++) {
      if (task_pool.mask[i]) {
 8001cba:	f8d5 2314 	ldr.w	r2, [r5, #788]	; 0x314
 8001cbe:	2a00      	cmp	r2, #0
 8001cc0:	d034      	beq.n	8001d2c <TASK_create+0x88>
        for (j = 0; j < 32; j++) {
          if (task_pool.mask[i] & (1<<j)) {
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	fa01 f403 	lsl.w	r4, r1, r3
 8001cc8:	4014      	ands	r4, r2
 8001cca:	d110      	bne.n	8001cee <TASK_create+0x4a>
      }
    }
  } else {
    for (i = 0; i <= (CONFIG_TASK_POOL-1)/32; i++) {
      if (task_pool.mask[i]) {
        for (j = 0; j < 32; j++) {
 8001ccc:	3301      	adds	r3, #1
 8001cce:	2b20      	cmp	r3, #32
 8001cd0:	d1f8      	bne.n	8001cc4 <TASK_create+0x20>
 8001cd2:	e02c      	b.n	8001d2e <TASK_create+0x8a>

static task* TASK_snatch_free(int dir) {
  int i, j;
  if (dir) {
    for (i = (CONFIG_TASK_POOL-1)/32; i >= 0; i--) {
      if (task_pool.mask[i]) {
 8001cd4:	f8d5 2314 	ldr.w	r2, [r5, #788]	; 0x314
 8001cd8:	b342      	cbz	r2, 8001d2c <TASK_create+0x88>
 8001cda:	231f      	movs	r3, #31
        for (j = 31; j >= 0; j--) {
          if (task_pool.mask[i] & (1<<j)) {
 8001cdc:	2101      	movs	r1, #1
 8001cde:	fa01 f403 	lsl.w	r4, r1, r3
 8001ce2:	4014      	ands	r4, r2
 8001ce4:	d103      	bne.n	8001cee <TASK_create+0x4a>
static task* TASK_snatch_free(int dir) {
  int i, j;
  if (dir) {
    for (i = (CONFIG_TASK_POOL-1)/32; i >= 0; i--) {
      if (task_pool.mask[i]) {
        for (j = 31; j >= 0; j--) {
 8001ce6:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8001cea:	d2f8      	bcs.n	8001cde <TASK_create+0x3a>
 8001cec:	e01f      	b.n	8001d2e <TASK_create+0x8a>
      }
    }
  }
  return 0;
task_found:
  task_pool.mask[i] &= ~(1<<j);
 8001cee:	2101      	movs	r1, #1
 8001cf0:	4099      	lsls	r1, r3
 8001cf2:	f8d5 2314 	ldr.w	r2, [r5, #788]	; 0x314
 8001cf6:	ea22 0201 	bic.w	r2, r2, r1
 8001cfa:	f8c5 2314 	str.w	r2, [r5, #788]	; 0x314
  task* task = &task_pool.task[i*32+j];
 8001cfe:	2218      	movs	r2, #24
 8001d00:	4353      	muls	r3, r2
  TRACE_TASK_ALLO(task->_ix);
 8001d02:	4a12      	ldr	r2, [pc, #72]	; (8001d4c <TASK_create+0xa8>)
    }
  }
  return 0;
task_found:
  task_pool.mask[i] &= ~(1<<j);
  task* task = &task_pool.task[i*32+j];
 8001d04:	4912      	ldr	r1, [pc, #72]	; (8001d50 <TASK_create+0xac>)
  TRACE_TASK_ALLO(task->_ix);
 8001d06:	7812      	ldrb	r2, [r2, #0]
    }
  }
  return 0;
task_found:
  task_pool.mask[i] &= ~(1<<j);
  task* task = &task_pool.task[i*32+j];
 8001d08:	18cc      	adds	r4, r1, r3
  TRACE_TASK_ALLO(task->_ix);
 8001d0a:	b182      	cbz	r2, 8001d2e <TASK_create+0x8a>
 8001d0c:	4a11      	ldr	r2, [pc, #68]	; (8001d54 <TASK_create+0xb0>)
 8001d0e:	5cc9      	ldrb	r1, [r1, r3]
 8001d10:	6810      	ldr	r0, [r2, #0]
 8001d12:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <TASK_create+0xb4>)
 8001d14:	f441 51d8 	orr.w	r1, r1, #6912	; 0x1b00
 8001d18:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
 8001d1c:	6813      	ldr	r3, [r2, #0]
 8001d1e:	2b3e      	cmp	r3, #62	; 0x3e
 8001d20:	bf96      	itet	ls
 8001d22:	6813      	ldrls	r3, [r2, #0]
 8001d24:	2300      	movhi	r3, #0
 8001d26:	3301      	addls	r3, #1
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	e000      	b.n	8001d2e <TASK_create+0x8a>
          }
        }
      }
    }
  }
  return 0;
 8001d2c:	4614      	mov	r4, r2
task* TASK_create(task_f f, u8_t flags) {
  enter_critical();
  TQ_ENTER_CRITICAL;
  task* task = TASK_snatch_free(flags & TASK_STATIC);
  TQ_EXIT_CRITICAL;
  exit_critical();
 8001d2e:	f7fe f9f9 	bl	8000124 <exit_critical>
  if (task) {
 8001d32:	b13c      	cbz	r4, 8001d44 <TASK_create+0xa0>
    task->f = f;
    task->run_requests = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	70e3      	strb	r3, [r4, #3]
    task->flags = flags & (~(TASK_RUN | TASK_EXE | TASK_WAIT | TASK_KILLED));
    task->_id = task->_ix;
 8001d38:	7823      	ldrb	r3, [r4, #0]
  TQ_EXIT_CRITICAL;
  exit_critical();
  if (task) {
    task->f = f;
    task->run_requests = 0;
    task->flags = flags & (~(TASK_RUN | TASK_EXE | TASK_WAIT | TASK_KILLED));
 8001d3a:	f006 0636 	and.w	r6, r6, #54	; 0x36
  TQ_ENTER_CRITICAL;
  task* task = TASK_snatch_free(flags & TASK_STATIC);
  TQ_EXIT_CRITICAL;
  exit_critical();
  if (task) {
    task->f = f;
 8001d3e:	60e7      	str	r7, [r4, #12]
    task->run_requests = 0;
    task->flags = flags & (~(TASK_RUN | TASK_EXE | TASK_WAIT | TASK_KILLED));
 8001d40:	70a6      	strb	r6, [r4, #2]
    task->_id = task->_ix;
 8001d42:	7063      	strb	r3, [r4, #1]
    return task;
  } else {
    return 0;
  }
}
 8001d44:	4620      	mov	r0, r4
 8001d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d48:	200001f0 	.word	0x200001f0
 8001d4c:	20000000 	.word	0x20000000
 8001d50:	20000204 	.word	0x20000204
 8001d54:	200001c0 	.word	0x200001c0
 8001d58:	20000c74 	.word	0x20000c74

08001d5c <TASK_run>:
void TASK_loop(task* task, u32_t arg, void* arg_p) {
  task->flags |= TASK_LOOP;
  TASK_run(task, arg, arg_p);
}

void TASK_run(task* task, u32_t arg, void* arg_p) {
 8001d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d5e:	460f      	mov	r7, r1
 8001d60:	4616      	mov	r6, r2
  ASSERT(task);
 8001d62:	4604      	mov	r4, r0
 8001d64:	b918      	cbnz	r0, 8001d6e <TASK_run+0x12>
 8001d66:	482e      	ldr	r0, [pc, #184]	; (8001e20 <TASK_run+0xc4>)
 8001d68:	21d7      	movs	r1, #215	; 0xd7
 8001d6a:	f7fe fd39 	bl	80007e0 <SYS_assert>
  ASSERT((task_pool.mask[task->_ix/32] & (1<<(task->_ix & 0x1f))) == 0); // check it is allocated
 8001d6e:	7823      	ldrb	r3, [r4, #0]
 8001d70:	2101      	movs	r1, #1
 8001d72:	f003 021f 	and.w	r2, r3, #31
 8001d76:	fa01 f202 	lsl.w	r2, r1, r2
 8001d7a:	4d2a      	ldr	r5, [pc, #168]	; (8001e24 <TASK_run+0xc8>)
 8001d7c:	095b      	lsrs	r3, r3, #5
 8001d7e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001d82:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8001d86:	421a      	tst	r2, r3
 8001d88:	d003      	beq.n	8001d92 <TASK_run+0x36>
 8001d8a:	4825      	ldr	r0, [pc, #148]	; (8001e20 <TASK_run+0xc4>)
 8001d8c:	21d8      	movs	r1, #216	; 0xd8
 8001d8e:	f7fe fd27 	bl	80007e0 <SYS_assert>
  ASSERT((task->flags & TASK_RUN) == 0);       // already scheduled
 8001d92:	78a3      	ldrb	r3, [r4, #2]
 8001d94:	07d9      	lsls	r1, r3, #31
 8001d96:	d503      	bpl.n	8001da0 <TASK_run+0x44>
 8001d98:	4821      	ldr	r0, [pc, #132]	; (8001e20 <TASK_run+0xc4>)
 8001d9a:	21d9      	movs	r1, #217	; 0xd9
 8001d9c:	f7fe fd20 	bl	80007e0 <SYS_assert>
  ASSERT((task->flags & TASK_WAIT) == 0);      // waiting for a mutex
 8001da0:	78a3      	ldrb	r3, [r4, #2]
 8001da2:	065a      	lsls	r2, r3, #25
 8001da4:	d503      	bpl.n	8001dae <TASK_run+0x52>
 8001da6:	481e      	ldr	r0, [pc, #120]	; (8001e20 <TASK_run+0xc4>)
 8001da8:	21da      	movs	r1, #218	; 0xda
 8001daa:	f7fe fd19 	bl	80007e0 <SYS_assert>
  ASSERT(task >= &task_pool.task[0]);          // mem check
 8001dae:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <TASK_run+0xcc>)
 8001db0:	429c      	cmp	r4, r3
 8001db2:	d203      	bcs.n	8001dbc <TASK_run+0x60>
 8001db4:	481a      	ldr	r0, [pc, #104]	; (8001e20 <TASK_run+0xc4>)
 8001db6:	21db      	movs	r1, #219	; 0xdb
 8001db8:	f7fe fd12 	bl	80007e0 <SYS_assert>
  ASSERT(task <= &task_pool.task[CONFIG_TASK_POOL]); // mem check
 8001dbc:	4b1b      	ldr	r3, [pc, #108]	; (8001e2c <TASK_run+0xd0>)
 8001dbe:	429c      	cmp	r4, r3
 8001dc0:	d903      	bls.n	8001dca <TASK_run+0x6e>
 8001dc2:	4817      	ldr	r0, [pc, #92]	; (8001e20 <TASK_run+0xc4>)
 8001dc4:	21dc      	movs	r1, #220	; 0xdc
 8001dc6:	f7fe fd0b 	bl	80007e0 <SYS_assert>
  task->flags |= TASK_RUN;
 8001dca:	78a3      	ldrb	r3, [r4, #2]
  task->arg = arg;
 8001dcc:	6067      	str	r7, [r4, #4]
  ASSERT((task_pool.mask[task->_ix/32] & (1<<(task->_ix & 0x1f))) == 0); // check it is allocated
  ASSERT((task->flags & TASK_RUN) == 0);       // already scheduled
  ASSERT((task->flags & TASK_WAIT) == 0);      // waiting for a mutex
  ASSERT(task >= &task_pool.task[0]);          // mem check
  ASSERT(task <= &task_pool.task[CONFIG_TASK_POOL]); // mem check
  task->flags |= TASK_RUN;
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	70a3      	strb	r3, [r4, #2]
  task->arg = arg;
  task->arg_p = arg_p;
 8001dd4:	60a6      	str	r6, [r4, #8]

  enter_critical();
 8001dd6:	f7fe f999 	bl	800010c <enter_critical>
  TQ_ENTER_CRITICAL;
  if (task_sys.last == 0) {
 8001dda:	686b      	ldr	r3, [r5, #4]
 8001ddc:	b913      	cbnz	r3, 8001de4 <TASK_run+0x88>
    task_sys.head = task;
 8001dde:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <TASK_run+0xc8>)
 8001de0:	601c      	str	r4, [r3, #0]
 8001de2:	e000      	b.n	8001de6 <TASK_run+0x8a>
  } else {
    task_sys.last->_next = task;
 8001de4:	615c      	str	r4, [r3, #20]
  }
  task_sys.last = task;
 8001de6:	606c      	str	r4, [r5, #4]
  // would same task be added twice or more, this at least fixes endless loop
  task->_next = 0;
  task->run_requests++; // if added again during execution
 8001de8:	78e3      	ldrb	r3, [r4, #3]
  } else {
    task_sys.last->_next = task;
  }
  task_sys.last = task;
  // would same task be added twice or more, this at least fixes endless loop
  task->_next = 0;
 8001dea:	2200      	movs	r2, #0
  task->run_requests++; // if added again during execution
 8001dec:	3301      	adds	r3, #1
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	70e3      	strb	r3, [r4, #3]
  TRACE_TASK_RUN(task->_id);
 8001df2:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <TASK_run+0xd4>)
  } else {
    task_sys.last->_next = task;
  }
  task_sys.last = task;
  // would same task be added twice or more, this at least fixes endless loop
  task->_next = 0;
 8001df4:	6162      	str	r2, [r4, #20]
  task->run_requests++; // if added again during execution
  TRACE_TASK_RUN(task->_id);
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	b16b      	cbz	r3, 8001e16 <TASK_run+0xba>
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <TASK_run+0xd8>)
 8001dfc:	7864      	ldrb	r4, [r4, #1]
 8001dfe:	6818      	ldr	r0, [r3, #0]
 8001e00:	490d      	ldr	r1, [pc, #52]	; (8001e38 <TASK_run+0xdc>)
 8001e02:	f444 54e0 	orr.w	r4, r4, #7168	; 0x1c00
 8001e06:	f821 4010 	strh.w	r4, [r1, r0, lsl #1]
 8001e0a:	6819      	ldr	r1, [r3, #0]
 8001e0c:	293e      	cmp	r1, #62	; 0x3e
 8001e0e:	bf9c      	itt	ls
 8001e10:	681a      	ldrls	r2, [r3, #0]
 8001e12:	3201      	addls	r2, #1
 8001e14:	601a      	str	r2, [r3, #0]

  OS_cond_signal(&task_sys.cond);
#endif
  TQ_EXIT_CRITICAL;
  exit_critical();
}
 8001e16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  //  FORCED: HardFlt SVC/BKPT within SVC

  OS_cond_signal(&task_sys.cond);
#endif
  TQ_EXIT_CRITICAL;
  exit_critical();
 8001e1a:	f7fe b983 	b.w	8000124 <exit_critical>
 8001e1e:	bf00      	nop
 8001e20:	08010417 	.word	0x08010417
 8001e24:	200001f0 	.word	0x200001f0
 8001e28:	20000204 	.word	0x20000204
 8001e2c:	20000504 	.word	0x20000504
 8001e30:	20000000 	.word	0x20000000
 8001e34:	200001c0 	.word	0x200001c0
 8001e38:	20000c74 	.word	0x20000c74

08001e3c <TASK_loop>:
  } else {
    return 0;
  }
}

void TASK_loop(task* task, u32_t arg, void* arg_p) {
 8001e3c:	b510      	push	{r4, lr}
  task->flags |= TASK_LOOP;
 8001e3e:	7884      	ldrb	r4, [r0, #2]
 8001e40:	f044 0402 	orr.w	r4, r4, #2
 8001e44:	7084      	strb	r4, [r0, #2]
  TASK_run(task, arg, arg_p);
}
 8001e46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  }
}

void TASK_loop(task* task, u32_t arg, void* arg_p) {
  task->flags |= TASK_LOOP;
  TASK_run(task, arg, arg_p);
 8001e4a:	f7ff bf87 	b.w	8001d5c <TASK_run>

08001e4e <TASK_start_timer>:
  TQ_EXIT_CRITICAL;
  exit_critical();
}

void TASK_start_timer(task *task, task_timer* timer, u32_t arg, void *arg_p, sys_time start_time, sys_time recurrent_time,
    const char *name) {
 8001e4e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#ifndef CONFIG_TASK_NONCRITICAL_TIMER
  enter_critical();
  TQ_ENTER_CRITICAL;
#endif
  task_sys.tim_lock = TRUE;
 8001e52:	4d1a      	ldr	r5, [pc, #104]	; (8001ebc <TASK_start_timer+0x6e>)
  TQ_EXIT_CRITICAL;
  exit_critical();
}

void TASK_start_timer(task *task, task_timer* timer, u32_t arg, void *arg_p, sys_time start_time, sys_time recurrent_time,
    const char *name) {
 8001e54:	460c      	mov	r4, r1
 8001e56:	469a      	mov	sl, r3
 8001e58:	4681      	mov	r9, r0
 8001e5a:	4693      	mov	fp, r2
 8001e5c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8001e5e:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8001e62:	9f0c      	ldr	r7, [sp, #48]	; 0x30
#ifndef CONFIG_TASK_NONCRITICAL_TIMER
  enter_critical();
 8001e64:	f7fe f952 	bl	800010c <enter_critical>
  TQ_ENTER_CRITICAL;
#endif
  task_sys.tim_lock = TRUE;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	742b      	strb	r3, [r5, #16]
  ASSERT(timer->alive == FALSE);
 8001e6c:	7e23      	ldrb	r3, [r4, #24]
 8001e6e:	b123      	cbz	r3, 8001e7a <TASK_start_timer+0x2c>
 8001e70:	4813      	ldr	r0, [pc, #76]	; (8001ec0 <TASK_start_timer+0x72>)
 8001e72:	f240 1107 	movw	r1, #263	; 0x107
 8001e76:	f7fe fcb3 	bl	80007e0 <SYS_assert>
  timer->_ix = _g_timer_ix++;
 8001e7a:	f895 3318 	ldrb.w	r3, [r5, #792]	; 0x318
  timer->arg = arg;
 8001e7e:	f8c4 b010 	str.w	fp, [r4, #16]
  enter_critical();
  TQ_ENTER_CRITICAL;
#endif
  task_sys.tim_lock = TRUE;
  ASSERT(timer->alive == FALSE);
  timer->_ix = _g_timer_ix++;
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	7023      	strb	r3, [r4, #0]
 8001e86:	1c5a      	adds	r2, r3, #1
  timer->arg = arg;
  timer->arg_p = arg_p;
  timer->task = task;
  timer->start_time = start_time;
  timer->recurrent_time = recurrent_time;
  timer->alive = TRUE;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	7623      	strb	r3, [r4, #24]
  enter_critical();
  TQ_ENTER_CRITICAL;
#endif
  task_sys.tim_lock = TRUE;
  ASSERT(timer->alive == FALSE);
  timer->_ix = _g_timer_ix++;
 8001e8c:	b2d2      	uxtb	r2, r2
  timer->arg = arg;
  timer->arg_p = arg_p;
 8001e8e:	f8c4 a014 	str.w	sl, [r4, #20]
  timer->task = task;
 8001e92:	f8c4 9004 	str.w	r9, [r4, #4]
  timer->start_time = start_time;
 8001e96:	60a6      	str	r6, [r4, #8]
  timer->recurrent_time = recurrent_time;
 8001e98:	f8c4 800c 	str.w	r8, [r4, #12]
  timer->alive = TRUE;
  timer->name = name;
 8001e9c:	61e7      	str	r7, [r4, #28]
  enter_critical();
  TQ_ENTER_CRITICAL;
#endif
  task_sys.tim_lock = TRUE;
  ASSERT(timer->alive == FALSE);
  timer->_ix = _g_timer_ix++;
 8001e9e:	f885 2318 	strb.w	r2, [r5, #792]	; 0x318
  timer->task = task;
  timer->start_time = start_time;
  timer->recurrent_time = recurrent_time;
  timer->alive = TRUE;
  timer->name = name;
  task_insert_timer(timer, SYS_get_time_ms() + start_time);
 8001ea2:	f7fe fb93 	bl	80005cc <SYS_get_time_ms>
 8001ea6:	1981      	adds	r1, r0, r6
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	f7ff fdab 	bl	8001a04 <task_insert_timer>
  task_sys.tim_lock = FALSE;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	742b      	strb	r3, [r5, #16]
#ifndef CONFIG_TASK_NONCRITICAL_TIMER
  TQ_EXIT_CRITICAL;
  exit_critical();
#endif
}
 8001eb2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  timer->name = name;
  task_insert_timer(timer, SYS_get_time_ms() + start_time);
  task_sys.tim_lock = FALSE;
#ifndef CONFIG_TASK_NONCRITICAL_TIMER
  TQ_EXIT_CRITICAL;
  exit_critical();
 8001eb6:	f7fe b935 	b.w	8000124 <exit_critical>
 8001eba:	bf00      	nop
 8001ebc:	200001f0 	.word	0x200001f0
 8001ec0:	08010417 	.word	0x08010417

08001ec4 <TASK_set_timer_recurrence>:
#endif
}

void TASK_set_timer_recurrence(task_timer* timer, sys_time recurrent_time) {
  timer->recurrent_time = recurrent_time;
 8001ec4:	60c1      	str	r1, [r0, #12]
 8001ec6:	4770      	bx	lr

08001ec8 <TASK_stop_timer>:
}

void TASK_stop_timer(task_timer* timer) {
 8001ec8:	b538      	push	{r3, r4, r5, lr}
 8001eca:	4604      	mov	r4, r0
#ifndef CONFIG_TASK_NONCRITICAL_TIMER
  enter_critical();
 8001ecc:	f7fe f91e 	bl	800010c <enter_critical>
  TQ_ENTER_CRITICAL;
#endif
  if (!timer->alive) {
 8001ed0:	7e23      	ldrb	r3, [r4, #24]
 8001ed2:	b19b      	cbz	r3, 8001efc <TASK_stop_timer+0x34>
  TQ_EXIT_CRITICAL;
  exit_critical();
#endif
  return;
  }
  task_sys.tim_lock = TRUE;
 8001ed4:	490b      	ldr	r1, [pc, #44]	; (8001f04 <TASK_stop_timer+0x3c>)
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	740b      	strb	r3, [r1, #16]
  timer->alive = FALSE;

  // wipe all dead instances
  task_timer *cur_timer = task_sys.first_timer;
 8001eda:	68cb      	ldr	r3, [r1, #12]
  exit_critical();
#endif
  return;
  }
  task_sys.tim_lock = TRUE;
  timer->alive = FALSE;
 8001edc:	2200      	movs	r2, #0
 8001ede:	7622      	strb	r2, [r4, #24]

  // wipe all dead instances
  task_timer *cur_timer = task_sys.first_timer;
  task_timer *pre_timer = NULL;
  while (cur_timer) {
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	b14b      	cbz	r3, 8001ef8 <TASK_stop_timer+0x30>
    if (cur_timer->alive == FALSE) {
 8001ee4:	7e1d      	ldrb	r5, [r3, #24]
 8001ee6:	b925      	cbnz	r5, 8001ef2 <TASK_stop_timer+0x2a>
 8001ee8:	6a25      	ldr	r5, [r4, #32]
      if (pre_timer == NULL) {
 8001eea:	b90a      	cbnz	r2, 8001ef0 <TASK_stop_timer+0x28>
        task_sys.first_timer = timer->_next;
 8001eec:	4628      	mov	r0, r5
 8001eee:	e000      	b.n	8001ef2 <TASK_stop_timer+0x2a>
      } else {
        pre_timer->_next = timer->_next;
 8001ef0:	6215      	str	r5, [r2, #32]
      }
    }
    pre_timer = cur_timer;
    cur_timer = cur_timer->_next;
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	e7f4      	b.n	8001ee2 <TASK_stop_timer+0x1a>
 8001ef8:	60c8      	str	r0, [r1, #12]
  }
  task_sys.tim_lock = FALSE;
 8001efa:	740b      	strb	r3, [r1, #16]
#ifndef CONFIG_TASK_NONCRITICAL_TIMER
  TQ_EXIT_CRITICAL;
  exit_critical();
#endif
}
 8001efc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cur_timer = cur_timer->_next;
  }
  task_sys.tim_lock = FALSE;
#ifndef CONFIG_TASK_NONCRITICAL_TIMER
  TQ_EXIT_CRITICAL;
  exit_critical();
 8001f00:	f7fe b910 	b.w	8000124 <exit_critical>
 8001f04:	200001f0 	.word	0x200001f0

08001f08 <TASK_stop>:
#endif
}

void TASK_stop() {
  task_sys.current->flags &= ~(TASK_LOOP | TASK_RUN);
 8001f08:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <TASK_stop+0x14>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	789a      	ldrb	r2, [r3, #2]
 8001f0e:	f022 0203 	bic.w	r2, r2, #3
  task_sys.current->flags |= TASK_KILLED;
 8001f12:	f042 0208 	orr.w	r2, r2, #8
 8001f16:	709a      	strb	r2, [r3, #2]
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	200001f0 	.word	0x200001f0

08001f20 <TASK_id>:
}

u32_t TASK_id() {
  return task_sys.current->_ix;
 8001f20:	4b01      	ldr	r3, [pc, #4]	; (8001f28 <TASK_id+0x8>)
 8001f22:	689b      	ldr	r3, [r3, #8]
}
 8001f24:	7818      	ldrb	r0, [r3, #0]
 8001f26:	4770      	bx	lr
 8001f28:	200001f0 	.word	0x200001f0

08001f2c <TASK_is_running>:

u8_t TASK_is_running(task* t) {
  return t->flags & TASK_RUN;
 8001f2c:	7880      	ldrb	r0, [r0, #2]
}
 8001f2e:	f000 0001 	and.w	r0, r0, #1
 8001f32:	4770      	bx	lr

08001f34 <TASK_wait>:

void TASK_wait() {
 8001f34:	b510      	push	{r4, lr}
  while (task_sys.head == 0) {
 8001f36:	4c03      	ldr	r4, [pc, #12]	; (8001f44 <TASK_wait+0x10>)
 8001f38:	6823      	ldr	r3, [r4, #0]
 8001f3a:	b913      	cbnz	r3, 8001f42 <TASK_wait+0xe>
#if defined(CONFIG_OS) & defined(CONFIG_TASK_QUEUE_IN_THREAD)
    OS_cond_wait(&task_sys.cond, NULL);
#else
    arch_sleep();
 8001f3c:	f7fe f924 	bl	8000188 <arch_sleep>
 8001f40:	e7fa      	b.n	8001f38 <TASK_wait+0x4>
#endif
  }
}
 8001f42:	bd10      	pop	{r4, pc}
 8001f44:	200001f0 	.word	0x200001f0

08001f48 <TASK_free>:

void TASK_free(task *t) {
 8001f48:	b570      	push	{r4, r5, r6, lr}
 8001f4a:	4604      	mov	r4, r0
  enter_critical();
 8001f4c:	f7fe f8de 	bl	800010c <enter_critical>
  TQ_ENTER_CRITICAL;
  if ((t->flags & TASK_RUN) == 0) {
 8001f50:	78a3      	ldrb	r3, [r4, #2]
 8001f52:	07dd      	lsls	r5, r3, #31
 8001f54:	d40d      	bmi.n	8001f72 <TASK_free+0x2a>
    // not scheduled, so remove it directly from pool
    task_pool.mask[t->_ix/32] |= (1<<(t->_ix & 0x1f));
 8001f56:	7821      	ldrb	r1, [r4, #0]
 8001f58:	4821      	ldr	r0, [pc, #132]	; (8001fe0 <TASK_free+0x98>)
 8001f5a:	094a      	lsrs	r2, r1, #5
 8001f5c:	32c0      	adds	r2, #192	; 0xc0
 8001f5e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001f62:	f001 011f 	and.w	r1, r1, #31
 8001f66:	2001      	movs	r0, #1
 8001f68:	fa00 f101 	lsl.w	r1, r0, r1
 8001f6c:	6950      	ldr	r0, [r2, #20]
 8001f6e:	4308      	orrs	r0, r1
 8001f70:	6150      	str	r0, [r2, #20]
  }
  // else, scheduled => will be removed in TASK_tick when executed

#ifdef CONFIG_TASKQ_MUTEX
  // check if task is in a mutex wait queue, and remove it if so
  if (t->flags & TASK_WAIT) {
 8001f72:	0658      	lsls	r0, r3, #25
 8001f74:	d529      	bpl.n	8001fca <TASK_free+0x82>
    ASSERT(t->wait_mutex);
 8001f76:	6923      	ldr	r3, [r4, #16]
 8001f78:	b923      	cbnz	r3, 8001f84 <TASK_free+0x3c>
 8001f7a:	481a      	ldr	r0, [pc, #104]	; (8001fe4 <TASK_free+0x9c>)
 8001f7c:	f240 1163 	movw	r1, #355	; 0x163
 8001f80:	f7fe fc2e 	bl	80007e0 <SYS_assert>
    task_mutex *m = t->wait_mutex;
 8001f84:	6925      	ldr	r5, [r4, #16]
    if (m->head == t) {
 8001f86:	68ab      	ldr	r3, [r5, #8]
 8001f88:	42a3      	cmp	r3, r4
 8001f8a:	d001      	beq.n	8001f90 <TASK_free+0x48>
 8001f8c:	2600      	movs	r6, #0
 8001f8e:	e00b      	b.n	8001fa8 <TASK_free+0x60>
      m->head = t->_next;
 8001f90:	6963      	ldr	r3, [r4, #20]
 8001f92:	60ab      	str	r3, [r5, #8]
      if (m->last == t) {
 8001f94:	68eb      	ldr	r3, [r5, #12]
 8001f96:	42a3      	cmp	r3, r4
 8001f98:	d117      	bne.n	8001fca <TASK_free+0x82>
        m->last = NULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60eb      	str	r3, [r5, #12]
 8001f9e:	e014      	b.n	8001fca <TASK_free+0x82>
      }
    } else {
      task *prev_ct = NULL;
      task *ct = (task *)m->head;
      while (ct != NULL) {
        if (ct == t) {
 8001fa0:	42a3      	cmp	r3, r4
 8001fa2:	d004      	beq.n	8001fae <TASK_free+0x66>
            prev_ct->_next = NULL;
          }
          break;
        }
        prev_ct = ct;
        ct = ct->_next;
 8001fa4:	461e      	mov	r6, r3
 8001fa6:	695b      	ldr	r3, [r3, #20]
        m->last = NULL;
      }
    } else {
      task *prev_ct = NULL;
      task *ct = (task *)m->head;
      while (ct != NULL) {
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1f9      	bne.n	8001fa0 <TASK_free+0x58>
 8001fac:	e00d      	b.n	8001fca <TASK_free+0x82>
        if (ct == t) {
          ASSERT(prev_ct);
 8001fae:	b926      	cbnz	r6, 8001fba <TASK_free+0x72>
 8001fb0:	480c      	ldr	r0, [pc, #48]	; (8001fe4 <TASK_free+0x9c>)
 8001fb2:	f240 116f 	movw	r1, #367	; 0x16f
 8001fb6:	f7fe fc13 	bl	80007e0 <SYS_assert>
          prev_ct->_next = t->_next;
 8001fba:	6963      	ldr	r3, [r4, #20]
 8001fbc:	6173      	str	r3, [r6, #20]
          if (m->last == t) {
 8001fbe:	68eb      	ldr	r3, [r5, #12]
 8001fc0:	42a3      	cmp	r3, r4
 8001fc2:	d102      	bne.n	8001fca <TASK_free+0x82>
            m->last = prev_ct;
            prev_ct->_next = NULL;
 8001fc4:	2300      	movs	r3, #0
      while (ct != NULL) {
        if (ct == t) {
          ASSERT(prev_ct);
          prev_ct->_next = t->_next;
          if (m->last == t) {
            m->last = prev_ct;
 8001fc6:	60ee      	str	r6, [r5, #12]
            prev_ct->_next = NULL;
 8001fc8:	6173      	str	r3, [r6, #20]
      }
    }
  }
#endif

  t->flags &= ~(TASK_RUN | TASK_STATIC | TASK_LOOP | TASK_WAIT);
 8001fca:	78a3      	ldrb	r3, [r4, #2]
 8001fcc:	f023 0347 	bic.w	r3, r3, #71	; 0x47
  t->flags |= TASK_KILLED;
 8001fd0:	f043 0308 	orr.w	r3, r3, #8
 8001fd4:	70a3      	strb	r3, [r4, #2]
  TQ_EXIT_CRITICAL;
  exit_critical();
}
 8001fd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#endif

  t->flags &= ~(TASK_RUN | TASK_STATIC | TASK_LOOP | TASK_WAIT);
  t->flags |= TASK_KILLED;
  TQ_EXIT_CRITICAL;
  exit_critical();
 8001fda:	f7fe b8a3 	b.w	8000124 <exit_critical>
 8001fde:	bf00      	nop
 8001fe0:	200001f0 	.word	0x200001f0
 8001fe4:	08010417 	.word	0x08010417

08001fe8 <TASK_got_active_tasks>:
}

bool TASK_got_active_tasks(void) {
  return task_sys.head != NULL || task_sys.current != NULL;
 8001fe8:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <TASK_got_active_tasks+0x14>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	b922      	cbnz	r2, 8001ff8 <TASK_got_active_tasks+0x10>
 8001fee:	6898      	ldr	r0, [r3, #8]
 8001ff0:	3000      	adds	r0, #0
 8001ff2:	bf18      	it	ne
 8001ff4:	2001      	movne	r0, #1
 8001ff6:	4770      	bx	lr
 8001ff8:	2001      	movs	r0, #1
}
 8001ffa:	4770      	bx	lr
 8001ffc:	200001f0 	.word	0x200001f0

08002000 <TASK_tick>:

u32_t TASK_tick() {
 8002000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  enter_critical();
  TQ_ENTER_CRITICAL;
  volatile task* t = task_sys.head;
 8002004:	4d67      	ldr	r5, [pc, #412]	; (80021a4 <TASK_tick+0x1a4>)
bool TASK_got_active_tasks(void) {
  return task_sys.head != NULL || task_sys.current != NULL;
}

u32_t TASK_tick() {
  enter_critical();
 8002006:	f7fe f881 	bl	800010c <enter_critical>
  TQ_ENTER_CRITICAL;
  volatile task* t = task_sys.head;
 800200a:	682c      	ldr	r4, [r5, #0]
  task_sys.current = (task *)t;
 800200c:	60ac      	str	r4, [r5, #8]
  if (t == 0) {
 800200e:	b924      	cbnz	r4, 800201a <TASK_tick+0x1a>
    // naught to do
    TQ_EXIT_CRITICAL;
    exit_critical();
 8002010:	f7fe f888 	bl	8000124 <exit_critical>
    return 0;
 8002014:	4620      	mov	r0, r4
 8002016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  }
  ASSERT(t >= &task_pool.task[0]);
 800201a:	f105 0814 	add.w	r8, r5, #20
 800201e:	4544      	cmp	r4, r8
 8002020:	d204      	bcs.n	800202c <TASK_tick+0x2c>
 8002022:	4861      	ldr	r0, [pc, #388]	; (80021a8 <TASK_tick+0x1a8>)
 8002024:	f240 1193 	movw	r1, #403	; 0x193
 8002028:	f7fe fbda 	bl	80007e0 <SYS_assert>
  ASSERT(t <= &task_pool.task[CONFIG_TASK_POOL]);
 800202c:	4f5f      	ldr	r7, [pc, #380]	; (80021ac <TASK_tick+0x1ac>)
 800202e:	42bc      	cmp	r4, r7
 8002030:	d904      	bls.n	800203c <TASK_tick+0x3c>
 8002032:	485d      	ldr	r0, [pc, #372]	; (80021a8 <TASK_tick+0x1a8>)
 8002034:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8002038:	f7fe fbd2 	bl	80007e0 <SYS_assert>

  // execute
  bool do_run = (t->flags & (TASK_RUN | TASK_KILLED)) == TASK_RUN;
 800203c:	f894 9002 	ldrb.w	r9, [r4, #2]
  bool free = FALSE;
  // first, fiddle with queue - remove task from schedq unless loop
  // reinsert or kill off
  if ((t->flags & (TASK_LOOP | TASK_KILLED)) == TASK_LOOP) {
 8002040:	78a3      	ldrb	r3, [r4, #2]
  }
  ASSERT(t >= &task_pool.task[0]);
  ASSERT(t <= &task_pool.task[CONFIG_TASK_POOL]);

  // execute
  bool do_run = (t->flags & (TASK_RUN | TASK_KILLED)) == TASK_RUN;
 8002042:	f009 0909 	and.w	r9, r9, #9
 8002046:	f1b9 0601 	subs.w	r6, r9, #1
 800204a:	f1d6 0900 	rsbs	r9, r6, #0
  bool free = FALSE;
  // first, fiddle with queue - remove task from schedq unless loop
  // reinsert or kill off
  if ((t->flags & (TASK_LOOP | TASK_KILLED)) == TASK_LOOP) {
 800204e:	f003 030a 	and.w	r3, r3, #10
  }
  ASSERT(t >= &task_pool.task[0]);
  ASSERT(t <= &task_pool.task[CONFIG_TASK_POOL]);

  // execute
  bool do_run = (t->flags & (TASK_RUN | TASK_KILLED)) == TASK_RUN;
 8002052:	eb59 0906 	adcs.w	r9, r9, r6
  bool free = FALSE;
  // first, fiddle with queue - remove task from schedq unless loop
  // reinsert or kill off
  if ((t->flags & (TASK_LOOP | TASK_KILLED)) == TASK_LOOP) {
 8002056:	2b02      	cmp	r3, #2
 8002058:	d119      	bne.n	800208e <TASK_tick+0x8e>
    // loop, put this at end or simply keep if the only one
    if (t->_next != 0) {
 800205a:	6966      	ldr	r6, [r4, #20]
 800205c:	2e00      	cmp	r6, #0
 800205e:	d035      	beq.n	80020cc <TASK_tick+0xcc>
      task_sys.last->_next = (task *)t;
 8002060:	686b      	ldr	r3, [r5, #4]
 8002062:	615c      	str	r4, [r3, #20]
      task_sys.head = t->_next;
 8002064:	6963      	ldr	r3, [r4, #20]
 8002066:	602b      	str	r3, [r5, #0]
      if (task_sys.head != 0) {
 8002068:	b173      	cbz	r3, 8002088 <TASK_tick+0x88>
        ASSERT(task_sys.head >= &task_pool.task[0]);
 800206a:	4543      	cmp	r3, r8
 800206c:	d204      	bcs.n	8002078 <TASK_tick+0x78>
 800206e:	484e      	ldr	r0, [pc, #312]	; (80021a8 <TASK_tick+0x1a8>)
 8002070:	f240 11a1 	movw	r1, #417	; 0x1a1
 8002074:	f7fe fbb4 	bl	80007e0 <SYS_assert>
        ASSERT(task_sys.head <= &task_pool.task[CONFIG_TASK_POOL]);
 8002078:	682b      	ldr	r3, [r5, #0]
 800207a:	42bb      	cmp	r3, r7
 800207c:	d904      	bls.n	8002088 <TASK_tick+0x88>
 800207e:	484a      	ldr	r0, [pc, #296]	; (80021a8 <TASK_tick+0x1a8>)
 8002080:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8002084:	f7fe fbac 	bl	80007e0 <SYS_assert>
      }
      task_sys.last = t;
 8002088:	606c      	str	r4, [r5, #4]
  ASSERT(t >= &task_pool.task[0]);
  ASSERT(t <= &task_pool.task[CONFIG_TASK_POOL]);

  // execute
  bool do_run = (t->flags & (TASK_RUN | TASK_KILLED)) == TASK_RUN;
  bool free = FALSE;
 800208a:	2600      	movs	r6, #0
 800208c:	e01e      	b.n	80020cc <TASK_tick+0xcc>
      }
      task_sys.last = t;
    }
  } else {
    // no loop, kill off
    task_sys.head = t->_next;
 800208e:	6963      	ldr	r3, [r4, #20]
    if (t->_next == 0) {
 8002090:	6962      	ldr	r2, [r4, #20]
      }
      task_sys.last = t;
    }
  } else {
    // no loop, kill off
    task_sys.head = t->_next;
 8002092:	602b      	str	r3, [r5, #0]
    if (t->_next == 0) {
 8002094:	b912      	cbnz	r2, 800209c <TASK_tick+0x9c>
      task_sys.last = 0;
 8002096:	4b43      	ldr	r3, [pc, #268]	; (80021a4 <TASK_tick+0x1a4>)
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	e00e      	b.n	80020ba <TASK_tick+0xba>
    } else {
      ASSERT(task_sys.head >= &task_pool.task[0]);
 800209c:	4543      	cmp	r3, r8
 800209e:	d204      	bcs.n	80020aa <TASK_tick+0xaa>
 80020a0:	4841      	ldr	r0, [pc, #260]	; (80021a8 <TASK_tick+0x1a8>)
 80020a2:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80020a6:	f7fe fb9b 	bl	80007e0 <SYS_assert>
      ASSERT(task_sys.head <= &task_pool.task[CONFIG_TASK_POOL]);
 80020aa:	682b      	ldr	r3, [r5, #0]
 80020ac:	42bb      	cmp	r3, r7
 80020ae:	d904      	bls.n	80020ba <TASK_tick+0xba>
 80020b0:	483d      	ldr	r0, [pc, #244]	; (80021a8 <TASK_tick+0x1a8>)
 80020b2:	f240 11ad 	movw	r1, #429	; 0x1ad
 80020b6:	f7fe fb93 	bl	80007e0 <SYS_assert>
    }
    // free unless static
    if ((t->flags & TASK_STATIC) == 0) {
 80020ba:	78a6      	ldrb	r6, [r4, #2]
      free = TRUE;
      //task_pool.mask[t->_ix/32] |= (1<<(t->_ix & 0x1f));
      //TRACE_TASK_FREE(t->_ix);
    }
    t->flags &= ~TASK_RUN;
 80020bc:	78a3      	ldrb	r3, [r4, #2]
    } else {
      ASSERT(task_sys.head >= &task_pool.task[0]);
      ASSERT(task_sys.head <= &task_pool.task[CONFIG_TASK_POOL]);
    }
    // free unless static
    if ((t->flags & TASK_STATIC) == 0) {
 80020be:	f086 0604 	eor.w	r6, r6, #4
      free = TRUE;
      //task_pool.mask[t->_ix/32] |= (1<<(t->_ix & 0x1f));
      //TRACE_TASK_FREE(t->_ix);
    }
    t->flags &= ~TASK_RUN;
 80020c2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  ASSERT(t >= &task_pool.task[0]);
  ASSERT(t <= &task_pool.task[CONFIG_TASK_POOL]);

  // execute
  bool do_run = (t->flags & (TASK_RUN | TASK_KILLED)) == TASK_RUN;
  bool free = FALSE;
 80020c6:	f3c6 0680 	ubfx	r6, r6, #2, #1
    if ((t->flags & TASK_STATIC) == 0) {
      free = TRUE;
      //task_pool.mask[t->_ix/32] |= (1<<(t->_ix & 0x1f));
      //TRACE_TASK_FREE(t->_ix);
    }
    t->flags &= ~TASK_RUN;
 80020ca:	70a3      	strb	r3, [r4, #2]
  }
  TQ_EXIT_CRITICAL;
  exit_critical();
 80020cc:	f7fe f82a 	bl	8000124 <exit_critical>

  if (do_run) {
 80020d0:	f1b9 0f00 	cmp.w	r9, #0
 80020d4:	d063      	beq.n	800219e <TASK_tick+0x19e>
    u8_t run_requests;
    // execute
#if TASK_WARN_HIGH_EXE_TIME > 0
    time then = SYS_get_tick();
#endif
    t->flags |= TASK_EXE;
 80020d6:	78a3      	ldrb	r3, [r4, #2]
    TRACE_TASK_ENTER(t->_id);
 80020d8:	4f35      	ldr	r7, [pc, #212]	; (80021b0 <TASK_tick+0x1b0>)
    u8_t run_requests;
    // execute
#if TASK_WARN_HIGH_EXE_TIME > 0
    time then = SYS_get_tick();
#endif
    t->flags |= TASK_EXE;
 80020da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020de:	70a3      	strb	r3, [r4, #2]
    TRACE_TASK_ENTER(t->_id);
 80020e0:	783b      	ldrb	r3, [r7, #0]
 80020e2:	b173      	cbz	r3, 8002102 <TASK_tick+0x102>
 80020e4:	4b33      	ldr	r3, [pc, #204]	; (80021b4 <TASK_tick+0x1b4>)
 80020e6:	4a34      	ldr	r2, [pc, #208]	; (80021b8 <TASK_tick+0x1b8>)
 80020e8:	6819      	ldr	r1, [r3, #0]
 80020ea:	7860      	ldrb	r0, [r4, #1]
 80020ec:	f440 50e8 	orr.w	r0, r0, #7424	; 0x1d00
 80020f0:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	2a3e      	cmp	r2, #62	; 0x3e
 80020f8:	bf96      	itet	ls
 80020fa:	681a      	ldrls	r2, [r3, #0]
 80020fc:	2200      	movhi	r2, #0
 80020fe:	3201      	addls	r2, #1
 8002100:	601a      	str	r2, [r3, #0]
    do {
      t->f(t->arg, t->arg_p);
 8002102:	68e3      	ldr	r3, [r4, #12]
 8002104:	6860      	ldr	r0, [r4, #4]
 8002106:	68a1      	ldr	r1, [r4, #8]
 8002108:	4798      	blx	r3

      enter_critical();
 800210a:	f7fd ffff 	bl	800010c <enter_critical>
      TQ_ENTER_CRITICAL;
      if (t->run_requests > 0) {
 800210e:	78e3      	ldrb	r3, [r4, #3]
 8002110:	b11b      	cbz	r3, 800211a <TASK_tick+0x11a>
        t->run_requests--;
 8002112:	78e3      	ldrb	r3, [r4, #3]
 8002114:	3b01      	subs	r3, #1
 8002116:	b2db      	uxtb	r3, r3
 8002118:	70e3      	strb	r3, [r4, #3]
      }
      run_requests = t->run_requests;
 800211a:	f894 8003 	ldrb.w	r8, [r4, #3]
 800211e:	fa5f f888 	uxtb.w	r8, r8
      TQ_EXIT_CRITICAL;
      exit_critical();
 8002122:	f7fd ffff 	bl	8000124 <exit_critical>
    } while (run_requests > 0);
 8002126:	f1b8 0f00 	cmp.w	r8, #0
 800212a:	d1ea      	bne.n	8002102 <TASK_tick+0x102>
    enter_critical();
 800212c:	f7fd ffee 	bl	800010c <enter_critical>
    TQ_ENTER_CRITICAL;
    TRACE_TASK_EXIT(t->_id);
 8002130:	783b      	ldrb	r3, [r7, #0]
 8002132:	b173      	cbz	r3, 8002152 <TASK_tick+0x152>
 8002134:	4b1f      	ldr	r3, [pc, #124]	; (80021b4 <TASK_tick+0x1b4>)
 8002136:	4a20      	ldr	r2, [pc, #128]	; (80021b8 <TASK_tick+0x1b8>)
 8002138:	6819      	ldr	r1, [r3, #0]
 800213a:	7860      	ldrb	r0, [r4, #1]
 800213c:	f440 50f0 	orr.w	r0, r0, #7680	; 0x1e00
 8002140:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	2a3e      	cmp	r2, #62	; 0x3e
 8002148:	bf96      	itet	ls
 800214a:	681a      	ldrls	r2, [r3, #0]
 800214c:	4642      	movhi	r2, r8
 800214e:	3201      	addls	r2, #1
 8002150:	601a      	str	r2, [r3, #0]
    t->flags &= ~TASK_EXE;
 8002152:	78a3      	ldrb	r3, [r4, #2]
 8002154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002158:	70a3      	strb	r3, [r4, #2]
    if (free) {
 800215a:	b1f6      	cbz	r6, 800219a <TASK_tick+0x19a>
      task_pool.mask[t->_ix/32] |= (1<<(t->_ix & 0x1f));
 800215c:	7823      	ldrb	r3, [r4, #0]
 800215e:	7822      	ldrb	r2, [r4, #0]
 8002160:	095b      	lsrs	r3, r3, #5
 8002162:	33c0      	adds	r3, #192	; 0xc0
 8002164:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8002168:	f002 021f 	and.w	r2, r2, #31
 800216c:	2301      	movs	r3, #1
 800216e:	fa03 f202 	lsl.w	r2, r3, r2
 8002172:	696b      	ldr	r3, [r5, #20]
 8002174:	4313      	orrs	r3, r2
 8002176:	616b      	str	r3, [r5, #20]
      TRACE_TASK_FREE(t->_ix);
 8002178:	783b      	ldrb	r3, [r7, #0]
 800217a:	b173      	cbz	r3, 800219a <TASK_tick+0x19a>
 800217c:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <TASK_tick+0x1b4>)
 800217e:	4a0e      	ldr	r2, [pc, #56]	; (80021b8 <TASK_tick+0x1b8>)
 8002180:	6819      	ldr	r1, [r3, #0]
 8002182:	7820      	ldrb	r0, [r4, #0]
 8002184:	f440 50f8 	orr.w	r0, r0, #7936	; 0x1f00
 8002188:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	2a3e      	cmp	r2, #62	; 0x3e
 8002190:	bf96      	itet	ls
 8002192:	681a      	ldrls	r2, [r3, #0]
 8002194:	2200      	movhi	r2, #0
 8002196:	3201      	addls	r2, #1
 8002198:	601a      	str	r2, [r3, #0]
    }
    TQ_EXIT_CRITICAL;
    exit_critical();
 800219a:	f7fd ffc3 	bl	8000124 <exit_critical>
      DBG(D_TASK, D_WARN, "TASK task %p: %i ticks\n", t->f, delta);
    }
#endif
  }

  return 1;
 800219e:	2001      	movs	r0, #1
}
 80021a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80021a4:	200001f0 	.word	0x200001f0
 80021a8:	08010417 	.word	0x08010417
 80021ac:	20000504 	.word	0x20000504
 80021b0:	20000000 	.word	0x20000000
 80021b4:	200001c0 	.word	0x200001c0
 80021b8:	20000c74 	.word	0x20000c74

080021bc <TASK_mutex_lock>:
static void task_release_lock(task_mutex *m) {
  m->taken = FALSE;
  m->owner = NULL;
}

bool TASK_mutex_lock(task_mutex *m) {
 80021bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  task *t = task_sys.current;
  if (!m->taken) {
 80021be:	7801      	ldrb	r1, [r0, #0]
  m->taken = FALSE;
  m->owner = NULL;
}

bool TASK_mutex_lock(task_mutex *m) {
  task *t = task_sys.current;
 80021c0:	4e4d      	ldr	r6, [pc, #308]	; (80022f8 <TASK_mutex_lock+0x13c>)
static void task_release_lock(task_mutex *m) {
  m->taken = FALSE;
  m->owner = NULL;
}

bool TASK_mutex_lock(task_mutex *m) {
 80021c2:	4605      	mov	r5, r0
  task *t = task_sys.current;
 80021c4:	68b4      	ldr	r4, [r6, #8]
  if (!m->taken) {
 80021c6:	f001 02ff 	and.w	r2, r1, #255	; 0xff
 80021ca:	4b4c      	ldr	r3, [pc, #304]	; (80022fc <TASK_mutex_lock+0x140>)
 80021cc:	b9a9      	cbnz	r1, 80021fa <TASK_mutex_lock+0x3e>
    m->entries = 1;
 80021ce:	2101      	movs	r1, #1
}

#ifdef CONFIG_TASKQ_MUTEX

static void task_take_lock(task *t, task_mutex *m) {
  m->taken = TRUE;
 80021d0:	7001      	strb	r1, [r0, #0]
bool TASK_mutex_lock(task_mutex *m) {
  task *t = task_sys.current;
  if (!m->taken) {
    m->entries = 1;
    task_take_lock(t, m);
    TRACE_TASK_MUTEX_ENTER(t->_id);
 80021d2:	781b      	ldrb	r3, [r3, #0]
}

bool TASK_mutex_lock(task_mutex *m) {
  task *t = task_sys.current;
  if (!m->taken) {
    m->entries = 1;
 80021d4:	7081      	strb	r1, [r0, #2]

#ifdef CONFIG_TASKQ_MUTEX

static void task_take_lock(task *t, task_mutex *m) {
  m->taken = TRUE;
  m->owner = t;
 80021d6:	6044      	str	r4, [r0, #4]
bool TASK_mutex_lock(task_mutex *m) {
  task *t = task_sys.current;
  if (!m->taken) {
    m->entries = 1;
    task_take_lock(t, m);
    TRACE_TASK_MUTEX_ENTER(t->_id);
 80021d8:	b16b      	cbz	r3, 80021f6 <TASK_mutex_lock+0x3a>
 80021da:	4b49      	ldr	r3, [pc, #292]	; (8002300 <TASK_mutex_lock+0x144>)
 80021dc:	7864      	ldrb	r4, [r4, #1]
 80021de:	6818      	ldr	r0, [r3, #0]
 80021e0:	4948      	ldr	r1, [pc, #288]	; (8002304 <TASK_mutex_lock+0x148>)
 80021e2:	f444 5404 	orr.w	r4, r4, #8448	; 0x2100
 80021e6:	f821 4010 	strh.w	r4, [r1, r0, lsl #1]
 80021ea:	6819      	ldr	r1, [r3, #0]
 80021ec:	293e      	cmp	r1, #62	; 0x3e
 80021ee:	bf9c      	itt	ls
 80021f0:	681a      	ldrls	r2, [r3, #0]
 80021f2:	3201      	addls	r2, #1
 80021f4:	601a      	str	r2, [r3, #0]
    return TRUE;
 80021f6:	2001      	movs	r0, #1
 80021f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  if (m->reentrant && m->owner == t) {
 80021fa:	7842      	ldrb	r2, [r0, #1]
 80021fc:	b1fa      	cbz	r2, 800223e <TASK_mutex_lock+0x82>
 80021fe:	6841      	ldr	r1, [r0, #4]
 8002200:	42a1      	cmp	r1, r4
 8002202:	d11c      	bne.n	800223e <TASK_mutex_lock+0x82>
    m->entries++;
 8002204:	7882      	ldrb	r2, [r0, #2]
    TRACE_TASK_MUTEX_ENTER_M(t->_id);
 8002206:	781b      	ldrb	r3, [r3, #0]
    task_take_lock(t, m);
    TRACE_TASK_MUTEX_ENTER(t->_id);
    return TRUE;
  }
  if (m->reentrant && m->owner == t) {
    m->entries++;
 8002208:	3201      	adds	r2, #1
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	7082      	strb	r2, [r0, #2]
    TRACE_TASK_MUTEX_ENTER_M(t->_id);
 800220e:	b173      	cbz	r3, 800222e <TASK_mutex_lock+0x72>
 8002210:	4b3b      	ldr	r3, [pc, #236]	; (8002300 <TASK_mutex_lock+0x144>)
 8002212:	784c      	ldrb	r4, [r1, #1]
 8002214:	6818      	ldr	r0, [r3, #0]
 8002216:	493b      	ldr	r1, [pc, #236]	; (8002304 <TASK_mutex_lock+0x148>)
 8002218:	f444 5414 	orr.w	r4, r4, #9472	; 0x2500
 800221c:	f821 4010 	strh.w	r4, [r1, r0, lsl #1]
 8002220:	6819      	ldr	r1, [r3, #0]
 8002222:	293e      	cmp	r1, #62	; 0x3e
 8002224:	bf96      	itet	ls
 8002226:	6819      	ldrls	r1, [r3, #0]
 8002228:	2100      	movhi	r1, #0
 800222a:	3101      	addls	r1, #1
 800222c:	6019      	str	r1, [r3, #0]
    ASSERT(m->entries < 254);
 800222e:	2afd      	cmp	r2, #253	; 0xfd
 8002230:	d9e1      	bls.n	80021f6 <TASK_mutex_lock+0x3a>
 8002232:	4835      	ldr	r0, [pc, #212]	; (8002308 <TASK_mutex_lock+0x14c>)
 8002234:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
 8002238:	f7fe fad2 	bl	80007e0 <SYS_assert>
 800223c:	e7db      	b.n	80021f6 <TASK_mutex_lock+0x3a>
    return TRUE;
  }
  // taken, mark task still allocated and insert into mutexq
  TRACE_TASK_MUTEX_WAIT(t->_id);
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	b173      	cbz	r3, 8002260 <TASK_mutex_lock+0xa4>
 8002242:	4b2f      	ldr	r3, [pc, #188]	; (8002300 <TASK_mutex_lock+0x144>)
 8002244:	7860      	ldrb	r0, [r4, #1]
 8002246:	6819      	ldr	r1, [r3, #0]
 8002248:	4a2e      	ldr	r2, [pc, #184]	; (8002304 <TASK_mutex_lock+0x148>)
 800224a:	f440 5008 	orr.w	r0, r0, #8704	; 0x2200
 800224e:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	2a3e      	cmp	r2, #62	; 0x3e
 8002256:	bf96      	itet	ls
 8002258:	681a      	ldrls	r2, [r3, #0]
 800225a:	2200      	movhi	r2, #0
 800225c:	3201      	addls	r2, #1
 800225e:	601a      	str	r2, [r3, #0]
  enter_critical();
 8002260:	f7fd ff54 	bl	800010c <enter_critical>
  TQ_ENTER_CRITICAL;
  t->wait_mutex = m;
  if ((t->flags & (TASK_STATIC | TASK_LOOP)) == 0) {
 8002264:	78a3      	ldrb	r3, [r4, #2]
  }
  // taken, mark task still allocated and insert into mutexq
  TRACE_TASK_MUTEX_WAIT(t->_id);
  enter_critical();
  TQ_ENTER_CRITICAL;
  t->wait_mutex = m;
 8002266:	6125      	str	r5, [r4, #16]
  if ((t->flags & (TASK_STATIC | TASK_LOOP)) == 0) {
 8002268:	f013 0f06 	tst.w	r3, #6
 800226c:	d10d      	bne.n	800228a <TASK_mutex_lock+0xce>
    task_pool.mask[t->_ix/32] &= ~(1<<(t->_ix & 0x1f));
 800226e:	7821      	ldrb	r1, [r4, #0]
 8002270:	2001      	movs	r0, #1
 8002272:	094a      	lsrs	r2, r1, #5
 8002274:	f001 011f 	and.w	r1, r1, #31
 8002278:	fa00 f101 	lsl.w	r1, r0, r1
 800227c:	32c0      	adds	r2, #192	; 0xc0
 800227e:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8002282:	6950      	ldr	r0, [r2, #20]
 8002284:	ea20 0001 	bic.w	r0, r0, r1
 8002288:	6150      	str	r0, [r2, #20]
  }
  if ((t->flags & TASK_LOOP)) {
 800228a:	079f      	lsls	r7, r3, #30
 800228c:	d523      	bpl.n	80022d6 <TASK_mutex_lock+0x11a>
    // looped, remove us from end of queue
    ASSERT(task_sys.last == t);
 800228e:	6873      	ldr	r3, [r6, #4]
 8002290:	42a3      	cmp	r3, r4
 8002292:	d004      	beq.n	800229e <TASK_mutex_lock+0xe2>
 8002294:	481c      	ldr	r0, [pc, #112]	; (8002308 <TASK_mutex_lock+0x14c>)
 8002296:	f240 2107 	movw	r1, #519	; 0x207
 800229a:	f7fe faa1 	bl	80007e0 <SYS_assert>
    ASSERT(task_sys.head);
 800229e:	6833      	ldr	r3, [r6, #0]
 80022a0:	b923      	cbnz	r3, 80022ac <TASK_mutex_lock+0xf0>
 80022a2:	4819      	ldr	r0, [pc, #100]	; (8002308 <TASK_mutex_lock+0x14c>)
 80022a4:	f44f 7102 	mov.w	r1, #520	; 0x208
 80022a8:	f7fe fa9a 	bl	80007e0 <SYS_assert>
    if (task_sys.head == t) {
 80022ac:	6833      	ldr	r3, [r6, #0]
 80022ae:	4a12      	ldr	r2, [pc, #72]	; (80022f8 <TASK_mutex_lock+0x13c>)
 80022b0:	42a3      	cmp	r3, r4
 80022b2:	d10a      	bne.n	80022ca <TASK_mutex_lock+0x10e>
      // the only task in sched queue
      task_sys.head = NULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	6013      	str	r3, [r2, #0]
      task_sys.last = NULL;
 80022b8:	6053      	str	r3, [r2, #4]
 80022ba:	e00c      	b.n	80022d6 <TASK_mutex_lock+0x11a>
    } else {
      // find the task pointing to the last task == current task
      task *ct = (task *)task_sys.head;
      while (ct->_next != t) {
        ct = ct->_next;
        ASSERT(ct);
 80022bc:	b927      	cbnz	r7, 80022c8 <TASK_mutex_lock+0x10c>
 80022be:	4812      	ldr	r0, [pc, #72]	; (8002308 <TASK_mutex_lock+0x14c>)
 80022c0:	f240 2112 	movw	r1, #530	; 0x212
 80022c4:	f7fe fa8c 	bl	80007e0 <SYS_assert>
    TRACE_TASK_MUTEX_ENTER_M(t->_id);
    ASSERT(m->entries < 254);
    return TRUE;
  }
  // taken, mark task still allocated and insert into mutexq
  TRACE_TASK_MUTEX_WAIT(t->_id);
 80022c8:	463b      	mov	r3, r7
      task_sys.head = NULL;
      task_sys.last = NULL;
    } else {
      // find the task pointing to the last task == current task
      task *ct = (task *)task_sys.head;
      while (ct->_next != t) {
 80022ca:	695f      	ldr	r7, [r3, #20]
 80022cc:	42a7      	cmp	r7, r4
 80022ce:	d1f5      	bne.n	80022bc <TASK_mutex_lock+0x100>
        ct = ct->_next;
        ASSERT(ct);
      }
      // remove last task from queue
      ct->_next = NULL;
 80022d0:	2200      	movs	r2, #0
 80022d2:	615a      	str	r2, [r3, #20]
      task_sys.last = ct;
 80022d4:	6073      	str	r3, [r6, #4]
    }
  }
  TQ_EXIT_CRITICAL;
  exit_critical();
 80022d6:	f7fd ff25 	bl	8000124 <exit_critical>

  // insert into mutex queue
  if (m->last == 0) {
 80022da:	68eb      	ldr	r3, [r5, #12]
 80022dc:	b90b      	cbnz	r3, 80022e2 <TASK_mutex_lock+0x126>
    m->head = t;
 80022de:	60ac      	str	r4, [r5, #8]
 80022e0:	e000      	b.n	80022e4 <TASK_mutex_lock+0x128>
  } else {
    m->last->_next = t;
 80022e2:	615c      	str	r4, [r3, #20]
  }
  m->last = t;
 80022e4:	60ec      	str	r4, [r5, #12]
  t->_next = NULL;
  t->flags &= ~TASK_RUN;
 80022e6:	78a3      	ldrb	r3, [r4, #2]
    m->head = t;
  } else {
    m->last->_next = t;
  }
  m->last = t;
  t->_next = NULL;
 80022e8:	2000      	movs	r0, #0
  t->flags &= ~TASK_RUN;
 80022ea:	f023 0301 	bic.w	r3, r3, #1
  t->flags |= TASK_WAIT;
 80022ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022f2:	70a3      	strb	r3, [r4, #2]
    m->head = t;
  } else {
    m->last->_next = t;
  }
  m->last = t;
  t->_next = NULL;
 80022f4:	6160      	str	r0, [r4, #20]
  t->flags &= ~TASK_RUN;
  t->flags |= TASK_WAIT;

  return FALSE;
}
 80022f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022f8:	200001f0 	.word	0x200001f0
 80022fc:	20000000 	.word	0x20000000
 8002300:	200001c0 	.word	0x200001c0
 8002304:	20000c74 	.word	0x20000c74
 8002308:	08010417 	.word	0x08010417

0800230c <TASK_mutex_try_lock>:

bool TASK_mutex_try_lock(task_mutex *m) {
  if (!m->taken) {
 800230c:	7803      	ldrb	r3, [r0, #0]
  t->flags |= TASK_WAIT;

  return FALSE;
}

bool TASK_mutex_try_lock(task_mutex *m) {
 800230e:	b510      	push	{r4, lr}
  if (!m->taken) {
 8002310:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002314:	b9c3      	cbnz	r3, 8002348 <TASK_mutex_try_lock+0x3c>
    m->entries = 1;
 8002316:	2301      	movs	r3, #1
    task_take_lock(task_sys.current, m);
 8002318:	491f      	ldr	r1, [pc, #124]	; (8002398 <TASK_mutex_try_lock+0x8c>)
  return FALSE;
}

bool TASK_mutex_try_lock(task_mutex *m) {
  if (!m->taken) {
    m->entries = 1;
 800231a:	7083      	strb	r3, [r0, #2]
    task_take_lock(task_sys.current, m);
 800231c:	6889      	ldr	r1, [r1, #8]
}

#ifdef CONFIG_TASKQ_MUTEX

static void task_take_lock(task *t, task_mutex *m) {
  m->taken = TRUE;
 800231e:	7003      	strb	r3, [r0, #0]

bool TASK_mutex_try_lock(task_mutex *m) {
  if (!m->taken) {
    m->entries = 1;
    task_take_lock(task_sys.current, m);
    TRACE_TASK_MUTEX_ENTER(task_sys.current->_id);
 8002320:	4b1e      	ldr	r3, [pc, #120]	; (800239c <TASK_mutex_try_lock+0x90>)

#ifdef CONFIG_TASKQ_MUTEX

static void task_take_lock(task *t, task_mutex *m) {
  m->taken = TRUE;
  m->owner = t;
 8002322:	6041      	str	r1, [r0, #4]

bool TASK_mutex_try_lock(task_mutex *m) {
  if (!m->taken) {
    m->entries = 1;
    task_take_lock(task_sys.current, m);
    TRACE_TASK_MUTEX_ENTER(task_sys.current->_id);
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	b16b      	cbz	r3, 8002344 <TASK_mutex_try_lock+0x38>
 8002328:	4b1d      	ldr	r3, [pc, #116]	; (80023a0 <TASK_mutex_try_lock+0x94>)
 800232a:	784c      	ldrb	r4, [r1, #1]
 800232c:	6818      	ldr	r0, [r3, #0]
 800232e:	491d      	ldr	r1, [pc, #116]	; (80023a4 <TASK_mutex_try_lock+0x98>)
 8002330:	f444 5404 	orr.w	r4, r4, #8448	; 0x2100
 8002334:	f821 4010 	strh.w	r4, [r1, r0, lsl #1]
 8002338:	6819      	ldr	r1, [r3, #0]
 800233a:	293e      	cmp	r1, #62	; 0x3e
 800233c:	bf9c      	itt	ls
 800233e:	681a      	ldrls	r2, [r3, #0]
 8002340:	3201      	addls	r2, #1
 8002342:	601a      	str	r2, [r3, #0]
    return TRUE;
 8002344:	2001      	movs	r0, #1
 8002346:	bd10      	pop	{r4, pc}
  }
  if (m->reentrant && m->owner == task_sys.current) {
 8002348:	7843      	ldrb	r3, [r0, #1]
 800234a:	b313      	cbz	r3, 8002392 <TASK_mutex_try_lock+0x86>
 800234c:	4b12      	ldr	r3, [pc, #72]	; (8002398 <TASK_mutex_try_lock+0x8c>)
 800234e:	6841      	ldr	r1, [r0, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	4299      	cmp	r1, r3
 8002354:	d11d      	bne.n	8002392 <TASK_mutex_try_lock+0x86>
    m->entries++;
 8002356:	7882      	ldrb	r2, [r0, #2]
    TRACE_TASK_MUTEX_ENTER_M(task_sys.current->_id);
 8002358:	4b10      	ldr	r3, [pc, #64]	; (800239c <TASK_mutex_try_lock+0x90>)
    task_take_lock(task_sys.current, m);
    TRACE_TASK_MUTEX_ENTER(task_sys.current->_id);
    return TRUE;
  }
  if (m->reentrant && m->owner == task_sys.current) {
    m->entries++;
 800235a:	3201      	adds	r2, #1
    TRACE_TASK_MUTEX_ENTER_M(task_sys.current->_id);
 800235c:	781b      	ldrb	r3, [r3, #0]
    task_take_lock(task_sys.current, m);
    TRACE_TASK_MUTEX_ENTER(task_sys.current->_id);
    return TRUE;
  }
  if (m->reentrant && m->owner == task_sys.current) {
    m->entries++;
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	7082      	strb	r2, [r0, #2]
    TRACE_TASK_MUTEX_ENTER_M(task_sys.current->_id);
 8002362:	b173      	cbz	r3, 8002382 <TASK_mutex_try_lock+0x76>
 8002364:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <TASK_mutex_try_lock+0x94>)
 8002366:	784c      	ldrb	r4, [r1, #1]
 8002368:	6818      	ldr	r0, [r3, #0]
 800236a:	490e      	ldr	r1, [pc, #56]	; (80023a4 <TASK_mutex_try_lock+0x98>)
 800236c:	f444 5414 	orr.w	r4, r4, #9472	; 0x2500
 8002370:	f821 4010 	strh.w	r4, [r1, r0, lsl #1]
 8002374:	6819      	ldr	r1, [r3, #0]
 8002376:	293e      	cmp	r1, #62	; 0x3e
 8002378:	bf96      	itet	ls
 800237a:	6819      	ldrls	r1, [r3, #0]
 800237c:	2100      	movhi	r1, #0
 800237e:	3101      	addls	r1, #1
 8002380:	6019      	str	r1, [r3, #0]
    ASSERT(m->entries < 254);
 8002382:	2afd      	cmp	r2, #253	; 0xfd
 8002384:	d9de      	bls.n	8002344 <TASK_mutex_try_lock+0x38>
 8002386:	4808      	ldr	r0, [pc, #32]	; (80023a8 <TASK_mutex_try_lock+0x9c>)
 8002388:	f44f 710d 	mov.w	r1, #564	; 0x234
 800238c:	f7fe fa28 	bl	80007e0 <SYS_assert>
 8002390:	e7d8      	b.n	8002344 <TASK_mutex_try_lock+0x38>
    return TRUE;
  }
  return FALSE;
 8002392:	2000      	movs	r0, #0
}
 8002394:	bd10      	pop	{r4, pc}
 8002396:	bf00      	nop
 8002398:	200001f0 	.word	0x200001f0
 800239c:	20000000 	.word	0x20000000
 80023a0:	200001c0 	.word	0x200001c0
 80023a4:	20000c74 	.word	0x20000c74
 80023a8:	08010417 	.word	0x08010417

080023ac <TASK_mutex_unlock>:

void TASK_mutex_unlock(task_mutex *m) {
 80023ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ASSERT(m->entries > 0);
 80023b0:	7883      	ldrb	r3, [r0, #2]
    return TRUE;
  }
  return FALSE;
}

void TASK_mutex_unlock(task_mutex *m) {
 80023b2:	4604      	mov	r4, r0
  ASSERT(m->entries > 0);
 80023b4:	b923      	cbnz	r3, 80023c0 <TASK_mutex_unlock+0x14>
 80023b6:	4835      	ldr	r0, [pc, #212]	; (800248c <TASK_mutex_unlock+0xe0>)
 80023b8:	f240 213b 	movw	r1, #571	; 0x23b
 80023bc:	f7fe fa10 	bl	80007e0 <SYS_assert>
  //ASSERT(m->owner == task_sys.current);
  ASSERT(!m->reentrant && m->entries <= 1);
 80023c0:	7863      	ldrb	r3, [r4, #1]
 80023c2:	b913      	cbnz	r3, 80023ca <TASK_mutex_unlock+0x1e>
 80023c4:	78a3      	ldrb	r3, [r4, #2]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d904      	bls.n	80023d4 <TASK_mutex_unlock+0x28>
 80023ca:	4830      	ldr	r0, [pc, #192]	; (800248c <TASK_mutex_unlock+0xe0>)
 80023cc:	f240 213d 	movw	r1, #573	; 0x23d
 80023d0:	f7fe fa06 	bl	80007e0 <SYS_assert>
  if (m->entries > 1) {
 80023d4:	78a3      	ldrb	r3, [r4, #2]
 80023d6:	4e2e      	ldr	r6, [pc, #184]	; (8002490 <TASK_mutex_unlock+0xe4>)
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d917      	bls.n	800240c <TASK_mutex_unlock+0x60>
    m->entries--;
 80023dc:	3b01      	subs	r3, #1
 80023de:	70a3      	strb	r3, [r4, #2]
    TRACE_TASK_MUTEX_EXIT_L(task_sys.current->_id);
 80023e0:	7833      	ldrb	r3, [r6, #0]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d04f      	beq.n	8002486 <TASK_mutex_unlock+0xda>
 80023e6:	4a2b      	ldr	r2, [pc, #172]	; (8002494 <TASK_mutex_unlock+0xe8>)
 80023e8:	4b2b      	ldr	r3, [pc, #172]	; (8002498 <TASK_mutex_unlock+0xec>)
 80023ea:	6892      	ldr	r2, [r2, #8]
 80023ec:	6819      	ldr	r1, [r3, #0]
 80023ee:	7850      	ldrb	r0, [r2, #1]
 80023f0:	4a2a      	ldr	r2, [pc, #168]	; (800249c <TASK_mutex_unlock+0xf0>)
 80023f2:	f440 5018 	orr.w	r0, r0, #9728	; 0x2600
 80023f6:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	2a3e      	cmp	r2, #62	; 0x3e
 80023fe:	bf96      	itet	ls
 8002400:	681a      	ldrls	r2, [r3, #0]
 8002402:	2200      	movhi	r2, #0
 8002404:	3201      	addls	r2, #1
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return;
  }
  TRACE_TASK_MUTEX_EXIT(task_sys.current->_id);
 800240c:	7833      	ldrb	r3, [r6, #0]
 800240e:	b183      	cbz	r3, 8002432 <TASK_mutex_unlock+0x86>
 8002410:	4a20      	ldr	r2, [pc, #128]	; (8002494 <TASK_mutex_unlock+0xe8>)
 8002412:	4b21      	ldr	r3, [pc, #132]	; (8002498 <TASK_mutex_unlock+0xec>)
 8002414:	6892      	ldr	r2, [r2, #8]
 8002416:	6819      	ldr	r1, [r3, #0]
 8002418:	7850      	ldrb	r0, [r2, #1]
 800241a:	4a20      	ldr	r2, [pc, #128]	; (800249c <TASK_mutex_unlock+0xf0>)
 800241c:	f440 5010 	orr.w	r0, r0, #9216	; 0x2400
 8002420:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	2a3e      	cmp	r2, #62	; 0x3e
 8002428:	bf96      	itet	ls
 800242a:	681a      	ldrls	r2, [r3, #0]
 800242c:	2200      	movhi	r2, #0
 800242e:	3201      	addls	r2, #1
 8002430:	601a      	str	r2, [r3, #0]
  task *t = (task *)m->head;
  while (t) {
    task *next = t->_next;
    t->flags &= ~TASK_WAIT;
    t->wait_mutex = NULL;
    TRACE_TASK_MUTEX_WAKE(t->_id);
 8002432:	4d19      	ldr	r5, [pc, #100]	; (8002498 <TASK_mutex_unlock+0xec>)
  m->taken = TRUE;
  m->owner = t;
}

static void task_release_lock(task_mutex *m) {
  m->taken = FALSE;
 8002434:	2300      	movs	r3, #0
    TRACE_TASK_MUTEX_EXIT_L(task_sys.current->_id);
    return;
  }
  TRACE_TASK_MUTEX_EXIT(task_sys.current->_id);
  task_release_lock(m);
  task *t = (task *)m->head;
 8002436:	68a0      	ldr	r0, [r4, #8]
  while (t) {
    task *next = t->_next;
    t->flags &= ~TASK_WAIT;
    t->wait_mutex = NULL;
    TRACE_TASK_MUTEX_WAKE(t->_id);
 8002438:	4f18      	ldr	r7, [pc, #96]	; (800249c <TASK_mutex_unlock+0xf0>)
  m->taken = TRUE;
  m->owner = t;
}

static void task_release_lock(task_mutex *m) {
  m->taken = FALSE;
 800243a:	7023      	strb	r3, [r4, #0]
  m->owner = NULL;
 800243c:	6063      	str	r3, [r4, #4]
 800243e:	46a8      	mov	r8, r5
    return;
  }
  TRACE_TASK_MUTEX_EXIT(task_sys.current->_id);
  task_release_lock(m);
  task *t = (task *)m->head;
  while (t) {
 8002440:	b1f8      	cbz	r0, 8002482 <TASK_mutex_unlock+0xd6>
    task *next = t->_next;
    t->flags &= ~TASK_WAIT;
 8002442:	7883      	ldrb	r3, [r0, #2]
    t->wait_mutex = NULL;
    TRACE_TASK_MUTEX_WAKE(t->_id);
 8002444:	7831      	ldrb	r1, [r6, #0]
  TRACE_TASK_MUTEX_EXIT(task_sys.current->_id);
  task_release_lock(m);
  task *t = (task *)m->head;
  while (t) {
    task *next = t->_next;
    t->flags &= ~TASK_WAIT;
 8002446:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800244a:	7082      	strb	r2, [r0, #2]
    t->wait_mutex = NULL;
 800244c:	2200      	movs	r2, #0
  }
  TRACE_TASK_MUTEX_EXIT(task_sys.current->_id);
  task_release_lock(m);
  task *t = (task *)m->head;
  while (t) {
    task *next = t->_next;
 800244e:	f8d0 9014 	ldr.w	r9, [r0, #20]
    t->flags &= ~TASK_WAIT;
    t->wait_mutex = NULL;
 8002452:	6102      	str	r2, [r0, #16]
    TRACE_TASK_MUTEX_WAKE(t->_id);
 8002454:	b169      	cbz	r1, 8002472 <TASK_mutex_unlock+0xc6>
 8002456:	f890 c001 	ldrb.w	ip, [r0, #1]
 800245a:	6829      	ldr	r1, [r5, #0]
 800245c:	f44c 5c0c 	orr.w	ip, ip, #8960	; 0x2300
 8002460:	f827 c011 	strh.w	ip, [r7, r1, lsl #1]
 8002464:	6829      	ldr	r1, [r5, #0]
 8002466:	293e      	cmp	r1, #62	; 0x3e
 8002468:	bf9c      	itt	ls
 800246a:	682a      	ldrls	r2, [r5, #0]
 800246c:	3201      	addls	r2, #1
 800246e:	f8c8 2000 	str.w	r2, [r8]
    if ((t->flags & TASK_KILLED) == 0) {
 8002472:	071b      	lsls	r3, r3, #28
 8002474:	d403      	bmi.n	800247e <TASK_mutex_unlock+0xd2>
      TASK_run(t, t->arg, t->arg_p);
 8002476:	6841      	ldr	r1, [r0, #4]
 8002478:	6882      	ldr	r2, [r0, #8]
 800247a:	f7ff fc6f 	bl	8001d5c <TASK_run>
  task *t = (task *)m->head;
  while (t) {
    task *next = t->_next;
    t->flags &= ~TASK_WAIT;
    t->wait_mutex = NULL;
    TRACE_TASK_MUTEX_WAKE(t->_id);
 800247e:	4648      	mov	r0, r9
 8002480:	e7de      	b.n	8002440 <TASK_mutex_unlock+0x94>
    if ((t->flags & TASK_KILLED) == 0) {
      TASK_run(t, t->arg, t->arg_p);
    }
    t = next;
  }
  m->head = NULL;
 8002482:	60a0      	str	r0, [r4, #8]
  m->last = NULL;
 8002484:	60e0      	str	r0, [r4, #12]
 8002486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800248a:	bf00      	nop
 800248c:	08010417 	.word	0x08010417
 8002490:	20000000 	.word	0x20000000
 8002494:	200001f0 	.word	0x200001f0
 8002498:	200001c0 	.word	0x200001c0
 800249c:	20000c74 	.word	0x20000c74

080024a0 <TASK_next_wakeup_ms>:
    }
  }
}

s32_t TASK_next_wakeup_ms(sys_time *t, task_timer **timer) {
  task_timer *cur_timer = task_sys.first_timer;
 80024a0:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <TASK_next_wakeup_ms+0x20>)
 80024a2:	68db      	ldr	r3, [r3, #12]
  if (cur_timer == NULL) {
 80024a4:	b913      	cbnz	r3, 80024ac <TASK_next_wakeup_ms+0xc>
    if (timer) *timer = NULL;
 80024a6:	b141      	cbz	r1, 80024ba <TASK_next_wakeup_ms+0x1a>
 80024a8:	600b      	str	r3, [r1, #0]
 80024aa:	e006      	b.n	80024ba <TASK_next_wakeup_ms+0x1a>
    return -1;
  }
  if (t) *t = cur_timer->start_time;
 80024ac:	b108      	cbz	r0, 80024b2 <TASK_next_wakeup_ms+0x12>
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	6002      	str	r2, [r0, #0]
  if (timer) *timer = cur_timer;
 80024b2:	b101      	cbz	r1, 80024b6 <TASK_next_wakeup_ms+0x16>
 80024b4:	600b      	str	r3, [r1, #0]
  return 0;
 80024b6:	2000      	movs	r0, #0
 80024b8:	4770      	bx	lr

s32_t TASK_next_wakeup_ms(sys_time *t, task_timer **timer) {
  task_timer *cur_timer = task_sys.first_timer;
  if (cur_timer == NULL) {
    if (timer) *timer = NULL;
    return -1;
 80024ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024be:	4770      	bx	lr
 80024c0:	200001f0 	.word	0x200001f0

080024c4 <TASK_timer>:
  if (timer) *timer = cur_timer;
  return 0;
}


void TASK_timer() {
 80024c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  task_timer *cur_timer = task_sys.first_timer;
 80024c8:	4f21      	ldr	r7, [pc, #132]	; (8002550 <TASK_timer+0x8c>)
 80024ca:	68fc      	ldr	r4, [r7, #12]
  if (cur_timer == NULL || task_sys.tim_lock) {
 80024cc:	2c00      	cmp	r4, #0
 80024ce:	d03d      	beq.n	800254c <TASK_timer+0x88>
 80024d0:	7c3b      	ldrb	r3, [r7, #16]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d13a      	bne.n	800254c <TASK_timer+0x88>
    enter_critical();
    TQ_ENTER_CRITICAL;
#endif
    if (((cur_timer->task->flags & (TASK_RUN | TASK_WAIT)) == 0) && cur_timer->alive) {
      // expired, schedule for run
      TRACE_TASK_TIMER(cur_timer->_ix);
 80024d6:	4d1f      	ldr	r5, [pc, #124]	; (8002554 <TASK_timer+0x90>)
 80024d8:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800255c <TASK_timer+0x98>
 80024dc:	46a9      	mov	r9, r5
  if (cur_timer == NULL || task_sys.tim_lock) {
    return;
  }

  task_timer *old_timer = NULL;
  while (cur_timer && cur_timer->start_time <= SYS_get_time_ms()) {
 80024de:	68a6      	ldr	r6, [r4, #8]
 80024e0:	f7fe f874 	bl	80005cc <SYS_get_time_ms>
 80024e4:	4286      	cmp	r6, r0
 80024e6:	d831      	bhi.n	800254c <TASK_timer+0x88>
#ifndef CONFIG_TASK_NONCRITICAL_TIMER
    enter_critical();
 80024e8:	f7fd fe10 	bl	800010c <enter_critical>
    TQ_ENTER_CRITICAL;
#endif
    if (((cur_timer->task->flags & (TASK_RUN | TASK_WAIT)) == 0) && cur_timer->alive) {
 80024ec:	6860      	ldr	r0, [r4, #4]
 80024ee:	7883      	ldrb	r3, [r0, #2]
 80024f0:	f013 0341 	ands.w	r3, r3, #65	; 0x41
 80024f4:	d116      	bne.n	8002524 <TASK_timer+0x60>
 80024f6:	7e22      	ldrb	r2, [r4, #24]
 80024f8:	b1a2      	cbz	r2, 8002524 <TASK_timer+0x60>
      // expired, schedule for run
      TRACE_TASK_TIMER(cur_timer->_ix);
 80024fa:	f898 2000 	ldrb.w	r2, [r8]
 80024fe:	b16a      	cbz	r2, 800251c <TASK_timer+0x58>
 8002500:	7826      	ldrb	r6, [r4, #0]
 8002502:	6829      	ldr	r1, [r5, #0]
 8002504:	4a14      	ldr	r2, [pc, #80]	; (8002558 <TASK_timer+0x94>)
 8002506:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
 800250a:	f822 6011 	strh.w	r6, [r2, r1, lsl #1]
 800250e:	682a      	ldr	r2, [r5, #0]
 8002510:	2a3e      	cmp	r2, #62	; 0x3e
 8002512:	bf9c      	itt	ls
 8002514:	682b      	ldrls	r3, [r5, #0]
 8002516:	3301      	addls	r3, #1
 8002518:	f8c9 3000 	str.w	r3, [r9]
#ifndef CONFIG_TASK_NONCRITICAL_TIMER
      TQ_EXIT_CRITICAL;
#endif
      TASK_run(cur_timer->task, cur_timer->arg, cur_timer->arg_p);
 800251c:	6921      	ldr	r1, [r4, #16]
 800251e:	6962      	ldr	r2, [r4, #20]
 8002520:	f7ff fc1c 	bl	8001d5c <TASK_run>
#ifndef CONFIG_TASK_NONCRITICAL_TIMER
      TQ_ENTER_CRITICAL;
#endif
    }
    old_timer = cur_timer;
    cur_timer = cur_timer->_next;
 8002524:	6a26      	ldr	r6, [r4, #32]
    task_sys.first_timer = cur_timer;
    if (old_timer->recurrent_time && old_timer->alive) {
 8002526:	68e3      	ldr	r3, [r4, #12]
      TQ_ENTER_CRITICAL;
#endif
    }
    old_timer = cur_timer;
    cur_timer = cur_timer->_next;
    task_sys.first_timer = cur_timer;
 8002528:	60fe      	str	r6, [r7, #12]
    if (old_timer->recurrent_time && old_timer->alive) {
 800252a:	b143      	cbz	r3, 800253e <TASK_timer+0x7a>
 800252c:	7e22      	ldrb	r2, [r4, #24]
 800252e:	b132      	cbz	r2, 800253e <TASK_timer+0x7a>
      // recurrent, reinsert
      old_timer->start_time += old_timer->recurrent_time; // need to set this before inserting for sorting
 8002530:	68a1      	ldr	r1, [r4, #8]
      task_insert_timer(old_timer, old_timer->start_time);
 8002532:	4620      	mov	r0, r4
    old_timer = cur_timer;
    cur_timer = cur_timer->_next;
    task_sys.first_timer = cur_timer;
    if (old_timer->recurrent_time && old_timer->alive) {
      // recurrent, reinsert
      old_timer->start_time += old_timer->recurrent_time; // need to set this before inserting for sorting
 8002534:	4419      	add	r1, r3
 8002536:	60a1      	str	r1, [r4, #8]
      task_insert_timer(old_timer, old_timer->start_time);
 8002538:	f7ff fa64 	bl	8001a04 <task_insert_timer>
 800253c:	e001      	b.n	8002542 <TASK_timer+0x7e>
    } else {
      old_timer->alive = FALSE;
 800253e:	2300      	movs	r3, #0
 8002540:	7623      	strb	r3, [r4, #24]
    }
#ifndef CONFIG_TASK_NONCRITICAL_TIMER
    TQ_EXIT_CRITICAL;
    exit_critical();
 8002542:	f7fd fdef 	bl	8000124 <exit_critical>
  if (cur_timer == NULL || task_sys.tim_lock) {
    return;
  }

  task_timer *old_timer = NULL;
  while (cur_timer && cur_timer->start_time <= SYS_get_time_ms()) {
 8002546:	b10e      	cbz	r6, 800254c <TASK_timer+0x88>
#ifndef CONFIG_TASK_NONCRITICAL_TIMER
      TQ_ENTER_CRITICAL;
#endif
    }
    old_timer = cur_timer;
    cur_timer = cur_timer->_next;
 8002548:	4634      	mov	r4, r6
 800254a:	e7c8      	b.n	80024de <TASK_timer+0x1a>
 800254c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002550:	200001f0 	.word	0x200001f0
 8002554:	200001c0 	.word	0x200001c0
 8002558:	20000c74 	.word	0x20000c74
 800255c:	20000000 	.word	0x20000000

08002560 <ringbuf_init>:
  ((rix == 0 && wix == rb->max_len-1) || wix == rix-1)

void ringbuf_init(ringbuf *rb, u8_t *buffer, u16_t max_len) {
  rb->max_len = max_len;
  rb->buffer = buffer;
  rb->r_ix = 0;
 8002560:	2300      	movs	r3, #0
 8002562:	8083      	strh	r3, [r0, #4]
  (rix == wix)
#define RB_FULL(rix, wix) \
  ((rix == 0 && wix == rb->max_len-1) || wix == rix-1)

void ringbuf_init(ringbuf *rb, u8_t *buffer, u16_t max_len) {
  rb->max_len = max_len;
 8002564:	8102      	strh	r2, [r0, #8]
  rb->buffer = buffer;
 8002566:	6001      	str	r1, [r0, #0]
  rb->r_ix = 0;
  rb->w_ix = 0;
 8002568:	80c3      	strh	r3, [r0, #6]
 800256a:	4770      	bx	lr

0800256c <ringbuf_getc>:
}

int ringbuf_getc(ringbuf *rb, u8_t *c) {
  u16_t rix = rb->r_ix;
 800256c:	8883      	ldrh	r3, [r0, #4]
  u16_t wix = rb->w_ix;
 800256e:	88c2      	ldrh	r2, [r0, #6]
  rb->r_ix = 0;
  rb->w_ix = 0;
}

int ringbuf_getc(ringbuf *rb, u8_t *c) {
  u16_t rix = rb->r_ix;
 8002570:	b29b      	uxth	r3, r3
  u16_t wix = rb->w_ix;
 8002572:	b292      	uxth	r2, r2
  if (RB_EMPTY(rix, wix)) {
 8002574:	4293      	cmp	r3, r2
 8002576:	d00d      	beq.n	8002594 <ringbuf_getc+0x28>
    return RB_ERR_EMPTY;
  }
  if (c) {
 8002578:	b111      	cbz	r1, 8002580 <ringbuf_getc+0x14>
    *c = rb->buffer[rix];
 800257a:	6802      	ldr	r2, [r0, #0]
 800257c:	5cd2      	ldrb	r2, [r2, r3]
 800257e:	700a      	strb	r2, [r1, #0]
  }
  if (rix >= rb->max_len-1) {
 8002580:	8902      	ldrh	r2, [r0, #8]
 8002582:	3a01      	subs	r2, #1
 8002584:	4293      	cmp	r3, r2
    rix = 0;
  } else {
    rix++;
 8002586:	bfba      	itte	lt
 8002588:	3301      	addlt	r3, #1
 800258a:	b29b      	uxthlt	r3, r3
  }
  if (c) {
    *c = rb->buffer[rix];
  }
  if (rix >= rb->max_len-1) {
    rix = 0;
 800258c:	2300      	movge	r3, #0
  } else {
    rix++;
  }
  rb->r_ix = rix;
 800258e:	8083      	strh	r3, [r0, #4]

  return RB_OK;
 8002590:	2000      	movs	r0, #0
 8002592:	4770      	bx	lr

int ringbuf_getc(ringbuf *rb, u8_t *c) {
  u16_t rix = rb->r_ix;
  u16_t wix = rb->w_ix;
  if (RB_EMPTY(rix, wix)) {
    return RB_ERR_EMPTY;
 8002594:	4800      	ldr	r0, [pc, #0]	; (8002598 <ringbuf_getc+0x2c>)
    rix++;
  }
  rb->r_ix = rix;

  return RB_OK;
}
 8002596:	4770      	bx	lr
 8002598:	fffffe0c 	.word	0xfffffe0c

0800259c <ringbuf_putc>:


int ringbuf_putc(ringbuf *rb, u8_t c) {
  u16_t rix = rb->r_ix;
 800259c:	8882      	ldrh	r2, [r0, #4]
  u16_t wix = rb->w_ix;
 800259e:	88c3      	ldrh	r3, [r0, #6]
  return RB_OK;
}


int ringbuf_putc(ringbuf *rb, u8_t c) {
  u16_t rix = rb->r_ix;
 80025a0:	b292      	uxth	r2, r2

  return RB_OK;
}


int ringbuf_putc(ringbuf *rb, u8_t c) {
 80025a2:	b510      	push	{r4, lr}
  u16_t rix = rb->r_ix;
  u16_t wix = rb->w_ix;
 80025a4:	b29b      	uxth	r3, r3
  if (RB_FULL(rix, wix)) {
 80025a6:	b91a      	cbnz	r2, 80025b0 <ringbuf_putc+0x14>
 80025a8:	8904      	ldrh	r4, [r0, #8]
 80025aa:	3c01      	subs	r4, #1
 80025ac:	42a3      	cmp	r3, r4
 80025ae:	d00e      	beq.n	80025ce <ringbuf_putc+0x32>
 80025b0:	3a01      	subs	r2, #1
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d00b      	beq.n	80025ce <ringbuf_putc+0x32>
    return RB_ERR_FULL;
  }
  rb->buffer[wix] = c;
 80025b6:	6802      	ldr	r2, [r0, #0]
 80025b8:	54d1      	strb	r1, [r2, r3]
  if (wix >= rb->max_len-1) {
 80025ba:	8902      	ldrh	r2, [r0, #8]
 80025bc:	3a01      	subs	r2, #1
 80025be:	4293      	cmp	r3, r2
    wix = 0;
  } else {
    wix++;
 80025c0:	bfba      	itte	lt
 80025c2:	3301      	addlt	r3, #1
 80025c4:	b29b      	uxthlt	r3, r3
  if (RB_FULL(rix, wix)) {
    return RB_ERR_FULL;
  }
  rb->buffer[wix] = c;
  if (wix >= rb->max_len-1) {
    wix = 0;
 80025c6:	2300      	movge	r3, #0
  } else {
    wix++;
  }
  rb->w_ix = wix;
 80025c8:	80c3      	strh	r3, [r0, #6]

  return RB_OK;
 80025ca:	2000      	movs	r0, #0
 80025cc:	bd10      	pop	{r4, pc}

int ringbuf_putc(ringbuf *rb, u8_t c) {
  u16_t rix = rb->r_ix;
  u16_t wix = rb->w_ix;
  if (RB_FULL(rix, wix)) {
    return RB_ERR_FULL;
 80025ce:	f46f 70fa 	mvn.w	r0, #500	; 0x1f4
    wix++;
  }
  rb->w_ix = wix;

  return RB_OK;
}
 80025d2:	bd10      	pop	{r4, pc}

080025d4 <ringbuf_available>:

int ringbuf_available(ringbuf *rb) {
  u16_t rix = rb->r_ix;
 80025d4:	8882      	ldrh	r2, [r0, #4]
  u16_t wix = rb->w_ix;
 80025d6:	88c3      	ldrh	r3, [r0, #6]

  return RB_OK;
}

int ringbuf_available(ringbuf *rb) {
  u16_t rix = rb->r_ix;
 80025d8:	b292      	uxth	r2, r2
  u16_t wix = rb->w_ix;
 80025da:	b29b      	uxth	r3, r3
  return RB_AVAIL(rix, wix);
 80025dc:	4293      	cmp	r3, r2
 80025de:	ebc2 0303 	rsb	r3, r2, r3
 80025e2:	d301      	bcc.n	80025e8 <ringbuf_available+0x14>
 80025e4:	4618      	mov	r0, r3
 80025e6:	4770      	bx	lr
 80025e8:	8900      	ldrh	r0, [r0, #8]
 80025ea:	4418      	add	r0, r3
}
 80025ec:	4770      	bx	lr

080025ee <ringbuf_clear>:

int ringbuf_clear(ringbuf *rb) {
 80025ee:	4603      	mov	r3, r0
  u16_t rix = rb->r_ix;
 80025f0:	8882      	ldrh	r2, [r0, #4]
  u16_t wix = rb->w_ix;
 80025f2:	88c0      	ldrh	r0, [r0, #6]
  u16_t wix = rb->w_ix;
  return RB_AVAIL(rix, wix);
}

int ringbuf_clear(ringbuf *rb) {
  u16_t rix = rb->r_ix;
 80025f4:	b292      	uxth	r2, r2
  u16_t wix = rb->w_ix;
 80025f6:	b280      	uxth	r0, r0
  u16_t avail = RB_AVAIL(rix, wix);
 80025f8:	4290      	cmp	r0, r2
 80025fa:	bf3c      	itt	cc
 80025fc:	8919      	ldrhcc	r1, [r3, #8]
 80025fe:	1840      	addcc	r0, r0, r1
 8002600:	1a80      	subs	r0, r0, r2
  rb->r_ix = 0;
 8002602:	2200      	movs	r2, #0
 8002604:	809a      	strh	r2, [r3, #4]
}

int ringbuf_clear(ringbuf *rb) {
  u16_t rix = rb->r_ix;
  u16_t wix = rb->w_ix;
  u16_t avail = RB_AVAIL(rix, wix);
 8002606:	b280      	uxth	r0, r0
  rb->r_ix = 0;
  rb->w_ix = 0;
 8002608:	80da      	strh	r2, [r3, #6]
  return avail;
}
 800260a:	4770      	bx	lr

0800260c <ringbuf_available_linear>:

int ringbuf_available_linear(ringbuf *rb, u8_t **ptr) {
  u16_t rix = rb->r_ix;
 800260c:	8883      	ldrh	r3, [r0, #4]
  rb->r_ix = 0;
  rb->w_ix = 0;
  return avail;
}

int ringbuf_available_linear(ringbuf *rb, u8_t **ptr) {
 800260e:	4602      	mov	r2, r0
  u16_t rix = rb->r_ix;
  u16_t wix = rb->w_ix;
 8002610:	88c0      	ldrh	r0, [r0, #6]
  rb->w_ix = 0;
  return avail;
}

int ringbuf_available_linear(ringbuf *rb, u8_t **ptr) {
  u16_t rix = rb->r_ix;
 8002612:	b29b      	uxth	r3, r3
  u16_t wix = rb->w_ix;
 8002614:	b280      	uxth	r0, r0

  if (rix == wix) {
 8002616:	4283      	cmp	r3, r0
  rb->r_ix = 0;
  rb->w_ix = 0;
  return avail;
}

int ringbuf_available_linear(ringbuf *rb, u8_t **ptr) {
 8002618:	b510      	push	{r4, lr}
  u16_t rix = rb->r_ix;
  u16_t wix = rb->w_ix;

  if (rix == wix) {
 800261a:	d00e      	beq.n	800263a <ringbuf_available_linear+0x2e>
    return 0;
  } else {
    u16_t avail = RB_AVAIL(rix, wix);
 800261c:	4298      	cmp	r0, r3
 800261e:	bf3c      	itt	cc
 8002620:	8914      	ldrhcc	r4, [r2, #8]
 8002622:	1900      	addcc	r0, r0, r4
    *ptr = &rb->buffer[rix];
 8002624:	6814      	ldr	r4, [r2, #0]
  u16_t wix = rb->w_ix;

  if (rix == wix) {
    return 0;
  } else {
    u16_t avail = RB_AVAIL(rix, wix);
 8002626:	1ac0      	subs	r0, r0, r3
 8002628:	b280      	uxth	r0, r0
    *ptr = &rb->buffer[rix];
 800262a:	441c      	add	r4, r3

    if (rix + avail < rb->max_len) {
 800262c:	8912      	ldrh	r2, [r2, #8]

  if (rix == wix) {
    return 0;
  } else {
    u16_t avail = RB_AVAIL(rix, wix);
    *ptr = &rb->buffer[rix];
 800262e:	600c      	str	r4, [r1, #0]

    if (rix + avail < rb->max_len) {
 8002630:	1819      	adds	r1, r3, r0
 8002632:	4291      	cmp	r1, r2
 8002634:	db02      	blt.n	800263c <ringbuf_available_linear+0x30>
      return avail;
    } else {
      return rb->max_len - rix;
 8002636:	1ad0      	subs	r0, r2, r3
 8002638:	bd10      	pop	{r4, pc}
int ringbuf_available_linear(ringbuf *rb, u8_t **ptr) {
  u16_t rix = rb->r_ix;
  u16_t wix = rb->w_ix;

  if (rix == wix) {
    return 0;
 800263a:	2000      	movs	r0, #0
      return avail;
    } else {
      return rb->max_len - rix;
    }
  }
}
 800263c:	bd10      	pop	{r4, pc}

0800263e <ringbuf_free>:

int ringbuf_free(ringbuf *rb) {
  u16_t rix = rb->r_ix;
 800263e:	8882      	ldrh	r2, [r0, #4]
  u16_t wix = rb->w_ix;
 8002640:	88c3      	ldrh	r3, [r0, #6]
    }
  }
}

int ringbuf_free(ringbuf *rb) {
  u16_t rix = rb->r_ix;
 8002642:	b292      	uxth	r2, r2
  u16_t wix = rb->w_ix;
  return RB_FREE(rix, wix);
 8002644:	8900      	ldrh	r0, [r0, #8]
  }
}

int ringbuf_free(ringbuf *rb) {
  u16_t rix = rb->r_ix;
  u16_t wix = rb->w_ix;
 8002646:	b29b      	uxth	r3, r3
  return RB_FREE(rix, wix);
 8002648:	4293      	cmp	r3, r2
 800264a:	ebc2 0303 	rsb	r3, r2, r3
 800264e:	bf38      	it	cc
 8002650:	181b      	addcc	r3, r3, r0
 8002652:	1ac0      	subs	r0, r0, r3
}
 8002654:	3801      	subs	r0, #1
 8002656:	4770      	bx	lr

08002658 <ringbuf_put>:

int ringbuf_put(ringbuf *rb, u8_t *buf, u16_t len) {
  u16_t rix = rb->r_ix;
 8002658:	8883      	ldrh	r3, [r0, #4]
  u16_t rix = rb->r_ix;
  u16_t wix = rb->w_ix;
  return RB_FREE(rix, wix);
}

int ringbuf_put(ringbuf *rb, u8_t *buf, u16_t len) {
 800265a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t rix = rb->r_ix;
  u16_t wix = rb->w_ix;
 800265e:	88c4      	ldrh	r4, [r0, #6]
  u16_t wix = rb->w_ix;
  return RB_FREE(rix, wix);
}

int ringbuf_put(ringbuf *rb, u8_t *buf, u16_t len) {
  u16_t rix = rb->r_ix;
 8002660:	b29b      	uxth	r3, r3
  u16_t rix = rb->r_ix;
  u16_t wix = rb->w_ix;
  return RB_FREE(rix, wix);
}

int ringbuf_put(ringbuf *rb, u8_t *buf, u16_t len) {
 8002662:	4606      	mov	r6, r0
 8002664:	460d      	mov	r5, r1
  u16_t rix = rb->r_ix;
  u16_t wix = rb->w_ix;
 8002666:	b2a4      	uxth	r4, r4
  int to_write;
  if (RB_FULL(rix, wix)) {
 8002668:	b91b      	cbnz	r3, 8002672 <ringbuf_put+0x1a>
 800266a:	8901      	ldrh	r1, [r0, #8]
 800266c:	3901      	subs	r1, #1
 800266e:	428c      	cmp	r4, r1
 8002670:	d05c      	beq.n	800272c <ringbuf_put+0xd4>
 8002672:	1e59      	subs	r1, r3, #1
 8002674:	428c      	cmp	r4, r1
 8002676:	d059      	beq.n	800272c <ringbuf_put+0xd4>
    return RB_ERR_FULL;
  }
  u16_t free = RB_FREE(rix, wix);
 8002678:	f8b6 8008 	ldrh.w	r8, [r6, #8]
 800267c:	429c      	cmp	r4, r3
 800267e:	bf36      	itet	cc
 8002680:	eb08 0104 	addcc.w	r1, r8, r4
 8002684:	ebc3 0304 	rsbcs	r3, r3, r4
 8002688:	ebc3 0301 	rsbcc	r3, r3, r1
 800268c:	b29b      	uxth	r3, r3
 800268e:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
 8002692:	1aff      	subs	r7, r7, r3
 8002694:	b2bf      	uxth	r7, r7
  if (len > free) {
    len = free;
  }
  to_write = len;
 8002696:	4297      	cmp	r7, r2
 8002698:	bf28      	it	cs
 800269a:	4617      	movcs	r7, r2
  if (wix + len >= rb->max_len) {
 800269c:	19e3      	adds	r3, r4, r7
 800269e:	4543      	cmp	r3, r8
 80026a0:	db1f      	blt.n	80026e2 <ringbuf_put+0x8a>
    u16_t part = rb->max_len - wix;
    ASSERT(VALID_DATA(buf));
 80026a2:	4b24      	ldr	r3, [pc, #144]	; (8002734 <ringbuf_put+0xdc>)
  if (len > free) {
    len = free;
  }
  to_write = len;
  if (wix + len >= rb->max_len) {
    u16_t part = rb->max_len - wix;
 80026a4:	ebc4 0808 	rsb	r8, r4, r8
    ASSERT(VALID_DATA(buf));
 80026a8:	429d      	cmp	r5, r3
  if (len > free) {
    len = free;
  }
  to_write = len;
  if (wix + len >= rb->max_len) {
    u16_t part = rb->max_len - wix;
 80026aa:	fa1f f888 	uxth.w	r8, r8
    ASSERT(VALID_DATA(buf));
 80026ae:	d303      	bcc.n	80026b8 <ringbuf_put+0x60>
 80026b0:	4a21      	ldr	r2, [pc, #132]	; (8002738 <ringbuf_put+0xe0>)
 80026b2:	4413      	add	r3, r2
 80026b4:	429d      	cmp	r5, r3
 80026b6:	d309      	bcc.n	80026cc <ringbuf_put+0x74>
 80026b8:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
 80026bc:	d302      	bcc.n	80026c4 <ringbuf_put+0x6c>
 80026be:	4b1f      	ldr	r3, [pc, #124]	; (800273c <ringbuf_put+0xe4>)
 80026c0:	429d      	cmp	r5, r3
 80026c2:	d303      	bcc.n	80026cc <ringbuf_put+0x74>
 80026c4:	481e      	ldr	r0, [pc, #120]	; (8002740 <ringbuf_put+0xe8>)
 80026c6:	2176      	movs	r1, #118	; 0x76
 80026c8:	f7fe f88a 	bl	80007e0 <SYS_assert>
    memcpy(&rb->buffer[wix], buf, part);
 80026cc:	6830      	ldr	r0, [r6, #0]
 80026ce:	4629      	mov	r1, r5
 80026d0:	4420      	add	r0, r4
 80026d2:	4642      	mov	r2, r8
    buf +=part;
 80026d4:	4445      	add	r5, r8
  }
  to_write = len;
  if (wix + len >= rb->max_len) {
    u16_t part = rb->max_len - wix;
    ASSERT(VALID_DATA(buf));
    memcpy(&rb->buffer[wix], buf, part);
 80026d6:	f00b fe07 	bl	800e2e8 <memcpy>
    buf +=part;
    to_write -= part;
 80026da:	ebc8 0807 	rsb	r8, r8, r7
    wix = 0;
 80026de:	2400      	movs	r4, #0
 80026e0:	e000      	b.n	80026e4 <ringbuf_put+0x8c>
  }
  u16_t free = RB_FREE(rix, wix);
  if (len > free) {
    len = free;
  }
  to_write = len;
 80026e2:	46b8      	mov	r8, r7
    memcpy(&rb->buffer[wix], buf, part);
    buf +=part;
    to_write -= part;
    wix = 0;
  }
  if (to_write > 0) {
 80026e4:	f1b8 0f00 	cmp.w	r8, #0
 80026e8:	dd18      	ble.n	800271c <ringbuf_put+0xc4>
    ASSERT(VALID_DATA(buf));
 80026ea:	4b12      	ldr	r3, [pc, #72]	; (8002734 <ringbuf_put+0xdc>)
 80026ec:	429d      	cmp	r5, r3
 80026ee:	d303      	bcc.n	80026f8 <ringbuf_put+0xa0>
 80026f0:	4a11      	ldr	r2, [pc, #68]	; (8002738 <ringbuf_put+0xe0>)
 80026f2:	4413      	add	r3, r2
 80026f4:	429d      	cmp	r5, r3
 80026f6:	d309      	bcc.n	800270c <ringbuf_put+0xb4>
 80026f8:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
 80026fc:	d302      	bcc.n	8002704 <ringbuf_put+0xac>
 80026fe:	4b0f      	ldr	r3, [pc, #60]	; (800273c <ringbuf_put+0xe4>)
 8002700:	429d      	cmp	r5, r3
 8002702:	d303      	bcc.n	800270c <ringbuf_put+0xb4>
 8002704:	480e      	ldr	r0, [pc, #56]	; (8002740 <ringbuf_put+0xe8>)
 8002706:	217d      	movs	r1, #125	; 0x7d
 8002708:	f7fe f86a 	bl	80007e0 <SYS_assert>
    memcpy(&rb->buffer[wix], buf, to_write);
 800270c:	6830      	ldr	r0, [r6, #0]
 800270e:	4629      	mov	r1, r5
 8002710:	4420      	add	r0, r4
 8002712:	4642      	mov	r2, r8
 8002714:	f00b fde8 	bl	800e2e8 <memcpy>
    wix += to_write;
 8002718:	4444      	add	r4, r8
 800271a:	b2a4      	uxth	r4, r4
  }
  if (wix >= rb->max_len) {
 800271c:	8933      	ldrh	r3, [r6, #8]
    wix = 0;
  }
  rb->w_ix = wix;

  return len;
 800271e:	4638      	mov	r0, r7
    ASSERT(VALID_DATA(buf));
    memcpy(&rb->buffer[wix], buf, to_write);
    wix += to_write;
  }
  if (wix >= rb->max_len) {
    wix = 0;
 8002720:	42a3      	cmp	r3, r4
 8002722:	bf98      	it	ls
 8002724:	2400      	movls	r4, #0
  }
  rb->w_ix = wix;
 8002726:	80f4      	strh	r4, [r6, #6]

  return len;
 8002728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
int ringbuf_put(ringbuf *rb, u8_t *buf, u16_t len) {
  u16_t rix = rb->r_ix;
  u16_t wix = rb->w_ix;
  int to_write;
  if (RB_FULL(rix, wix)) {
    return RB_ERR_FULL;
 800272c:	f46f 70fa 	mvn.w	r0, #500	; 0x1f4
    wix = 0;
  }
  rb->w_ix = wix;

  return len;
}
 8002730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002734:	20000000 	.word	0x20000000
 8002738:	00005000 	.word	0x00005000
 800273c:	08018000 	.word	0x08018000
 8002740:	0801050f 	.word	0x0801050f

08002744 <ringbuf_get>:

int ringbuf_get(ringbuf *rb, u8_t *buf, u16_t len) {
 8002744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t rix = rb->r_ix;
 8002748:	8884      	ldrh	r4, [r0, #4]
  u16_t wix = rb->w_ix;
 800274a:	88c3      	ldrh	r3, [r0, #6]

  return len;
}

int ringbuf_get(ringbuf *rb, u8_t *buf, u16_t len) {
  u16_t rix = rb->r_ix;
 800274c:	b2a4      	uxth	r4, r4
  u16_t wix = rb->w_ix;
 800274e:	b29b      	uxth	r3, r3
  int to_read;

  if (RB_EMPTY(rix, wix)) {
 8002750:	429c      	cmp	r4, r3
  rb->w_ix = wix;

  return len;
}

int ringbuf_get(ringbuf *rb, u8_t *buf, u16_t len) {
 8002752:	4606      	mov	r6, r0
 8002754:	460d      	mov	r5, r1
  u16_t rix = rb->r_ix;
  u16_t wix = rb->w_ix;
  int to_read;

  if (RB_EMPTY(rix, wix)) {
 8002756:	d04a      	beq.n	80027ee <ringbuf_get+0xaa>
    return RB_ERR_EMPTY;
  }
  u16_t avail = RB_AVAIL(rix, wix);;
 8002758:	42a3      	cmp	r3, r4
 800275a:	bf38      	it	cc
 800275c:	8907      	ldrhcc	r7, [r0, #8]
  if (len > avail) {
    len = avail;
  }
  to_read = len;
  if (rix + len >= rb->max_len) {
 800275e:	f8b0 8008 	ldrh.w	r8, [r0, #8]
  int to_read;

  if (RB_EMPTY(rix, wix)) {
    return RB_ERR_EMPTY;
  }
  u16_t avail = RB_AVAIL(rix, wix);;
 8002762:	bf38      	it	cc
 8002764:	19db      	addcc	r3, r3, r7
 8002766:	1b1b      	subs	r3, r3, r4
 8002768:	b29b      	uxth	r3, r3
  if (len > avail) {
    len = avail;
  }
  to_read = len;
 800276a:	4293      	cmp	r3, r2
 800276c:	bf34      	ite	cc
 800276e:	461f      	movcc	r7, r3
 8002770:	4617      	movcs	r7, r2
  if (rix + len >= rb->max_len) {
 8002772:	19e3      	adds	r3, r4, r7
 8002774:	4543      	cmp	r3, r8
 8002776:	db1a      	blt.n	80027ae <ringbuf_get+0x6a>
    u16_t part = rb->max_len - rix;
 8002778:	ebc4 0808 	rsb	r8, r4, r8
 800277c:	fa1f f888 	uxth.w	r8, r8
    if (buf) {
 8002780:	b189      	cbz	r1, 80027a6 <ringbuf_get+0x62>
      ASSERT(VALID_RAM(buf));
 8002782:	4b1c      	ldr	r3, [pc, #112]	; (80027f4 <ringbuf_get+0xb0>)
 8002784:	4299      	cmp	r1, r3
 8002786:	d303      	bcc.n	8002790 <ringbuf_get+0x4c>
 8002788:	4a1b      	ldr	r2, [pc, #108]	; (80027f8 <ringbuf_get+0xb4>)
 800278a:	4413      	add	r3, r2
 800278c:	4299      	cmp	r1, r3
 800278e:	d303      	bcc.n	8002798 <ringbuf_get+0x54>
 8002790:	481a      	ldr	r0, [pc, #104]	; (80027fc <ringbuf_get+0xb8>)
 8002792:	2199      	movs	r1, #153	; 0x99
 8002794:	f7fe f824 	bl	80007e0 <SYS_assert>
      memcpy(buf, &rb->buffer[rix], part);
 8002798:	6831      	ldr	r1, [r6, #0]
 800279a:	4628      	mov	r0, r5
 800279c:	4421      	add	r1, r4
 800279e:	4642      	mov	r2, r8
 80027a0:	f00b fda2 	bl	800e2e8 <memcpy>
      buf += part;
 80027a4:	4445      	add	r5, r8
    }
    to_read -= part;
 80027a6:	ebc8 0807 	rsb	r8, r8, r7
    rix = 0;
 80027aa:	2400      	movs	r4, #0
 80027ac:	e000      	b.n	80027b0 <ringbuf_get+0x6c>
  }
  u16_t avail = RB_AVAIL(rix, wix);;
  if (len > avail) {
    len = avail;
  }
  to_read = len;
 80027ae:	46b8      	mov	r8, r7
      buf += part;
    }
    to_read -= part;
    rix = 0;
  }
  if (to_read > 0) {
 80027b0:	f1b8 0f00 	cmp.w	r8, #0
 80027b4:	dd13      	ble.n	80027de <ringbuf_get+0x9a>
    if (buf) {
 80027b6:	b185      	cbz	r5, 80027da <ringbuf_get+0x96>
      ASSERT(VALID_RAM(buf));
 80027b8:	4b0e      	ldr	r3, [pc, #56]	; (80027f4 <ringbuf_get+0xb0>)
 80027ba:	429d      	cmp	r5, r3
 80027bc:	d303      	bcc.n	80027c6 <ringbuf_get+0x82>
 80027be:	4a0e      	ldr	r2, [pc, #56]	; (80027f8 <ringbuf_get+0xb4>)
 80027c0:	4413      	add	r3, r2
 80027c2:	429d      	cmp	r5, r3
 80027c4:	d303      	bcc.n	80027ce <ringbuf_get+0x8a>
 80027c6:	480d      	ldr	r0, [pc, #52]	; (80027fc <ringbuf_get+0xb8>)
 80027c8:	21a2      	movs	r1, #162	; 0xa2
 80027ca:	f7fe f809 	bl	80007e0 <SYS_assert>
      memcpy(buf, &rb->buffer[rix], to_read);
 80027ce:	6831      	ldr	r1, [r6, #0]
 80027d0:	4628      	mov	r0, r5
 80027d2:	4421      	add	r1, r4
 80027d4:	4642      	mov	r2, r8
 80027d6:	f00b fd87 	bl	800e2e8 <memcpy>
    }
     rix += to_read;
 80027da:	4444      	add	r4, r8
 80027dc:	b2a4      	uxth	r4, r4
  }
  if (rix >= rb->max_len) {
 80027de:	8933      	ldrh	r3, [r6, #8]
    rix = 0;
  }

  rb->r_ix = rix;

  return len;
 80027e0:	4638      	mov	r0, r7
      memcpy(buf, &rb->buffer[rix], to_read);
    }
     rix += to_read;
  }
  if (rix >= rb->max_len) {
    rix = 0;
 80027e2:	42a3      	cmp	r3, r4
 80027e4:	bf98      	it	ls
 80027e6:	2400      	movls	r4, #0
  }

  rb->r_ix = rix;
 80027e8:	80b4      	strh	r4, [r6, #4]

  return len;
 80027ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  u16_t rix = rb->r_ix;
  u16_t wix = rb->w_ix;
  int to_read;

  if (RB_EMPTY(rix, wix)) {
    return RB_ERR_EMPTY;
 80027ee:	4804      	ldr	r0, [pc, #16]	; (8002800 <ringbuf_get+0xbc>)
  }

  rb->r_ix = rix;

  return len;
}
 80027f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027f4:	20000000 	.word	0x20000000
 80027f8:	00005000 	.word	0x00005000
 80027fc:	0801050f 	.word	0x0801050f
 8002800:	fffffe0c 	.word	0xfffffe0c

08002804 <io_enable_pin>:
static struct {
  u32_t enabled_pins[_IO_PORTS];
  gpio_interrupt_fn ifns[_IO_PINS];
} _gpio;

static void io_enable_pin(gpio_port port, gpio_pin pin) {
 8002804:	b570      	push	{r4, r5, r6, lr}
  if (_gpio.enabled_pins[port] == 0) {
 8002806:	4d0a      	ldr	r5, [pc, #40]	; (8002830 <io_enable_pin+0x2c>)
static struct {
  u32_t enabled_pins[_IO_PORTS];
  gpio_interrupt_fn ifns[_IO_PINS];
} _gpio;

static void io_enable_pin(gpio_port port, gpio_pin pin) {
 8002808:	4604      	mov	r4, r0
  if (_gpio.enabled_pins[port] == 0) {
 800280a:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
static struct {
  u32_t enabled_pins[_IO_PORTS];
  gpio_interrupt_fn ifns[_IO_PINS];
} _gpio;

static void io_enable_pin(gpio_port port, gpio_pin pin) {
 800280e:	460e      	mov	r6, r1
  if (_gpio.enabled_pins[port] == 0) {
 8002810:	b92b      	cbnz	r3, 800281e <io_enable_pin+0x1a>
    // first pin enabled on port, start port clock
    RCC_APB2PeriphClockCmd(io_rcc[port], ENABLE);
 8002812:	4b08      	ldr	r3, [pc, #32]	; (8002834 <io_enable_pin+0x30>)
 8002814:	2101      	movs	r1, #1
 8002816:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800281a:	f00a fba1 	bl	800cf60 <RCC_APB2PeriphClockCmd>
  }
  _gpio.enabled_pins[port] |= (1<<pin);
 800281e:	2301      	movs	r3, #1
 8002820:	fa03 f606 	lsl.w	r6, r3, r6
 8002824:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8002828:	4333      	orrs	r3, r6
 800282a:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
 800282e:	bd70      	pop	{r4, r5, r6, pc}
 8002830:	2000050c 	.word	0x2000050c
 8002834:	0800e70c 	.word	0x0800e70c

08002838 <_gpio_check_exti>:

void gpio_init(void) {
  memset(&_gpio, 0, sizeof(_gpio));
}

static void _gpio_check_exti(gpio_pin pin) {
 8002838:	b538      	push	{r3, r4, r5, lr}
  if(EXTI_GetITStatus(io_exti_lines[pin]) != RESET) {
 800283a:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <_gpio_check_exti+0x2c>)

void gpio_init(void) {
  memset(&_gpio, 0, sizeof(_gpio));
}

static void _gpio_check_exti(gpio_pin pin) {
 800283c:	4604      	mov	r4, r0
  if(EXTI_GetITStatus(io_exti_lines[pin]) != RESET) {
 800283e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002842:	69dd      	ldr	r5, [r3, #28]
 8002844:	4628      	mov	r0, r5
 8002846:	f00a f91b 	bl	800ca80 <EXTI_GetITStatus>
 800284a:	b148      	cbz	r0, 8002860 <_gpio_check_exti+0x28>
    EXTI_ClearITPendingBit(io_exti_lines[pin]);
 800284c:	4628      	mov	r0, r5
 800284e:	f00a f925 	bl	800ca9c <EXTI_ClearITPendingBit>
    if (_gpio.ifns[pin]) _gpio.ifns[pin](pin);
 8002852:	4b05      	ldr	r3, [pc, #20]	; (8002868 <_gpio_check_exti+0x30>)
 8002854:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	b10b      	cbz	r3, 8002860 <_gpio_check_exti+0x28>
 800285c:	4620      	mov	r0, r4
 800285e:	4798      	blx	r3
 8002860:	bd38      	pop	{r3, r4, r5, pc}
 8002862:	bf00      	nop
 8002864:	0800e70c 	.word	0x0800e70c
 8002868:	2000050c 	.word	0x2000050c

0800286c <io_setup.isra.0>:
    // all pins disabled on port, stop port clock
    RCC_APB2PeriphClockCmd(io_rcc[port], DISABLE);
  }
}

static void io_setup(gpio_port port, gpio_pin pin, io_speed speed, gpio_mode mode, gpio_af af, gpio_outtype outtype, gpio_pull pull) {
 800286c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  GPIO_InitTypeDef hw;
  hw.GPIO_Pin = io_pins[pin];
 800286e:	4e1d      	ldr	r6, [pc, #116]	; (80028e4 <io_setup.isra.0+0x78>)
    // all pins disabled on port, stop port clock
    RCC_APB2PeriphClockCmd(io_rcc[port], DISABLE);
  }
}

static void io_setup(gpio_port port, gpio_pin pin, io_speed speed, gpio_mode mode, gpio_af af, gpio_outtype outtype, gpio_pull pull) {
 8002870:	f89d 4018 	ldrb.w	r4, [sp, #24]
  GPIO_InitTypeDef hw;
  hw.GPIO_Pin = io_pins[pin];
 8002874:	eb06 0141 	add.w	r1, r6, r1, lsl #1
 8002878:	f8b1 105c 	ldrh.w	r1, [r1, #92]	; 0x5c
    // all pins disabled on port, stop port clock
    RCC_APB2PeriphClockCmd(io_rcc[port], DISABLE);
  }
}

static void io_setup(gpio_port port, gpio_pin pin, io_speed speed, gpio_mode mode, gpio_af af, gpio_outtype outtype, gpio_pull pull) {
 800287c:	f89d 501c 	ldrb.w	r5, [sp, #28]
  GPIO_InitTypeDef hw;
  hw.GPIO_Pin = io_pins[pin];
 8002880:	f8ad 1004 	strh.w	r1, [sp, #4]

  switch (mode) {
 8002884:	2b03      	cmp	r3, #3
 8002886:	d81f      	bhi.n	80028c8 <io_setup.isra.0+0x5c>
 8002888:	e8df f003 	tbb	[pc, r3]
 800288c:	1b140d02 	.word	0x1b140d02
  case IN:
    switch (pull) {
 8002890:	2d01      	cmp	r5, #1
 8002892:	d006      	beq.n	80028a2 <io_setup.isra.0+0x36>
 8002894:	d303      	bcc.n	800289e <io_setup.isra.0+0x32>
 8002896:	2d02      	cmp	r5, #2
 8002898:	d116      	bne.n	80028c8 <io_setup.isra.0+0x5c>
      break;
    case PULLUP:
      hw.GPIO_Mode = GPIO_Mode_IPU;
      break;
    case PULLDOWN:
      hw.GPIO_Mode = GPIO_Mode_IPD;
 800289a:	2328      	movs	r3, #40	; 0x28
 800289c:	e012      	b.n	80028c4 <io_setup.isra.0+0x58>

  switch (mode) {
  case IN:
    switch (pull) {
    case NOPULL:
      hw.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800289e:	2304      	movs	r3, #4
 80028a0:	e010      	b.n	80028c4 <io_setup.isra.0+0x58>
      break;
    case PULLUP:
      hw.GPIO_Mode = GPIO_Mode_IPU;
 80028a2:	2348      	movs	r3, #72	; 0x48
 80028a4:	e00e      	b.n	80028c4 <io_setup.isra.0+0x58>
    case _IO_PULLS:
  	break;
    }
    break;
  case OUT:
    switch (outtype) {
 80028a6:	b11c      	cbz	r4, 80028b0 <io_setup.isra.0+0x44>
 80028a8:	2c01      	cmp	r4, #1
 80028aa:	d10d      	bne.n	80028c8 <io_setup.isra.0+0x5c>
    case OPENDRAIN:
      hw.GPIO_Mode = GPIO_Mode_Out_OD;
 80028ac:	2314      	movs	r3, #20
 80028ae:	e009      	b.n	80028c4 <io_setup.isra.0+0x58>
      break;
    case PUSHPULL:
      hw.GPIO_Mode = GPIO_Mode_Out_PP;
 80028b0:	2310      	movs	r3, #16
 80028b2:	e007      	b.n	80028c4 <io_setup.isra.0+0x58>
    case _IO_OUTTYPES:
  	break;
    }
    break;
  case AF:
    switch (outtype) {
 80028b4:	b11c      	cbz	r4, 80028be <io_setup.isra.0+0x52>
 80028b6:	2c01      	cmp	r4, #1
 80028b8:	d106      	bne.n	80028c8 <io_setup.isra.0+0x5c>
    case OPENDRAIN:
      hw.GPIO_Mode = GPIO_Mode_AF_OD;
 80028ba:	231c      	movs	r3, #28
 80028bc:	e002      	b.n	80028c4 <io_setup.isra.0+0x58>
      break;
    case PUSHPULL:
      hw.GPIO_Mode = GPIO_Mode_AF_PP;
 80028be:	2318      	movs	r3, #24
 80028c0:	e000      	b.n	80028c4 <io_setup.isra.0+0x58>
    case _IO_OUTTYPES:
  	break;
    }
    break;
  case ANALOG:
    hw.GPIO_Mode = GPIO_Mode_AIN;
 80028c2:	2300      	movs	r3, #0
 80028c4:	f88d 3007 	strb.w	r3, [sp, #7]
    break;
  case _IO_MODES:
	break;
  }
  hw.GPIO_Speed = io_speeds[speed];
 80028c8:	4432      	add	r2, r6
 80028ca:	f892 307c 	ldrb.w	r3, [r2, #124]	; 0x7c
  GPIO_Init((GPIO_TypeDef *)io_ports[port], &hw);
 80028ce:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 80028d2:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
 80028d6:	a901      	add	r1, sp, #4
    hw.GPIO_Mode = GPIO_Mode_AIN;
    break;
  case _IO_MODES:
	break;
  }
  hw.GPIO_Speed = io_speeds[speed];
 80028d8:	f88d 3006 	strb.w	r3, [sp, #6]
  GPIO_Init((GPIO_TypeDef *)io_ports[port], &hw);
 80028dc:	f00a f945 	bl	800cb6a <GPIO_Init>
}
 80028e0:	b002      	add	sp, #8
 80028e2:	bd70      	pop	{r4, r5, r6, pc}
 80028e4:	0800e70c 	.word	0x0800e70c

080028e8 <gpio_get_hw_port>:

void *gpio_get_hw_port(gpio_port port) {
  return io_ports[port];
 80028e8:	4b02      	ldr	r3, [pc, #8]	; (80028f4 <gpio_get_hw_port+0xc>)
 80028ea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
 80028ee:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 80028f2:	4770      	bx	lr
 80028f4:	0800e70c 	.word	0x0800e70c

080028f8 <gpio_get_hw_pin>:

int gpio_get_hw_pin(gpio_pin pin) {
  return io_pins[pin];
 80028f8:	4b02      	ldr	r3, [pc, #8]	; (8002904 <gpio_get_hw_pin+0xc>)
 80028fa:	eb03 0040 	add.w	r0, r3, r0, lsl #1
}
 80028fe:	f8b0 005c 	ldrh.w	r0, [r0, #92]	; 0x5c
 8002902:	4770      	bx	lr
 8002904:	0800e70c 	.word	0x0800e70c

08002908 <gpio_config>:

void gpio_config(gpio_port port, gpio_pin pin, io_speed speed, gpio_mode mode, gpio_af af, gpio_outtype outtype, gpio_pull pull) {
 8002908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800290c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8002910:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8002914:	4605      	mov	r5, r0
 8002916:	460c      	mov	r4, r1
 8002918:	4617      	mov	r7, r2
 800291a:	461e      	mov	r6, r3
  io_enable_pin(port, pin);
 800291c:	f7ff ff72 	bl	8002804 <io_enable_pin>
  io_setup(port, pin, speed, mode, af, outtype, pull);
 8002920:	f8cd 9020 	str.w	r9, [sp, #32]
 8002924:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8002928:	4628      	mov	r0, r5
 800292a:	4621      	mov	r1, r4
 800292c:	463a      	mov	r2, r7
 800292e:	4633      	mov	r3, r6
}
 8002930:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return io_pins[pin];
}

void gpio_config(gpio_port port, gpio_pin pin, io_speed speed, gpio_mode mode, gpio_af af, gpio_outtype outtype, gpio_pull pull) {
  io_enable_pin(port, pin);
  io_setup(port, pin, speed, mode, af, outtype, pull);
 8002934:	f7ff bf9a 	b.w	800286c <io_setup.isra.0>

08002938 <gpio_config_out>:
}
void gpio_config_out(gpio_port port, gpio_pin pin, io_speed speed, gpio_outtype outtype, gpio_pull pull) {
 8002938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800293a:	461f      	mov	r7, r3
 800293c:	4605      	mov	r5, r0
 800293e:	460c      	mov	r4, r1
 8002940:	4616      	mov	r6, r2
  io_enable_pin(port, pin);
 8002942:	f7ff ff5f 	bl	8002804 <io_enable_pin>
  io_setup(port, pin, speed, OUT, AF0, outtype, pull);
 8002946:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800294a:	9700      	str	r7, [sp, #0]
 800294c:	9301      	str	r3, [sp, #4]
 800294e:	4628      	mov	r0, r5
 8002950:	4621      	mov	r1, r4
 8002952:	4632      	mov	r2, r6
 8002954:	2301      	movs	r3, #1
 8002956:	f7ff ff89 	bl	800286c <io_setup.isra.0>
}
 800295a:	b003      	add	sp, #12
 800295c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800295e <gpio_config_in>:
void gpio_config_in(gpio_port port, gpio_pin pin, io_speed speed) {
 800295e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002960:	4605      	mov	r5, r0
 8002962:	460c      	mov	r4, r1
 8002964:	4616      	mov	r6, r2
  io_enable_pin(port, pin);
 8002966:	f7ff ff4d 	bl	8002804 <io_enable_pin>
  io_setup(port, pin, speed, IN, AF0, PUSHPULL, NOPULL);
 800296a:	2300      	movs	r3, #0
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	9301      	str	r3, [sp, #4]
 8002970:	4628      	mov	r0, r5
 8002972:	4621      	mov	r1, r4
 8002974:	4632      	mov	r2, r6
 8002976:	f7ff ff79 	bl	800286c <io_setup.isra.0>
}
 800297a:	b002      	add	sp, #8
 800297c:	bd70      	pop	{r4, r5, r6, pc}

0800297e <gpio_config_analog>:
void gpio_config_analog(gpio_port port, gpio_pin pin) {
 800297e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002980:	4605      	mov	r5, r0
 8002982:	460c      	mov	r4, r1
  io_enable_pin(port, pin);
 8002984:	f7ff ff3e 	bl	8002804 <io_enable_pin>
  io_setup(port, pin, CLK_50MHZ, IN, AF0, PUSHPULL, NOPULL);
 8002988:	2300      	movs	r3, #0
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	9301      	str	r3, [sp, #4]
 800298e:	4628      	mov	r0, r5
 8002990:	4621      	mov	r1, r4
 8002992:	2201      	movs	r2, #1
 8002994:	f7ff ff6a 	bl	800286c <io_setup.isra.0>
}
 8002998:	b003      	add	sp, #12
 800299a:	bd30      	pop	{r4, r5, pc}

0800299c <gpio_config_release>:
  }
  _gpio.enabled_pins[port] |= (1<<pin);
}

static void io_disable_pin(gpio_port port, gpio_pin pin) {
  _gpio.enabled_pins[port] &= ~(1<<pin);
 800299c:	2301      	movs	r3, #1
 800299e:	fa03 f101 	lsl.w	r1, r3, r1
 80029a2:	4b07      	ldr	r3, [pc, #28]	; (80029c0 <gpio_config_release+0x24>)
 80029a4:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80029a8:	ea22 0101 	bic.w	r1, r2, r1
 80029ac:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
  if (_gpio.enabled_pins[port] == 0) {
 80029b0:	b921      	cbnz	r1, 80029bc <gpio_config_release+0x20>
    // all pins disabled on port, stop port clock
    RCC_APB2PeriphClockCmd(io_rcc[port], DISABLE);
 80029b2:	4b04      	ldr	r3, [pc, #16]	; (80029c4 <gpio_config_release+0x28>)
 80029b4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80029b8:	f00a bad2 	b.w	800cf60 <RCC_APB2PeriphClockCmd>
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	2000050c 	.word	0x2000050c
 80029c4:	0800e70c 	.word	0x0800e70c

080029c8 <gpio_enable>:
}
void gpio_config_release(gpio_port port, gpio_pin pin) {
  io_disable_pin(port, pin);
}
void gpio_enable(gpio_port port, gpio_pin pin) {
  GPIO_enable(io_ports[port], io_pins[pin]);
 80029c8:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <gpio_enable+0x18>)
 80029ca:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80029ce:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 80029d2:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 80029d6:	f8b1 305c 	ldrh.w	r3, [r1, #92]	; 0x5c
 80029da:	6113      	str	r3, [r2, #16]
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	0800e70c 	.word	0x0800e70c

080029e4 <gpio_disable>:
}
void gpio_disable(gpio_port port, gpio_pin pin) {
  GPIO_disable(io_ports[port], io_pins[pin]);
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <gpio_disable+0x18>)
 80029e6:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 80029ea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80029ee:	f8b1 305c 	ldrh.w	r3, [r1, #92]	; 0x5c
 80029f2:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 80029f6:	041b      	lsls	r3, r3, #16
 80029f8:	6113      	str	r3, [r2, #16]
 80029fa:	4770      	bx	lr
 80029fc:	0800e70c 	.word	0x0800e70c

08002a00 <gpio_set>:
}
void gpio_set(gpio_port port, gpio_pin enable_pin, gpio_pin disable_pin) {
  GPIO_set(io_ports[port], io_pins[enable_pin], io_pins[disable_pin]);
 8002a00:	4b08      	ldr	r3, [pc, #32]	; (8002a24 <gpio_set+0x24>)
 8002a02:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8002a06:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8002a0a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002a0e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8002a12:	f8b1 305c 	ldrh.w	r3, [r1, #92]	; 0x5c
 8002a16:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8002a1a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8002a1e:	6102      	str	r2, [r0, #16]
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	0800e70c 	.word	0x0800e70c

08002a28 <gpio_get>:
}
u32_t gpio_get(gpio_port port, gpio_pin pin) {
  return GPIO_read(io_ports[port], io_pins[pin]);
 8002a28:	4b07      	ldr	r3, [pc, #28]	; (8002a48 <gpio_get+0x20>)
 8002a2a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002a2e:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 8002a32:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8002a36:	6892      	ldr	r2, [r2, #8]
 8002a38:	f8b1 305c 	ldrh.w	r3, [r1, #92]	; 0x5c
 8002a3c:	4213      	tst	r3, r2
}
 8002a3e:	bf0c      	ite	eq
 8002a40:	2000      	moveq	r0, #0
 8002a42:	2001      	movne	r0, #1
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	0800e70c 	.word	0x0800e70c

08002a4c <gpio_interrupt_config>:
s32_t gpio_interrupt_config(gpio_port port, gpio_pin pin, gpio_interrupt_fn fn, gpio_flank flank) {
 8002a4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a4e:	461f      	mov	r7, r3
  EXTI_InitTypeDef EXTI_InitStructure;

  if (_gpio.ifns[pin]) {
 8002a50:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <gpio_interrupt_config+0x54>)
  GPIO_set(io_ports[port], io_pins[enable_pin], io_pins[disable_pin]);
}
u32_t gpio_get(gpio_port port, gpio_pin pin) {
  return GPIO_read(io_ports[port], io_pins[pin]);
}
s32_t gpio_interrupt_config(gpio_port port, gpio_pin pin, gpio_interrupt_fn fn, gpio_flank flank) {
 8002a52:	460d      	mov	r5, r1
  EXTI_InitTypeDef EXTI_InitStructure;

  if (_gpio.ifns[pin]) {
 8002a54:	3106      	adds	r1, #6
 8002a56:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8002a5a:	684e      	ldr	r6, [r1, #4]
 8002a5c:	b9e6      	cbnz	r6, 8002a98 <gpio_interrupt_config+0x4c>
    // already busy
    return -1;
  }
  _gpio.ifns[pin] = fn;

  GPIO_EXTILineConfig(io_exti_portsources[port], io_exti_pinsources[pin]);
 8002a5e:	4c11      	ldr	r4, [pc, #68]	; (8002aa4 <gpio_interrupt_config+0x58>)

  if (_gpio.ifns[pin]) {
    // already busy
    return -1;
  }
  _gpio.ifns[pin] = fn;
 8002a60:	604a      	str	r2, [r1, #4]

  GPIO_EXTILineConfig(io_exti_portsources[port], io_exti_pinsources[pin]);
 8002a62:	1963      	adds	r3, r4, r5
 8002a64:	4420      	add	r0, r4
 8002a66:	f893 10a3 	ldrb.w	r1, [r3, #163]	; 0xa3
 8002a6a:	f890 009c 	ldrb.w	r0, [r0, #156]	; 0x9c

  EXTI_InitStructure.EXTI_Line = io_exti_lines[pin];
 8002a6e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStructure.EXTI_Trigger = io_flanks[flank];
 8002a72:	443c      	add	r4, r7
    // already busy
    return -1;
  }
  _gpio.ifns[pin] = fn;

  GPIO_EXTILineConfig(io_exti_portsources[port], io_exti_pinsources[pin]);
 8002a74:	f00a f93e 	bl	800ccf4 <GPIO_EXTILineConfig>

  EXTI_InitStructure.EXTI_Line = io_exti_lines[pin];
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStructure.EXTI_Trigger = io_flanks[flank];
 8002a78:	f894 30b3 	ldrb.w	r3, [r4, #179]	; 0xb3
  }
  _gpio.ifns[pin] = fn;

  GPIO_EXTILineConfig(io_exti_portsources[port], io_exti_pinsources[pin]);

  EXTI_InitStructure.EXTI_Line = io_exti_lines[pin];
 8002a7c:	69ea      	ldr	r2, [r5, #28]
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStructure.EXTI_Trigger = io_flanks[flank];
 8002a7e:	f88d 3005 	strb.w	r3, [sp, #5]
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
  EXTI_Init(&EXTI_InitStructure);
 8002a82:	4668      	mov	r0, sp
  GPIO_EXTILineConfig(io_exti_portsources[port], io_exti_pinsources[pin]);

  EXTI_InitStructure.EXTI_Line = io_exti_lines[pin];
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStructure.EXTI_Trigger = io_flanks[flank];
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8002a84:	2301      	movs	r3, #1
  }
  _gpio.ifns[pin] = fn;

  GPIO_EXTILineConfig(io_exti_portsources[port], io_exti_pinsources[pin]);

  EXTI_InitStructure.EXTI_Line = io_exti_lines[pin];
 8002a86:	9200      	str	r2, [sp, #0]
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8002a88:	f88d 6004 	strb.w	r6, [sp, #4]
  EXTI_InitStructure.EXTI_Trigger = io_flanks[flank];
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8002a8c:	f88d 3006 	strb.w	r3, [sp, #6]
  EXTI_Init(&EXTI_InitStructure);
 8002a90:	f009 ffa0 	bl	800c9d4 <EXTI_Init>

  return 0;
 8002a94:	4630      	mov	r0, r6
 8002a96:	e001      	b.n	8002a9c <gpio_interrupt_config+0x50>
s32_t gpio_interrupt_config(gpio_port port, gpio_pin pin, gpio_interrupt_fn fn, gpio_flank flank) {
  EXTI_InitTypeDef EXTI_InitStructure;

  if (_gpio.ifns[pin]) {
    // already busy
    return -1;
 8002a98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  EXTI_InitStructure.EXTI_Trigger = io_flanks[flank];
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
  EXTI_Init(&EXTI_InitStructure);

  return 0;
}
 8002a9c:	b003      	add	sp, #12
 8002a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002aa0:	2000050c 	.word	0x2000050c
 8002aa4:	0800e70c 	.word	0x0800e70c

08002aa8 <gpio_interrupt_deconfig>:

void gpio_interrupt_deconfig(gpio_port port, gpio_pin pin) {
  EXTI_InitTypeDef EXTI_InitStructure;
  _gpio.ifns[pin] = NULL;
 8002aa8:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <gpio_interrupt_deconfig+0x4c>)
  EXTI_Init(&EXTI_InitStructure);

  return 0;
}

void gpio_interrupt_deconfig(gpio_port port, gpio_pin pin) {
 8002aaa:	b537      	push	{r0, r1, r2, r4, r5, lr}
  EXTI_InitTypeDef EXTI_InitStructure;
  _gpio.ifns[pin] = NULL;
 8002aac:	1d8a      	adds	r2, r1, #6
 8002aae:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	6053      	str	r3, [r2, #4]

  NVIC_DisableIRQ(io_ext_irq[pin]);
 8002ab6:	4a10      	ldr	r2, [pc, #64]	; (8002af8 <gpio_interrupt_deconfig+0x50>)
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 8002ab8:	2401      	movs	r4, #1
 8002aba:	1850      	adds	r0, r2, r1
 8002abc:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6

  EXTI_InitStructure.EXTI_Line = io_exti_lines[pin];
 8002ac0:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8002ac4:	b245      	sxtb	r5, r0
 8002ac6:	f000 001f 	and.w	r0, r0, #31
 8002aca:	fa04 f000 	lsl.w	r0, r4, r0
 8002ace:	69ca      	ldr	r2, [r1, #28]
 8002ad0:	4c0a      	ldr	r4, [pc, #40]	; (8002afc <gpio_interrupt_deconfig+0x54>)
 8002ad2:	096d      	lsrs	r5, r5, #5
 8002ad4:	3520      	adds	r5, #32
 8002ad6:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 8002ada:	9200      	str	r2, [sp, #0]
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
  EXTI_InitStructure.EXTI_LineCmd = DISABLE;
  EXTI_Init(&EXTI_InitStructure);
 8002adc:	4668      	mov	r0, sp

  NVIC_DisableIRQ(io_ext_irq[pin]);

  EXTI_InitStructure.EXTI_Line = io_exti_lines[pin];
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8002ade:	2208      	movs	r2, #8
  _gpio.ifns[pin] = NULL;

  NVIC_DisableIRQ(io_ext_irq[pin]);

  EXTI_InitStructure.EXTI_Line = io_exti_lines[pin];
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8002ae0:	f88d 3004 	strb.w	r3, [sp, #4]
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8002ae4:	f88d 2005 	strb.w	r2, [sp, #5]
  EXTI_InitStructure.EXTI_LineCmd = DISABLE;
 8002ae8:	f88d 3006 	strb.w	r3, [sp, #6]
  EXTI_Init(&EXTI_InitStructure);
 8002aec:	f009 ff72 	bl	800c9d4 <EXTI_Init>
}
 8002af0:	b003      	add	sp, #12
 8002af2:	bd30      	pop	{r4, r5, pc}
 8002af4:	2000050c 	.word	0x2000050c
 8002af8:	0800e70c 	.word	0x0800e70c
 8002afc:	e000e100 	.word	0xe000e100

08002b00 <gpio_interrupt_mask_disable>:

void gpio_interrupt_mask_disable(gpio_port port, gpio_pin pin) {
  NVIC_DisableIRQ(io_ext_irq[pin]);
 8002b00:	4b07      	ldr	r3, [pc, #28]	; (8002b20 <gpio_interrupt_mask_disable+0x20>)
 8002b02:	2201      	movs	r2, #1
 8002b04:	4419      	add	r1, r3
 8002b06:	f891 30b6 	ldrb.w	r3, [r1, #182]	; 0xb6
 8002b0a:	b259      	sxtb	r1, r3
 8002b0c:	f003 031f 	and.w	r3, r3, #31
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	0949      	lsrs	r1, r1, #5
 8002b16:	4a03      	ldr	r2, [pc, #12]	; (8002b24 <gpio_interrupt_mask_disable+0x24>)
 8002b18:	3120      	adds	r1, #32
 8002b1a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8002b1e:	4770      	bx	lr
 8002b20:	0800e70c 	.word	0x0800e70c
 8002b24:	e000e100 	.word	0xe000e100

08002b28 <gpio_interrupt_mask_enable>:
}

void gpio_interrupt_mask_enable(gpio_port port, gpio_pin pin, bool clear_pending) {
 8002b28:	b538      	push	{r3, r4, r5, lr}
 8002b2a:	460c      	mov	r4, r1
 8002b2c:	4d0a      	ldr	r5, [pc, #40]	; (8002b58 <gpio_interrupt_mask_enable+0x30>)
  if (clear_pending) {
 8002b2e:	b122      	cbz	r2, 8002b3a <gpio_interrupt_mask_enable+0x12>
    EXTI_ClearITPendingBit(io_exti_lines[pin]);
 8002b30:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8002b34:	69d8      	ldr	r0, [r3, #28]
 8002b36:	f009 ffb1 	bl	800ca9c <EXTI_ClearITPendingBit>
  }
  NVIC_EnableIRQ(io_ext_irq[pin]);
 8002b3a:	442c      	add	r4, r5
 8002b3c:	f894 30b6 	ldrb.w	r3, [r4, #182]	; 0xb6
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8002b40:	2201      	movs	r2, #1
 8002b42:	b259      	sxtb	r1, r3
 8002b44:	f003 031f 	and.w	r3, r3, #31
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	4a03      	ldr	r2, [pc, #12]	; (8002b5c <gpio_interrupt_mask_enable+0x34>)
 8002b4e:	0949      	lsrs	r1, r1, #5
 8002b50:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8002b54:	bd38      	pop	{r3, r4, r5, pc}
 8002b56:	bf00      	nop
 8002b58:	0800e70c 	.word	0x0800e70c
 8002b5c:	e000e100 	.word	0xe000e100

08002b60 <gpio_init>:
}

void gpio_init(void) {
  memset(&_gpio, 0, sizeof(_gpio));
 8002b60:	4802      	ldr	r0, [pc, #8]	; (8002b6c <gpio_init+0xc>)
 8002b62:	2100      	movs	r1, #0
 8002b64:	225c      	movs	r2, #92	; 0x5c
 8002b66:	f00b bc13 	b.w	800e390 <memset>
 8002b6a:	bf00      	nop
 8002b6c:	2000050c 	.word	0x2000050c

08002b70 <EXTI0_IRQHandler>:
    if (_gpio.ifns[pin]) _gpio.ifns[pin](pin);
  }
}

void EXTI0_IRQHandler(void) {
  TRACE_IRQ_ENTER(EXTI0_IRQn);
 8002b70:	4b13      	ldr	r3, [pc, #76]	; (8002bc0 <EXTI0_IRQHandler+0x50>)
    EXTI_ClearITPendingBit(io_exti_lines[pin]);
    if (_gpio.ifns[pin]) _gpio.ifns[pin](pin);
  }
}

void EXTI0_IRQHandler(void) {
 8002b72:	b510      	push	{r4, lr}
  TRACE_IRQ_ENTER(EXTI0_IRQn);
 8002b74:	781a      	ldrb	r2, [r3, #0]
 8002b76:	461c      	mov	r4, r3
 8002b78:	b16a      	cbz	r2, 8002b96 <EXTI0_IRQHandler+0x26>
 8002b7a:	4b12      	ldr	r3, [pc, #72]	; (8002bc4 <EXTI0_IRQHandler+0x54>)
 8002b7c:	4a12      	ldr	r2, [pc, #72]	; (8002bc8 <EXTI0_IRQHandler+0x58>)
 8002b7e:	6819      	ldr	r1, [r3, #0]
 8002b80:	f240 200b 	movw	r0, #523	; 0x20b
 8002b84:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	2a3e      	cmp	r2, #62	; 0x3e
 8002b8c:	bf96      	itet	ls
 8002b8e:	681a      	ldrls	r2, [r3, #0]
 8002b90:	2200      	movhi	r2, #0
 8002b92:	3201      	addls	r2, #1
 8002b94:	601a      	str	r2, [r3, #0]
  _gpio_check_exti(PIN0);
 8002b96:	2000      	movs	r0, #0
 8002b98:	f7ff fe4e 	bl	8002838 <_gpio_check_exti>
  TRACE_IRQ_EXIT(EXTI0_IRQn);
 8002b9c:	7823      	ldrb	r3, [r4, #0]
 8002b9e:	b16b      	cbz	r3, 8002bbc <EXTI0_IRQHandler+0x4c>
 8002ba0:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <EXTI0_IRQHandler+0x54>)
 8002ba2:	4a09      	ldr	r2, [pc, #36]	; (8002bc8 <EXTI0_IRQHandler+0x58>)
 8002ba4:	6819      	ldr	r1, [r3, #0]
 8002ba6:	f240 300b 	movw	r0, #779	; 0x30b
 8002baa:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	2a3e      	cmp	r2, #62	; 0x3e
 8002bb2:	bf96      	itet	ls
 8002bb4:	681a      	ldrls	r2, [r3, #0]
 8002bb6:	2200      	movhi	r2, #0
 8002bb8:	3201      	addls	r2, #1
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	bd10      	pop	{r4, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20000000 	.word	0x20000000
 8002bc4:	200001c0 	.word	0x200001c0
 8002bc8:	20000c74 	.word	0x20000c74

08002bcc <EXTI1_IRQHandler>:
}
void EXTI1_IRQHandler(void) {
  TRACE_IRQ_ENTER(EXTI1_IRQn);
 8002bcc:	4b13      	ldr	r3, [pc, #76]	; (8002c1c <EXTI1_IRQHandler+0x50>)
void EXTI0_IRQHandler(void) {
  TRACE_IRQ_ENTER(EXTI0_IRQn);
  _gpio_check_exti(PIN0);
  TRACE_IRQ_EXIT(EXTI0_IRQn);
}
void EXTI1_IRQHandler(void) {
 8002bce:	b510      	push	{r4, lr}
  TRACE_IRQ_ENTER(EXTI1_IRQn);
 8002bd0:	781a      	ldrb	r2, [r3, #0]
 8002bd2:	461c      	mov	r4, r3
 8002bd4:	b16a      	cbz	r2, 8002bf2 <EXTI1_IRQHandler+0x26>
 8002bd6:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <EXTI1_IRQHandler+0x54>)
 8002bd8:	4a12      	ldr	r2, [pc, #72]	; (8002c24 <EXTI1_IRQHandler+0x58>)
 8002bda:	6819      	ldr	r1, [r3, #0]
 8002bdc:	f44f 7003 	mov.w	r0, #524	; 0x20c
 8002be0:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	2a3e      	cmp	r2, #62	; 0x3e
 8002be8:	bf96      	itet	ls
 8002bea:	681a      	ldrls	r2, [r3, #0]
 8002bec:	2200      	movhi	r2, #0
 8002bee:	3201      	addls	r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]
  _gpio_check_exti(PIN1);
 8002bf2:	2001      	movs	r0, #1
 8002bf4:	f7ff fe20 	bl	8002838 <_gpio_check_exti>
  TRACE_IRQ_EXIT(EXTI1_IRQn);
 8002bf8:	7823      	ldrb	r3, [r4, #0]
 8002bfa:	b16b      	cbz	r3, 8002c18 <EXTI1_IRQHandler+0x4c>
 8002bfc:	4b08      	ldr	r3, [pc, #32]	; (8002c20 <EXTI1_IRQHandler+0x54>)
 8002bfe:	4a09      	ldr	r2, [pc, #36]	; (8002c24 <EXTI1_IRQHandler+0x58>)
 8002c00:	6819      	ldr	r1, [r3, #0]
 8002c02:	f44f 7043 	mov.w	r0, #780	; 0x30c
 8002c06:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	2a3e      	cmp	r2, #62	; 0x3e
 8002c0e:	bf96      	itet	ls
 8002c10:	681a      	ldrls	r2, [r3, #0]
 8002c12:	2200      	movhi	r2, #0
 8002c14:	3201      	addls	r2, #1
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	bd10      	pop	{r4, pc}
 8002c1a:	bf00      	nop
 8002c1c:	20000000 	.word	0x20000000
 8002c20:	200001c0 	.word	0x200001c0
 8002c24:	20000c74 	.word	0x20000c74

08002c28 <EXTI2_IRQHandler>:
}
void EXTI2_IRQHandler(void) {
  TRACE_IRQ_ENTER(EXTI2_IRQn);
 8002c28:	4b13      	ldr	r3, [pc, #76]	; (8002c78 <EXTI2_IRQHandler+0x50>)
void EXTI1_IRQHandler(void) {
  TRACE_IRQ_ENTER(EXTI1_IRQn);
  _gpio_check_exti(PIN1);
  TRACE_IRQ_EXIT(EXTI1_IRQn);
}
void EXTI2_IRQHandler(void) {
 8002c2a:	b510      	push	{r4, lr}
  TRACE_IRQ_ENTER(EXTI2_IRQn);
 8002c2c:	781a      	ldrb	r2, [r3, #0]
 8002c2e:	461c      	mov	r4, r3
 8002c30:	b16a      	cbz	r2, 8002c4e <EXTI2_IRQHandler+0x26>
 8002c32:	4b12      	ldr	r3, [pc, #72]	; (8002c7c <EXTI2_IRQHandler+0x54>)
 8002c34:	4a12      	ldr	r2, [pc, #72]	; (8002c80 <EXTI2_IRQHandler+0x58>)
 8002c36:	6819      	ldr	r1, [r3, #0]
 8002c38:	f240 200d 	movw	r0, #525	; 0x20d
 8002c3c:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	2a3e      	cmp	r2, #62	; 0x3e
 8002c44:	bf96      	itet	ls
 8002c46:	681a      	ldrls	r2, [r3, #0]
 8002c48:	2200      	movhi	r2, #0
 8002c4a:	3201      	addls	r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]
  _gpio_check_exti(PIN2);
 8002c4e:	2002      	movs	r0, #2
 8002c50:	f7ff fdf2 	bl	8002838 <_gpio_check_exti>
  TRACE_IRQ_EXIT(EXTI2_IRQn);
 8002c54:	7823      	ldrb	r3, [r4, #0]
 8002c56:	b16b      	cbz	r3, 8002c74 <EXTI2_IRQHandler+0x4c>
 8002c58:	4b08      	ldr	r3, [pc, #32]	; (8002c7c <EXTI2_IRQHandler+0x54>)
 8002c5a:	4a09      	ldr	r2, [pc, #36]	; (8002c80 <EXTI2_IRQHandler+0x58>)
 8002c5c:	6819      	ldr	r1, [r3, #0]
 8002c5e:	f240 300d 	movw	r0, #781	; 0x30d
 8002c62:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	2a3e      	cmp	r2, #62	; 0x3e
 8002c6a:	bf96      	itet	ls
 8002c6c:	681a      	ldrls	r2, [r3, #0]
 8002c6e:	2200      	movhi	r2, #0
 8002c70:	3201      	addls	r2, #1
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	bd10      	pop	{r4, pc}
 8002c76:	bf00      	nop
 8002c78:	20000000 	.word	0x20000000
 8002c7c:	200001c0 	.word	0x200001c0
 8002c80:	20000c74 	.word	0x20000c74

08002c84 <EXTI3_IRQHandler>:
}
void EXTI3_IRQHandler(void) {
  TRACE_IRQ_ENTER(EXTI3_IRQn);
 8002c84:	4b13      	ldr	r3, [pc, #76]	; (8002cd4 <EXTI3_IRQHandler+0x50>)
void EXTI2_IRQHandler(void) {
  TRACE_IRQ_ENTER(EXTI2_IRQn);
  _gpio_check_exti(PIN2);
  TRACE_IRQ_EXIT(EXTI2_IRQn);
}
void EXTI3_IRQHandler(void) {
 8002c86:	b510      	push	{r4, lr}
  TRACE_IRQ_ENTER(EXTI3_IRQn);
 8002c88:	781a      	ldrb	r2, [r3, #0]
 8002c8a:	461c      	mov	r4, r3
 8002c8c:	b16a      	cbz	r2, 8002caa <EXTI3_IRQHandler+0x26>
 8002c8e:	4b12      	ldr	r3, [pc, #72]	; (8002cd8 <EXTI3_IRQHandler+0x54>)
 8002c90:	4a12      	ldr	r2, [pc, #72]	; (8002cdc <EXTI3_IRQHandler+0x58>)
 8002c92:	6819      	ldr	r1, [r3, #0]
 8002c94:	f240 200e 	movw	r0, #526	; 0x20e
 8002c98:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	2a3e      	cmp	r2, #62	; 0x3e
 8002ca0:	bf96      	itet	ls
 8002ca2:	681a      	ldrls	r2, [r3, #0]
 8002ca4:	2200      	movhi	r2, #0
 8002ca6:	3201      	addls	r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]
  _gpio_check_exti(PIN3);
 8002caa:	2003      	movs	r0, #3
 8002cac:	f7ff fdc4 	bl	8002838 <_gpio_check_exti>
  TRACE_IRQ_EXIT(EXTI3_IRQn);
 8002cb0:	7823      	ldrb	r3, [r4, #0]
 8002cb2:	b16b      	cbz	r3, 8002cd0 <EXTI3_IRQHandler+0x4c>
 8002cb4:	4b08      	ldr	r3, [pc, #32]	; (8002cd8 <EXTI3_IRQHandler+0x54>)
 8002cb6:	4a09      	ldr	r2, [pc, #36]	; (8002cdc <EXTI3_IRQHandler+0x58>)
 8002cb8:	6819      	ldr	r1, [r3, #0]
 8002cba:	f240 300e 	movw	r0, #782	; 0x30e
 8002cbe:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	2a3e      	cmp	r2, #62	; 0x3e
 8002cc6:	bf96      	itet	ls
 8002cc8:	681a      	ldrls	r2, [r3, #0]
 8002cca:	2200      	movhi	r2, #0
 8002ccc:	3201      	addls	r2, #1
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	bd10      	pop	{r4, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20000000 	.word	0x20000000
 8002cd8:	200001c0 	.word	0x200001c0
 8002cdc:	20000c74 	.word	0x20000c74

08002ce0 <EXTI4_IRQHandler>:
}
void EXTI4_IRQHandler(void) {
  TRACE_IRQ_ENTER(EXTI4_IRQn);
 8002ce0:	4b13      	ldr	r3, [pc, #76]	; (8002d30 <EXTI4_IRQHandler+0x50>)
void EXTI3_IRQHandler(void) {
  TRACE_IRQ_ENTER(EXTI3_IRQn);
  _gpio_check_exti(PIN3);
  TRACE_IRQ_EXIT(EXTI3_IRQn);
}
void EXTI4_IRQHandler(void) {
 8002ce2:	b510      	push	{r4, lr}
  TRACE_IRQ_ENTER(EXTI4_IRQn);
 8002ce4:	781a      	ldrb	r2, [r3, #0]
 8002ce6:	461c      	mov	r4, r3
 8002ce8:	b16a      	cbz	r2, 8002d06 <EXTI4_IRQHandler+0x26>
 8002cea:	4b12      	ldr	r3, [pc, #72]	; (8002d34 <EXTI4_IRQHandler+0x54>)
 8002cec:	4a12      	ldr	r2, [pc, #72]	; (8002d38 <EXTI4_IRQHandler+0x58>)
 8002cee:	6819      	ldr	r1, [r3, #0]
 8002cf0:	f240 200f 	movw	r0, #527	; 0x20f
 8002cf4:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	2a3e      	cmp	r2, #62	; 0x3e
 8002cfc:	bf96      	itet	ls
 8002cfe:	681a      	ldrls	r2, [r3, #0]
 8002d00:	2200      	movhi	r2, #0
 8002d02:	3201      	addls	r2, #1
 8002d04:	601a      	str	r2, [r3, #0]
  _gpio_check_exti(PIN4);
 8002d06:	2004      	movs	r0, #4
 8002d08:	f7ff fd96 	bl	8002838 <_gpio_check_exti>
  TRACE_IRQ_EXIT(EXTI4_IRQn);
 8002d0c:	7823      	ldrb	r3, [r4, #0]
 8002d0e:	b16b      	cbz	r3, 8002d2c <EXTI4_IRQHandler+0x4c>
 8002d10:	4b08      	ldr	r3, [pc, #32]	; (8002d34 <EXTI4_IRQHandler+0x54>)
 8002d12:	4a09      	ldr	r2, [pc, #36]	; (8002d38 <EXTI4_IRQHandler+0x58>)
 8002d14:	6819      	ldr	r1, [r3, #0]
 8002d16:	f240 300f 	movw	r0, #783	; 0x30f
 8002d1a:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	2a3e      	cmp	r2, #62	; 0x3e
 8002d22:	bf96      	itet	ls
 8002d24:	681a      	ldrls	r2, [r3, #0]
 8002d26:	2200      	movhi	r2, #0
 8002d28:	3201      	addls	r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	bd10      	pop	{r4, pc}
 8002d2e:	bf00      	nop
 8002d30:	20000000 	.word	0x20000000
 8002d34:	200001c0 	.word	0x200001c0
 8002d38:	20000c74 	.word	0x20000c74

08002d3c <EXTI9_5_IRQHandler>:
}
void EXTI9_5_IRQHandler(void) {
  TRACE_IRQ_ENTER(EXTI9_5_IRQn);
 8002d3c:	4b19      	ldr	r3, [pc, #100]	; (8002da4 <EXTI9_5_IRQHandler+0x68>)
void EXTI4_IRQHandler(void) {
  TRACE_IRQ_ENTER(EXTI4_IRQn);
  _gpio_check_exti(PIN4);
  TRACE_IRQ_EXIT(EXTI4_IRQn);
}
void EXTI9_5_IRQHandler(void) {
 8002d3e:	b510      	push	{r4, lr}
  TRACE_IRQ_ENTER(EXTI9_5_IRQn);
 8002d40:	781a      	ldrb	r2, [r3, #0]
 8002d42:	461c      	mov	r4, r3
 8002d44:	b16a      	cbz	r2, 8002d62 <EXTI9_5_IRQHandler+0x26>
 8002d46:	4b18      	ldr	r3, [pc, #96]	; (8002da8 <EXTI9_5_IRQHandler+0x6c>)
 8002d48:	4a18      	ldr	r2, [pc, #96]	; (8002dac <EXTI9_5_IRQHandler+0x70>)
 8002d4a:	6819      	ldr	r1, [r3, #0]
 8002d4c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8002d50:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	2a3e      	cmp	r2, #62	; 0x3e
 8002d58:	bf96      	itet	ls
 8002d5a:	681a      	ldrls	r2, [r3, #0]
 8002d5c:	2200      	movhi	r2, #0
 8002d5e:	3201      	addls	r2, #1
 8002d60:	601a      	str	r2, [r3, #0]
  _gpio_check_exti(PIN5);
 8002d62:	2005      	movs	r0, #5
 8002d64:	f7ff fd68 	bl	8002838 <_gpio_check_exti>
  _gpio_check_exti(PIN6);
 8002d68:	2006      	movs	r0, #6
 8002d6a:	f7ff fd65 	bl	8002838 <_gpio_check_exti>
  _gpio_check_exti(PIN7);
 8002d6e:	2007      	movs	r0, #7
 8002d70:	f7ff fd62 	bl	8002838 <_gpio_check_exti>
  _gpio_check_exti(PIN8);
 8002d74:	2008      	movs	r0, #8
 8002d76:	f7ff fd5f 	bl	8002838 <_gpio_check_exti>
  _gpio_check_exti(PIN9);
 8002d7a:	2009      	movs	r0, #9
 8002d7c:	f7ff fd5c 	bl	8002838 <_gpio_check_exti>
  TRACE_IRQ_EXIT(EXTI9_5_IRQn);
 8002d80:	7823      	ldrb	r3, [r4, #0]
 8002d82:	b16b      	cbz	r3, 8002da0 <EXTI9_5_IRQHandler+0x64>
 8002d84:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <EXTI9_5_IRQHandler+0x6c>)
 8002d86:	4a09      	ldr	r2, [pc, #36]	; (8002dac <EXTI9_5_IRQHandler+0x70>)
 8002d88:	6819      	ldr	r1, [r3, #0]
 8002d8a:	f44f 7047 	mov.w	r0, #796	; 0x31c
 8002d8e:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	2a3e      	cmp	r2, #62	; 0x3e
 8002d96:	bf96      	itet	ls
 8002d98:	681a      	ldrls	r2, [r3, #0]
 8002d9a:	2200      	movhi	r2, #0
 8002d9c:	3201      	addls	r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	bd10      	pop	{r4, pc}
 8002da2:	bf00      	nop
 8002da4:	20000000 	.word	0x20000000
 8002da8:	200001c0 	.word	0x200001c0
 8002dac:	20000c74 	.word	0x20000c74

08002db0 <EXTI15_10_IRQHandler>:
}
void EXTI15_10_IRQHandler(void) {
 8002db0:	b508      	push	{r3, lr}
//  TRACE_IRQ_ENTER(EXTI15_10_IRQn);
  _gpio_check_exti(PIN10);
 8002db2:	200a      	movs	r0, #10
 8002db4:	f7ff fd40 	bl	8002838 <_gpio_check_exti>
  _gpio_check_exti(PIN11);
 8002db8:	200b      	movs	r0, #11
 8002dba:	f7ff fd3d 	bl	8002838 <_gpio_check_exti>
  _gpio_check_exti(PIN12);
 8002dbe:	200c      	movs	r0, #12
 8002dc0:	f7ff fd3a 	bl	8002838 <_gpio_check_exti>
  _gpio_check_exti(PIN13);
 8002dc4:	200d      	movs	r0, #13
 8002dc6:	f7ff fd37 	bl	8002838 <_gpio_check_exti>
  _gpio_check_exti(PIN14);
 8002dca:	200e      	movs	r0, #14
 8002dcc:	f7ff fd34 	bl	8002838 <_gpio_check_exti>
  _gpio_check_exti(PIN15);
//  TRACE_IRQ_EXIT(EXTI15_10_IRQn);
}
 8002dd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  _gpio_check_exti(PIN10);
  _gpio_check_exti(PIN11);
  _gpio_check_exti(PIN12);
  _gpio_check_exti(PIN13);
  _gpio_check_exti(PIN14);
  _gpio_check_exti(PIN15);
 8002dd4:	200f      	movs	r0, #15
 8002dd6:	f7ff bd2f 	b.w	8002838 <_gpio_check_exti>
 8002dda:	bf00      	nop

08002ddc <UART_irq>:
#define UART_RX_IRQ_ON(u)  UART_HW(u)->CR1 |= USART_CR1_RXNEIE
#define UART_TX_IRQ_OFF(u) UART_HW(u)->CR1 &= ~USART_CR1_TXEIE
#define UART_TX_IRQ_ON(u)  UART_HW(u)->CR1 |= USART_CR1_TXEIE

void UART_irq(uart *u) {
  if (u->hw == 0) return;
 8002ddc:	6803      	ldr	r3, [r0, #0]
#define UART_RX_IRQ_OFF(u) UART_HW(u)->CR1 &= ~USART_CR1_RXNEIE
#define UART_RX_IRQ_ON(u)  UART_HW(u)->CR1 |= USART_CR1_RXNEIE
#define UART_TX_IRQ_OFF(u) UART_HW(u)->CR1 &= ~USART_CR1_TXEIE
#define UART_TX_IRQ_ON(u)  UART_HW(u)->CR1 |= USART_CR1_TXEIE

void UART_irq(uart *u) {
 8002dde:	b510      	push	{r4, lr}
 8002de0:	4604      	mov	r4, r0
  if (u->hw == 0) return;
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d053      	beq.n	8002e8e <UART_irq+0xb2>

  if ((UART_CHECK_RX(u)) && (UART_HW(u)->CR1 & USART_CR1_RXNEIE)) {
 8002de6:	881a      	ldrh	r2, [r3, #0]
 8002de8:	0692      	lsls	r2, r2, #26
 8002dea:	d51c      	bpl.n	8002e26 <UART_irq+0x4a>
 8002dec:	899a      	ldrh	r2, [r3, #12]
 8002dee:	0690      	lsls	r0, r2, #26
 8002df0:	d519      	bpl.n	8002e26 <UART_irq+0x4a>
    u8_t c = UART_HW(u)->DR;
 8002df2:	8899      	ldrh	r1, [r3, #4]
    u->rx.buf[u->rx.wix++] = c;
 8002df4:	f8b4 3204 	ldrh.w	r3, [r4, #516]	; 0x204

void UART_irq(uart *u) {
  if (u->hw == 0) return;

  if ((UART_CHECK_RX(u)) && (UART_HW(u)->CR1 & USART_CR1_RXNEIE)) {
    u8_t c = UART_HW(u)->DR;
 8002df8:	b2c9      	uxtb	r1, r1
    u->rx.buf[u->rx.wix++] = c;
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	b292      	uxth	r2, r2
 8002e00:	f8a4 2204 	strh.w	r2, [r4, #516]	; 0x204
 8002e04:	4423      	add	r3, r4
 8002e06:	7119      	strb	r1, [r3, #4]
    if (u->rx.wix >= UART_RX_BUFFER) {
 8002e08:	f8b4 3204 	ldrh.w	r3, [r4, #516]	; 0x204
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
      u->rx.wix = 0;
 8002e12:	bf24      	itt	cs
 8002e14:	2300      	movcs	r3, #0
 8002e16:	f8a4 3204 	strhcs.w	r3, [r4, #516]	; 0x204
    }
    if (u->rx_f) {
 8002e1a:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
 8002e1e:	b113      	cbz	r3, 8002e26 <UART_irq+0x4a>
      u->rx_f(u->arg, c);
 8002e20:	f8d4 0410 	ldr.w	r0, [r4, #1040]	; 0x410
 8002e24:	4798      	blx	r3
    }
  }
  if ((UART_CHECK_TX(u))) {
 8002e26:	6823      	ldr	r3, [r4, #0]
 8002e28:	881a      	ldrh	r2, [r3, #0]
 8002e2a:	0611      	lsls	r1, r2, #24
 8002e2c:	d52b      	bpl.n	8002e86 <UART_irq+0xaa>
    if (UART_ALWAYS_SYNC_TX || u->sync_tx) {
 8002e2e:	f894 2415 	ldrb.w	r2, [r4, #1045]	; 0x415
 8002e32:	bb12      	cbnz	r2, 8002e7a <UART_irq+0x9e>
      UART_TX_IRQ_OFF(u);
    } else {
      if (u->tx.wix != u->tx.rix) {
 8002e34:	f8b4 0408 	ldrh.w	r0, [r4, #1032]	; 0x408
 8002e38:	f8b4 140a 	ldrh.w	r1, [r4, #1034]	; 0x40a
 8002e3c:	b280      	uxth	r0, r0
 8002e3e:	b289      	uxth	r1, r1
 8002e40:	4288      	cmp	r0, r1
 8002e42:	d012      	beq.n	8002e6a <UART_irq+0x8e>
        UART_HW(u)->DR = u->tx.buf[u->tx.rix++];
 8002e44:	f8b4 140a 	ldrh.w	r1, [r4, #1034]	; 0x40a
 8002e48:	b289      	uxth	r1, r1
 8002e4a:	1c48      	adds	r0, r1, #1
 8002e4c:	4421      	add	r1, r4
 8002e4e:	f891 1208 	ldrb.w	r1, [r1, #520]	; 0x208
 8002e52:	b280      	uxth	r0, r0
 8002e54:	f8a4 040a 	strh.w	r0, [r4, #1034]	; 0x40a
 8002e58:	8099      	strh	r1, [r3, #4]
        if (u->tx.rix >= UART_TX_BUFFER) {
 8002e5a:	f8b4 140a 	ldrh.w	r1, [r4, #1034]	; 0x40a
 8002e5e:	b289      	uxth	r1, r1
 8002e60:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
          u->tx.rix = 0;
 8002e64:	bf28      	it	cs
 8002e66:	f8a4 240a 	strhcs.w	r2, [r4, #1034]	; 0x40a
        }
      }
      if (u->tx.wix == u->tx.rix) {
 8002e6a:	f8b4 1408 	ldrh.w	r1, [r4, #1032]	; 0x408
 8002e6e:	f8b4 240a 	ldrh.w	r2, [r4, #1034]	; 0x40a
 8002e72:	b289      	uxth	r1, r1
 8002e74:	b292      	uxth	r2, r2
 8002e76:	4291      	cmp	r1, r2
 8002e78:	d105      	bne.n	8002e86 <UART_irq+0xaa>
        UART_TX_IRQ_OFF(u);
 8002e7a:	899a      	ldrh	r2, [r3, #12]
 8002e7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e80:	0412      	lsls	r2, r2, #16
 8002e82:	0c12      	lsrs	r2, r2, #16
 8002e84:	819a      	strh	r2, [r3, #12]
      }
    }
  }
  if (UART_CHECK_OR(u)) {
 8002e86:	881a      	ldrh	r2, [r3, #0]
 8002e88:	0712      	lsls	r2, r2, #28
    (void)UART_HW(u)->DR;
 8002e8a:	bf48      	it	mi
 8002e8c:	889b      	ldrhmi	r3, [r3, #4]
 8002e8e:	bd10      	pop	{r4, pc}

08002e90 <UART_rx_available>:
  }
}

u16_t UART_rx_available(uart *u) {
  volatile u16_t r = u->rx.rix;
 8002e90:	f8b0 3206 	ldrh.w	r3, [r0, #518]	; 0x206
  if (UART_CHECK_OR(u)) {
    (void)UART_HW(u)->DR;
  }
}

u16_t UART_rx_available(uart *u) {
 8002e94:	b082      	sub	sp, #8
  volatile u16_t r = u->rx.rix;
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	f8ad 3004 	strh.w	r3, [sp, #4]
  volatile u16_t w = u->rx.wix;
 8002e9c:	f8b0 3204 	ldrh.w	r3, [r0, #516]	; 0x204
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (w >= r) {
 8002ea6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002eaa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8002eae:	b292      	uxth	r2, r2
    return w - r;
 8002eb0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}

u16_t UART_rx_available(uart *u) {
  volatile u16_t r = u->rx.rix;
  volatile u16_t w = u->rx.wix;
  if (w >= r) {
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	429a      	cmp	r2, r3
    return w - r;
 8002eb8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8002ebc:	b280      	uxth	r0, r0
 8002ebe:	b29b      	uxth	r3, r3
  } else {
    return w + UART_RX_BUFFER - r;
 8002ec0:	bf38      	it	cc
 8002ec2:	f500 7000 	addcc.w	r0, r0, #512	; 0x200
 8002ec6:	1ac0      	subs	r0, r0, r3
 8002ec8:	b280      	uxth	r0, r0
  }
}
 8002eca:	b002      	add	sp, #8
 8002ecc:	4770      	bx	lr

08002ece <UART_tx_available>:

u16_t UART_tx_available(uart *u) {
  volatile u16_t r = u->tx.rix;
 8002ece:	f8b0 340a 	ldrh.w	r3, [r0, #1034]	; 0x40a
  } else {
    return w + UART_RX_BUFFER - r;
  }
}

u16_t UART_tx_available(uart *u) {
 8002ed2:	b082      	sub	sp, #8
  volatile u16_t r = u->tx.rix;
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	f8ad 3004 	strh.w	r3, [sp, #4]
  volatile u16_t w = u->tx.wix;
 8002eda:	f8b0 3408 	ldrh.w	r3, [r0, #1032]	; 0x408
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (w > r) {
 8002ee4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002ee8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8002eec:	b292      	uxth	r2, r2
    return UART_TX_BUFFER - (w - r) - 1;
 8002eee:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}

u16_t UART_tx_available(uart *u) {
  volatile u16_t r = u->tx.rix;
  volatile u16_t w = u->tx.wix;
  if (w > r) {
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	429a      	cmp	r2, r3
    return UART_TX_BUFFER - (w - r) - 1;
 8002ef6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002efa:	b280      	uxth	r0, r0
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	bf8c      	ite	hi
 8002f00:	f200 10ff 	addwhi	r0, r0, #511	; 0x1ff
  } else {
    return UART_TX_BUFFER - (w + UART_TX_BUFFER - r) - 1;
 8002f04:	f100 30ff 	addls.w	r0, r0, #4294967295	; 0xffffffff
 8002f08:	1ac0      	subs	r0, r0, r3
 8002f0a:	b280      	uxth	r0, r0
  }
}
 8002f0c:	b002      	add	sp, #8
 8002f0e:	4770      	bx	lr

08002f10 <UART_tx_drain>:

void UART_tx_drain(uart *uart) {
#if !UART_SYNC_TX
  uart->tx.rix = 0;
 8002f10:	2300      	movs	r3, #0
 8002f12:	f8a0 340a 	strh.w	r3, [r0, #1034]	; 0x40a
  uart->tx.wix = 0;
 8002f16:	f8a0 3408 	strh.w	r3, [r0, #1032]	; 0x408
 8002f1a:	4770      	bx	lr

08002f1c <UART_get_char>:
  UART_RX_IRQ_ON(u);
}

s32_t UART_get_char(uart *u) {
  s32_t c = -1;
  UART_RX_IRQ_OFF(u);
 8002f1c:	6801      	ldr	r1, [r0, #0]
  }
  u->tx.rix = rix;
  UART_RX_IRQ_ON(u);
}

s32_t UART_get_char(uart *u) {
 8002f1e:	4603      	mov	r3, r0
  s32_t c = -1;
  UART_RX_IRQ_OFF(u);
 8002f20:	898a      	ldrh	r2, [r1, #12]
 8002f22:	f022 0220 	bic.w	r2, r2, #32
 8002f26:	0412      	lsls	r2, r2, #16
 8002f28:	0c12      	lsrs	r2, r2, #16
 8002f2a:	818a      	strh	r2, [r1, #12]
  if (u->rx.rix != u->rx.wix) {
 8002f2c:	f8b0 0206 	ldrh.w	r0, [r0, #518]	; 0x206
 8002f30:	f8b3 2204 	ldrh.w	r2, [r3, #516]	; 0x204
 8002f34:	b280      	uxth	r0, r0
 8002f36:	b292      	uxth	r2, r2
 8002f38:	4290      	cmp	r0, r2
 8002f3a:	d014      	beq.n	8002f66 <UART_get_char+0x4a>
    c = u->rx.buf[u->rx.rix];
 8002f3c:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8002f40:	b292      	uxth	r2, r2
 8002f42:	441a      	add	r2, r3
 8002f44:	7910      	ldrb	r0, [r2, #4]
    if (u->rx.rix >= UART_RX_BUFFER - 1) {
 8002f46:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8002f4a:	b292      	uxth	r2, r2
 8002f4c:	f5b2 7fff 	cmp.w	r2, #510	; 0x1fe
 8002f50:	d901      	bls.n	8002f56 <UART_get_char+0x3a>
      u->rx.rix = 0;
 8002f52:	2200      	movs	r2, #0
 8002f54:	e004      	b.n	8002f60 <UART_get_char+0x44>
    } else {
      u->rx.rix++;
 8002f56:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8002f5a:	b292      	uxth	r2, r2
 8002f5c:	3201      	adds	r2, #1
 8002f5e:	b292      	uxth	r2, r2
 8002f60:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
 8002f64:	e001      	b.n	8002f6a <UART_get_char+0x4e>
  u->tx.rix = rix;
  UART_RX_IRQ_ON(u);
}

s32_t UART_get_char(uart *u) {
  s32_t c = -1;
 8002f66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      u->rx.rix = 0;
    } else {
      u->rx.rix++;
    }
  }
  UART_RX_IRQ_ON(u);
 8002f6a:	898b      	ldrh	r3, [r1, #12]
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	f043 0320 	orr.w	r3, r3, #32
 8002f72:	818b      	strh	r3, [r1, #12]
  return c;
}
 8002f74:	4770      	bx	lr

08002f76 <UART_get_buf>:

s32_t UART_get_buf(uart *u, u8_t* dst, u16_t len) {
 8002f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f7a:	460d      	mov	r5, r1

  UART_RX_IRQ_OFF(u);
 8002f7c:	6801      	ldr	r1, [r0, #0]
  }
  UART_RX_IRQ_ON(u);
  return c;
}

s32_t UART_get_buf(uart *u, u8_t* dst, u16_t len) {
 8002f7e:	4616      	mov	r6, r2

  UART_RX_IRQ_OFF(u);
 8002f80:	898b      	ldrh	r3, [r1, #12]
  }
  UART_RX_IRQ_ON(u);
  return c;
}

s32_t UART_get_buf(uart *u, u8_t* dst, u16_t len) {
 8002f82:	4604      	mov	r4, r0

  UART_RX_IRQ_OFF(u);
 8002f84:	f023 0320 	bic.w	r3, r3, #32
 8002f88:	041b      	lsls	r3, r3, #16
 8002f8a:	0c1b      	lsrs	r3, r3, #16
 8002f8c:	818b      	strh	r3, [r1, #12]
  u16_t avail = UART_rx_available(u);
 8002f8e:	f7ff ff7f 	bl	8002e90 <UART_rx_available>
  s32_t len_to_read = MIN(avail, len);
 8002f92:	42b0      	cmp	r0, r6
 8002f94:	bf28      	it	cs
 8002f96:	4630      	movcs	r0, r6
 8002f98:	b286      	uxth	r6, r0
  if (len_to_read == 0) {
 8002f9a:	b396      	cbz	r6, 8003002 <UART_get_buf+0x8c>
    UART_RX_IRQ_ON(u);
    return 0;
  }
  u32_t remaining = len_to_read;
  u32_t len_to_end = UART_RX_BUFFER - u->rx.rix;
 8002f9c:	f8b4 7206 	ldrh.w	r7, [r4, #518]	; 0x206
  s32_t len_to_read = MIN(avail, len);
  if (len_to_read == 0) {
    UART_RX_IRQ_ON(u);
    return 0;
  }
  u32_t remaining = len_to_read;
 8002fa0:	46b0      	mov	r8, r6
  u32_t len_to_end = UART_RX_BUFFER - u->rx.rix;
 8002fa2:	b2bf      	uxth	r7, r7
 8002fa4:	f5c7 7700 	rsb	r7, r7, #512	; 0x200
  if (remaining > len_to_end) {
 8002fa8:	42be      	cmp	r6, r7
 8002faa:	d90f      	bls.n	8002fcc <UART_get_buf+0x56>
    if (dst) {
 8002fac:	b14d      	cbz	r5, 8002fc2 <UART_get_buf+0x4c>
      memcpy(dst, &u->rx.buf[u->rx.rix], len_to_end);
 8002fae:	f8b4 1206 	ldrh.w	r1, [r4, #518]	; 0x206
 8002fb2:	4628      	mov	r0, r5
 8002fb4:	b289      	uxth	r1, r1
 8002fb6:	4421      	add	r1, r4
 8002fb8:	3104      	adds	r1, #4
 8002fba:	463a      	mov	r2, r7
 8002fbc:	f00b f994 	bl	800e2e8 <memcpy>
      dst += len_to_end;
 8002fc0:	443d      	add	r5, r7
    }
    remaining -= len_to_end;
    u->rx.rix = 0;
 8002fc2:	2300      	movs	r3, #0
  if (remaining > len_to_end) {
    if (dst) {
      memcpy(dst, &u->rx.buf[u->rx.rix], len_to_end);
      dst += len_to_end;
    }
    remaining -= len_to_end;
 8002fc4:	ebc7 0806 	rsb	r8, r7, r6
    u->rx.rix = 0;
 8002fc8:	f8a4 3206 	strh.w	r3, [r4, #518]	; 0x206
  }
  if (dst) {
 8002fcc:	b145      	cbz	r5, 8002fe0 <UART_get_buf+0x6a>
    memcpy(dst, &u->rx.buf[u->rx.rix], remaining);
 8002fce:	f8b4 1206 	ldrh.w	r1, [r4, #518]	; 0x206
 8002fd2:	4628      	mov	r0, r5
 8002fd4:	b289      	uxth	r1, r1
 8002fd6:	4421      	add	r1, r4
 8002fd8:	3104      	adds	r1, #4
 8002fda:	4642      	mov	r2, r8
 8002fdc:	f00b f984 	bl	800e2e8 <memcpy>
  }
  u->rx.rix += remaining;
 8002fe0:	f8b4 3206 	ldrh.w	r3, [r4, #518]	; 0x206
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	4498      	add	r8, r3
 8002fe8:	fa1f f888 	uxth.w	r8, r8
 8002fec:	f8a4 8206 	strh.w	r8, [r4, #518]	; 0x206
  if (u->rx.rix >= UART_RX_BUFFER) {
 8002ff0:	f8b4 3206 	ldrh.w	r3, [r4, #518]	; 0x206
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    u->rx.rix = 0;
 8002ffa:	bf24      	itt	cs
 8002ffc:	2300      	movcs	r3, #0
 8002ffe:	f8a4 3206 	strhcs.w	r3, [r4, #518]	; 0x206
  }

  UART_RX_IRQ_ON(u);
 8003002:	6823      	ldr	r3, [r4, #0]
  return len_to_read;
}
 8003004:	4630      	mov	r0, r6
  u->rx.rix += remaining;
  if (u->rx.rix >= UART_RX_BUFFER) {
    u->rx.rix = 0;
  }

  UART_RX_IRQ_ON(u);
 8003006:	899a      	ldrh	r2, [r3, #12]
 8003008:	b292      	uxth	r2, r2
 800300a:	f042 0220 	orr.w	r2, r2, #32
 800300e:	819a      	strh	r2, [r3, #12]
  return len_to_read;
}
 8003010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003014 <UART_tx_force_char>:
    return res;
  }
}

void UART_tx_force_char(uart *u, u8_t c) {
  while (UART_CHECK_TX(u) == 0)
 8003014:	6803      	ldr	r3, [r0, #0]
 8003016:	881a      	ldrh	r2, [r3, #0]
 8003018:	0610      	lsls	r0, r2, #24
 800301a:	d5fc      	bpl.n	8003016 <UART_tx_force_char+0x2>
    ;
  UART_HW(u)->DR = (uint8_t) c;
 800301c:	8099      	strh	r1, [r3, #4]
 800301e:	4770      	bx	lr

08003020 <UART_tx_flush>:
  uart->tx.wix = 0;
#endif
}

void UART_tx_flush(uart *u) {
  UART_RX_IRQ_OFF(u);
 8003020:	6802      	ldr	r2, [r0, #0]
  uart->tx.rix = 0;
  uart->tx.wix = 0;
#endif
}

void UART_tx_flush(uart *u) {
 8003022:	b570      	push	{r4, r5, r6, lr}
  UART_RX_IRQ_OFF(u);
 8003024:	8993      	ldrh	r3, [r2, #12]
  uart->tx.rix = 0;
  uart->tx.wix = 0;
#endif
}

void UART_tx_flush(uart *u) {
 8003026:	4604      	mov	r4, r0
  UART_RX_IRQ_OFF(u);
 8003028:	f023 0320 	bic.w	r3, r3, #32
 800302c:	041b      	lsls	r3, r3, #16
 800302e:	0c1b      	lsrs	r3, r3, #16
 8003030:	8193      	strh	r3, [r2, #12]
  u16_t rix = u->tx.rix;
 8003032:	f8b0 540a 	ldrh.w	r5, [r0, #1034]	; 0x40a
  u16_t wix = u->tx.wix;
 8003036:	f8b0 6408 	ldrh.w	r6, [r0, #1032]	; 0x408
#endif
}

void UART_tx_flush(uart *u) {
  UART_RX_IRQ_OFF(u);
  u16_t rix = u->tx.rix;
 800303a:	b2ad      	uxth	r5, r5
  u16_t wix = u->tx.wix;
 800303c:	b2b6      	uxth	r6, r6
  while (rix != wix) {
 800303e:	42b5      	cmp	r5, r6
 8003040:	d00c      	beq.n	800305c <UART_tx_flush+0x3c>
    u8_t c = u->tx.buf[rix];
 8003042:	1963      	adds	r3, r4, r5
    UART_tx_force_char(u, c);
 8003044:	4620      	mov	r0, r4
 8003046:	f893 1208 	ldrb.w	r1, [r3, #520]	; 0x208
 800304a:	f7ff ffe3 	bl	8003014 <UART_tx_force_char>
    if (rix >= UART_RX_BUFFER - 1) {
 800304e:	f5b5 7fff 	cmp.w	r5, #510	; 0x1fe
      rix = 0;
    } else {
      rix++;
 8003052:	bf9a      	itte	ls
 8003054:	3501      	addls	r5, #1
 8003056:	b2ad      	uxthls	r5, r5
  u16_t wix = u->tx.wix;
  while (rix != wix) {
    u8_t c = u->tx.buf[rix];
    UART_tx_force_char(u, c);
    if (rix >= UART_RX_BUFFER - 1) {
      rix = 0;
 8003058:	2500      	movhi	r5, #0
 800305a:	e7f0      	b.n	800303e <UART_tx_flush+0x1e>
    } else {
      rix++;
    }
  }
  u->tx.rix = rix;
  UART_RX_IRQ_ON(u);
 800305c:	6823      	ldr	r3, [r4, #0]
      rix = 0;
    } else {
      rix++;
    }
  }
  u->tx.rix = rix;
 800305e:	f8a4 540a 	strh.w	r5, [r4, #1034]	; 0x40a
  UART_RX_IRQ_ON(u);
 8003062:	899a      	ldrh	r2, [r3, #12]
 8003064:	b292      	uxth	r2, r2
 8003066:	f042 0220 	orr.w	r2, r2, #32
 800306a:	819a      	strh	r2, [r3, #12]
 800306c:	bd70      	pop	{r4, r5, r6, pc}

0800306e <UART_put_char>:
  UART_RX_IRQ_ON(u);
  return len_to_read;
}

s32_t UART_put_char(uart *u, u8_t c) {
  if (UART_ALWAYS_SYNC_TX || u->sync_tx) {
 800306e:	f890 3415 	ldrb.w	r3, [r0, #1045]	; 0x415

  UART_RX_IRQ_ON(u);
  return len_to_read;
}

s32_t UART_put_char(uart *u, u8_t c) {
 8003072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003076:	4604      	mov	r4, r0
 8003078:	460e      	mov	r6, r1
  if (UART_ALWAYS_SYNC_TX || u->sync_tx) {
 800307a:	b123      	cbz	r3, 8003086 <UART_put_char+0x18>
    UART_tx_force_char(u, c);
 800307c:	f7ff ffca 	bl	8003014 <UART_tx_force_char>
    return 0;
 8003080:	2000      	movs	r0, #0
 8003082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  UART_RX_IRQ_ON(u);
  return len_to_read;
}

s32_t UART_put_char(uart *u, u8_t c) {
  if (UART_ALWAYS_SYNC_TX || u->sync_tx) {
 8003086:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    do {
      res = 0;

      if (UART_tx_available(u) > 0) {
        u->tx.buf[u->tx.wix++] = c;
        if (u->tx.wix >= UART_TX_BUFFER) {
 800308a:	f240 17ff 	movw	r7, #511	; 0x1ff
 800308e:	4698      	mov	r8, r3
    s32_t res;
    int max_tries = 0x10000;
    do {
      res = 0;

      if (UART_tx_available(u) > 0) {
 8003090:	4620      	mov	r0, r4
 8003092:	f7ff ff1c 	bl	8002ece <UART_tx_available>
 8003096:	b188      	cbz	r0, 80030bc <UART_put_char+0x4e>
        u->tx.buf[u->tx.wix++] = c;
 8003098:	f8b4 2408 	ldrh.w	r2, [r4, #1032]	; 0x408
 800309c:	b292      	uxth	r2, r2
 800309e:	1c53      	adds	r3, r2, #1
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	f8a4 3408 	strh.w	r3, [r4, #1032]	; 0x408
        if (u->tx.wix >= UART_TX_BUFFER) {
 80030a6:	f8b4 3408 	ldrh.w	r3, [r4, #1032]	; 0x408
    int max_tries = 0x10000;
    do {
      res = 0;

      if (UART_tx_available(u) > 0) {
        u->tx.buf[u->tx.wix++] = c;
 80030aa:	4422      	add	r2, r4
        if (u->tx.wix >= UART_TX_BUFFER) {
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	42bb      	cmp	r3, r7
    int max_tries = 0x10000;
    do {
      res = 0;

      if (UART_tx_available(u) > 0) {
        u->tx.buf[u->tx.wix++] = c;
 80030b0:	f882 6208 	strb.w	r6, [r2, #520]	; 0x208
        if (u->tx.wix >= UART_TX_BUFFER) {
 80030b4:	d905      	bls.n	80030c2 <UART_put_char+0x54>
          u->tx.wix = 0;
 80030b6:	f8a4 8408 	strh.w	r8, [r4, #1032]	; 0x408
 80030ba:	e002      	b.n	80030c2 <UART_put_char+0x54>
        }
      } else {
        res = -1;
 80030bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030c0:	e000      	b.n	80030c4 <UART_put_char+0x56>
    return 0;
  } else {
    s32_t res;
    int max_tries = 0x10000;
    do {
      res = 0;
 80030c2:	2000      	movs	r0, #0
          u->tx.wix = 0;
        }
      } else {
        res = -1;
      }
      UART_TX_IRQ_ON(u);
 80030c4:	6822      	ldr	r2, [r4, #0]
 80030c6:	8993      	ldrh	r3, [r2, #12]
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ce:	8193      	strh	r3, [r2, #12]
    } while (u->assure_tx && res != 0 && --max_tries > 0);
 80030d0:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 80030d4:	b123      	cbz	r3, 80030e0 <UART_put_char+0x72>
 80030d6:	b118      	cbz	r0, 80030e0 <UART_put_char+0x72>
 80030d8:	3d01      	subs	r5, #1
 80030da:	d1d9      	bne.n	8003090 <UART_put_char+0x22>
 80030dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return res;
  }
}
 80030e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080030e4 <UART_put_buf>:
  while (UART_CHECK_TX(u) == 0)
    ;
  UART_HW(u)->DR = (uint8_t) c;
}

s32_t UART_put_buf(uart *u, u8_t* c, u16_t len) {
 80030e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (UART_ALWAYS_SYNC_TX || u->sync_tx) {
 80030e8:	f890 6415 	ldrb.w	r6, [r0, #1045]	; 0x415
  while (UART_CHECK_TX(u) == 0)
    ;
  UART_HW(u)->DR = (uint8_t) c;
}

s32_t UART_put_buf(uart *u, u8_t* c, u16_t len) {
 80030ec:	4604      	mov	r4, r0
 80030ee:	460d      	mov	r5, r1
 80030f0:	4690      	mov	r8, r2
  if (UART_ALWAYS_SYNC_TX || u->sync_tx) {
 80030f2:	b176      	cbz	r6, 8003112 <UART_put_buf+0x2e>
 80030f4:	4613      	mov	r3, r2
    u16_t tlen = len;
    while (tlen-- > 0) {
 80030f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	428b      	cmp	r3, r1
 8003100:	d004      	beq.n	800310c <UART_put_buf+0x28>
      UART_HW(u)->DR = *c++;
 8003102:	6822      	ldr	r2, [r4, #0]
 8003104:	f815 0b01 	ldrb.w	r0, [r5], #1
 8003108:	8090      	strh	r0, [r2, #4]
 800310a:	e7f6      	b.n	80030fa <UART_put_buf+0x16>
    }
    return len;
 800310c:	4640      	mov	r0, r8
 800310e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      u32_t len_to_end = UART_TX_BUFFER - u->tx.wix;
      if (remaining > len_to_end) {
        memcpy(&u->tx.buf[u->tx.wix], c, len_to_end);
        c += len_to_end;
        remaining -= len_to_end;
        u->tx.wix = 0;
 8003112:	46b2      	mov	sl, r6
      }
      memcpy(&u->tx.buf[u->tx.wix], c, remaining);
      c += remaining;
      u->tx.wix += remaining;
      if (u->tx.wix >= UART_RX_BUFFER) {
 8003114:	f240 1bff 	movw	fp, #511	; 0x1ff
    return len;
  } else {
    u32_t written = 0;
    u16_t guard = 0;
    do {
      u16_t avail = UART_tx_available(u);
 8003118:	4620      	mov	r0, r4
 800311a:	f7ff fed8 	bl	8002ece <UART_tx_available>
      s32_t len_to_write = MIN(len - written, avail);
 800311e:	ebc6 0708 	rsb	r7, r6, r8
 8003122:	4287      	cmp	r7, r0
 8003124:	bf28      	it	cs
 8003126:	4607      	movcs	r7, r0
      guard++;
      if (len_to_write == 0) {
 8003128:	b927      	cbnz	r7, 8003134 <UART_put_buf+0x50>
        while (UART_CHECK_TX(u) == 0)
 800312a:	6822      	ldr	r2, [r4, #0]
 800312c:	8813      	ldrh	r3, [r2, #0]
 800312e:	061f      	lsls	r7, r3, #24
 8003130:	d5fc      	bpl.n	800312c <UART_put_buf+0x48>
          ;
        len_to_write = 1;
 8003132:	2701      	movs	r7, #1
      }
      guard = 0;
      u32_t remaining = len_to_write;
      u32_t len_to_end = UART_TX_BUFFER - u->tx.wix;
 8003134:	f8b4 9408 	ldrh.w	r9, [r4, #1032]	; 0x408
 8003138:	fa1f f989 	uxth.w	r9, r9
 800313c:	f5c9 7900 	rsb	r9, r9, #512	; 0x200
      if (remaining > len_to_end) {
 8003140:	454f      	cmp	r7, r9
 8003142:	d90f      	bls.n	8003164 <UART_put_buf+0x80>
        memcpy(&u->tx.buf[u->tx.wix], c, len_to_end);
 8003144:	f8b4 0408 	ldrh.w	r0, [r4, #1032]	; 0x408
 8003148:	4629      	mov	r1, r5
 800314a:	b280      	uxth	r0, r0
 800314c:	f500 7002 	add.w	r0, r0, #520	; 0x208
 8003150:	464a      	mov	r2, r9
 8003152:	4420      	add	r0, r4
 8003154:	f00b f8c8 	bl	800e2e8 <memcpy>
        c += len_to_end;
 8003158:	444d      	add	r5, r9
        remaining -= len_to_end;
        u->tx.wix = 0;
 800315a:	f8a4 a408 	strh.w	sl, [r4, #1032]	; 0x408
      u32_t remaining = len_to_write;
      u32_t len_to_end = UART_TX_BUFFER - u->tx.wix;
      if (remaining > len_to_end) {
        memcpy(&u->tx.buf[u->tx.wix], c, len_to_end);
        c += len_to_end;
        remaining -= len_to_end;
 800315e:	ebc9 0907 	rsb	r9, r9, r7
 8003162:	e000      	b.n	8003166 <UART_put_buf+0x82>
 8003164:	46b9      	mov	r9, r7
        u->tx.wix = 0;
      }
      memcpy(&u->tx.buf[u->tx.wix], c, remaining);
 8003166:	f8b4 0408 	ldrh.w	r0, [r4, #1032]	; 0x408
 800316a:	464a      	mov	r2, r9
 800316c:	b280      	uxth	r0, r0
 800316e:	f500 7002 	add.w	r0, r0, #520	; 0x208
 8003172:	4629      	mov	r1, r5
 8003174:	4420      	add	r0, r4
 8003176:	f00b f8b7 	bl	800e2e8 <memcpy>
      c += remaining;
      u->tx.wix += remaining;
 800317a:	f8b4 3408 	ldrh.w	r3, [r4, #1032]	; 0x408
        c += len_to_end;
        remaining -= len_to_end;
        u->tx.wix = 0;
      }
      memcpy(&u->tx.buf[u->tx.wix], c, remaining);
      c += remaining;
 800317e:	444d      	add	r5, r9
      u->tx.wix += remaining;
 8003180:	b29b      	uxth	r3, r3
 8003182:	4499      	add	r9, r3
 8003184:	fa1f f989 	uxth.w	r9, r9
 8003188:	f8a4 9408 	strh.w	r9, [r4, #1032]	; 0x408
      if (u->tx.wix >= UART_RX_BUFFER) {
 800318c:	f8b4 3408 	ldrh.w	r3, [r4, #1032]	; 0x408
        u->tx.wix = 0;
      }
      UART_TX_IRQ_ON(u);
      written += len_to_write;
 8003190:	443e      	add	r6, r7
        u->tx.wix = 0;
      }
      memcpy(&u->tx.buf[u->tx.wix], c, remaining);
      c += remaining;
      u->tx.wix += remaining;
      if (u->tx.wix >= UART_RX_BUFFER) {
 8003192:	b29b      	uxth	r3, r3
 8003194:	455b      	cmp	r3, fp
        u->tx.wix = 0;
      }
      UART_TX_IRQ_ON(u);
 8003196:	6823      	ldr	r3, [r4, #0]
      }
      memcpy(&u->tx.buf[u->tx.wix], c, remaining);
      c += remaining;
      u->tx.wix += remaining;
      if (u->tx.wix >= UART_RX_BUFFER) {
        u->tx.wix = 0;
 8003198:	bf88      	it	hi
 800319a:	f8a4 a408 	strhhi.w	sl, [r4, #1032]	; 0x408
      }
      UART_TX_IRQ_ON(u);
 800319e:	899a      	ldrh	r2, [r3, #12]
 80031a0:	b292      	uxth	r2, r2
 80031a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031a6:	819a      	strh	r2, [r3, #12]
      written += len_to_write;
    } while (u->assure_tx && written < len && guard < 0xff);
 80031a8:	f894 3414 	ldrb.w	r3, [r4, #1044]	; 0x414
 80031ac:	b913      	cbnz	r3, 80031b4 <UART_put_buf+0xd0>

    return written;
 80031ae:	4630      	mov	r0, r6
 80031b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (u->tx.wix >= UART_RX_BUFFER) {
        u->tx.wix = 0;
      }
      UART_TX_IRQ_ON(u);
      written += len_to_write;
    } while (u->assure_tx && written < len && guard < 0xff);
 80031b4:	4546      	cmp	r6, r8
 80031b6:	d3af      	bcc.n	8003118 <UART_put_buf+0x34>
 80031b8:	e7f9      	b.n	80031ae <UART_put_buf+0xca>

080031ba <UART_set_callback>:
    return written;
  }
}

void UART_set_callback(uart *u, uart_rx_callback rx_f, void* arg) {
  u->rx_f = rx_f;
 80031ba:	f8c0 140c 	str.w	r1, [r0, #1036]	; 0x40c
  u->arg = arg;
 80031be:	f8c0 2410 	str.w	r2, [r0, #1040]	; 0x410
 80031c2:	4770      	bx	lr

080031c4 <UART_get_callback>:
}

void UART_get_callback(uart *u, uart_rx_callback *rx_f, void **arg) {
  *rx_f = u->rx_f;
 80031c4:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
 80031c8:	600b      	str	r3, [r1, #0]
  *arg = u->arg;
 80031ca:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	4770      	bx	lr

080031d2 <UART_assure_tx>:
}

uart __uart_vec[CONFIG_UART_CNT];

bool UART_assure_tx(uart *u, bool on) {
 80031d2:	4603      	mov	r3, r0
  bool old = u->assure_tx;
 80031d4:	f890 0414 	ldrb.w	r0, [r0, #1044]	; 0x414
  u->assure_tx = on;
 80031d8:	f883 1414 	strb.w	r1, [r3, #1044]	; 0x414
  return old;
}
 80031dc:	4770      	bx	lr

080031de <UART_sync_tx>:

bool UART_sync_tx(uart *u, bool on) {
 80031de:	4603      	mov	r3, r0
  bool old = u->sync_tx;
 80031e0:	f890 0415 	ldrb.w	r0, [r0, #1045]	; 0x415
  u->sync_tx = on;
 80031e4:	f883 1415 	strb.w	r1, [r3, #1045]	; 0x415
  return old;
}
 80031e8:	4770      	bx	lr

080031ea <UART_config>:

#ifndef CONFIG_UART_OWN_CFG
bool UART_config(uart *uart, u32_t baud, UART_databits databits,
    UART_stopbits stopbits, UART_parity parity, UART_flowcontrol flowcontrol,
    bool activate) {
 80031ea:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031ee:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 80031f2:	4604      	mov	r4, r0
 80031f4:	468a      	mov	sl, r1
  USART_InitTypeDef cfg;

  USART_Cmd(UART_HW(uart), DISABLE);
 80031f6:	6800      	ldr	r0, [r0, #0]
 80031f8:	2100      	movs	r1, #0
}

#ifndef CONFIG_UART_OWN_CFG
bool UART_config(uart *uart, u32_t baud, UART_databits databits,
    UART_stopbits stopbits, UART_parity parity, UART_flowcontrol flowcontrol,
    bool activate) {
 80031fa:	4616      	mov	r6, r2
 80031fc:	4699      	mov	r9, r3
 80031fe:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
 8003202:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
  USART_InitTypeDef cfg;

  USART_Cmd(UART_HW(uart), DISABLE);
 8003206:	f00a fe38 	bl	800de7a <USART_Cmd>

  if (activate) {
 800320a:	2d00      	cmp	r5, #0
 800320c:	d05c      	beq.n	80032c8 <UART_config+0xde>
    cfg.USART_BaudRate = baud;
 800320e:	f8cd a000 	str.w	sl, [sp]
    switch (databits) {
 8003212:	b136      	cbz	r6, 8003222 <UART_config+0x38>
 8003214:	2e09      	cmp	r6, #9
 8003216:	d16f      	bne.n	80032f8 <UART_config+0x10e>
    case UART_CFG_DATABITS_8: cfg.USART_WordLength = USART_WordLength_8b; break;
    case UART_CFG_DATABITS_9: cfg.USART_WordLength = USART_WordLength_9b; break;
 8003218:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800321c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8003220:	e001      	b.n	8003226 <UART_config+0x3c>
  USART_Cmd(UART_HW(uart), DISABLE);

  if (activate) {
    cfg.USART_BaudRate = baud;
    switch (databits) {
    case UART_CFG_DATABITS_8: cfg.USART_WordLength = USART_WordLength_8b; break;
 8003222:	f8ad 6004 	strh.w	r6, [sp, #4]
    case UART_CFG_DATABITS_9: cfg.USART_WordLength = USART_WordLength_9b; break;
    default: return FALSE;
    }
    switch (stopbits) {
 8003226:	f1b9 0f03 	cmp.w	r9, #3
 800322a:	d865      	bhi.n	80032f8 <UART_config+0x10e>
 800322c:	e8df f009 	tbb	[pc, r9]
 8003230:	0a070502 	.word	0x0a070502
    case UART_CFG_STOPBITS_0_5: cfg.USART_StopBits = USART_StopBits_0_5; break;
 8003234:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003238:	e006      	b.n	8003248 <UART_config+0x5e>
    case UART_CFG_STOPBITS_1: cfg.USART_StopBits = USART_StopBits_1; break;
 800323a:	2300      	movs	r3, #0
 800323c:	e004      	b.n	8003248 <UART_config+0x5e>
    case UART_CFG_STOPBITS_1_5: cfg.USART_StopBits = USART_StopBits_1_5; break;
 800323e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003242:	e001      	b.n	8003248 <UART_config+0x5e>
    case UART_CFG_STOPBITS_2: cfg.USART_StopBits = USART_StopBits_2; break;
 8003244:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    default: return FALSE;
    }
    switch (parity) {
 8003248:	f1b8 0f01 	cmp.w	r8, #1
    }
    switch (stopbits) {
    case UART_CFG_STOPBITS_0_5: cfg.USART_StopBits = USART_StopBits_0_5; break;
    case UART_CFG_STOPBITS_1: cfg.USART_StopBits = USART_StopBits_1; break;
    case UART_CFG_STOPBITS_1_5: cfg.USART_StopBits = USART_StopBits_1_5; break;
    case UART_CFG_STOPBITS_2: cfg.USART_StopBits = USART_StopBits_2; break;
 800324c:	f8ad 3006 	strh.w	r3, [sp, #6]
    default: return FALSE;
    }
    switch (parity) {
 8003250:	d008      	beq.n	8003264 <UART_config+0x7a>
 8003252:	d305      	bcc.n	8003260 <UART_config+0x76>
 8003254:	f1b8 0f02 	cmp.w	r8, #2
 8003258:	d14e      	bne.n	80032f8 <UART_config+0x10e>
    case UART_CFG_PARITY_NONE: cfg.USART_Parity = USART_Parity_No; break;
    case UART_CFG_PARITY_EVEN: cfg.USART_Parity = USART_Parity_Even; break;
    case UART_CFG_PARITY_ODD: cfg.USART_Parity = USART_Parity_Odd; break;
 800325a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800325e:	e003      	b.n	8003268 <UART_config+0x7e>
    case UART_CFG_STOPBITS_1_5: cfg.USART_StopBits = USART_StopBits_1_5; break;
    case UART_CFG_STOPBITS_2: cfg.USART_StopBits = USART_StopBits_2; break;
    default: return FALSE;
    }
    switch (parity) {
    case UART_CFG_PARITY_NONE: cfg.USART_Parity = USART_Parity_No; break;
 8003260:	2300      	movs	r3, #0
 8003262:	e001      	b.n	8003268 <UART_config+0x7e>
    case UART_CFG_PARITY_EVEN: cfg.USART_Parity = USART_Parity_Even; break;
 8003264:	f44f 6380 	mov.w	r3, #1024	; 0x400
    case UART_CFG_PARITY_ODD: cfg.USART_Parity = USART_Parity_Odd; break;
 8003268:	f8ad 3008 	strh.w	r3, [sp, #8]
    default: return FALSE;
    }
    switch (flowcontrol) {
 800326c:	2f03      	cmp	r7, #3
 800326e:	d843      	bhi.n	80032f8 <UART_config+0x10e>
 8003270:	e8df f007 	tbb	[pc, r7]
 8003274:	0a070402 	.word	0x0a070402
    case UART_CFG_FLOWCONTROL_NONE: cfg.USART_HardwareFlowControl = USART_HardwareFlowControl_None; break;
 8003278:	2300      	movs	r3, #0
 800327a:	e007      	b.n	800328c <UART_config+0xa2>
    case UART_CFG_FLOWCONTROL_RTS: cfg.USART_HardwareFlowControl = USART_HardwareFlowControl_RTS; break;
 800327c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003280:	e004      	b.n	800328c <UART_config+0xa2>
    case UART_CFG_FLOWCONTROL_CTS: cfg.USART_HardwareFlowControl = USART_HardwareFlowControl_CTS; break;
 8003282:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003286:	e001      	b.n	800328c <UART_config+0xa2>
    case UART_CFG_FLOWCONTROL_RTS_CTS: cfg.USART_HardwareFlowControl = USART_HardwareFlowControl_RTS_CTS; break;
 8003288:	f44f 7340 	mov.w	r3, #768	; 0x300
 800328c:	f8ad 300c 	strh.w	r3, [sp, #12]
    default: return FALSE;
    }
    cfg.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    USART_Init(UART_HW(uart), &cfg);
 8003290:	6820      	ldr	r0, [r4, #0]
    case UART_CFG_FLOWCONTROL_RTS: cfg.USART_HardwareFlowControl = USART_HardwareFlowControl_RTS; break;
    case UART_CFG_FLOWCONTROL_CTS: cfg.USART_HardwareFlowControl = USART_HardwareFlowControl_CTS; break;
    case UART_CFG_FLOWCONTROL_RTS_CTS: cfg.USART_HardwareFlowControl = USART_HardwareFlowControl_RTS_CTS; break;
    default: return FALSE;
    }
    cfg.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8003292:	230c      	movs	r3, #12
    USART_Init(UART_HW(uart), &cfg);
 8003294:	4669      	mov	r1, sp
    case UART_CFG_FLOWCONTROL_RTS: cfg.USART_HardwareFlowControl = USART_HardwareFlowControl_RTS; break;
    case UART_CFG_FLOWCONTROL_CTS: cfg.USART_HardwareFlowControl = USART_HardwareFlowControl_CTS; break;
    case UART_CFG_FLOWCONTROL_RTS_CTS: cfg.USART_HardwareFlowControl = USART_HardwareFlowControl_RTS_CTS; break;
    default: return FALSE;
    }
    cfg.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8003296:	f8ad 300a 	strh.w	r3, [sp, #10]
    USART_Init(UART_HW(uart), &cfg);
 800329a:	f00a fd77 	bl	800dd8c <USART_Init>

    // Enable USART interrupts
    USART_ITConfig(UART_HW(uart), USART_IT_TC, DISABLE);
 800329e:	6820      	ldr	r0, [r4, #0]
 80032a0:	f240 6126 	movw	r1, #1574	; 0x626
 80032a4:	2200      	movs	r2, #0
 80032a6:	f00a fdf4 	bl	800de92 <USART_ITConfig>
    USART_ITConfig(UART_HW(uart), USART_IT_TXE, DISABLE);
 80032aa:	6820      	ldr	r0, [r4, #0]
 80032ac:	f240 7127 	movw	r1, #1831	; 0x727
 80032b0:	2200      	movs	r2, #0
 80032b2:	f00a fdee 	bl	800de92 <USART_ITConfig>
    USART_ITConfig(UART_HW(uart), USART_IT_RXNE, ENABLE);
 80032b6:	6820      	ldr	r0, [r4, #0]
 80032b8:	f240 5125 	movw	r1, #1317	; 0x525
 80032bc:	2201      	movs	r2, #1
 80032be:	f00a fde8 	bl	800de92 <USART_ITConfig>
    USART_Cmd(UART_HW(uart), ENABLE);
 80032c2:	6820      	ldr	r0, [r4, #0]
 80032c4:	2101      	movs	r1, #1
 80032c6:	e013      	b.n	80032f0 <UART_config+0x106>
  } else {
    USART_ITConfig(UART_HW(uart), USART_IT_TC, DISABLE);
 80032c8:	6820      	ldr	r0, [r4, #0]
 80032ca:	f240 6126 	movw	r1, #1574	; 0x626
 80032ce:	462a      	mov	r2, r5
 80032d0:	f00a fddf 	bl	800de92 <USART_ITConfig>
    USART_ITConfig(UART_HW(uart), USART_IT_TXE, DISABLE);
 80032d4:	6820      	ldr	r0, [r4, #0]
 80032d6:	f240 7127 	movw	r1, #1831	; 0x727
 80032da:	462a      	mov	r2, r5
 80032dc:	f00a fdd9 	bl	800de92 <USART_ITConfig>
    USART_ITConfig(UART_HW(uart), USART_IT_RXNE, DISABLE);
 80032e0:	6820      	ldr	r0, [r4, #0]
 80032e2:	f240 5125 	movw	r1, #1317	; 0x525
 80032e6:	462a      	mov	r2, r5
 80032e8:	f00a fdd3 	bl	800de92 <USART_ITConfig>
    USART_Cmd(UART_HW(uart), DISABLE);
 80032ec:	6820      	ldr	r0, [r4, #0]
 80032ee:	4629      	mov	r1, r5
 80032f0:	f00a fdc3 	bl	800de7a <USART_Cmd>
  }
  return TRUE;
 80032f4:	2001      	movs	r0, #1
 80032f6:	e000      	b.n	80032fa <UART_config+0x110>
    switch (flowcontrol) {
    case UART_CFG_FLOWCONTROL_NONE: cfg.USART_HardwareFlowControl = USART_HardwareFlowControl_None; break;
    case UART_CFG_FLOWCONTROL_RTS: cfg.USART_HardwareFlowControl = USART_HardwareFlowControl_RTS; break;
    case UART_CFG_FLOWCONTROL_CTS: cfg.USART_HardwareFlowControl = USART_HardwareFlowControl_CTS; break;
    case UART_CFG_FLOWCONTROL_RTS_CTS: cfg.USART_HardwareFlowControl = USART_HardwareFlowControl_RTS_CTS; break;
    default: return FALSE;
 80032f8:	2000      	movs	r0, #0
    USART_ITConfig(UART_HW(uart), USART_IT_TXE, DISABLE);
    USART_ITConfig(UART_HW(uart), USART_IT_RXNE, DISABLE);
    USART_Cmd(UART_HW(uart), DISABLE);
  }
  return TRUE;
}
 80032fa:	b004      	add	sp, #16
 80032fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003300 <UART_init>:
#endif

void UART_init() {
 8003300:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  memset(__uart_vec, 0, sizeof(__uart_vec));
 8003302:	4c0e      	ldr	r4, [pc, #56]	; (800333c <UART_init+0x3c>)
 8003304:	2100      	movs	r1, #0
 8003306:	4620      	mov	r0, r4
 8003308:	f44f 6283 	mov.w	r2, #1048	; 0x418
 800330c:	f00b f840 	bl	800e390 <memset>
  UART_config(_UART(uc-1), UART1_SPEED, UART_CFG_DATABITS_8, UART_CFG_STOPBITS_1,
      UART_CFG_PARITY_NONE, UART_CFG_FLOWCONTROL_NONE, TRUE);
  UART_TX_IRQ_OFF(_UART(uc-1));
#endif
#ifdef CONFIG_UART2
  _UART(uc++)->hw = USART2;
 8003310:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <UART_init+0x40>)
  UART_config(_UART(uc-1), UART2_SPEED, UART_CFG_DATABITS_8, UART_CFG_STOPBITS_1,
 8003312:	2200      	movs	r2, #0
  UART_config(_UART(uc-1), UART1_SPEED, UART_CFG_DATABITS_8, UART_CFG_STOPBITS_1,
      UART_CFG_PARITY_NONE, UART_CFG_FLOWCONTROL_NONE, TRUE);
  UART_TX_IRQ_OFF(_UART(uc-1));
#endif
#ifdef CONFIG_UART2
  _UART(uc++)->hw = USART2;
 8003314:	6023      	str	r3, [r4, #0]
  UART_config(_UART(uc-1), UART2_SPEED, UART_CFG_DATABITS_8, UART_CFG_STOPBITS_1,
 8003316:	2301      	movs	r3, #1
 8003318:	9200      	str	r2, [sp, #0]
 800331a:	9201      	str	r2, [sp, #4]
 800331c:	9302      	str	r3, [sp, #8]
 800331e:	4620      	mov	r0, r4
 8003320:	f44f 21e1 	mov.w	r1, #460800	; 0x70800
 8003324:	f7ff ff61 	bl	80031ea <UART_config>
      UART_CFG_PARITY_NONE, UART_CFG_FLOWCONTROL_NONE, TRUE);
  UART_TX_IRQ_OFF(_UART(uc-1));
 8003328:	6822      	ldr	r2, [r4, #0]
 800332a:	8993      	ldrh	r3, [r2, #12]
 800332c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003330:	041b      	lsls	r3, r3, #16
 8003332:	0c1b      	lsrs	r3, r3, #16
 8003334:	8193      	strh	r3, [r2, #12]
  _UART(uc++)->hw = UART4;
  UART_config(_UART(uc-1), UART4_SPEED, UART_CFG_DATABITS_8, UART_CFG_STOPBITS_1,
      UART_CFG_PARITY_NONE, UART_CFG_FLOWCONTROL_NONE, TRUE);
  UART_TX_IRQ_OFF(_UART(uc-1));
#endif
}
 8003336:	b004      	add	sp, #16
 8003338:	bd10      	pop	{r4, pc}
 800333a:	bf00      	nop
 800333c:	20000d34 	.word	0x20000d34
 8003340:	40004400 	.word	0x40004400

08003344 <SHMEM_validate>:
  SHMEM_get()->magic = SHMEM_MAGIC;
  SHMEM_get()->reboot_reason = REBOOT_COLD_START;
  SHMEM_CALC_CHK(__shmem, SHMEM_get()->chk);
}

bool SHMEM_validate() {
 8003344:	b510      	push	{r4, lr}
  bool ok = FALSE;
  do {
    if (SHMEM_get()->magic != SHMEM_MAGIC) {
 8003346:	4c13      	ldr	r4, [pc, #76]	; (8003394 <SHMEM_validate+0x50>)
 8003348:	4a13      	ldr	r2, [pc, #76]	; (8003398 <SHMEM_validate+0x54>)
 800334a:	6823      	ldr	r3, [r4, #0]
 800334c:	4293      	cmp	r3, r2
 800334e:	d012      	beq.n	8003376 <SHMEM_validate+0x32>

#define __shmem ((shmem *)(SHARED_MEMORY_ADDRESS))


static void _shmem_reset() {
  memset(__shmem, 0, sizeof(shmem));
 8003350:	224c      	movs	r2, #76	; 0x4c
 8003352:	4810      	ldr	r0, [pc, #64]	; (8003394 <SHMEM_validate+0x50>)
 8003354:	2100      	movs	r1, #0
 8003356:	f00b f81b 	bl	800e390 <memset>
  SHMEM_get()->magic = SHMEM_MAGIC;
 800335a:	4b0f      	ldr	r3, [pc, #60]	; (8003398 <SHMEM_validate+0x54>)
  SHMEM_get()->reboot_reason = REBOOT_COLD_START;
  SHMEM_CALC_CHK(__shmem, SHMEM_get()->chk);
 800335c:	2200      	movs	r2, #0
#define __shmem ((shmem *)(SHARED_MEMORY_ADDRESS))


static void _shmem_reset() {
  memset(__shmem, 0, sizeof(shmem));
  SHMEM_get()->magic = SHMEM_MAGIC;
 800335e:	6023      	str	r3, [r4, #0]
 8003360:	4613      	mov	r3, r2
  SHMEM_get()->reboot_reason = REBOOT_COLD_START;
  SHMEM_CALC_CHK(__shmem, SHMEM_get()->chk);
 8003362:	58e1      	ldr	r1, [r4, r3]
 8003364:	3304      	adds	r3, #4
 8003366:	2b48      	cmp	r3, #72	; 0x48
 8003368:	ea82 0201 	eor.w	r2, r2, r1
 800336c:	d1f9      	bne.n	8003362 <SHMEM_validate+0x1e>
 800336e:	4b09      	ldr	r3, [pc, #36]	; (8003394 <SHMEM_validate+0x50>)
 8003370:	2000      	movs	r0, #0
 8003372:	649a      	str	r2, [r3, #72]	; 0x48
 8003374:	bd10      	pop	{r4, pc}
}

bool SHMEM_validate() {
  bool ok = FALSE;
  do {
    if (SHMEM_get()->magic != SHMEM_MAGIC) {
 8003376:	2300      	movs	r3, #0
 8003378:	461a      	mov	r2, r3
      break;
    }
    u32_t exp_chk;
    SHMEM_CALC_CHK(__shmem, exp_chk);
 800337a:	58e1      	ldr	r1, [r4, r3]
 800337c:	3304      	adds	r3, #4
 800337e:	2b48      	cmp	r3, #72	; 0x48
 8003380:	ea82 0201 	eor.w	r2, r2, r1
 8003384:	d1f9      	bne.n	800337a <SHMEM_validate+0x36>

    if (SHMEM_get()->chk != exp_chk) {
 8003386:	4b03      	ldr	r3, [pc, #12]	; (8003394 <SHMEM_validate+0x50>)
 8003388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800338a:	4293      	cmp	r3, r2
 800338c:	d1e0      	bne.n	8003350 <SHMEM_validate+0xc>
      break;
    }
    ok = TRUE;
 800338e:	2001      	movs	r0, #1
 8003390:	bd10      	pop	{r4, pc}
 8003392:	bf00      	nop
 8003394:	20004f80 	.word	0x20004f80
 8003398:	d0decaed 	.word	0xd0decaed

0800339c <SHMEM_get>:
  return ok;
}

shmem *SHMEM_get() {
  return __shmem;
}
 800339c:	4800      	ldr	r0, [pc, #0]	; (80033a0 <SHMEM_get+0x4>)
 800339e:	4770      	bx	lr
 80033a0:	20004f80 	.word	0x20004f80

080033a4 <SHMEM_set_reboot_reason>:

void SHMEM_set_reboot_reason(enum reboot_reason_e rr) {
  SHMEM_get()->reboot_reason = rr;
 80033a4:	4906      	ldr	r1, [pc, #24]	; (80033c0 <SHMEM_set_reboot_reason+0x1c>)
 80033a6:	2300      	movs	r3, #0
 80033a8:	7108      	strb	r0, [r1, #4]
  SHMEM_CALC_CHK(__shmem, SHMEM_get()->chk);
 80033aa:	461a      	mov	r2, r3
 80033ac:	58c8      	ldr	r0, [r1, r3]
 80033ae:	3304      	adds	r3, #4
 80033b0:	2b48      	cmp	r3, #72	; 0x48
 80033b2:	ea82 0200 	eor.w	r2, r2, r0
 80033b6:	d1f9      	bne.n	80033ac <SHMEM_set_reboot_reason+0x8>
 80033b8:	4b01      	ldr	r3, [pc, #4]	; (80033c0 <SHMEM_set_reboot_reason+0x1c>)
 80033ba:	649a      	str	r2, [r3, #72]	; 0x48
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	20004f80 	.word	0x20004f80

080033c4 <niffs_readdir_v>:
int NIFFS_closedir(niffs_DIR *d) {
  if (!d->fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
  return NIFFS_OK;
}

static int niffs_readdir_v(niffs *fs, niffs_page_ix pix, niffs_page_hdr *phdr, void *v_arg) {
 80033c4:	b510      	push	{r4, lr}
  (void)fs;
  struct niffs_dirent *e = (struct niffs_dirent *)v_arg;
  if (_NIFFS_IS_FLAG_VALID(phdr) && !_NIFFS_IS_FREE(phdr) && !_NIFFS_IS_DELE(phdr)) {
 80033c6:	8854      	ldrh	r4, [r2, #2]
 80033c8:	f64f 70fc 	movw	r0, #65532	; 0xfffc
 80033cc:	3c02      	subs	r4, #2
 80033ce:	b2a4      	uxth	r4, r4
 80033d0:	4284      	cmp	r4, r0
 80033d2:	d91e      	bls.n	8003412 <niffs_readdir_v+0x4e>
 80033d4:	8814      	ldrh	r4, [r2, #0]
 80033d6:	3001      	adds	r0, #1
 80033d8:	3c01      	subs	r4, #1
 80033da:	b2a4      	uxth	r4, r4
 80033dc:	4284      	cmp	r4, r0
 80033de:	d818      	bhi.n	8003412 <niffs_readdir_v+0x4e>
    if (_NIFFS_IS_OBJ_HDR(phdr)) {
 80033e0:	7850      	ldrb	r0, [r2, #1]
 80033e2:	1e44      	subs	r4, r0, #1
 80033e4:	b2e4      	uxtb	r4, r4
 80033e6:	2cfd      	cmp	r4, #253	; 0xfd
 80033e8:	d813      	bhi.n	8003412 <niffs_readdir_v+0x4e>
 80033ea:	7814      	ldrb	r4, [r2, #0]
 80033ec:	b98c      	cbnz	r4, 8003412 <niffs_readdir_v+0x4e>
      // object header page
      niffs_object_hdr *ohdr = (niffs_object_hdr *)phdr;
      e->obj_id = ohdr->phdr.id.obj_id;
 80033ee:	7018      	strb	r0, [r3, #0]
      e->pix = pix;
 80033f0:	8319      	strh	r1, [r3, #24]
      e->size = ohdr->len == NIFFS_UNDEF_LEN ? 0 : ohdr->len;
 80033f2:	6851      	ldr	r1, [r2, #4]
      e->type = ohdr->type;
      niffs_strncpy((char *)e->name, (char *)ohdr->name, NIFFS_NAME_LEN);
 80033f4:	1c58      	adds	r0, r3, #1
    if (_NIFFS_IS_OBJ_HDR(phdr)) {
      // object header page
      niffs_object_hdr *ohdr = (niffs_object_hdr *)phdr;
      e->obj_id = ohdr->phdr.id.obj_id;
      e->pix = pix;
      e->size = ohdr->len == NIFFS_UNDEF_LEN ? 0 : ohdr->len;
 80033f6:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80033fa:	bf08      	it	eq
 80033fc:	2100      	moveq	r1, #0
 80033fe:	6159      	str	r1, [r3, #20]
      e->type = ohdr->type;
 8003400:	7e11      	ldrb	r1, [r2, #24]
 8003402:	7699      	strb	r1, [r3, #26]
      niffs_strncpy((char *)e->name, (char *)ohdr->name, NIFFS_NAME_LEN);
 8003404:	f102 0108 	add.w	r1, r2, #8
 8003408:	2210      	movs	r2, #16
 800340a:	f7fd ff8f 	bl	800132c <strncpy>
      return NIFFS_OK;
 800340e:	4620      	mov	r0, r4
 8003410:	bd10      	pop	{r4, pc}
    }
  }
  return NIFFS_VIS_CONT;
 8003412:	2001      	movs	r0, #1
}
 8003414:	bd10      	pop	{r4, pc}

08003416 <NIFFS_info>:
 */

#include "niffs.h"
#include "niffs_internal.h"

int NIFFS_info(niffs *fs, niffs_info *i) {
 8003416:	b530      	push	{r4, r5, lr}
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
 8003418:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 800341c:	b1cb      	cbz	r3, 8003452 <NIFFS_info+0x3c>
  if (i == 0) return ERR_NIFFS_NULL_PTR;
 800341e:	b1d1      	cbz	r1, 8003456 <NIFFS_info+0x40>

  i->total_bytes = (fs->sectors-1) * fs->pages_per_sector * _NIFFS_SPIX_2_PDATA_LEN(fs, 1);
 8003420:	6845      	ldr	r5, [r0, #4]
 8003422:	68c4      	ldr	r4, [r0, #12]
 8003424:	1e6a      	subs	r2, r5, #1
 8003426:	3c04      	subs	r4, #4
 8003428:	4362      	muls	r2, r4
 800342a:	6a03      	ldr	r3, [r0, #32]
 800342c:	435a      	muls	r2, r3
  i->used_bytes = ((fs->sectors) * fs->pages_per_sector - (fs->free_pages + fs->dele_pages)) * _NIFFS_SPIX_2_PDATA_LEN(fs, 1);
 800342e:	435d      	muls	r5, r3

int NIFFS_info(niffs *fs, niffs_info *i) {
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
  if (i == 0) return ERR_NIFFS_NULL_PTR;

  i->total_bytes = (fs->sectors-1) * fs->pages_per_sector * _NIFFS_SPIX_2_PDATA_LEN(fs, 1);
 8003430:	600a      	str	r2, [r1, #0]
  i->used_bytes = ((fs->sectors) * fs->pages_per_sector - (fs->free_pages + fs->dele_pages)) * _NIFFS_SPIX_2_PDATA_LEN(fs, 1);
 8003432:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003434:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  i->overflow = fs->free_pages < fs->pages_per_sector;
 8003436:	429a      	cmp	r2, r3
int NIFFS_info(niffs *fs, niffs_info *i) {
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
  if (i == 0) return ERR_NIFFS_NULL_PTR;

  i->total_bytes = (fs->sectors-1) * fs->pages_per_sector * _NIFFS_SPIX_2_PDATA_LEN(fs, 1);
  i->used_bytes = ((fs->sectors) * fs->pages_per_sector - (fs->free_pages + fs->dele_pages)) * _NIFFS_SPIX_2_PDATA_LEN(fs, 1);
 8003438:	ebc0 0505 	rsb	r5, r0, r5
 800343c:	ebc2 0505 	rsb	r5, r2, r5
 8003440:	fb04 f405 	mul.w	r4, r4, r5
  i->overflow = fs->free_pages < fs->pages_per_sector;
 8003444:	bf2c      	ite	cs
 8003446:	2300      	movcs	r3, #0
 8003448:	2301      	movcc	r3, #1
int NIFFS_info(niffs *fs, niffs_info *i) {
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
  if (i == 0) return ERR_NIFFS_NULL_PTR;

  i->total_bytes = (fs->sectors-1) * fs->pages_per_sector * _NIFFS_SPIX_2_PDATA_LEN(fs, 1);
  i->used_bytes = ((fs->sectors) * fs->pages_per_sector - (fs->free_pages + fs->dele_pages)) * _NIFFS_SPIX_2_PDATA_LEN(fs, 1);
 800344a:	604c      	str	r4, [r1, #4]
  i->overflow = fs->free_pages < fs->pages_per_sector;
 800344c:	720b      	strb	r3, [r1, #8]
      max_conseq_free = NIFFS_MAX(cur_conseq_free, max_conseq_free);
    }
  }
  i->lin_max_conseq_free = max_conseq_free;
#endif
  return NIFFS_OK;
 800344e:	2000      	movs	r0, #0
 8003450:	bd30      	pop	{r4, r5, pc}

#include "niffs.h"
#include "niffs_internal.h"

int NIFFS_info(niffs *fs, niffs_info *i) {
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
 8003452:	4802      	ldr	r0, [pc, #8]	; (800345c <NIFFS_info+0x46>)
 8003454:	bd30      	pop	{r4, r5, pc}
  if (i == 0) return ERR_NIFFS_NULL_PTR;
 8003456:	4802      	ldr	r0, [pc, #8]	; (8003460 <NIFFS_info+0x4a>)
    }
  }
  i->lin_max_conseq_free = max_conseq_free;
#endif
  return NIFFS_OK;
}
 8003458:	bd30      	pop	{r4, r5, pc}
 800345a:	bf00      	nop
 800345c:	ffffd4e8 	.word	0xffffd4e8
 8003460:	ffffd4fb 	.word	0xffffd4fb

08003464 <NIFFS_creat>:


int NIFFS_creat(niffs *fs, const char *name, niffs_mode mode) {
  (void)mode;
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
 8003464:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 8003468:	b11b      	cbz	r3, 8003472 <NIFFS_creat+0xe>
  int res;
  res = niffs_create(fs, name, _NIFFS_FTYPE_FILE, 0);
 800346a:	2200      	movs	r2, #0
 800346c:	4613      	mov	r3, r2
 800346e:	f002 ba9d 	b.w	80059ac <niffs_create>
  return res;
}
 8003472:	4801      	ldr	r0, [pc, #4]	; (8003478 <NIFFS_creat+0x14>)
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	ffffd4e8 	.word	0xffffd4e8

0800347c <NIFFS_open>:

int NIFFS_open(niffs *fs, const char *name, u8_t flags, niffs_mode mode) {
 800347c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  (void)mode;
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
 8003480:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
  int res;
  res = niffs_create(fs, name, _NIFFS_FTYPE_FILE, 0);
  return res;
}

int NIFFS_open(niffs *fs, const char *name, u8_t flags, niffs_mode mode) {
 8003484:	4604      	mov	r4, r0
 8003486:	460f      	mov	r7, r1
 8003488:	4616      	mov	r6, r2
  (void)mode;
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
 800348a:	2b00      	cmp	r3, #0
 800348c:	d05c      	beq.n	8003548 <NIFFS_open+0xcc>
  int res = NIFFS_OK;
  niffs_file_type type =
      flags & NIFFS_O_LINEAR ? _NIFFS_FTYPE_LINFILE : _NIFFS_FTYPE_FILE;
#if !NIFFS_LINEAR_AREA
  if (type == _NIFFS_FTYPE_LINFILE) return ERR_NIFFS_BAD_CONF;
 800348e:	0615      	lsls	r5, r2, #24
 8003490:	d45c      	bmi.n	800354c <NIFFS_open+0xd0>
#endif
  if (type) {
    flags |= NIFFS_O_APPEND; // force append for linear files
  }
  int fd_ix = niffs_open(fs, name, flags);
 8003492:	f001 fce1 	bl	8004e58 <niffs_open>
  if (fd_ix < 0) {
 8003496:	1e05      	subs	r5, r0, #0
 8003498:	da16      	bge.n	80034c8 <NIFFS_open+0x4c>
    // file not found
    if (fd_ix == ERR_NIFFS_FILE_NOT_FOUND && (flags & NIFFS_O_CREAT)) {
 800349a:	4b2f      	ldr	r3, [pc, #188]	; (8003558 <NIFFS_open+0xdc>)
 800349c:	429d      	cmp	r5, r3
 800349e:	d157      	bne.n	8003550 <NIFFS_open+0xd4>
 80034a0:	0772      	lsls	r2, r6, #29
 80034a2:	d555      	bpl.n	8003550 <NIFFS_open+0xd4>
      res = niffs_create(fs, name, type, 0);
 80034a4:	2200      	movs	r2, #0
 80034a6:	4620      	mov	r0, r4
 80034a8:	4639      	mov	r1, r7
 80034aa:	4613      	mov	r3, r2
 80034ac:	f002 fa7e 	bl	80059ac <niffs_create>
      if (res == NIFFS_OK) {
 80034b0:	4605      	mov	r5, r0
 80034b2:	2800      	cmp	r0, #0
 80034b4:	d14c      	bne.n	8003550 <NIFFS_open+0xd4>
        fd_ix = niffs_open(fs, name, flags);
 80034b6:	4620      	mov	r0, r4
 80034b8:	4639      	mov	r1, r7
 80034ba:	4632      	mov	r2, r6
 80034bc:	f001 fccc 	bl	8004e58 <niffs_open>
      (void)niffs_close(fs, fd_ix);
      return ERR_NIFFS_FILE_EXISTS;
    }
  }

  if (res != NIFFS_OK) return res;
 80034c0:	4605      	mov	r5, r0
 80034c2:	2800      	cmp	r0, #0
 80034c4:	d144      	bne.n	8003550 <NIFFS_open+0xd4>
 80034c6:	e009      	b.n	80034dc <NIFFS_open+0x60>
      }
    }
    res = fd_ix;
  } else {
    // file found
    if ((flags & (NIFFS_O_CREAT | NIFFS_O_EXCL)) == (NIFFS_O_CREAT | NIFFS_O_EXCL)) {
 80034c8:	f006 0344 	and.w	r3, r6, #68	; 0x44
 80034cc:	2b44      	cmp	r3, #68	; 0x44
 80034ce:	d105      	bne.n	80034dc <NIFFS_open+0x60>
      (void)niffs_close(fs, fd_ix);
 80034d0:	4620      	mov	r0, r4
 80034d2:	4629      	mov	r1, r5
 80034d4:	f001 fd96 	bl	8005004 <niffs_close>
      return ERR_NIFFS_FILE_EXISTS;
 80034d8:	4820      	ldr	r0, [pc, #128]	; (800355c <NIFFS_open+0xe0>)
 80034da:	e03a      	b.n	8003552 <NIFFS_open+0xd6>
    }
  }

  if (res != NIFFS_OK) return res;

  if (flags & NIFFS_O_TRUNC) {
 80034dc:	07b3      	lsls	r3, r6, #30
 80034de:	d537      	bpl.n	8003550 <NIFFS_open+0xd4>
    niffs_file_desc *fd;
    res = niffs_get_filedesc(fs, fd_ix, &fd);
 80034e0:	aa01      	add	r2, sp, #4
 80034e2:	4620      	mov	r0, r4
 80034e4:	4629      	mov	r1, r5
 80034e6:	f001 fc75 	bl	8004dd4 <niffs_get_filedesc>
    if (res != NIFFS_OK) return res;
 80034ea:	4602      	mov	r2, r0
 80034ec:	2800      	cmp	r0, #0
 80034ee:	d130      	bne.n	8003552 <NIFFS_open+0xd6>
    niffs_object_hdr *ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);
 80034f0:	9b01      	ldr	r3, [sp, #4]
 80034f2:	68a0      	ldr	r0, [r4, #8]
 80034f4:	8859      	ldrh	r1, [r3, #2]
 80034f6:	6a23      	ldr	r3, [r4, #32]
 80034f8:	fbb1 fcf3 	udiv	ip, r1, r3
 80034fc:	fb03 181c 	mls	r8, r3, ip, r1
    if (ohdr->len != NIFFS_UNDEF_LEN) {
 8003500:	6821      	ldr	r1, [r4, #0]

  if (flags & NIFFS_O_TRUNC) {
    niffs_file_desc *fd;
    res = niffs_get_filedesc(fs, fd_ix, &fd);
    if (res != NIFFS_OK) return res;
    niffs_object_hdr *ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);
 8003502:	68e3      	ldr	r3, [r4, #12]
    if (ohdr->len != NIFFS_UNDEF_LEN) {
 8003504:	fb00 100c 	mla	r0, r0, ip, r1
 8003508:	fb03 0308 	mla	r3, r3, r8, r0
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	3301      	adds	r3, #1
 8003510:	d01e      	beq.n	8003550 <NIFFS_open+0xd4>
      // only truncate if file len is > 0
      res = niffs_truncate(fs, fd_ix, 0);
 8003512:	4620      	mov	r0, r4
 8003514:	4629      	mov	r1, r5
 8003516:	f003 fa19 	bl	800694c <niffs_truncate>
      if (res != NIFFS_OK) {
 800351a:	4680      	mov	r8, r0
        (void)niffs_close(fs, fd_ix);
 800351c:	4620      	mov	r0, r4
    if (res != NIFFS_OK) return res;
    niffs_object_hdr *ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);
    if (ohdr->len != NIFFS_UNDEF_LEN) {
      // only truncate if file len is > 0
      res = niffs_truncate(fs, fd_ix, 0);
      if (res != NIFFS_OK) {
 800351e:	f1b8 0f00 	cmp.w	r8, #0
 8003522:	d004      	beq.n	800352e <NIFFS_open+0xb2>
        (void)niffs_close(fs, fd_ix);
 8003524:	4629      	mov	r1, r5
 8003526:	f001 fd6d 	bl	8005004 <niffs_close>
        return res;
 800352a:	4640      	mov	r0, r8
 800352c:	e011      	b.n	8003552 <NIFFS_open+0xd6>
      }
      res = niffs_create(fs, name, type, 0);
 800352e:	4639      	mov	r1, r7
 8003530:	4642      	mov	r2, r8
 8003532:	4643      	mov	r3, r8
 8003534:	f002 fa3a 	bl	80059ac <niffs_create>
      if (res != NIFFS_OK) return res;
 8003538:	b958      	cbnz	r0, 8003552 <NIFFS_open+0xd6>
      fd_ix = niffs_open(fs, name, flags);
 800353a:	4620      	mov	r0, r4
 800353c:	4639      	mov	r1, r7
 800353e:	4632      	mov	r2, r6
 8003540:	f001 fc8a 	bl	8004e58 <niffs_open>
 8003544:	4605      	mov	r5, r0
 8003546:	e003      	b.n	8003550 <NIFFS_open+0xd4>
  return res;
}

int NIFFS_open(niffs *fs, const char *name, u8_t flags, niffs_mode mode) {
  (void)mode;
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
 8003548:	4805      	ldr	r0, [pc, #20]	; (8003560 <NIFFS_open+0xe4>)
 800354a:	e002      	b.n	8003552 <NIFFS_open+0xd6>
  int res = NIFFS_OK;
  niffs_file_type type =
      flags & NIFFS_O_LINEAR ? _NIFFS_FTYPE_LINFILE : _NIFFS_FTYPE_FILE;
#if !NIFFS_LINEAR_AREA
  if (type == _NIFFS_FTYPE_LINFILE) return ERR_NIFFS_BAD_CONF;
 800354c:	4805      	ldr	r0, [pc, #20]	; (8003564 <NIFFS_open+0xe8>)
 800354e:	e000      	b.n	8003552 <NIFFS_open+0xd6>
    res = fd_ix;
  } else {
    // file found
    if ((flags & (NIFFS_O_CREAT | NIFFS_O_EXCL)) == (NIFFS_O_CREAT | NIFFS_O_EXCL)) {
      (void)niffs_close(fs, fd_ix);
      return ERR_NIFFS_FILE_EXISTS;
 8003550:	4628      	mov	r0, r5
      fd_ix = niffs_open(fs, name, flags);
    }
  }

  return res < 0 ? res : fd_ix;
}
 8003552:	b002      	add	sp, #8
 8003554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003558:	ffffd4f4 	.word	0xffffd4f4
 800355c:	ffffd4e5 	.word	0xffffd4e5
 8003560:	ffffd4e8 	.word	0xffffd4e8
 8003564:	ffffd507 	.word	0xffffd507

08003568 <NIFFS_read_ptr>:
  return fd_ix;
}

#endif // NIFFS_LINEAR_AREA

int NIFFS_read_ptr(niffs *fs, int fd, u8_t **ptr, u32_t *len) {
 8003568:	b510      	push	{r4, lr}
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
 800356a:	f890 4026 	ldrb.w	r4, [r0, #38]	; 0x26
 800356e:	b11c      	cbz	r4, 8003578 <NIFFS_read_ptr+0x10>
  return niffs_read_ptr(fs, fd, ptr, len);
}
 8003570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#endif // NIFFS_LINEAR_AREA

int NIFFS_read_ptr(niffs *fs, int fd, u8_t **ptr, u32_t *len) {
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
  return niffs_read_ptr(fs, fd, ptr, len);
 8003574:	f001 bd7a 	b.w	800506c <niffs_read_ptr>
}
 8003578:	4800      	ldr	r0, [pc, #0]	; (800357c <NIFFS_read_ptr+0x14>)
 800357a:	bd10      	pop	{r4, pc}
 800357c:	ffffd4e8 	.word	0xffffd4e8

08003580 <NIFFS_read>:

int NIFFS_read(niffs *fs, int fd_ix, u8_t *dst, u32_t len) {
 8003580:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003584:	461e      	mov	r6, r3
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
 8003586:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
int NIFFS_read_ptr(niffs *fs, int fd, u8_t **ptr, u32_t *len) {
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
  return niffs_read_ptr(fs, fd, ptr, len);
}

int NIFFS_read(niffs *fs, int fd_ix, u8_t *dst, u32_t len) {
 800358a:	4607      	mov	r7, r0
 800358c:	4689      	mov	r9, r1
 800358e:	4690      	mov	r8, r2
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
 8003590:	b35b      	cbz	r3, 80035ea <NIFFS_read+0x6a>
 8003592:	2500      	movs	r5, #0
  int res = NIFFS_OK;
  s32_t read_len = 0;
  do {
    u8_t *rptr;
    u32_t rlen;
    res = niffs_read_ptr(fs, fd_ix, &rptr, &rlen);
 8003594:	4638      	mov	r0, r7
 8003596:	4649      	mov	r1, r9
 8003598:	466a      	mov	r2, sp
 800359a:	ab01      	add	r3, sp, #4
 800359c:	f001 fd66 	bl	800506c <niffs_read_ptr>
    if (res >= 0 && rlen == 0) res = ERR_NIFFS_END_OF_FILE;
 80035a0:	2800      	cmp	r0, #0
 80035a2:	db12      	blt.n	80035ca <NIFFS_read+0x4a>
 80035a4:	9c01      	ldr	r4, [sp, #4]
 80035a6:	b314      	cbz	r4, 80035ee <NIFFS_read+0x6e>
    if (res >= 0) {
      u32_t clen = NIFFS_MIN(len, rlen);
 80035a8:	42a6      	cmp	r6, r4
 80035aa:	bf38      	it	cc
 80035ac:	4634      	movcc	r4, r6
      niffs_memcpy(dst, rptr, clen);
 80035ae:	4640      	mov	r0, r8
 80035b0:	9900      	ldr	r1, [sp, #0]
 80035b2:	4622      	mov	r2, r4
 80035b4:	f00a fe98 	bl	800e2e8 <memcpy>
      dst += clen;
      len -= clen;
      read_len += clen;
      res = niffs_seek(fs, fd_ix, clen, NIFFS_SEEK_CUR);
 80035b8:	4638      	mov	r0, r7
 80035ba:	4649      	mov	r1, r9
 80035bc:	4622      	mov	r2, r4
 80035be:	2301      	movs	r3, #1
    res = niffs_read_ptr(fs, fd_ix, &rptr, &rlen);
    if (res >= 0 && rlen == 0) res = ERR_NIFFS_END_OF_FILE;
    if (res >= 0) {
      u32_t clen = NIFFS_MIN(len, rlen);
      niffs_memcpy(dst, rptr, clen);
      dst += clen;
 80035c0:	44a0      	add	r8, r4
      len -= clen;
 80035c2:	1b36      	subs	r6, r6, r4
      read_len += clen;
 80035c4:	4425      	add	r5, r4
      res = niffs_seek(fs, fd_ix, clen, NIFFS_SEEK_CUR);
 80035c6:	f001 fead 	bl	8005324 <niffs_seek>
    }
  } while (len > 0 && res >= 0);
 80035ca:	b93e      	cbnz	r6, 80035dc <NIFFS_read+0x5c>

  if (res == ERR_NIFFS_END_OF_FILE && read_len >= 0) {
 80035cc:	4b0a      	ldr	r3, [pc, #40]	; (80035f8 <NIFFS_read+0x78>)
 80035ce:	4298      	cmp	r0, r3
 80035d0:	d107      	bne.n	80035e2 <NIFFS_read+0x62>
 80035d2:	ea10 0025 	ands.w	r0, r0, r5, asr #32
 80035d6:	bf38      	it	cc
 80035d8:	4628      	movcc	r0, r5
 80035da:	e00a      	b.n	80035f2 <NIFFS_read+0x72>
      dst += clen;
      len -= clen;
      read_len += clen;
      res = niffs_seek(fs, fd_ix, clen, NIFFS_SEEK_CUR);
    }
  } while (len > 0 && res >= 0);
 80035dc:	2800      	cmp	r0, #0
 80035de:	dad9      	bge.n	8003594 <NIFFS_read+0x14>
 80035e0:	e7f4      	b.n	80035cc <NIFFS_read+0x4c>

  if (res == ERR_NIFFS_END_OF_FILE && read_len >= 0) {
    return read_len;
  }

  return res == NIFFS_OK ? read_len : res;
 80035e2:	2800      	cmp	r0, #0
 80035e4:	bf08      	it	eq
 80035e6:	4628      	moveq	r0, r5
 80035e8:	e003      	b.n	80035f2 <NIFFS_read+0x72>
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
  return niffs_read_ptr(fs, fd, ptr, len);
}

int NIFFS_read(niffs *fs, int fd_ix, u8_t *dst, u32_t len) {
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
 80035ea:	4804      	ldr	r0, [pc, #16]	; (80035fc <NIFFS_read+0x7c>)
 80035ec:	e001      	b.n	80035f2 <NIFFS_read+0x72>
  s32_t read_len = 0;
  do {
    u8_t *rptr;
    u32_t rlen;
    res = niffs_read_ptr(fs, fd_ix, &rptr, &rlen);
    if (res >= 0 && rlen == 0) res = ERR_NIFFS_END_OF_FILE;
 80035ee:	4802      	ldr	r0, [pc, #8]	; (80035f8 <NIFFS_read+0x78>)
 80035f0:	e7eb      	b.n	80035ca <NIFFS_read+0x4a>
  if (res == ERR_NIFFS_END_OF_FILE && read_len >= 0) {
    return read_len;
  }

  return res == NIFFS_OK ? read_len : res;
}
 80035f2:	b003      	add	sp, #12
 80035f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80035f8:	ffffd4ef 	.word	0xffffd4ef
 80035fc:	ffffd4e8 	.word	0xffffd4e8

08003600 <NIFFS_lseek>:

int NIFFS_lseek(niffs *fs, int fd_ix, s32_t offs, int whence) {
 8003600:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
 8003602:	f890 6026 	ldrb.w	r6, [r0, #38]	; 0x26
  }

  return res == NIFFS_OK ? read_len : res;
}

int NIFFS_lseek(niffs *fs, int fd_ix, s32_t offs, int whence) {
 8003606:	4604      	mov	r4, r0
 8003608:	460d      	mov	r5, r1
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
 800360a:	b166      	cbz	r6, 8003626 <NIFFS_lseek+0x26>
  int res = niffs_seek(fs, fd_ix, offs, whence);
 800360c:	b2db      	uxtb	r3, r3
 800360e:	f001 fe89 	bl	8005324 <niffs_seek>
  if (res == NIFFS_OK) {
 8003612:	b948      	cbnz	r0, 8003628 <NIFFS_lseek+0x28>
    niffs_file_desc *fd;
    res = niffs_get_filedesc(fs, fd_ix, &fd);
 8003614:	4620      	mov	r0, r4
 8003616:	4629      	mov	r1, r5
 8003618:	aa01      	add	r2, sp, #4
 800361a:	f001 fbdb 	bl	8004dd4 <niffs_get_filedesc>
    if (res != NIFFS_OK) return res;
 800361e:	b918      	cbnz	r0, 8003628 <NIFFS_lseek+0x28>
    return (int)fd->offs;
 8003620:	9b01      	ldr	r3, [sp, #4]
 8003622:	6898      	ldr	r0, [r3, #8]
 8003624:	e000      	b.n	8003628 <NIFFS_lseek+0x28>

  return res == NIFFS_OK ? read_len : res;
}

int NIFFS_lseek(niffs *fs, int fd_ix, s32_t offs, int whence) {
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
 8003626:	4801      	ldr	r0, [pc, #4]	; (800362c <NIFFS_lseek+0x2c>)
    res = niffs_get_filedesc(fs, fd_ix, &fd);
    if (res != NIFFS_OK) return res;
    return (int)fd->offs;
  }
  return res;
}
 8003628:	b002      	add	sp, #8
 800362a:	bd70      	pop	{r4, r5, r6, pc}
 800362c:	ffffd4e8 	.word	0xffffd4e8

08003630 <NIFFS_remove>:

int NIFFS_remove(niffs *fs, const char *name) {
 8003630:	b570      	push	{r4, r5, r6, lr}
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
 8003632:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
    return (int)fd->offs;
  }
  return res;
}

int NIFFS_remove(niffs *fs, const char *name) {
 8003636:	4604      	mov	r4, r0
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
 8003638:	b18b      	cbz	r3, 800365e <NIFFS_remove+0x2e>
  int res;

  int fd = NIFFS_open(fs, name, NIFFS_O_WRONLY, 0);
 800363a:	2210      	movs	r2, #16
 800363c:	2300      	movs	r3, #0
 800363e:	f7ff ff1d 	bl	800347c <NIFFS_open>
  if (fd < 0) return fd;
 8003642:	1e05      	subs	r5, r0, #0
 8003644:	db0d      	blt.n	8003662 <NIFFS_remove+0x32>
  res = niffs_truncate(fs, fd, 0);
 8003646:	4629      	mov	r1, r5
 8003648:	2200      	movs	r2, #0
 800364a:	4620      	mov	r0, r4
 800364c:	f003 f97e 	bl	800694c <niffs_truncate>
  (void)niffs_close(fs, fd);
 8003650:	4629      	mov	r1, r5
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
  int res;

  int fd = NIFFS_open(fs, name, NIFFS_O_WRONLY, 0);
  if (fd < 0) return fd;
  res = niffs_truncate(fs, fd, 0);
 8003652:	4606      	mov	r6, r0
  (void)niffs_close(fs, fd);
 8003654:	4620      	mov	r0, r4
 8003656:	f001 fcd5 	bl	8005004 <niffs_close>

  return res;
 800365a:	4630      	mov	r0, r6
 800365c:	bd70      	pop	{r4, r5, r6, pc}
  }
  return res;
}

int NIFFS_remove(niffs *fs, const char *name) {
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
 800365e:	4802      	ldr	r0, [pc, #8]	; (8003668 <NIFFS_remove+0x38>)
 8003660:	bd70      	pop	{r4, r5, r6, pc}
 8003662:	4628      	mov	r0, r5
  if (fd < 0) return fd;
  res = niffs_truncate(fs, fd, 0);
  (void)niffs_close(fs, fd);

  return res;
}
 8003664:	bd70      	pop	{r4, r5, r6, pc}
 8003666:	bf00      	nop
 8003668:	ffffd4e8 	.word	0xffffd4e8

0800366c <NIFFS_fremove>:

int NIFFS_fremove(niffs *fs, int fd) {
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
 800366c:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 8003670:	b113      	cbz	r3, 8003678 <NIFFS_fremove+0xc>
  return niffs_truncate(fs, fd, 0);
 8003672:	2200      	movs	r2, #0
 8003674:	f003 b96a 	b.w	800694c <niffs_truncate>
}
 8003678:	4800      	ldr	r0, [pc, #0]	; (800367c <NIFFS_fremove+0x10>)
 800367a:	4770      	bx	lr
 800367c:	ffffd4e8 	.word	0xffffd4e8

08003680 <NIFFS_write>:

int NIFFS_write(niffs *fs, int fd_ix, const u8_t *data, u32_t len) {
 8003680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003684:	461c      	mov	r4, r3
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
 8003686:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
int NIFFS_fremove(niffs *fs, int fd) {
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
  return niffs_truncate(fs, fd, 0);
}

int NIFFS_write(niffs *fs, int fd_ix, const u8_t *data, u32_t len) {
 800368a:	b085      	sub	sp, #20
 800368c:	4605      	mov	r5, r0
 800368e:	4688      	mov	r8, r1
 8003690:	4617      	mov	r7, r2
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
 8003692:	2b00      	cmp	r3, #0
 8003694:	d03f      	beq.n	8003716 <NIFFS_write+0x96>
  int res;
  niffs_file_desc *fd;
  res = niffs_get_filedesc(fs, fd_ix, &fd);
 8003696:	aa03      	add	r2, sp, #12
 8003698:	f001 fb9c 	bl	8004dd4 <niffs_get_filedesc>
  if (res != NIFFS_OK) return res;
 800369c:	2800      	cmp	r0, #0
 800369e:	d13b      	bne.n	8003718 <NIFFS_write+0x98>
  niffs_object_hdr *ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);
 80036a0:	9b03      	ldr	r3, [sp, #12]
 80036a2:	f8d5 c000 	ldr.w	ip, [r5]

  s32_t written = 0;
  if (fd->flags & NIFFS_O_APPEND) {
 80036a6:	7b9a      	ldrb	r2, [r3, #14]
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
  int res;
  niffs_file_desc *fd;
  res = niffs_get_filedesc(fs, fd_ix, &fd);
  if (res != NIFFS_OK) return res;
  niffs_object_hdr *ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);
 80036a8:	f8d5 9008 	ldr.w	r9, [r5, #8]

  s32_t written = 0;
  if (fd->flags & NIFFS_O_APPEND) {
 80036ac:	07d2      	lsls	r2, r2, #31
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
  int res;
  niffs_file_desc *fd;
  res = niffs_get_filedesc(fs, fd_ix, &fd);
  if (res != NIFFS_OK) return res;
  niffs_object_hdr *ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);
 80036ae:	8858      	ldrh	r0, [r3, #2]
 80036b0:	6a29      	ldr	r1, [r5, #32]
 80036b2:	68ee      	ldr	r6, [r5, #12]

  s32_t written = 0;
  if (fd->flags & NIFFS_O_APPEND) {
 80036b4:	d507      	bpl.n	80036c6 <NIFFS_write+0x46>
    // always append
    res = niffs_append(fs, fd_ix, data, len);
 80036b6:	4623      	mov	r3, r4
 80036b8:	4628      	mov	r0, r5
 80036ba:	4641      	mov	r1, r8
 80036bc:	463a      	mov	r2, r7
 80036be:	f002 facb 	bl	8005c58 <niffs_append>
    written += len;
 80036c2:	4623      	mov	r3, r4
 80036c4:	e024      	b.n	8003710 <NIFFS_write+0x90>
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
  int res;
  niffs_file_desc *fd;
  res = niffs_get_filedesc(fs, fd_ix, &fd);
  if (res != NIFFS_OK) return res;
  niffs_object_hdr *ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);
 80036c6:	fbb0 f2f1 	udiv	r2, r0, r1
 80036ca:	fb01 0112 	mls	r1, r1, r2, r0
    // always append
    res = niffs_append(fs, fd_ix, data, len);
    written += len;
  } else {
    // check if modify and/or append
    u32_t mod_len = (ohdr->len == NIFFS_UNDEF_LEN ? 0 : ohdr->len) - fd->offs;
 80036ce:	fb09 c202 	mla	r2, r9, r2, ip
 80036d2:	fb06 2201 	mla	r2, r6, r1, r2
 80036d6:	6896      	ldr	r6, [r2, #8]
 80036d8:	689a      	ldr	r2, [r3, #8]
 80036da:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 80036de:	bf08      	it	eq
 80036e0:	2600      	moveq	r6, #0
 80036e2:	1ab6      	subs	r6, r6, r2
    mod_len = NIFFS_MIN(mod_len, len);
 80036e4:	42a6      	cmp	r6, r4
 80036e6:	bf28      	it	cs
 80036e8:	4626      	movcs	r6, r4
    if (mod_len > 0) {
 80036ea:	b146      	cbz	r6, 80036fe <NIFFS_write+0x7e>
      res = niffs_modify(fs, fd_ix, fd->offs, data, mod_len);
 80036ec:	9600      	str	r6, [sp, #0]
 80036ee:	4628      	mov	r0, r5
 80036f0:	4641      	mov	r1, r8
 80036f2:	463b      	mov	r3, r7
 80036f4:	f002 feee 	bl	80064d4 <niffs_modify>
      if (res != NIFFS_OK) return res;
 80036f8:	b970      	cbnz	r0, 8003718 <NIFFS_write+0x98>
      len -= mod_len;
 80036fa:	1ba4      	subs	r4, r4, r6
      data += mod_len;
 80036fc:	4437      	add	r7, r6
  niffs_file_desc *fd;
  res = niffs_get_filedesc(fs, fd_ix, &fd);
  if (res != NIFFS_OK) return res;
  niffs_object_hdr *ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);

  s32_t written = 0;
 80036fe:	4633      	mov	r3, r6
      if (res != NIFFS_OK) return res;
      len -= mod_len;
      data += mod_len;
      written += mod_len;
    }
    if (len > 0) {
 8003700:	b13c      	cbz	r4, 8003712 <NIFFS_write+0x92>
      res = niffs_append(fs, fd_ix, data, len);
 8003702:	4623      	mov	r3, r4
 8003704:	4628      	mov	r0, r5
 8003706:	4641      	mov	r1, r8
 8003708:	463a      	mov	r2, r7
 800370a:	f002 faa5 	bl	8005c58 <niffs_append>
      written += len;
 800370e:	1933      	adds	r3, r6, r4

//  if (res == NIFFS_OK) {
//    res = niffs_seek(fs, fd_ix, len, NIFFS_SEEK_CUR);
//  }

  return res == 0 ? written : res;
 8003710:	b910      	cbnz	r0, 8003718 <NIFFS_write+0x98>
 8003712:	4618      	mov	r0, r3
 8003714:	e000      	b.n	8003718 <NIFFS_write+0x98>
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
  return niffs_truncate(fs, fd, 0);
}

int NIFFS_write(niffs *fs, int fd_ix, const u8_t *data, u32_t len) {
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
 8003716:	4802      	ldr	r0, [pc, #8]	; (8003720 <NIFFS_write+0xa0>)
//  if (res == NIFFS_OK) {
//    res = niffs_seek(fs, fd_ix, len, NIFFS_SEEK_CUR);
//  }

  return res == 0 ? written : res;
}
 8003718:	b005      	add	sp, #20
 800371a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800371e:	bf00      	nop
 8003720:	ffffd4e8 	.word	0xffffd4e8

08003724 <NIFFS_fflush>:

int NIFFS_fflush(niffs *fs, int fd) {
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
 8003724:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
  (void)fd;
  return NIFFS_OK;
}
 8003728:	4b02      	ldr	r3, [pc, #8]	; (8003734 <NIFFS_fflush+0x10>)
 800372a:	2800      	cmp	r0, #0
 800372c:	bf0c      	ite	eq
 800372e:	4618      	moveq	r0, r3
 8003730:	2000      	movne	r0, #0
 8003732:	4770      	bx	lr
 8003734:	ffffd4e8 	.word	0xffffd4e8

08003738 <NIFFS_fstat>:
  (void)niffs_close(fs, fd);

  return res;
}

int NIFFS_fstat(niffs *fs, int fd_ix, niffs_stat *s) {
 8003738:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
 800373a:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
  (void)niffs_close(fs, fd);

  return res;
}

int NIFFS_fstat(niffs *fs, int fd_ix, niffs_stat *s) {
 800373e:	4604      	mov	r4, r0
 8003740:	4615      	mov	r5, r2
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
 8003742:	b323      	cbz	r3, 800378e <NIFFS_fstat+0x56>
  int res;

  niffs_file_desc *fd;
  res = niffs_get_filedesc(fs, fd_ix, &fd);
 8003744:	aa01      	add	r2, sp, #4
 8003746:	f001 fb45 	bl	8004dd4 <niffs_get_filedesc>
  if (res != NIFFS_OK) return res;
 800374a:	4606      	mov	r6, r0
 800374c:	bb08      	cbnz	r0, 8003792 <NIFFS_fstat+0x5a>

  niffs_object_hdr *ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);
 800374e:	9b01      	ldr	r3, [sp, #4]
 8003750:	6a22      	ldr	r2, [r4, #32]
 8003752:	8858      	ldrh	r0, [r3, #2]
 8003754:	68e1      	ldr	r1, [r4, #12]
 8003756:	fbb0 f3f2 	udiv	r3, r0, r2
 800375a:	fb02 0213 	mls	r2, r2, r3, r0
 800375e:	4351      	muls	r1, r2
 8003760:	68a7      	ldr	r7, [r4, #8]

  s->obj_id = ohdr->phdr.id.obj_id;
  s->size = ohdr->len == NIFFS_UNDEF_LEN ? 0 : ohdr->len;
  s->type = ohdr->type;
  niffs_strncpy((char *)s->name, (char *)ohdr->name, NIFFS_NAME_LEN);
 8003762:	f105 0008 	add.w	r0, r5, #8

  niffs_file_desc *fd;
  res = niffs_get_filedesc(fs, fd_ix, &fd);
  if (res != NIFFS_OK) return res;

  niffs_object_hdr *ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);
 8003766:	fb07 1303 	mla	r3, r7, r3, r1
 800376a:	6821      	ldr	r1, [r4, #0]
 800376c:	3304      	adds	r3, #4
 800376e:	4419      	add	r1, r3

  s->obj_id = ohdr->phdr.id.obj_id;
 8003770:	784b      	ldrb	r3, [r1, #1]
  s->size = ohdr->len == NIFFS_UNDEF_LEN ? 0 : ohdr->len;
  s->type = ohdr->type;
  niffs_strncpy((char *)s->name, (char *)ohdr->name, NIFFS_NAME_LEN);
 8003772:	2210      	movs	r2, #16
  res = niffs_get_filedesc(fs, fd_ix, &fd);
  if (res != NIFFS_OK) return res;

  niffs_object_hdr *ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);

  s->obj_id = ohdr->phdr.id.obj_id;
 8003774:	702b      	strb	r3, [r5, #0]
  s->size = ohdr->len == NIFFS_UNDEF_LEN ? 0 : ohdr->len;
 8003776:	684b      	ldr	r3, [r1, #4]
  s->type = ohdr->type;
  niffs_strncpy((char *)s->name, (char *)ohdr->name, NIFFS_NAME_LEN);
 8003778:	3108      	adds	r1, #8
  if (res != NIFFS_OK) return res;

  niffs_object_hdr *ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);

  s->obj_id = ohdr->phdr.id.obj_id;
  s->size = ohdr->len == NIFFS_UNDEF_LEN ? 0 : ohdr->len;
 800377a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800377e:	bf08      	it	eq
 8003780:	2300      	moveq	r3, #0
 8003782:	606b      	str	r3, [r5, #4]
  s->type = ohdr->type;
 8003784:	7c0b      	ldrb	r3, [r1, #16]
 8003786:	762b      	strb	r3, [r5, #24]
  niffs_strncpy((char *)s->name, (char *)ohdr->name, NIFFS_NAME_LEN);
 8003788:	f7fd fdd0 	bl	800132c <strncpy>
 800378c:	e001      	b.n	8003792 <NIFFS_fstat+0x5a>

  return res;
}

int NIFFS_fstat(niffs *fs, int fd_ix, niffs_stat *s) {
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
 800378e:	4802      	ldr	r0, [pc, #8]	; (8003798 <NIFFS_fstat+0x60>)
 8003790:	e000      	b.n	8003794 <NIFFS_fstat+0x5c>
 8003792:	4630      	mov	r0, r6
  s->size = ohdr->len == NIFFS_UNDEF_LEN ? 0 : ohdr->len;
  s->type = ohdr->type;
  niffs_strncpy((char *)s->name, (char *)ohdr->name, NIFFS_NAME_LEN);

  return NIFFS_OK;
}
 8003794:	b003      	add	sp, #12
 8003796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003798:	ffffd4e8 	.word	0xffffd4e8

0800379c <NIFFS_stat>:
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
  (void)fd;
  return NIFFS_OK;
}

int NIFFS_stat(niffs *fs, const char *name, niffs_stat *s) {
 800379c:	b570      	push	{r4, r5, r6, lr}
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
 800379e:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
  (void)fd;
  return NIFFS_OK;
}

int NIFFS_stat(niffs *fs, const char *name, niffs_stat *s) {
 80037a2:	4604      	mov	r4, r0
 80037a4:	4616      	mov	r6, r2
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
 80037a6:	b18b      	cbz	r3, 80037cc <NIFFS_stat+0x30>
  int res;

  int fd = NIFFS_open(fs, name, 0, 0);
 80037a8:	2200      	movs	r2, #0
 80037aa:	4613      	mov	r3, r2
 80037ac:	f7ff fe66 	bl	800347c <NIFFS_open>
  if (fd < 0) return fd;
 80037b0:	1e05      	subs	r5, r0, #0
 80037b2:	db0d      	blt.n	80037d0 <NIFFS_stat+0x34>
  res = NIFFS_fstat(fs, fd, s);
 80037b4:	4632      	mov	r2, r6
 80037b6:	4629      	mov	r1, r5
 80037b8:	4620      	mov	r0, r4
 80037ba:	f7ff ffbd 	bl	8003738 <NIFFS_fstat>
  (void)niffs_close(fs, fd);
 80037be:	4629      	mov	r1, r5
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
  int res;

  int fd = NIFFS_open(fs, name, 0, 0);
  if (fd < 0) return fd;
  res = NIFFS_fstat(fs, fd, s);
 80037c0:	4606      	mov	r6, r0
  (void)niffs_close(fs, fd);
 80037c2:	4620      	mov	r0, r4
 80037c4:	f001 fc1e 	bl	8005004 <niffs_close>

  return res;
 80037c8:	4630      	mov	r0, r6
 80037ca:	bd70      	pop	{r4, r5, r6, pc}
  (void)fd;
  return NIFFS_OK;
}

int NIFFS_stat(niffs *fs, const char *name, niffs_stat *s) {
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
 80037cc:	4801      	ldr	r0, [pc, #4]	; (80037d4 <NIFFS_stat+0x38>)
 80037ce:	bd70      	pop	{r4, r5, r6, pc}
 80037d0:	4628      	mov	r0, r5
  if (fd < 0) return fd;
  res = NIFFS_fstat(fs, fd, s);
  (void)niffs_close(fs, fd);

  return res;
}
 80037d2:	bd70      	pop	{r4, r5, r6, pc}
 80037d4:	ffffd4e8 	.word	0xffffd4e8

080037d8 <NIFFS_ftell>:
  niffs_strncpy((char *)s->name, (char *)ohdr->name, NIFFS_NAME_LEN);

  return NIFFS_OK;
}

int NIFFS_ftell(niffs *fs, int fd_ix) {
 80037d8:	b507      	push	{r0, r1, r2, lr}
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
 80037da:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 80037de:	b133      	cbz	r3, 80037ee <NIFFS_ftell+0x16>
  int res;

  niffs_file_desc *fd;
  res = niffs_get_filedesc(fs, fd_ix, &fd);
 80037e0:	aa01      	add	r2, sp, #4
 80037e2:	f001 faf7 	bl	8004dd4 <niffs_get_filedesc>
  if (res != NIFFS_OK) return res;
 80037e6:	b918      	cbnz	r0, 80037f0 <NIFFS_ftell+0x18>

  return (int)fd->offs;
 80037e8:	9b01      	ldr	r3, [sp, #4]
 80037ea:	6898      	ldr	r0, [r3, #8]
 80037ec:	e000      	b.n	80037f0 <NIFFS_ftell+0x18>

  return NIFFS_OK;
}

int NIFFS_ftell(niffs *fs, int fd_ix) {
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
 80037ee:	4802      	ldr	r0, [pc, #8]	; (80037f8 <NIFFS_ftell+0x20>)
  niffs_file_desc *fd;
  res = niffs_get_filedesc(fs, fd_ix, &fd);
  if (res != NIFFS_OK) return res;

  return (int)fd->offs;
}
 80037f0:	b003      	add	sp, #12
 80037f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80037f6:	bf00      	nop
 80037f8:	ffffd4e8 	.word	0xffffd4e8

080037fc <NIFFS_close>:

int NIFFS_close(niffs *fs, int fd) {
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
 80037fc:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 8003800:	b10b      	cbz	r3, 8003806 <NIFFS_close+0xa>
  return niffs_close(fs, fd);
 8003802:	f001 bbff 	b.w	8005004 <niffs_close>
}
 8003806:	4801      	ldr	r0, [pc, #4]	; (800380c <NIFFS_close+0x10>)
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	ffffd4e8 	.word	0xffffd4e8

08003810 <NIFFS_rename>:

int NIFFS_rename(niffs *fs, const char *old_name, const char *new_name) {
  if (!fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
 8003810:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 8003814:	b10b      	cbz	r3, 800381a <NIFFS_rename+0xa>
  return niffs_rename(fs, old_name, new_name);
 8003816:	f003 ba6d 	b.w	8006cf4 <niffs_rename>
}
 800381a:	4801      	ldr	r0, [pc, #4]	; (8003820 <NIFFS_rename+0x10>)
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	ffffd4e8 	.word	0xffffd4e8

08003824 <NIFFS_opendir>:

niffs_DIR *NIFFS_opendir(niffs *fs, const char *name, niffs_DIR *d) {
  (void)name;
  if (!fs->mounted) return 0;
 8003824:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 8003828:	b123      	cbz	r3, 8003834 <NIFFS_opendir+0x10>
  d->fs = fs;
  d->pix = 0;
 800382a:	2300      	movs	r3, #0
}

niffs_DIR *NIFFS_opendir(niffs *fs, const char *name, niffs_DIR *d) {
  (void)name;
  if (!fs->mounted) return 0;
  d->fs = fs;
 800382c:	6010      	str	r0, [r2, #0]
  d->pix = 0;
 800382e:	8093      	strh	r3, [r2, #4]
  return d;
 8003830:	4610      	mov	r0, r2
 8003832:	4770      	bx	lr
  return niffs_rename(fs, old_name, new_name);
}

niffs_DIR *NIFFS_opendir(niffs *fs, const char *name, niffs_DIR *d) {
  (void)name;
  if (!fs->mounted) return 0;
 8003834:	4618      	mov	r0, r3
  d->fs = fs;
  d->pix = 0;
  return d;
}
 8003836:	4770      	bx	lr

08003838 <NIFFS_closedir>:

int NIFFS_closedir(niffs_DIR *d) {
  if (!d->fs->mounted) return ERR_NIFFS_NOT_MOUNTED;
 8003838:	6803      	ldr	r3, [r0, #0]
 800383a:	f893 0026 	ldrb.w	r0, [r3, #38]	; 0x26
  return NIFFS_OK;
}
 800383e:	4b03      	ldr	r3, [pc, #12]	; (800384c <NIFFS_closedir+0x14>)
 8003840:	2800      	cmp	r0, #0
 8003842:	bf0c      	ite	eq
 8003844:	4618      	moveq	r0, r3
 8003846:	2000      	movne	r0, #0
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	ffffd4e8 	.word	0xffffd4e8

08003850 <NIFFS_readdir>:
    }
  }
  return NIFFS_VIS_CONT;
}

struct niffs_dirent *NIFFS_readdir(niffs_DIR *d, struct niffs_dirent *e) {
 8003850:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003852:	4605      	mov	r5, r0
  if (!d->fs->mounted) return 0;
 8003854:	6800      	ldr	r0, [r0, #0]
    }
  }
  return NIFFS_VIS_CONT;
}

struct niffs_dirent *NIFFS_readdir(niffs_DIR *d, struct niffs_dirent *e) {
 8003856:	460c      	mov	r4, r1
  if (!d->fs->mounted) return 0;
 8003858:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 800385c:	b90b      	cbnz	r3, 8003862 <NIFFS_readdir+0x12>
 800385e:	2000      	movs	r0, #0
 8003860:	e00b      	b.n	800387a <NIFFS_readdir+0x2a>
  struct niffs_dirent *ret = 0;

  int res = niffs_traverse(d->fs, d->pix, 0, niffs_readdir_v, e);
 8003862:	88a9      	ldrh	r1, [r5, #4]
 8003864:	9400      	str	r4, [sp, #0]
 8003866:	2200      	movs	r2, #0
 8003868:	4b05      	ldr	r3, [pc, #20]	; (8003880 <NIFFS_readdir+0x30>)
 800386a:	f001 f881 	bl	8004970 <niffs_traverse>
  if (res == NIFFS_OK) {
 800386e:	2800      	cmp	r0, #0
 8003870:	d1f5      	bne.n	800385e <NIFFS_readdir+0xe>
    d->pix = e->pix + 1;
 8003872:	8b23      	ldrh	r3, [r4, #24]
 8003874:	4620      	mov	r0, r4
 8003876:	3301      	adds	r3, #1
 8003878:	80ab      	strh	r3, [r5, #4]
  } else if (res == NIFFS_VIS_END) {
    // end of stream
  }

  return ret;
}
 800387a:	b003      	add	sp, #12
 800387c:	bd30      	pop	{r4, r5, pc}
 800387e:	bf00      	nop
 8003880:	080033c5 	.word	0x080033c5

08003884 <NIFFS_chk>:

int NIFFS_chk(niffs *fs) {
  if (fs->mounted) return ERR_NIFFS_MOUNTED;
 8003884:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 8003888:	b90b      	cbnz	r3, 800388e <NIFFS_chk+0xa>
  return niffs_chk(fs);
 800388a:	f003 bb59 	b.w	8006f40 <niffs_chk>
}
 800388e:	4801      	ldr	r0, [pc, #4]	; (8003894 <NIFFS_chk+0x10>)
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	ffffd4e9 	.word	0xffffd4e9

08003898 <niffs_find_free_page_v>:
typedef struct {
  niffs_page_ix *pix;
  u32_t excl_sector;
} niffs_find_free_page_arg;

static int niffs_find_free_page_v(niffs *fs, niffs_page_ix pix, niffs_page_hdr *phdr, void *v_arg) {
 8003898:	b510      	push	{r4, lr}
  niffs_find_free_page_arg *arg = (niffs_find_free_page_arg *)v_arg;
  if (arg->excl_sector != NIFFS_EXCL_SECT_NONE && _NIFFS_PIX_2_SECTOR(fs, pix) == arg->excl_sector) {
 800389a:	685c      	ldr	r4, [r3, #4]
 800389c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80038a0:	d004      	beq.n	80038ac <niffs_find_free_page_v+0x14>
 80038a2:	6a00      	ldr	r0, [r0, #32]
 80038a4:	fbb1 f0f0 	udiv	r0, r1, r0
 80038a8:	42a0      	cmp	r0, r4
 80038aa:	d00b      	beq.n	80038c4 <niffs_find_free_page_v+0x2c>
    return NIFFS_VIS_CONT;
  }
  if (_NIFFS_IS_FREE(phdr) && _NIFFS_IS_CLEA(phdr)) {
 80038ac:	8810      	ldrh	r0, [r2, #0]
 80038ae:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80038b2:	42a0      	cmp	r0, r4
 80038b4:	d106      	bne.n	80038c4 <niffs_find_free_page_v+0x2c>
 80038b6:	8852      	ldrh	r2, [r2, #2]
 80038b8:	4282      	cmp	r2, r0
 80038ba:	d103      	bne.n	80038c4 <niffs_find_free_page_v+0x2c>
    *arg->pix = pix;
 80038bc:	681b      	ldr	r3, [r3, #0]
    return NIFFS_OK;
 80038be:	2000      	movs	r0, #0
  niffs_find_free_page_arg *arg = (niffs_find_free_page_arg *)v_arg;
  if (arg->excl_sector != NIFFS_EXCL_SECT_NONE && _NIFFS_PIX_2_SECTOR(fs, pix) == arg->excl_sector) {
    return NIFFS_VIS_CONT;
  }
  if (_NIFFS_IS_FREE(phdr) && _NIFFS_IS_CLEA(phdr)) {
    *arg->pix = pix;
 80038c0:	8019      	strh	r1, [r3, #0]
    return NIFFS_OK;
 80038c2:	bd10      	pop	{r4, pc}
} niffs_find_free_page_arg;

static int niffs_find_free_page_v(niffs *fs, niffs_page_ix pix, niffs_page_hdr *phdr, void *v_arg) {
  niffs_find_free_page_arg *arg = (niffs_find_free_page_arg *)v_arg;
  if (arg->excl_sector != NIFFS_EXCL_SECT_NONE && _NIFFS_PIX_2_SECTOR(fs, pix) == arg->excl_sector) {
    return NIFFS_VIS_CONT;
 80038c4:	2001      	movs	r0, #1
  if (_NIFFS_IS_FREE(phdr) && _NIFFS_IS_CLEA(phdr)) {
    *arg->pix = pix;
    return NIFFS_OK;
  }
  return NIFFS_VIS_CONT;
}
 80038c6:	bd10      	pop	{r4, pc}

080038c8 <niffs_chk_find_corresponding_nonmovi_page_v>:

static int niffs_chk_find_corresponding_nonmovi_page_v(niffs *fs, niffs_page_ix pix, niffs_page_hdr *phdr, void *v_arg) {
  (void)fs;
  (void)pix;
  niffs_page_hdr_id *ref_id = (niffs_page_hdr_id *)v_arg;
  if (!_NIFFS_IS_FREE(phdr) && !_NIFFS_IS_DELE(phdr) && _NIFFS_IS_WRIT(phdr)) {
 80038c8:	8810      	ldrh	r0, [r2, #0]
 80038ca:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 80038ce:	3801      	subs	r0, #1
 80038d0:	b280      	uxth	r0, r0
 80038d2:	4288      	cmp	r0, r1
    return res;
  }
  return NIFFS_OK;
}

static int niffs_chk_find_corresponding_nonmovi_page_v(niffs *fs, niffs_page_ix pix, niffs_page_hdr *phdr, void *v_arg) {
 80038d4:	b510      	push	{r4, lr}
  (void)fs;
  (void)pix;
  niffs_page_hdr_id *ref_id = (niffs_page_hdr_id *)v_arg;
  if (!_NIFFS_IS_FREE(phdr) && !_NIFFS_IS_DELE(phdr) && _NIFFS_IS_WRIT(phdr)) {
 80038d6:	d80c      	bhi.n	80038f2 <niffs_chk_find_corresponding_nonmovi_page_v+0x2a>
 80038d8:	8850      	ldrh	r0, [r2, #2]
 80038da:	2801      	cmp	r0, #1
 80038dc:	d109      	bne.n	80038f2 <niffs_chk_find_corresponding_nonmovi_page_v+0x2a>
    if (phdr->id.obj_id == ref_id->obj_id && phdr->id.spix  == ref_id->spix) {
 80038de:	7854      	ldrb	r4, [r2, #1]
 80038e0:	7859      	ldrb	r1, [r3, #1]
 80038e2:	428c      	cmp	r4, r1
 80038e4:	d106      	bne.n	80038f4 <niffs_chk_find_corresponding_nonmovi_page_v+0x2c>
 80038e6:	7810      	ldrb	r0, [r2, #0]
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	1ac0      	subs	r0, r0, r3
 80038ec:	bf18      	it	ne
 80038ee:	2001      	movne	r0, #1
 80038f0:	bd10      	pop	{r4, pc}
      return NIFFS_OK;
    }
  }
  return NIFFS_VIS_CONT;
 80038f2:	2001      	movs	r0, #1
}
 80038f4:	bd10      	pop	{r4, pc}

080038f6 <niffs_delete_page>:
      }
    }
  }
}

TESTATIC int niffs_delete_page(niffs *fs, niffs_page_ix pix) {
 80038f6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  niffs_page_id_raw delete_raw_id = _NIFFS_PAGE_DELE_ID;

  niffs_page_hdr *phdr = (niffs_page_hdr *)_NIFFS_PIX_2_ADDR(fs, pix);
 80038fa:	6a02      	ldr	r2, [r0, #32]
      }
    }
  }
}

TESTATIC int niffs_delete_page(niffs *fs, niffs_page_ix pix) {
 80038fc:	4604      	mov	r4, r0
  niffs_page_id_raw delete_raw_id = _NIFFS_PAGE_DELE_ID;
 80038fe:	2300      	movs	r3, #0

  niffs_page_hdr *phdr = (niffs_page_hdr *)_NIFFS_PIX_2_ADDR(fs, pix);
 8003900:	6887      	ldr	r7, [r0, #8]
  if (_NIFFS_IS_FREE(phdr)) {
 8003902:	6826      	ldr	r6, [r4, #0]
    }
  }
}

TESTATIC int niffs_delete_page(niffs *fs, niffs_page_ix pix) {
  niffs_page_id_raw delete_raw_id = _NIFFS_PAGE_DELE_ID;
 8003904:	f8ad 300e 	strh.w	r3, [sp, #14]

  niffs_page_hdr *phdr = (niffs_page_hdr *)_NIFFS_PIX_2_ADDR(fs, pix);
 8003908:	fbb1 f3f2 	udiv	r3, r1, r2
 800390c:	fb02 1213 	mls	r2, r2, r3, r1
  if (_NIFFS_IS_FREE(phdr)) {
 8003910:	fb07 6303 	mla	r3, r7, r3, r6
}

TESTATIC int niffs_delete_page(niffs *fs, niffs_page_ix pix) {
  niffs_page_id_raw delete_raw_id = _NIFFS_PAGE_DELE_ID;

  niffs_page_hdr *phdr = (niffs_page_hdr *)_NIFFS_PIX_2_ADDR(fs, pix);
 8003914:	68c0      	ldr	r0, [r0, #12]
      }
    }
  }
}

TESTATIC int niffs_delete_page(niffs *fs, niffs_page_ix pix) {
 8003916:	460d      	mov	r5, r1
  niffs_page_id_raw delete_raw_id = _NIFFS_PAGE_DELE_ID;

  niffs_page_hdr *phdr = (niffs_page_hdr *)_NIFFS_PIX_2_ADDR(fs, pix);
  if (_NIFFS_IS_FREE(phdr)) {
 8003918:	fb00 3002 	mla	r0, r0, r2, r3
 800391c:	8883      	ldrh	r3, [r0, #4]
 800391e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003922:	4293      	cmp	r3, r2
 8003924:	f8df 8160 	ldr.w	r8, [pc, #352]	; 8003a88 <niffs_delete_page+0x192>
 8003928:	d112      	bne.n	8003950 <niffs_delete_page+0x5a>
    check(ERR_NIFFS_DELETING_FREE_PAGE);
 800392a:	f8d8 3000 	ldr.w	r3, [r8]
 800392e:	055b      	lsls	r3, r3, #21
 8003930:	f140 808f 	bpl.w	8003a52 <niffs_delete_page+0x15c>
 8003934:	4b4b      	ldr	r3, [pc, #300]	; (8003a64 <niffs_delete_page+0x16e>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	f040 808a 	bne.w	8003a52 <niffs_delete_page+0x15c>
 800393e:	2366      	movs	r3, #102	; 0x66
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	4849      	ldr	r0, [pc, #292]	; (8003a68 <niffs_delete_page+0x172>)
 8003944:	4949      	ldr	r1, [pc, #292]	; (8003a6c <niffs_delete_page+0x176>)
 8003946:	4a4a      	ldr	r2, [pc, #296]	; (8003a70 <niffs_delete_page+0x17a>)
 8003948:	4b4a      	ldr	r3, [pc, #296]	; (8003a74 <niffs_delete_page+0x17e>)
 800394a:	f005 fc27 	bl	800919c <arcprint>
 800394e:	e080      	b.n	8003a52 <niffs_delete_page+0x15c>
  }
  if (_NIFFS_IS_DELE(phdr)) check(ERR_NIFFS_DELETING_DELETED_PAGE);
 8003950:	b983      	cbnz	r3, 8003974 <niffs_delete_page+0x7e>
 8003952:	f8d8 3000 	ldr.w	r3, [r8]
 8003956:	055f      	lsls	r7, r3, #21
 8003958:	d57d      	bpl.n	8003a56 <niffs_delete_page+0x160>
 800395a:	4b42      	ldr	r3, [pc, #264]	; (8003a64 <niffs_delete_page+0x16e>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d179      	bne.n	8003a56 <niffs_delete_page+0x160>
 8003962:	2368      	movs	r3, #104	; 0x68
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	4840      	ldr	r0, [pc, #256]	; (8003a68 <niffs_delete_page+0x172>)
 8003968:	4943      	ldr	r1, [pc, #268]	; (8003a78 <niffs_delete_page+0x182>)
 800396a:	4a41      	ldr	r2, [pc, #260]	; (8003a70 <niffs_delete_page+0x17a>)
 800396c:	4b41      	ldr	r3, [pc, #260]	; (8003a74 <niffs_delete_page+0x17e>)
 800396e:	f005 fc15 	bl	800919c <arcprint>
 8003972:	e070      	b.n	8003a56 <niffs_delete_page+0x160>
  NIFFS_DBG("  dele: pix %04x\n", pix);
 8003974:	f8d8 3000 	ldr.w	r3, [r8]
 8003978:	055e      	lsls	r6, r3, #21
 800397a:	d505      	bpl.n	8003988 <niffs_delete_page+0x92>
 800397c:	4b39      	ldr	r3, [pc, #228]	; (8003a64 <niffs_delete_page+0x16e>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	b913      	cbnz	r3, 8003988 <niffs_delete_page+0x92>
 8003982:	483e      	ldr	r0, [pc, #248]	; (8003a7c <niffs_delete_page+0x186>)
 8003984:	f005 fc0a 	bl	800919c <arcprint>
  int res = fs->hal_wr((u8_t *)_NIFFS_PIX_2_ADDR(fs, pix) + offsetof(niffs_page_hdr, id), (u8_t *)&delete_raw_id, sizeof(niffs_page_id_raw));
 8003988:	6a22      	ldr	r2, [r4, #32]
 800398a:	68e0      	ldr	r0, [r4, #12]
 800398c:	fbb5 f3f2 	udiv	r3, r5, r2
 8003990:	fb02 5213 	mls	r2, r2, r3, r5
 8003994:	4350      	muls	r0, r2
 8003996:	68a1      	ldr	r1, [r4, #8]
 8003998:	69a6      	ldr	r6, [r4, #24]
 800399a:	fb01 0003 	mla	r0, r1, r3, r0
 800399e:	6821      	ldr	r1, [r4, #0]
 80039a0:	3004      	adds	r0, #4
 80039a2:	4408      	add	r0, r1
 80039a4:	2202      	movs	r2, #2
 80039a6:	f10d 010e 	add.w	r1, sp, #14
 80039aa:	47b0      	blx	r6
  check(res);
 80039ac:	4606      	mov	r6, r0
 80039ae:	b180      	cbz	r0, 80039d2 <niffs_delete_page+0xdc>
 80039b0:	f8d8 3000 	ldr.w	r3, [r8]
 80039b4:	0558      	lsls	r0, r3, #21
 80039b6:	d550      	bpl.n	8003a5a <niffs_delete_page+0x164>
 80039b8:	4b2a      	ldr	r3, [pc, #168]	; (8003a64 <niffs_delete_page+0x16e>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d14c      	bne.n	8003a5a <niffs_delete_page+0x164>
 80039c0:	236b      	movs	r3, #107	; 0x6b
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	4828      	ldr	r0, [pc, #160]	; (8003a68 <niffs_delete_page+0x172>)
 80039c6:	4631      	mov	r1, r6
 80039c8:	4a29      	ldr	r2, [pc, #164]	; (8003a70 <niffs_delete_page+0x17a>)
 80039ca:	4b2a      	ldr	r3, [pc, #168]	; (8003a74 <niffs_delete_page+0x17e>)
 80039cc:	f005 fbe6 	bl	800919c <arcprint>
 80039d0:	e043      	b.n	8003a5a <niffs_delete_page+0x164>
  if (res == NIFFS_OK) {
    fs->dele_pages++;
 80039d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        // someone deleted the object header of this file, close descriptor
        fs->descs[i].obj_pix = 0;
        fs->descs[i].obj_id = 0;
      }
      if (fs->descs[i].cur_pix == pix && fs->descs[i].obj_id > 0) {
        NIFFS_DBG("  info: pix delete (fd%icur): %04x oid:%04x\n", i, pix, fs->descs[i].obj_id);
 80039d4:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8003a64 <niffs_delete_page+0x16e>
  if (_NIFFS_IS_DELE(phdr)) check(ERR_NIFFS_DELETING_DELETED_PAGE);
  NIFFS_DBG("  dele: pix %04x\n", pix);
  int res = fs->hal_wr((u8_t *)_NIFFS_PIX_2_ADDR(fs, pix) + offsetof(niffs_page_hdr, id), (u8_t *)&delete_raw_id, sizeof(niffs_page_id_raw));
  check(res);
  if (res == NIFFS_OK) {
    fs->dele_pages++;
 80039d8:	3301      	adds	r3, #1
 80039da:	62e3      	str	r3, [r4, #44]	; 0x2c
        fs->descs[i].obj_id = 0;
      }
      if (fs->descs[i].cur_pix == pix && fs->descs[i].obj_id > 0) {
        NIFFS_DBG("  info: pix delete (fd%icur): %04x oid:%04x\n", i, pix, fs->descs[i].obj_id);
        fs->descs[i].cur_pix = fs->descs[i].obj_pix;
        fs->descs[i].offs = 0;
 80039dc:	4681      	mov	r9, r0
}

static void niffs_inform_page_delete(niffs *fs, niffs_page_ix pix) {
  // update descriptors
  u32_t i;
  for (i = 0; i < fs->descs_len; i++) {
 80039de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80039e0:	429e      	cmp	r6, r3
 80039e2:	d234      	bcs.n	8003a4e <niffs_delete_page+0x158>
    if (fs->descs[i].obj_id != 0) {
 80039e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80039e6:	0137      	lsls	r7, r6, #4
 80039e8:	19da      	adds	r2, r3, r7
 80039ea:	5ddb      	ldrb	r3, [r3, r7]
 80039ec:	b36b      	cbz	r3, 8003a4a <niffs_delete_page+0x154>
      if (fs->descs[i].obj_pix == pix) {
 80039ee:	8852      	ldrh	r2, [r2, #2]
 80039f0:	42aa      	cmp	r2, r5
 80039f2:	d111      	bne.n	8003a18 <niffs_delete_page+0x122>
        NIFFS_DBG("  info: pix delete (fd%iobj): %04x oid:%04x\n", i, pix, fs->descs[i].obj_id);
 80039f4:	f8d8 2000 	ldr.w	r2, [r8]
 80039f8:	0551      	lsls	r1, r2, #21
 80039fa:	d507      	bpl.n	8003a0c <niffs_delete_page+0x116>
 80039fc:	f8da 2000 	ldr.w	r2, [sl]
 8003a00:	b922      	cbnz	r2, 8003a0c <niffs_delete_page+0x116>
 8003a02:	481f      	ldr	r0, [pc, #124]	; (8003a80 <niffs_delete_page+0x18a>)
 8003a04:	4631      	mov	r1, r6
 8003a06:	462a      	mov	r2, r5
 8003a08:	f005 fbc8 	bl	800919c <arcprint>
        // someone deleted the object header of this file, close descriptor
        fs->descs[i].obj_pix = 0;
 8003a0c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003a0e:	19da      	adds	r2, r3, r7
 8003a10:	f8a2 9002 	strh.w	r9, [r2, #2]
        fs->descs[i].obj_id = 0;
 8003a14:	f803 9007 	strb.w	r9, [r3, r7]
      }
      if (fs->descs[i].cur_pix == pix && fs->descs[i].obj_id > 0) {
 8003a18:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003a1a:	19da      	adds	r2, r3, r7
 8003a1c:	8992      	ldrh	r2, [r2, #12]
 8003a1e:	42aa      	cmp	r2, r5
 8003a20:	d113      	bne.n	8003a4a <niffs_delete_page+0x154>
 8003a22:	5ddb      	ldrb	r3, [r3, r7]
 8003a24:	b18b      	cbz	r3, 8003a4a <niffs_delete_page+0x154>
        NIFFS_DBG("  info: pix delete (fd%icur): %04x oid:%04x\n", i, pix, fs->descs[i].obj_id);
 8003a26:	f8d8 2000 	ldr.w	r2, [r8]
 8003a2a:	0552      	lsls	r2, r2, #21
 8003a2c:	d507      	bpl.n	8003a3e <niffs_delete_page+0x148>
 8003a2e:	f8da 2000 	ldr.w	r2, [sl]
 8003a32:	b922      	cbnz	r2, 8003a3e <niffs_delete_page+0x148>
 8003a34:	4813      	ldr	r0, [pc, #76]	; (8003a84 <niffs_delete_page+0x18e>)
 8003a36:	4631      	mov	r1, r6
 8003a38:	462a      	mov	r2, r5
 8003a3a:	f005 fbaf 	bl	800919c <arcprint>
        fs->descs[i].cur_pix = fs->descs[i].obj_pix;
 8003a3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003a40:	441f      	add	r7, r3
 8003a42:	887b      	ldrh	r3, [r7, #2]
        fs->descs[i].offs = 0;
 8003a44:	f8c7 9008 	str.w	r9, [r7, #8]
        fs->descs[i].obj_pix = 0;
        fs->descs[i].obj_id = 0;
      }
      if (fs->descs[i].cur_pix == pix && fs->descs[i].obj_id > 0) {
        NIFFS_DBG("  info: pix delete (fd%icur): %04x oid:%04x\n", i, pix, fs->descs[i].obj_id);
        fs->descs[i].cur_pix = fs->descs[i].obj_pix;
 8003a48:	81bb      	strh	r3, [r7, #12]
}

static void niffs_inform_page_delete(niffs *fs, niffs_page_ix pix) {
  // update descriptors
  u32_t i;
  for (i = 0; i < fs->descs_len; i++) {
 8003a4a:	3601      	adds	r6, #1
 8003a4c:	e7c7      	b.n	80039de <niffs_delete_page+0xe8>
 8003a4e:	2000      	movs	r0, #0
 8003a50:	e004      	b.n	8003a5c <niffs_delete_page+0x166>
TESTATIC int niffs_delete_page(niffs *fs, niffs_page_ix pix) {
  niffs_page_id_raw delete_raw_id = _NIFFS_PAGE_DELE_ID;

  niffs_page_hdr *phdr = (niffs_page_hdr *)_NIFFS_PIX_2_ADDR(fs, pix);
  if (_NIFFS_IS_FREE(phdr)) {
    check(ERR_NIFFS_DELETING_FREE_PAGE);
 8003a52:	4806      	ldr	r0, [pc, #24]	; (8003a6c <niffs_delete_page+0x176>)
 8003a54:	e002      	b.n	8003a5c <niffs_delete_page+0x166>
  }
  if (_NIFFS_IS_DELE(phdr)) check(ERR_NIFFS_DELETING_DELETED_PAGE);
 8003a56:	4808      	ldr	r0, [pc, #32]	; (8003a78 <niffs_delete_page+0x182>)
 8003a58:	e000      	b.n	8003a5c <niffs_delete_page+0x166>
 8003a5a:	4630      	mov	r0, r6
  if (res == NIFFS_OK) {
    fs->dele_pages++;
    niffs_inform_page_delete(fs, pix);
  }
  return res;
}
 8003a5c:	b004      	add	sp, #16
 8003a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a62:	bf00      	nop
 8003a64:	20004f84 	.word	0x20004f84
 8003a68:	08010535 	.word	0x08010535
 8003a6c:	ffffd504 	.word	0xffffd504
 8003a70:	0800e7f4 	.word	0x0800e7f4
 8003a74:	0801054b 	.word	0x0801054b
 8003a78:	ffffd503 	.word	0xffffd503
 8003a7c:	0801056d 	.word	0x0801056d
 8003a80:	0801057f 	.word	0x0801057f
 8003a84:	080105ac 	.word	0x080105ac
 8003a88:	20004f80 	.word	0x20004f80

08003a8c <niffs_inform_page_movement>:
    }
  }
  return 0;
}

static void niffs_inform_page_movement(niffs *fs, niffs_page_ix src_pix, niffs_page_ix dst_pix) {
 8003a8c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
      if (fs->descs[i].obj_pix == src_pix) {
        NIFFS_DBG("inform: pix update (fd%iobj): %04x->%04x oid:%04x\n", i, src_pix, dst_pix, fs->descs[i].obj_id);
        fs->descs[i].obj_pix = dst_pix;
      }
      if (fs->descs[i].cur_pix == src_pix) {
        NIFFS_DBG("inform: pix update (fd%icur): %04x->%04x oid:%04x\n", i, src_pix, dst_pix, fs->descs[i].obj_id);
 8003a90:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8003b1c <niffs_inform_page_movement+0x90>
 8003a94:	f8df a088 	ldr.w	sl, [pc, #136]	; 8003b20 <niffs_inform_page_movement+0x94>
    }
  }
  return 0;
}

static void niffs_inform_page_movement(niffs *fs, niffs_page_ix src_pix, niffs_page_ix dst_pix) {
 8003a98:	4606      	mov	r6, r0
 8003a9a:	460f      	mov	r7, r1
 8003a9c:	4690      	mov	r8, r2
  // update descriptors
  u32_t i;
  for (i = 0; i < fs->descs_len; i++) {
 8003a9e:	2400      	movs	r4, #0
 8003aa0:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8003aa2:	429c      	cmp	r4, r3
 8003aa4:	d233      	bcs.n	8003b0e <niffs_inform_page_movement+0x82>
    if (fs->descs[i].obj_id != 0) {
 8003aa6:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003aa8:	0125      	lsls	r5, r4, #4
 8003aaa:	195a      	adds	r2, r3, r5
 8003aac:	5d5b      	ldrb	r3, [r3, r5]
 8003aae:	b363      	cbz	r3, 8003b0a <niffs_inform_page_movement+0x7e>
      if (fs->descs[i].obj_pix == src_pix) {
 8003ab0:	8852      	ldrh	r2, [r2, #2]
 8003ab2:	42ba      	cmp	r2, r7
 8003ab4:	d111      	bne.n	8003ada <niffs_inform_page_movement+0x4e>
        NIFFS_DBG("inform: pix update (fd%iobj): %04x->%04x oid:%04x\n", i, src_pix, dst_pix, fs->descs[i].obj_id);
 8003ab6:	f8d9 2000 	ldr.w	r2, [r9]
 8003aba:	0551      	lsls	r1, r2, #21
 8003abc:	d509      	bpl.n	8003ad2 <niffs_inform_page_movement+0x46>
 8003abe:	f8da 2000 	ldr.w	r2, [sl]
 8003ac2:	b932      	cbnz	r2, 8003ad2 <niffs_inform_page_movement+0x46>
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	4813      	ldr	r0, [pc, #76]	; (8003b14 <niffs_inform_page_movement+0x88>)
 8003ac8:	4621      	mov	r1, r4
 8003aca:	463a      	mov	r2, r7
 8003acc:	4643      	mov	r3, r8
 8003ace:	f005 fb65 	bl	800919c <arcprint>
        fs->descs[i].obj_pix = dst_pix;
 8003ad2:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003ad4:	442b      	add	r3, r5
 8003ad6:	f8a3 8002 	strh.w	r8, [r3, #2]
      }
      if (fs->descs[i].cur_pix == src_pix) {
 8003ada:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003adc:	195a      	adds	r2, r3, r5
 8003ade:	8992      	ldrh	r2, [r2, #12]
 8003ae0:	42ba      	cmp	r2, r7
 8003ae2:	d112      	bne.n	8003b0a <niffs_inform_page_movement+0x7e>
        NIFFS_DBG("inform: pix update (fd%icur): %04x->%04x oid:%04x\n", i, src_pix, dst_pix, fs->descs[i].obj_id);
 8003ae4:	f8d9 2000 	ldr.w	r2, [r9]
 8003ae8:	0552      	lsls	r2, r2, #21
 8003aea:	d50a      	bpl.n	8003b02 <niffs_inform_page_movement+0x76>
 8003aec:	f8da 2000 	ldr.w	r2, [sl]
 8003af0:	b93a      	cbnz	r2, 8003b02 <niffs_inform_page_movement+0x76>
 8003af2:	5d5b      	ldrb	r3, [r3, r5]
 8003af4:	4808      	ldr	r0, [pc, #32]	; (8003b18 <niffs_inform_page_movement+0x8c>)
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	4621      	mov	r1, r4
 8003afa:	463a      	mov	r2, r7
 8003afc:	4643      	mov	r3, r8
 8003afe:	f005 fb4d 	bl	800919c <arcprint>
        fs->descs[i].cur_pix = dst_pix;
 8003b02:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003b04:	441d      	add	r5, r3
 8003b06:	f8a5 800c 	strh.w	r8, [r5, #12]
}

static void niffs_inform_page_movement(niffs *fs, niffs_page_ix src_pix, niffs_page_ix dst_pix) {
  // update descriptors
  u32_t i;
  for (i = 0; i < fs->descs_len; i++) {
 8003b0a:	3401      	adds	r4, #1
 8003b0c:	e7c8      	b.n	8003aa0 <niffs_inform_page_movement+0x14>
        NIFFS_DBG("inform: pix update (fd%icur): %04x->%04x oid:%04x\n", i, src_pix, dst_pix, fs->descs[i].obj_id);
        fs->descs[i].cur_pix = dst_pix;
      }
    }
  }
}
 8003b0e:	b002      	add	sp, #8
 8003b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b14:	080105d9 	.word	0x080105d9
 8003b18:	0801060c 	.word	0x0801060c
 8003b1c:	20004f80 	.word	0x20004f80
 8003b20:	20004f84 	.word	0x20004f84

08003b24 <niffs_move_page>:
    check(res);
  }
  return res;
}

TESTATIC int niffs_move_page(niffs *fs, niffs_page_ix src_pix, niffs_page_ix dst_pix, const u8_t *data, u32_t len, niffs_flag force_flag) {
 8003b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (src_pix == dst_pix) check(ERR_NIFFS_MOVING_TO_SAME_PAGE);
 8003b28:	4291      	cmp	r1, r2
    check(res);
  }
  return res;
}

TESTATIC int niffs_move_page(niffs *fs, niffs_page_ix src_pix, niffs_page_ix dst_pix, const u8_t *data, u32_t len, niffs_flag force_flag) {
 8003b2a:	b089      	sub	sp, #36	; 0x24
 8003b2c:	4604      	mov	r4, r0
 8003b2e:	460e      	mov	r6, r1
 8003b30:	4615      	mov	r5, r2
 8003b32:	9305      	str	r3, [sp, #20]
 8003b34:	f8bd b04c 	ldrh.w	fp, [sp, #76]	; 0x4c
  if (src_pix == dst_pix) check(ERR_NIFFS_MOVING_TO_SAME_PAGE);
 8003b38:	d112      	bne.n	8003b60 <niffs_move_page+0x3c>
 8003b3a:	4ba2      	ldr	r3, [pc, #648]	; (8003dc4 <niffs_move_page+0x2a0>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	055b      	lsls	r3, r3, #21
 8003b40:	d547      	bpl.n	8003bd2 <niffs_move_page+0xae>
 8003b42:	4ba1      	ldr	r3, [pc, #644]	; (8003dc8 <niffs_move_page+0x2a4>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d143      	bne.n	8003bd2 <niffs_move_page+0xae>
 8003b4a:	f44f 7392 	mov.w	r3, #292	; 0x124
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	489e      	ldr	r0, [pc, #632]	; (8003dcc <niffs_move_page+0x2a8>)
 8003b52:	f46f 512c 	mvn.w	r1, #11008	; 0x2b00
 8003b56:	4a9e      	ldr	r2, [pc, #632]	; (8003dd0 <niffs_move_page+0x2ac>)
 8003b58:	4b9e      	ldr	r3, [pc, #632]	; (8003dd4 <niffs_move_page+0x2b0>)
 8003b5a:	f005 fb1f 	bl	800919c <arcprint>
 8003b5e:	e038      	b.n	8003bd2 <niffs_move_page+0xae>

  niffs_page_hdr *src_phdr = (niffs_page_hdr *)_NIFFS_PIX_2_ADDR(fs, src_pix);
 8003b60:	6a23      	ldr	r3, [r4, #32]
 8003b62:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8003b66:	fbb1 f2f3 	udiv	r2, r1, r3
 8003b6a:	fb03 1a12 	mls	sl, r3, r2, r1
 8003b6e:	fb0c fa0a 	mul.w	sl, ip, sl
 8003b72:	6807      	ldr	r7, [r0, #0]
 8003b74:	6880      	ldr	r0, [r0, #8]
 8003b76:	fb00 aa02 	mla	sl, r0, r2, sl
 8003b7a:	f10a 0a04 	add.w	sl, sl, #4
 8003b7e:	eb07 090a 	add.w	r9, r7, sl
  niffs_page_hdr *dst_phdr = (niffs_page_hdr *)_NIFFS_PIX_2_ADDR(fs, dst_pix);

  int res = NIFFS_OK;
  if (!_NIFFS_IS_FLAG_VALID(src_phdr) || !_NIFFS_IS_FLAG_VALID(dst_phdr)) res = ERR_NIFFS_MOVING_BAD_FLAG;
 8003b82:	f8b9 8002 	ldrh.w	r8, [r9, #2]
 8003b86:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8003b8a:	f1a8 0102 	sub.w	r1, r8, #2
 8003b8e:	b289      	uxth	r1, r1
 8003b90:	4291      	cmp	r1, r2
 8003b92:	f240 8149 	bls.w	8003e28 <niffs_move_page+0x304>

TESTATIC int niffs_move_page(niffs *fs, niffs_page_ix src_pix, niffs_page_ix dst_pix, const u8_t *data, u32_t len, niffs_flag force_flag) {
  if (src_pix == dst_pix) check(ERR_NIFFS_MOVING_TO_SAME_PAGE);

  niffs_page_hdr *src_phdr = (niffs_page_hdr *)_NIFFS_PIX_2_ADDR(fs, src_pix);
  niffs_page_hdr *dst_phdr = (niffs_page_hdr *)_NIFFS_PIX_2_ADDR(fs, dst_pix);
 8003b96:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b9a:	fb03 5311 	mls	r3, r3, r1, r5
 8003b9e:	fb0c f303 	mul.w	r3, ip, r3
 8003ba2:	fb00 3101 	mla	r1, r0, r1, r3
 8003ba6:	3104      	adds	r1, #4
 8003ba8:	187b      	adds	r3, r7, r1

  int res = NIFFS_OK;
  if (!_NIFFS_IS_FLAG_VALID(src_phdr) || !_NIFFS_IS_FLAG_VALID(dst_phdr)) res = ERR_NIFFS_MOVING_BAD_FLAG;
 8003baa:	885b      	ldrh	r3, [r3, #2]
 8003bac:	3b02      	subs	r3, #2
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	f240 8139 	bls.w	8003e28 <niffs_move_page+0x304>
  else if (_NIFFS_IS_FREE(src_phdr))  res = ERR_NIFFS_MOVING_FREE_PAGE;
 8003bb6:	f837 300a 	ldrh.w	r3, [r7, sl]
 8003bba:	3203      	adds	r2, #3
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	f000 8135 	beq.w	8003e2c <niffs_move_page+0x308>
  else if (_NIFFS_IS_DELE(src_phdr))  res = ERR_NIFFS_MOVING_DELETED_PAGE;
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 8134 	beq.w	8003e30 <niffs_move_page+0x30c>
  else if (!_NIFFS_IS_FREE(dst_phdr)) res = ERR_NIFFS_MOVING_TO_UNFREE_PAGE;
 8003bc8:	5a7b      	ldrh	r3, [r7, r1]
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	f040 8132 	bne.w	8003e34 <niffs_move_page+0x310>
 8003bd0:	e002      	b.n	8003bd8 <niffs_move_page+0xb4>
  }
  return res;
}

TESTATIC int niffs_move_page(niffs *fs, niffs_page_ix src_pix, niffs_page_ix dst_pix, const u8_t *data, u32_t len, niffs_flag force_flag) {
  if (src_pix == dst_pix) check(ERR_NIFFS_MOVING_TO_SAME_PAGE);
 8003bd2:	f46f 502c 	mvn.w	r0, #11008	; 0x2b00
 8003bd6:	e139      	b.n	8003e4c <niffs_move_page+0x328>
  else if (_NIFFS_IS_FREE(src_phdr))  res = ERR_NIFFS_MOVING_FREE_PAGE;
  else if (_NIFFS_IS_DELE(src_phdr))  res = ERR_NIFFS_MOVING_DELETED_PAGE;
  else if (!_NIFFS_IS_FREE(dst_phdr)) res = ERR_NIFFS_MOVING_TO_UNFREE_PAGE;
  check(res);

  u8_t src_clear = _NIFFS_IS_CLEA(src_phdr);
 8003bd8:	ebb8 0e03 	subs.w	lr, r8, r3
 8003bdc:	f1de 0200 	rsbs	r2, lr, #0
 8003be0:	eb52 020e 	adcs.w	r2, r2, lr
 8003be4:	9204      	str	r2, [sp, #16]
  u8_t src_movi = _NIFFS_IS_MOVI(src_phdr);

  NIFFS_DBG("  move: pix %04x->%04x flag:%s\n", src_pix, dst_pix, _NIFFS_IS_CLEA(src_phdr) ? ("CLEA") :
 8003be6:	4a77      	ldr	r2, [pc, #476]	; (8003dc4 <niffs_move_page+0x2a0>)
 8003be8:	6812      	ldr	r2, [r2, #0]
 8003bea:	0552      	lsls	r2, r2, #21
 8003bec:	d511      	bpl.n	8003c12 <niffs_move_page+0xee>
 8003bee:	4a76      	ldr	r2, [pc, #472]	; (8003dc8 <niffs_move_page+0x2a4>)
 8003bf0:	6812      	ldr	r2, [r2, #0]
 8003bf2:	b972      	cbnz	r2, 8003c12 <niffs_move_page+0xee>
 8003bf4:	4598      	cmp	r8, r3
 8003bf6:	d006      	beq.n	8003c06 <niffs_move_page+0xe2>
 8003bf8:	4b77      	ldr	r3, [pc, #476]	; (8003dd8 <niffs_move_page+0x2b4>)
 8003bfa:	4a78      	ldr	r2, [pc, #480]	; (8003ddc <niffs_move_page+0x2b8>)
 8003bfc:	f1b8 0f00 	cmp.w	r8, #0
 8003c00:	bf18      	it	ne
 8003c02:	4613      	movne	r3, r2
 8003c04:	e000      	b.n	8003c08 <niffs_move_page+0xe4>
 8003c06:	4b76      	ldr	r3, [pc, #472]	; (8003de0 <niffs_move_page+0x2bc>)
 8003c08:	4876      	ldr	r0, [pc, #472]	; (8003de4 <niffs_move_page+0x2c0>)
 8003c0a:	4631      	mov	r1, r6
 8003c0c:	462a      	mov	r2, r5
 8003c0e:	f005 fac5 	bl	800919c <arcprint>
      (_NIFFS_IS_MOVI(src_phdr) ? "MOVI" : "WRIT"));

  // mark src as moving
  if (!_NIFFS_IS_MOVI(src_phdr)) {
 8003c12:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8003c16:	b35b      	cbz	r3, 8003c70 <niffs_move_page+0x14c>
    niffs_flag moving_flag = _NIFFS_FLAG_MOVING;
    res = fs->hal_wr((u8_t *)_NIFFS_PIX_2_ADDR(fs, src_pix) + offsetof(niffs_page_hdr, flag), (u8_t *)&moving_flag, sizeof(niffs_flag));
 8003c18:	6a22      	ldr	r2, [r4, #32]
  NIFFS_DBG("  move: pix %04x->%04x flag:%s\n", src_pix, dst_pix, _NIFFS_IS_CLEA(src_phdr) ? ("CLEA") :
      (_NIFFS_IS_MOVI(src_phdr) ? "MOVI" : "WRIT"));

  // mark src as moving
  if (!_NIFFS_IS_MOVI(src_phdr)) {
    niffs_flag moving_flag = _NIFFS_FLAG_MOVING;
 8003c1a:	a908      	add	r1, sp, #32
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	f821 3d02 	strh.w	r3, [r1, #-2]!
    res = fs->hal_wr((u8_t *)_NIFFS_PIX_2_ADDR(fs, src_pix) + offsetof(niffs_page_hdr, flag), (u8_t *)&moving_flag, sizeof(niffs_flag));
 8003c22:	fbb6 f3f2 	udiv	r3, r6, r2
 8003c26:	fb02 6213 	mls	r2, r2, r3, r6
 8003c2a:	68e0      	ldr	r0, [r4, #12]
 8003c2c:	4342      	muls	r2, r0
 8003c2e:	68a0      	ldr	r0, [r4, #8]
 8003c30:	fb00 2303 	mla	r3, r0, r3, r2
 8003c34:	6820      	ldr	r0, [r4, #0]
 8003c36:	1d9a      	adds	r2, r3, #6
 8003c38:	4410      	add	r0, r2
 8003c3a:	69a3      	ldr	r3, [r4, #24]
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	4798      	blx	r3
    check(res);
 8003c40:	4684      	mov	ip, r0
 8003c42:	b1a8      	cbz	r0, 8003c70 <niffs_move_page+0x14c>
 8003c44:	4b5f      	ldr	r3, [pc, #380]	; (8003dc4 <niffs_move_page+0x2a0>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	055f      	lsls	r7, r3, #21
 8003c4a:	d50f      	bpl.n	8003c6c <niffs_move_page+0x148>
 8003c4c:	4b5e      	ldr	r3, [pc, #376]	; (8003dc8 <niffs_move_page+0x2a4>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	b963      	cbnz	r3, 8003c6c <niffs_move_page+0x148>
 8003c52:	f44f 739d 	mov.w	r3, #314	; 0x13a
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	4661      	mov	r1, ip
 8003c5a:	485c      	ldr	r0, [pc, #368]	; (8003dcc <niffs_move_page+0x2a8>)
 8003c5c:	4a5c      	ldr	r2, [pc, #368]	; (8003dd0 <niffs_move_page+0x2ac>)
 8003c5e:	4b5d      	ldr	r3, [pc, #372]	; (8003dd4 <niffs_move_page+0x2b0>)
 8003c60:	f8cd c00c 	str.w	ip, [sp, #12]
 8003c64:	f005 fa9a 	bl	800919c <arcprint>
 8003c68:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8003c6c:	4660      	mov	r0, ip
 8003c6e:	e0ed      	b.n	8003e4c <niffs_move_page+0x328>
  }

  // write dst..
  // .. write flag ..
  niffs_flag flag = _NIFFS_FLAG_CLEAN;
  if (force_flag == NIFFS_FLAG_MOVE_KEEP) {
 8003c70:	f1bb 0faa 	cmp.w	fp, #170	; 0xaa
 8003c74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c78:	d10c      	bne.n	8003c94 <niffs_move_page+0x170>
    if (!src_clear) {
 8003c7a:	9a04      	ldr	r2, [sp, #16]
 8003c7c:	b112      	cbz	r2, 8003c84 <niffs_move_page+0x160>
    check(res);
  }

  // write dst..
  // .. write flag ..
  niffs_flag flag = _NIFFS_FLAG_CLEAN;
 8003c7e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8003c82:	e009      	b.n	8003c98 <niffs_move_page+0x174>
  if (force_flag == NIFFS_FLAG_MOVE_KEEP) {
    if (!src_clear) {
      flag = src_movi ? _NIFFS_FLAG_MOVING : _NIFFS_FLAG_WRITTEN;
 8003c84:	f118 0800 	adds.w	r8, r8, #0
 8003c88:	bf18      	it	ne
 8003c8a:	f04f 0801 	movne.w	r8, #1
 8003c8e:	f8ad 801e 	strh.w	r8, [sp, #30]
 8003c92:	e001      	b.n	8003c98 <niffs_move_page+0x174>
    }
  } else {
    flag = force_flag;
 8003c94:	f8ad b01e 	strh.w	fp, [sp, #30]
  }
  if (flag != _NIFFS_FLAG_CLEAN) {
 8003c98:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d027      	beq.n	8003cf0 <niffs_move_page+0x1cc>
    res = fs->hal_wr((u8_t *)_NIFFS_PIX_2_ADDR(fs, dst_pix) + offsetof(niffs_page_hdr, flag), (u8_t *)&flag, sizeof(niffs_flag));
 8003ca0:	6a22      	ldr	r2, [r4, #32]
 8003ca2:	68e0      	ldr	r0, [r4, #12]
 8003ca4:	fbb5 f3f2 	udiv	r3, r5, r2
 8003ca8:	fb02 5213 	mls	r2, r2, r3, r5
 8003cac:	4350      	muls	r0, r2
 8003cae:	68a1      	ldr	r1, [r4, #8]
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	fb01 0003 	mla	r0, r1, r3, r0
 8003cb6:	6821      	ldr	r1, [r4, #0]
 8003cb8:	3006      	adds	r0, #6
 8003cba:	4408      	add	r0, r1
 8003cbc:	69a3      	ldr	r3, [r4, #24]
 8003cbe:	f10d 011e 	add.w	r1, sp, #30
 8003cc2:	4798      	blx	r3
    check(res);
 8003cc4:	4680      	mov	r8, r0
 8003cc6:	b198      	cbz	r0, 8003cf0 <niffs_move_page+0x1cc>
 8003cc8:	4b3e      	ldr	r3, [pc, #248]	; (8003dc4 <niffs_move_page+0x2a0>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	055e      	lsls	r6, r3, #21
 8003cce:	f140 80a7 	bpl.w	8003e20 <niffs_move_page+0x2fc>
 8003cd2:	4b3d      	ldr	r3, [pc, #244]	; (8003dc8 <niffs_move_page+0x2a4>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f040 80a2 	bne.w	8003e20 <niffs_move_page+0x2fc>
 8003cdc:	f240 1349 	movw	r3, #329	; 0x149
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	483a      	ldr	r0, [pc, #232]	; (8003dcc <niffs_move_page+0x2a8>)
 8003ce4:	4641      	mov	r1, r8
 8003ce6:	4a3a      	ldr	r2, [pc, #232]	; (8003dd0 <niffs_move_page+0x2ac>)
 8003ce8:	4b3a      	ldr	r3, [pc, #232]	; (8003dd4 <niffs_move_page+0x2b0>)
 8003cea:	f005 fa57 	bl	800919c <arcprint>
 8003cee:	e097      	b.n	8003e20 <niffs_move_page+0x2fc>
  }

  fs->free_pages--;
 8003cf0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (data == 0 && (!src_clear || src_phdr->id.spix == 0)) {
 8003cf2:	9805      	ldr	r0, [sp, #20]
  if (flag != _NIFFS_FLAG_CLEAN) {
    res = fs->hal_wr((u8_t *)_NIFFS_PIX_2_ADDR(fs, dst_pix) + offsetof(niffs_page_hdr, flag), (u8_t *)&flag, sizeof(niffs_flag));
    check(res);
  }

  fs->free_pages--;
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	62a3      	str	r3, [r4, #40]	; 0x28
 8003cf8:	6821      	ldr	r1, [r4, #0]
 8003cfa:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8003cfe:	6a23      	ldr	r3, [r4, #32]
 8003d00:	68e2      	ldr	r2, [r4, #12]
 8003d02:	f8d4 c018 	ldr.w	ip, [r4, #24]
  if (data == 0 && (!src_clear || src_phdr->id.spix == 0)) {
 8003d06:	b9f8      	cbnz	r0, 8003d48 <niffs_move_page+0x224>
 8003d08:	9804      	ldr	r0, [sp, #16]
 8003d0a:	b118      	cbz	r0, 8003d14 <niffs_move_page+0x1f0>
 8003d0c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8003d10:	2800      	cmp	r0, #0
 8003d12:	d132      	bne.n	8003d7a <niffs_move_page+0x256>
    // .. page data ..
    res = fs->hal_wr((u8_t *)_NIFFS_PIX_2_ADDR(fs, dst_pix) + sizeof(niffs_page_hdr), (u8_t *)src_phdr  + sizeof(niffs_page_hdr), fs->page_size - sizeof(niffs_page_hdr));
 8003d14:	fbb5 f0f3 	udiv	r0, r5, r3
 8003d18:	fb03 5310 	mls	r3, r3, r0, r5
 8003d1c:	4353      	muls	r3, r2
 8003d1e:	fb0e 3000 	mla	r0, lr, r0, r3
 8003d22:	3008      	adds	r0, #8
 8003d24:	4408      	add	r0, r1
 8003d26:	3a04      	subs	r2, #4
 8003d28:	f109 0104 	add.w	r1, r9, #4
 8003d2c:	47e0      	blx	ip
    check(res);
 8003d2e:	4607      	mov	r7, r0
 8003d30:	b318      	cbz	r0, 8003d7a <niffs_move_page+0x256>
 8003d32:	4b24      	ldr	r3, [pc, #144]	; (8003dc4 <niffs_move_page+0x2a0>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	055d      	lsls	r5, r3, #21
 8003d38:	d574      	bpl.n	8003e24 <niffs_move_page+0x300>
 8003d3a:	4b23      	ldr	r3, [pc, #140]	; (8003dc8 <niffs_move_page+0x2a4>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d170      	bne.n	8003e24 <niffs_move_page+0x300>
 8003d42:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003d46:	e035      	b.n	8003db4 <niffs_move_page+0x290>
  } else if (data) {
    // .. else, user data ..
    res = fs->hal_wr((u8_t *)_NIFFS_PIX_2_ADDR(fs, dst_pix) + sizeof(niffs_page_hdr), data, len);
 8003d48:	fbb5 f0f3 	udiv	r0, r5, r3
 8003d4c:	fb03 5310 	mls	r3, r3, r0, r5
 8003d50:	435a      	muls	r2, r3
 8003d52:	fb0e 2000 	mla	r0, lr, r0, r2
 8003d56:	3008      	adds	r0, #8
 8003d58:	4408      	add	r0, r1
 8003d5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003d5c:	9905      	ldr	r1, [sp, #20]
 8003d5e:	47e0      	blx	ip
    check(res);
 8003d60:	4607      	mov	r7, r0
 8003d62:	b150      	cbz	r0, 8003d7a <niffs_move_page+0x256>
 8003d64:	4b17      	ldr	r3, [pc, #92]	; (8003dc4 <niffs_move_page+0x2a0>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	055c      	lsls	r4, r3, #21
 8003d6a:	d55b      	bpl.n	8003e24 <niffs_move_page+0x300>
 8003d6c:	4b16      	ldr	r3, [pc, #88]	; (8003dc8 <niffs_move_page+0x2a4>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d157      	bne.n	8003e24 <niffs_move_page+0x300>
 8003d74:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8003d78:	e01c      	b.n	8003db4 <niffs_move_page+0x290>
  }
  // .. and id
  res = fs->hal_wr((u8_t *)_NIFFS_PIX_2_ADDR(fs, dst_pix) + offsetof(niffs_page_hdr, id),
 8003d7a:	6a22      	ldr	r2, [r4, #32]
 8003d7c:	68e0      	ldr	r0, [r4, #12]
 8003d7e:	fbb5 f3f2 	udiv	r3, r5, r2
 8003d82:	fb02 5213 	mls	r2, r2, r3, r5
 8003d86:	4350      	muls	r0, r2
 8003d88:	68a1      	ldr	r1, [r4, #8]
 8003d8a:	69a7      	ldr	r7, [r4, #24]
 8003d8c:	fb01 0003 	mla	r0, r1, r3, r0
 8003d90:	6821      	ldr	r1, [r4, #0]
 8003d92:	3004      	adds	r0, #4
 8003d94:	4408      	add	r0, r1
 8003d96:	2202      	movs	r2, #2
 8003d98:	4649      	mov	r1, r9
 8003d9a:	47b8      	blx	r7
      (u8_t *)src_phdr  + offsetof(niffs_page_hdr, id), sizeof(niffs_page_hdr_id));
  check(res);
 8003d9c:	4607      	mov	r7, r0
 8003d9e:	b318      	cbz	r0, 8003de8 <niffs_move_page+0x2c4>
 8003da0:	4b08      	ldr	r3, [pc, #32]	; (8003dc4 <niffs_move_page+0x2a0>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	0558      	lsls	r0, r3, #21
 8003da6:	d53d      	bpl.n	8003e24 <niffs_move_page+0x300>
 8003da8:	4b07      	ldr	r3, [pc, #28]	; (8003dc8 <niffs_move_page+0x2a4>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d139      	bne.n	8003e24 <niffs_move_page+0x300>
 8003db0:	f240 1359 	movw	r3, #345	; 0x159
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	4805      	ldr	r0, [pc, #20]	; (8003dcc <niffs_move_page+0x2a8>)
 8003db8:	4639      	mov	r1, r7
 8003dba:	4a05      	ldr	r2, [pc, #20]	; (8003dd0 <niffs_move_page+0x2ac>)
 8003dbc:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <niffs_move_page+0x2b0>)
 8003dbe:	f005 f9ed 	bl	800919c <arcprint>
 8003dc2:	e02f      	b.n	8003e24 <niffs_move_page+0x300>
 8003dc4:	20004f80 	.word	0x20004f80
 8003dc8:	20004f84 	.word	0x20004f84
 8003dcc:	08010535 	.word	0x08010535
 8003dd0:	0800e806 	.word	0x0800e806
 8003dd4:	0801054b 	.word	0x0801054b
 8003dd8:	08010649 	.word	0x08010649
 8003ddc:	0801063f 	.word	0x0801063f
 8003de0:	08010644 	.word	0x08010644
 8003de4:	0801064e 	.word	0x0801064e

  niffs_inform_page_movement(fs, src_pix, dst_pix);
 8003de8:	4620      	mov	r0, r4
 8003dea:	4631      	mov	r1, r6
 8003dec:	462a      	mov	r2, r5
 8003dee:	f7ff fe4d 	bl	8003a8c <niffs_inform_page_movement>

  // delete src
  res = niffs_delete_page(fs, src_pix);
 8003df2:	4620      	mov	r0, r4
 8003df4:	4631      	mov	r1, r6
 8003df6:	f7ff fd7e 	bl	80038f6 <niffs_delete_page>
  check(res);
 8003dfa:	4604      	mov	r4, r0
 8003dfc:	b328      	cbz	r0, 8003e4a <niffs_move_page+0x326>
 8003dfe:	4b15      	ldr	r3, [pc, #84]	; (8003e54 <niffs_move_page+0x330>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	0559      	lsls	r1, r3, #21
 8003e04:	d521      	bpl.n	8003e4a <niffs_move_page+0x326>
 8003e06:	4b14      	ldr	r3, [pc, #80]	; (8003e58 <niffs_move_page+0x334>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	b9f3      	cbnz	r3, 8003e4a <niffs_move_page+0x326>
 8003e0c:	f240 135f 	movw	r3, #351	; 0x15f
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	4812      	ldr	r0, [pc, #72]	; (8003e5c <niffs_move_page+0x338>)
 8003e14:	4621      	mov	r1, r4
 8003e16:	4a12      	ldr	r2, [pc, #72]	; (8003e60 <niffs_move_page+0x33c>)
 8003e18:	4b12      	ldr	r3, [pc, #72]	; (8003e64 <niffs_move_page+0x340>)
 8003e1a:	f005 f9bf 	bl	800919c <arcprint>
 8003e1e:	e014      	b.n	8003e4a <niffs_move_page+0x326>
 8003e20:	4640      	mov	r0, r8
 8003e22:	e013      	b.n	8003e4c <niffs_move_page+0x328>
 8003e24:	4638      	mov	r0, r7
 8003e26:	e011      	b.n	8003e4c <niffs_move_page+0x328>

  niffs_page_hdr *src_phdr = (niffs_page_hdr *)_NIFFS_PIX_2_ADDR(fs, src_pix);
  niffs_page_hdr *dst_phdr = (niffs_page_hdr *)_NIFFS_PIX_2_ADDR(fs, dst_pix);

  int res = NIFFS_OK;
  if (!_NIFFS_IS_FLAG_VALID(src_phdr) || !_NIFFS_IS_FLAG_VALID(dst_phdr)) res = ERR_NIFFS_MOVING_BAD_FLAG;
 8003e28:	4c0f      	ldr	r4, [pc, #60]	; (8003e68 <niffs_move_page+0x344>)
 8003e2a:	e004      	b.n	8003e36 <niffs_move_page+0x312>
  else if (_NIFFS_IS_FREE(src_phdr))  res = ERR_NIFFS_MOVING_FREE_PAGE;
 8003e2c:	4c0f      	ldr	r4, [pc, #60]	; (8003e6c <niffs_move_page+0x348>)
 8003e2e:	e002      	b.n	8003e36 <niffs_move_page+0x312>
  else if (_NIFFS_IS_DELE(src_phdr))  res = ERR_NIFFS_MOVING_DELETED_PAGE;
 8003e30:	4c0f      	ldr	r4, [pc, #60]	; (8003e70 <niffs_move_page+0x34c>)
 8003e32:	e000      	b.n	8003e36 <niffs_move_page+0x312>
  else if (!_NIFFS_IS_FREE(dst_phdr)) res = ERR_NIFFS_MOVING_TO_UNFREE_PAGE;
 8003e34:	4c0f      	ldr	r4, [pc, #60]	; (8003e74 <niffs_move_page+0x350>)
  check(res);
 8003e36:	4b07      	ldr	r3, [pc, #28]	; (8003e54 <niffs_move_page+0x330>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	0558      	lsls	r0, r3, #21
 8003e3c:	d505      	bpl.n	8003e4a <niffs_move_page+0x326>
 8003e3e:	4b06      	ldr	r3, [pc, #24]	; (8003e58 <niffs_move_page+0x334>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	b913      	cbnz	r3, 8003e4a <niffs_move_page+0x326>
 8003e44:	f44f 7397 	mov.w	r3, #302	; 0x12e
 8003e48:	e7e2      	b.n	8003e10 <niffs_move_page+0x2ec>
 8003e4a:	4620      	mov	r0, r4
  // delete src
  res = niffs_delete_page(fs, src_pix);
  check(res);

  return res;
}
 8003e4c:	b009      	add	sp, #36	; 0x24
 8003e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e52:	bf00      	nop
 8003e54:	20004f80 	.word	0x20004f80
 8003e58:	20004f84 	.word	0x20004f84
 8003e5c:	08010535 	.word	0x08010535
 8003e60:	0800e806 	.word	0x0800e806
 8003e64:	0801054b 	.word	0x0801054b
 8003e68:	ffffd4fe 	.word	0xffffd4fe
 8003e6c:	ffffd502 	.word	0xffffd502
 8003e70:	ffffd501 	.word	0xffffd501
 8003e74:	ffffd500 	.word	0xffffd500

08003e78 <niffs_erase_sector>:
    *pix = arg.pix;
  }
  return res;
}

TESTATIC int niffs_erase_sector(niffs *fs, u32_t sector_ix) {
 8003e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e7a:	460e      	mov	r6, r1
  niffs_sector_hdr shdr;
  niffs_sector_hdr *target_shdr = (niffs_sector_hdr *)_NIFFS_SECTOR_2_ADDR(fs, sector_ix);
 8003e7c:	6881      	ldr	r1, [r0, #8]
    *pix = arg.pix;
  }
  return res;
}

TESTATIC int niffs_erase_sector(niffs *fs, u32_t sector_ix) {
 8003e7e:	4604      	mov	r4, r0
  niffs_sector_hdr shdr;
  niffs_sector_hdr *target_shdr = (niffs_sector_hdr *)_NIFFS_SECTOR_2_ADDR(fs, sector_ix);
 8003e80:	4371      	muls	r1, r6
 8003e82:	6800      	ldr	r0, [r0, #0]
  if (target_shdr->abra == _NIFFS_SECT_MAGIC(fs)) {
 8003e84:	89a2      	ldrh	r2, [r4, #12]
  return res;
}

TESTATIC int niffs_erase_sector(niffs *fs, u32_t sector_ix) {
  niffs_sector_hdr shdr;
  niffs_sector_hdr *target_shdr = (niffs_sector_hdr *)_NIFFS_SECTOR_2_ADDR(fs, sector_ix);
 8003e86:	1843      	adds	r3, r0, r1
  if (target_shdr->abra == _NIFFS_SECT_MAGIC(fs)) {
 8003e88:	f482 4240 	eor.w	r2, r2, #49152	; 0xc000
 8003e8c:	885b      	ldrh	r3, [r3, #2]
 8003e8e:	f082 0201 	eor.w	r2, r2, #1
 8003e92:	4293      	cmp	r3, r2
    *pix = arg.pix;
  }
  return res;
}

TESTATIC int niffs_erase_sector(niffs *fs, u32_t sector_ix) {
 8003e94:	b085      	sub	sp, #20
  niffs_sector_hdr shdr;
  niffs_sector_hdr *target_shdr = (niffs_sector_hdr *)_NIFFS_SECTOR_2_ADDR(fs, sector_ix);
  if (target_shdr->abra == _NIFFS_SECT_MAGIC(fs)) {
 8003e96:	d116      	bne.n	8003ec6 <niffs_erase_sector+0x4e>
    // got magic, presume valid erase count
    shdr.era_cnt = target_shdr->era_cnt+1;
 8003e98:	5a43      	ldrh	r3, [r0, r1]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	f8ad 300c 	strh.w	r3, [sp, #12]

    if (shdr.era_cnt < target_shdr->era_cnt && fs->max_era > ERA_CNT_MAX_OF_LIMIT) {
 8003ea2:	5a41      	ldrh	r1, [r0, r1]
 8003ea4:	4299      	cmp	r1, r3
 8003ea6:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 8003ea8:	d902      	bls.n	8003eb0 <niffs_erase_sector+0x38>
 8003eaa:	f5b1 4f40 	cmp.w	r1, #49152	; 0xc000
 8003eae:	d808      	bhi.n	8003ec2 <niffs_erase_sector+0x4a>
      // max_era = 0xf & era_cnt = 0x0 (era_cnt just wrapped)
      fs->max_era = shdr.era_cnt;
    } else {
      if (fs->max_era < ERA_CNT_MIN_OF_LIMIT && shdr.era_cnt > ERA_CNT_MAX_OF_LIMIT) {
 8003eb0:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8003eb4:	d202      	bcs.n	8003ebc <niffs_erase_sector+0x44>
 8003eb6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003eba:	d807      	bhi.n	8003ecc <niffs_erase_sector+0x54>
        // e.g. max_era = 0x2 & era_cnt = 0xe
        // pass, max_era less but wrapped
      } else {
        // normal case
        fs->max_era = NIFFS_MAX(shdr.era_cnt, fs->max_era);
 8003ebc:	428b      	cmp	r3, r1
 8003ebe:	bf38      	it	cc
 8003ec0:	460b      	movcc	r3, r1
 8003ec2:	8723      	strh	r3, [r4, #56]	; 0x38
 8003ec4:	e002      	b.n	8003ecc <niffs_erase_sector+0x54>
      }
    }
  } else {
    // no magic, presume invalid erase count
    shdr.era_cnt = fs->max_era;
 8003ec6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8003ec8:	f8ad 300c 	strh.w	r3, [sp, #12]
  }
  shdr.abra = _NIFFS_SECT_MAGIC(fs);
  NIFFS_DBG("erase : sector %i era_cnt:%i\n", sector_ix, shdr.era_cnt);
 8003ecc:	4b1a      	ldr	r3, [pc, #104]	; (8003f38 <niffs_erase_sector+0xc0>)
    }
  } else {
    // no magic, presume invalid erase count
    shdr.era_cnt = fs->max_era;
  }
  shdr.abra = _NIFFS_SECT_MAGIC(fs);
 8003ece:	f8ad 200e 	strh.w	r2, [sp, #14]
  NIFFS_DBG("erase : sector %i era_cnt:%i\n", sector_ix, shdr.era_cnt);
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	461f      	mov	r7, r3
 8003ed6:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003eda:	d008      	beq.n	8003eee <niffs_erase_sector+0x76>
 8003edc:	4b17      	ldr	r3, [pc, #92]	; (8003f3c <niffs_erase_sector+0xc4>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	b92b      	cbnz	r3, 8003eee <niffs_erase_sector+0x76>
 8003ee2:	4817      	ldr	r0, [pc, #92]	; (8003f40 <niffs_erase_sector+0xc8>)
 8003ee4:	4631      	mov	r1, r6
 8003ee6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8003eea:	f005 f957 	bl	800919c <arcprint>

  int res = fs->hal_er(_NIFFS_SECTOR_2_ADDR(fs, sector_ix), fs->sector_size);
 8003eee:	68a1      	ldr	r1, [r4, #8]
 8003ef0:	6820      	ldr	r0, [r4, #0]
 8003ef2:	69e2      	ldr	r2, [r4, #28]
 8003ef4:	fb01 0006 	mla	r0, r1, r6, r0
 8003ef8:	4790      	blx	r2
  if (res == NIFFS_OK) {
 8003efa:	4605      	mov	r5, r0
 8003efc:	b9c0      	cbnz	r0, 8003f30 <niffs_erase_sector+0xb8>
    res = fs->hal_wr((u8_t *)_NIFFS_SECTOR_2_ADDR(fs, sector_ix), (u8_t *)&shdr, sizeof(niffs_sector_hdr));
 8003efe:	6822      	ldr	r2, [r4, #0]
 8003f00:	68a0      	ldr	r0, [r4, #8]
 8003f02:	69a3      	ldr	r3, [r4, #24]
 8003f04:	fb00 2006 	mla	r0, r0, r6, r2
 8003f08:	a903      	add	r1, sp, #12
 8003f0a:	2204      	movs	r2, #4
 8003f0c:	4798      	blx	r3
    check(res);
 8003f0e:	4605      	mov	r5, r0
 8003f10:	b170      	cbz	r0, 8003f30 <niffs_erase_sector+0xb8>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	055a      	lsls	r2, r3, #21
 8003f16:	d50b      	bpl.n	8003f30 <niffs_erase_sector+0xb8>
 8003f18:	4b08      	ldr	r3, [pc, #32]	; (8003f3c <niffs_erase_sector+0xc4>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	b943      	cbnz	r3, 8003f30 <niffs_erase_sector+0xb8>
 8003f1e:	f44f 738f 	mov.w	r3, #286	; 0x11e
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	4807      	ldr	r0, [pc, #28]	; (8003f44 <niffs_erase_sector+0xcc>)
 8003f26:	4629      	mov	r1, r5
 8003f28:	4a07      	ldr	r2, [pc, #28]	; (8003f48 <niffs_erase_sector+0xd0>)
 8003f2a:	4b08      	ldr	r3, [pc, #32]	; (8003f4c <niffs_erase_sector+0xd4>)
 8003f2c:	f005 f936 	bl	800919c <arcprint>
  }
  return res;
}
 8003f30:	4628      	mov	r0, r5
 8003f32:	b005      	add	sp, #20
 8003f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f36:	bf00      	nop
 8003f38:	20004f80 	.word	0x20004f80
 8003f3c:	20004f84 	.word	0x20004f84
 8003f40:	0801066e 	.word	0x0801066e
 8003f44:	08010535 	.word	0x08010535
 8003f48:	0800e816 	.word	0x0800e816
 8003f4c:	0801054b 	.word	0x0801054b

08003f50 <niffs_chk_delete_orphan_bad_dirty_v>:
    }
  }
  return NIFFS_VIS_CONT;
}

static int niffs_chk_delete_orphan_bad_dirty_v(niffs *fs, niffs_page_ix pix, niffs_page_hdr *phdr, void *v_arg) {
 8003f50:	b5f0      	push	{r4, r5, r6, r7, lr}
  (void)v_arg;
  int res;
  if (!_NIFFS_IS_DELE(phdr) &&
 8003f52:	8813      	ldrh	r3, [r2, #0]
    }
  }
  return NIFFS_VIS_CONT;
}

static int niffs_chk_delete_orphan_bad_dirty_v(niffs *fs, niffs_page_ix pix, niffs_page_hdr *phdr, void *v_arg) {
 8003f54:	460d      	mov	r5, r1
 8003f56:	b085      	sub	sp, #20
 8003f58:	4604      	mov	r4, r0
 8003f5a:	4611      	mov	r1, r2
  (void)v_arg;
  int res;
  if (!_NIFFS_IS_DELE(phdr) &&
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d038      	beq.n	8003fd2 <niffs_chk_delete_orphan_bad_dirty_v+0x82>
      (!_NIFFS_IS_FLAG_VALID(phdr) ||
 8003f60:	8852      	ldrh	r2, [r2, #2]
}

static int niffs_chk_delete_orphan_bad_dirty_v(niffs *fs, niffs_page_ix pix, niffs_page_hdr *phdr, void *v_arg) {
  (void)v_arg;
  int res;
  if (!_NIFFS_IS_DELE(phdr) &&
 8003f62:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003f66:	4282      	cmp	r2, r0
 8003f68:	d031      	beq.n	8003fce <niffs_chk_delete_orphan_bad_dirty_v+0x7e>
      (!_NIFFS_IS_FLAG_VALID(phdr) ||
 8003f6a:	2a01      	cmp	r2, #1
 8003f6c:	f240 8100 	bls.w	8004170 <niffs_chk_delete_orphan_bad_dirty_v+0x220>
      (_NIFFS_IS_FREE(phdr) && (_NIFFS_IS_WRIT(phdr) || _NIFFS_IS_MOVI(phdr))) ||
      (!_NIFFS_IS_FREE(phdr) && _NIFFS_IS_CLEA(phdr)))) {
    // found a page bad flag status
    NIFFS_DBG("check : pix %04x bad flag status fl/id:%04x/%04x delete hard\n", pix, phdr->flag, phdr->id.raw);
 8003f70:	4e82      	ldr	r6, [pc, #520]	; (800417c <niffs_chk_delete_orphan_bad_dirty_v+0x22c>)
 8003f72:	6831      	ldr	r1, [r6, #0]
 8003f74:	054f      	lsls	r7, r1, #21
 8003f76:	d506      	bpl.n	8003f86 <niffs_chk_delete_orphan_bad_dirty_v+0x36>
 8003f78:	4981      	ldr	r1, [pc, #516]	; (8004180 <niffs_chk_delete_orphan_bad_dirty_v+0x230>)
 8003f7a:	6809      	ldr	r1, [r1, #0]
 8003f7c:	b919      	cbnz	r1, 8003f86 <niffs_chk_delete_orphan_bad_dirty_v+0x36>
 8003f7e:	4881      	ldr	r0, [pc, #516]	; (8004184 <niffs_chk_delete_orphan_bad_dirty_v+0x234>)
 8003f80:	4629      	mov	r1, r5
 8003f82:	f005 f90b 	bl	800919c <arcprint>
    niffs_page_id_raw delete_raw_id = _NIFFS_PAGE_DELE_ID;
    res = fs->hal_wr((u8_t *)_NIFFS_PIX_2_ADDR(fs, pix) + offsetof(niffs_page_hdr, id), (u8_t *)&delete_raw_id, sizeof(niffs_page_id_raw));
 8003f86:	6a22      	ldr	r2, [r4, #32]
      (!_NIFFS_IS_FLAG_VALID(phdr) ||
      (_NIFFS_IS_FREE(phdr) && (_NIFFS_IS_WRIT(phdr) || _NIFFS_IS_MOVI(phdr))) ||
      (!_NIFFS_IS_FREE(phdr) && _NIFFS_IS_CLEA(phdr)))) {
    // found a page bad flag status
    NIFFS_DBG("check : pix %04x bad flag status fl/id:%04x/%04x delete hard\n", pix, phdr->flag, phdr->id.raw);
    niffs_page_id_raw delete_raw_id = _NIFFS_PAGE_DELE_ID;
 8003f88:	a904      	add	r1, sp, #16
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	f821 3d02 	strh.w	r3, [r1, #-2]!
    res = fs->hal_wr((u8_t *)_NIFFS_PIX_2_ADDR(fs, pix) + offsetof(niffs_page_hdr, id), (u8_t *)&delete_raw_id, sizeof(niffs_page_id_raw));
 8003f90:	fbb5 f3f2 	udiv	r3, r5, r2
 8003f94:	fb02 5513 	mls	r5, r2, r3, r5
 8003f98:	68e7      	ldr	r7, [r4, #12]
 8003f9a:	68a0      	ldr	r0, [r4, #8]
 8003f9c:	436f      	muls	r7, r5
 8003f9e:	fb00 7003 	mla	r0, r0, r3, r7
 8003fa2:	6823      	ldr	r3, [r4, #0]
 8003fa4:	3004      	adds	r0, #4
 8003fa6:	69a4      	ldr	r4, [r4, #24]
 8003fa8:	4418      	add	r0, r3
 8003faa:	2202      	movs	r2, #2
 8003fac:	47a0      	blx	r4
    check(res);
 8003fae:	4604      	mov	r4, r0
 8003fb0:	2800      	cmp	r0, #0
 8003fb2:	f000 80d0 	beq.w	8004156 <niffs_chk_delete_orphan_bad_dirty_v+0x206>
 8003fb6:	6833      	ldr	r3, [r6, #0]
 8003fb8:	0558      	lsls	r0, r3, #21
 8003fba:	f140 80d7 	bpl.w	800416c <niffs_chk_delete_orphan_bad_dirty_v+0x21c>
 8003fbe:	4b70      	ldr	r3, [pc, #448]	; (8004180 <niffs_chk_delete_orphan_bad_dirty_v+0x230>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f040 80d2 	bne.w	800416c <niffs_chk_delete_orphan_bad_dirty_v+0x21c>
 8003fc8:	f240 6351 	movw	r3, #1617	; 0x651
 8003fcc:	e0bb      	b.n	8004146 <niffs_chk_delete_orphan_bad_dirty_v+0x1f6>

static int niffs_chk_delete_orphan_bad_dirty_v(niffs *fs, niffs_page_ix pix, niffs_page_hdr *phdr, void *v_arg) {
  (void)v_arg;
  int res;
  if (!_NIFFS_IS_DELE(phdr) &&
      (!_NIFFS_IS_FLAG_VALID(phdr) ||
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d1ce      	bne.n	8003f70 <niffs_chk_delete_orphan_bad_dirty_v+0x20>
    // found a page bad flag status
    NIFFS_DBG("check : pix %04x bad flag status fl/id:%04x/%04x delete hard\n", pix, phdr->flag, phdr->id.raw);
    niffs_page_id_raw delete_raw_id = _NIFFS_PAGE_DELE_ID;
    res = fs->hal_wr((u8_t *)_NIFFS_PIX_2_ADDR(fs, pix) + offsetof(niffs_page_hdr, id), (u8_t *)&delete_raw_id, sizeof(niffs_page_id_raw));
    check(res);
  } else if (!_NIFFS_IS_FREE(phdr) && !_NIFFS_IS_DELE(phdr)) {
 8003fd2:	1e58      	subs	r0, r3, #1
 8003fd4:	b280      	uxth	r0, r0
 8003fd6:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8003fda:	4290      	cmp	r0, r2
 8003fdc:	d87f      	bhi.n	80040de <niffs_chk_delete_orphan_bad_dirty_v+0x18e>
    niffs_obj_id oid = phdr->id.obj_id;
 8003fde:	784a      	ldrb	r2, [r1, #1]
    --oid;
    niffs_object_hdr *ohdr = (niffs_object_hdr *)phdr;
    if (phdr->id.spix > 0 && (fs->buf[oid/8] & 1<<(oid&7)) == 0) {
 8003fe0:	780b      	ldrb	r3, [r1, #0]
    niffs_page_id_raw delete_raw_id = _NIFFS_PAGE_DELE_ID;
    res = fs->hal_wr((u8_t *)_NIFFS_PIX_2_ADDR(fs, pix) + offsetof(niffs_page_hdr, id), (u8_t *)&delete_raw_id, sizeof(niffs_page_id_raw));
    check(res);
  } else if (!_NIFFS_IS_FREE(phdr) && !_NIFFS_IS_DELE(phdr)) {
    niffs_obj_id oid = phdr->id.obj_id;
    --oid;
 8003fe2:	3a01      	subs	r2, #1
 8003fe4:	b2d2      	uxtb	r2, r2
    niffs_object_hdr *ohdr = (niffs_object_hdr *)phdr;
    if (phdr->id.spix > 0 && (fs->buf[oid/8] & 1<<(oid&7)) == 0) {
 8003fe6:	b35b      	cbz	r3, 8004040 <niffs_chk_delete_orphan_bad_dirty_v+0xf0>
 8003fe8:	6923      	ldr	r3, [r4, #16]
 8003fea:	08d1      	lsrs	r1, r2, #3
 8003fec:	5c59      	ldrb	r1, [r3, r1]
 8003fee:	f002 0307 	and.w	r3, r2, #7
 8003ff2:	fa41 f303 	asr.w	r3, r1, r3
 8003ff6:	07d9      	lsls	r1, r3, #31
 8003ff8:	f100 80ad 	bmi.w	8004156 <niffs_chk_delete_orphan_bad_dirty_v+0x206>
      // found a page with id not belonging to any object header
      NIFFS_DBG("check : pix %04x orphan by id oid:%04x delete\n", pix, oid+1);
 8003ffc:	4b5f      	ldr	r3, [pc, #380]	; (800417c <niffs_chk_delete_orphan_bad_dirty_v+0x22c>)
 8003ffe:	6819      	ldr	r1, [r3, #0]
 8004000:	461e      	mov	r6, r3
 8004002:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8004006:	d007      	beq.n	8004018 <niffs_chk_delete_orphan_bad_dirty_v+0xc8>
 8004008:	4b5d      	ldr	r3, [pc, #372]	; (8004180 <niffs_chk_delete_orphan_bad_dirty_v+0x230>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	b923      	cbnz	r3, 8004018 <niffs_chk_delete_orphan_bad_dirty_v+0xc8>
 800400e:	485e      	ldr	r0, [pc, #376]	; (8004188 <niffs_chk_delete_orphan_bad_dirty_v+0x238>)
 8004010:	4629      	mov	r1, r5
 8004012:	3201      	adds	r2, #1
 8004014:	f005 f8c2 	bl	800919c <arcprint>
      res = niffs_delete_page(fs, pix);
 8004018:	4620      	mov	r0, r4
 800401a:	4629      	mov	r1, r5
 800401c:	f7ff fc6b 	bl	80038f6 <niffs_delete_page>
      check(res);
 8004020:	4604      	mov	r4, r0
 8004022:	2800      	cmp	r0, #0
 8004024:	f000 8097 	beq.w	8004156 <niffs_chk_delete_orphan_bad_dirty_v+0x206>
 8004028:	6833      	ldr	r3, [r6, #0]
 800402a:	055b      	lsls	r3, r3, #21
 800402c:	f140 809e 	bpl.w	800416c <niffs_chk_delete_orphan_bad_dirty_v+0x21c>
 8004030:	4b53      	ldr	r3, [pc, #332]	; (8004180 <niffs_chk_delete_orphan_bad_dirty_v+0x230>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	f040 8099 	bne.w	800416c <niffs_chk_delete_orphan_bad_dirty_v+0x21c>
 800403a:	f240 635a 	movw	r3, #1626	; 0x65a
 800403e:	e082      	b.n	8004146 <niffs_chk_delete_orphan_bad_dirty_v+0x1f6>
    } else if (phdr->id.spix == 0 && ohdr->len == 0) {
 8004040:	684b      	ldr	r3, [r1, #4]
 8004042:	b9f3      	cbnz	r3, 8004082 <niffs_chk_delete_orphan_bad_dirty_v+0x132>
      // found an object header page with size 0
      NIFFS_DBG("check : pix %04x unfinished remove oid:%04x delete\n", pix, oid+1);
 8004044:	4b4d      	ldr	r3, [pc, #308]	; (800417c <niffs_chk_delete_orphan_bad_dirty_v+0x22c>)
 8004046:	6819      	ldr	r1, [r3, #0]
 8004048:	461e      	mov	r6, r3
 800404a:	f411 6f80 	tst.w	r1, #1024	; 0x400
 800404e:	d007      	beq.n	8004060 <niffs_chk_delete_orphan_bad_dirty_v+0x110>
 8004050:	4b4b      	ldr	r3, [pc, #300]	; (8004180 <niffs_chk_delete_orphan_bad_dirty_v+0x230>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	b923      	cbnz	r3, 8004060 <niffs_chk_delete_orphan_bad_dirty_v+0x110>
 8004056:	484d      	ldr	r0, [pc, #308]	; (800418c <niffs_chk_delete_orphan_bad_dirty_v+0x23c>)
 8004058:	4629      	mov	r1, r5
 800405a:	3201      	adds	r2, #1
 800405c:	f005 f89e 	bl	800919c <arcprint>
      res = niffs_delete_page(fs, pix);
 8004060:	4620      	mov	r0, r4
 8004062:	4629      	mov	r1, r5
 8004064:	f7ff fc47 	bl	80038f6 <niffs_delete_page>
      check(res);
 8004068:	4604      	mov	r4, r0
 800406a:	2800      	cmp	r0, #0
 800406c:	d073      	beq.n	8004156 <niffs_chk_delete_orphan_bad_dirty_v+0x206>
 800406e:	6833      	ldr	r3, [r6, #0]
 8004070:	055f      	lsls	r7, r3, #21
 8004072:	d57b      	bpl.n	800416c <niffs_chk_delete_orphan_bad_dirty_v+0x21c>
 8004074:	4b42      	ldr	r3, [pc, #264]	; (8004180 <niffs_chk_delete_orphan_bad_dirty_v+0x230>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d177      	bne.n	800416c <niffs_chk_delete_orphan_bad_dirty_v+0x21c>
 800407c:	f240 635f 	movw	r3, #1631	; 0x65f
 8004080:	e061      	b.n	8004146 <niffs_chk_delete_orphan_bad_dirty_v+0x1f6>
    } else if (phdr->id.spix == 0 && ohdr->type != _NIFFS_FTYPE_LINFILE &&
 8004082:	7e09      	ldrb	r1, [r1, #24]
 8004084:	2901      	cmp	r1, #1
 8004086:	d066      	beq.n	8004156 <niffs_chk_delete_orphan_bad_dirty_v+0x206>
 8004088:	1c5e      	adds	r6, r3, #1
 800408a:	d003      	beq.n	8004094 <niffs_chk_delete_orphan_bad_dirty_v+0x144>
        (((sizeof(niffs_span_ix) < 4 &&
            ohdr->len != NIFFS_UNDEF_LEN &&
            ohdr->len > (1 << (8*sizeof(niffs_span_ix))) * fs->page_size)) ||
 800408c:	68e1      	ldr	r1, [r4, #12]
      NIFFS_DBG("check : pix %04x unfinished remove oid:%04x delete\n", pix, oid+1);
      res = niffs_delete_page(fs, pix);
      check(res);
    } else if (phdr->id.spix == 0 && ohdr->type != _NIFFS_FTYPE_LINFILE &&
        (((sizeof(niffs_span_ix) < 4 &&
            ohdr->len != NIFFS_UNDEF_LEN &&
 800408e:	ebb3 2f01 	cmp.w	r3, r1, lsl #8
 8004092:	d805      	bhi.n	80040a0 <niffs_chk_delete_orphan_bad_dirty_v+0x150>
            ohdr->len > (1 << (8*sizeof(niffs_span_ix))) * fs->page_size)) ||
        ohdr->len > fs->sector_size * (fs->sectors-1))) {
 8004094:	6861      	ldr	r1, [r4, #4]
 8004096:	1e48      	subs	r0, r1, #1
 8004098:	68a1      	ldr	r1, [r4, #8]
 800409a:	4341      	muls	r1, r0
      res = niffs_delete_page(fs, pix);
      check(res);
    } else if (phdr->id.spix == 0 && ohdr->type != _NIFFS_FTYPE_LINFILE &&
        (((sizeof(niffs_span_ix) < 4 &&
            ohdr->len != NIFFS_UNDEF_LEN &&
            ohdr->len > (1 << (8*sizeof(niffs_span_ix))) * fs->page_size)) ||
 800409c:	428b      	cmp	r3, r1
 800409e:	d95a      	bls.n	8004156 <niffs_chk_delete_orphan_bad_dirty_v+0x206>
        ohdr->len > fs->sector_size * (fs->sectors-1))) {
      // found an object header page with crazy size
      NIFFS_DBG("check : pix %04x bad length oid:%04x delete\n", pix, oid+1);
 80040a0:	4b36      	ldr	r3, [pc, #216]	; (800417c <niffs_chk_delete_orphan_bad_dirty_v+0x22c>)
 80040a2:	6819      	ldr	r1, [r3, #0]
 80040a4:	461e      	mov	r6, r3
 80040a6:	f411 6f80 	tst.w	r1, #1024	; 0x400
 80040aa:	d007      	beq.n	80040bc <niffs_chk_delete_orphan_bad_dirty_v+0x16c>
 80040ac:	4b34      	ldr	r3, [pc, #208]	; (8004180 <niffs_chk_delete_orphan_bad_dirty_v+0x230>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	b923      	cbnz	r3, 80040bc <niffs_chk_delete_orphan_bad_dirty_v+0x16c>
 80040b2:	4837      	ldr	r0, [pc, #220]	; (8004190 <niffs_chk_delete_orphan_bad_dirty_v+0x240>)
 80040b4:	4629      	mov	r1, r5
 80040b6:	3201      	adds	r2, #1
 80040b8:	f005 f870 	bl	800919c <arcprint>
      res = niffs_delete_page(fs, pix);
 80040bc:	4620      	mov	r0, r4
 80040be:	4629      	mov	r1, r5
 80040c0:	f7ff fc19 	bl	80038f6 <niffs_delete_page>
      check(res);
 80040c4:	4604      	mov	r4, r0
 80040c6:	2800      	cmp	r0, #0
 80040c8:	d045      	beq.n	8004156 <niffs_chk_delete_orphan_bad_dirty_v+0x206>
 80040ca:	6833      	ldr	r3, [r6, #0]
 80040cc:	0558      	lsls	r0, r3, #21
 80040ce:	d54d      	bpl.n	800416c <niffs_chk_delete_orphan_bad_dirty_v+0x21c>
 80040d0:	4b2b      	ldr	r3, [pc, #172]	; (8004180 <niffs_chk_delete_orphan_bad_dirty_v+0x230>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d149      	bne.n	800416c <niffs_chk_delete_orphan_bad_dirty_v+0x21c>
 80040d8:	f44f 63cd 	mov.w	r3, #1640	; 0x668
 80040dc:	e033      	b.n	8004146 <niffs_chk_delete_orphan_bad_dirty_v+0x1f6>
    }
  } else if (_NIFFS_IS_FREE(phdr) && _NIFFS_IS_CLEA(phdr)) {
 80040de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d137      	bne.n	8004156 <niffs_chk_delete_orphan_bad_dirty_v+0x206>
 80040e6:	884a      	ldrh	r2, [r1, #2]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d134      	bne.n	8004156 <niffs_chk_delete_orphan_bad_dirty_v+0x206>
    u32_t ix;
    u8_t *addr = (u8_t *)phdr;
    for (ix = 0; ix < fs->page_size; ix++) {
 80040ec:	68e2      	ldr	r2, [r4, #12]
 80040ee:	2300      	movs	r3, #0
 80040f0:	e000      	b.n	80040f4 <niffs_chk_delete_orphan_bad_dirty_v+0x1a4>
 80040f2:	3301      	adds	r3, #1
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d02e      	beq.n	8004156 <niffs_chk_delete_orphan_bad_dirty_v+0x206>
      if (addr[ix] != 0xff) {
 80040f8:	5cc8      	ldrb	r0, [r1, r3]
 80040fa:	28ff      	cmp	r0, #255	; 0xff
 80040fc:	d0f9      	beq.n	80040f2 <niffs_chk_delete_orphan_bad_dirty_v+0x1a2>
        NIFFS_DBG("check : pix %04x free but contains data, delete hard\n", pix);
 80040fe:	4b1f      	ldr	r3, [pc, #124]	; (800417c <niffs_chk_delete_orphan_bad_dirty_v+0x22c>)
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	461e      	mov	r6, r3
 8004104:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004108:	d127      	bne.n	800415a <niffs_chk_delete_orphan_bad_dirty_v+0x20a>
        niffs_page_id_raw delete_raw_id = _NIFFS_PAGE_DELE_ID;
        res = fs->hal_wr((u8_t *)_NIFFS_PIX_2_ADDR(fs, pix) + offsetof(niffs_page_hdr, id), (u8_t *)&delete_raw_id, sizeof(niffs_page_id_raw));
 800410a:	6a22      	ldr	r2, [r4, #32]
    u32_t ix;
    u8_t *addr = (u8_t *)phdr;
    for (ix = 0; ix < fs->page_size; ix++) {
      if (addr[ix] != 0xff) {
        NIFFS_DBG("check : pix %04x free but contains data, delete hard\n", pix);
        niffs_page_id_raw delete_raw_id = _NIFFS_PAGE_DELE_ID;
 800410c:	a904      	add	r1, sp, #16
 800410e:	2300      	movs	r3, #0
 8004110:	f821 3d02 	strh.w	r3, [r1, #-2]!
        res = fs->hal_wr((u8_t *)_NIFFS_PIX_2_ADDR(fs, pix) + offsetof(niffs_page_hdr, id), (u8_t *)&delete_raw_id, sizeof(niffs_page_id_raw));
 8004114:	fbb5 f3f2 	udiv	r3, r5, r2
 8004118:	fb02 5513 	mls	r5, r2, r3, r5
 800411c:	68e7      	ldr	r7, [r4, #12]
 800411e:	68a0      	ldr	r0, [r4, #8]
 8004120:	436f      	muls	r7, r5
 8004122:	fb00 7003 	mla	r0, r0, r3, r7
 8004126:	6823      	ldr	r3, [r4, #0]
 8004128:	3004      	adds	r0, #4
 800412a:	69a4      	ldr	r4, [r4, #24]
 800412c:	4418      	add	r0, r3
 800412e:	2202      	movs	r2, #2
 8004130:	47a0      	blx	r4
        check(res);
 8004132:	4604      	mov	r4, r0
 8004134:	b178      	cbz	r0, 8004156 <niffs_chk_delete_orphan_bad_dirty_v+0x206>
 8004136:	6833      	ldr	r3, [r6, #0]
 8004138:	0559      	lsls	r1, r3, #21
 800413a:	d517      	bpl.n	800416c <niffs_chk_delete_orphan_bad_dirty_v+0x21c>
 800413c:	4b10      	ldr	r3, [pc, #64]	; (8004180 <niffs_chk_delete_orphan_bad_dirty_v+0x230>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	b9a3      	cbnz	r3, 800416c <niffs_chk_delete_orphan_bad_dirty_v+0x21c>
 8004142:	f240 6372 	movw	r3, #1650	; 0x672
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	4812      	ldr	r0, [pc, #72]	; (8004194 <niffs_chk_delete_orphan_bad_dirty_v+0x244>)
 800414a:	4621      	mov	r1, r4
 800414c:	4a12      	ldr	r2, [pc, #72]	; (8004198 <niffs_chk_delete_orphan_bad_dirty_v+0x248>)
 800414e:	4b13      	ldr	r3, [pc, #76]	; (800419c <niffs_chk_delete_orphan_bad_dirty_v+0x24c>)
 8004150:	f005 f824 	bl	800919c <arcprint>
 8004154:	e00a      	b.n	800416c <niffs_chk_delete_orphan_bad_dirty_v+0x21c>
        break;
      }
    }
  }
  return NIFFS_VIS_CONT;
 8004156:	2001      	movs	r0, #1
 8004158:	e00e      	b.n	8004178 <niffs_chk_delete_orphan_bad_dirty_v+0x228>
  } else if (_NIFFS_IS_FREE(phdr) && _NIFFS_IS_CLEA(phdr)) {
    u32_t ix;
    u8_t *addr = (u8_t *)phdr;
    for (ix = 0; ix < fs->page_size; ix++) {
      if (addr[ix] != 0xff) {
        NIFFS_DBG("check : pix %04x free but contains data, delete hard\n", pix);
 800415a:	4b09      	ldr	r3, [pc, #36]	; (8004180 <niffs_chk_delete_orphan_bad_dirty_v+0x230>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1d3      	bne.n	800410a <niffs_chk_delete_orphan_bad_dirty_v+0x1ba>
 8004162:	480f      	ldr	r0, [pc, #60]	; (80041a0 <niffs_chk_delete_orphan_bad_dirty_v+0x250>)
 8004164:	4629      	mov	r1, r5
 8004166:	f005 f819 	bl	800919c <arcprint>
 800416a:	e7ce      	b.n	800410a <niffs_chk_delete_orphan_bad_dirty_v+0x1ba>
 800416c:	4620      	mov	r0, r4
 800416e:	e003      	b.n	8004178 <niffs_chk_delete_orphan_bad_dirty_v+0x228>

static int niffs_chk_delete_orphan_bad_dirty_v(niffs *fs, niffs_page_ix pix, niffs_page_hdr *phdr, void *v_arg) {
  (void)v_arg;
  int res;
  if (!_NIFFS_IS_DELE(phdr) &&
      (!_NIFFS_IS_FLAG_VALID(phdr) ||
 8004170:	4283      	cmp	r3, r0
 8004172:	f47f af2e 	bne.w	8003fd2 <niffs_chk_delete_orphan_bad_dirty_v+0x82>
 8004176:	e6fb      	b.n	8003f70 <niffs_chk_delete_orphan_bad_dirty_v+0x20>
        break;
      }
    }
  }
  return NIFFS_VIS_CONT;
}
 8004178:	b005      	add	sp, #20
 800417a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800417c:	20004f80 	.word	0x20004f80
 8004180:	20004f84 	.word	0x20004f84
 8004184:	0801068c 	.word	0x0801068c
 8004188:	080106ca 	.word	0x080106ca
 800418c:	080106f9 	.word	0x080106f9
 8004190:	0801072d 	.word	0x0801072d
 8004194:	08010535 	.word	0x08010535
 8004198:	0800e829 	.word	0x0800e829
 800419c:	0801054b 	.word	0x0801054b
 80041a0:	0801075a 	.word	0x0801075a

080041a4 <niffs_setup>:
}

//////////////////////////////////// SETUP ///////////////////////////////////

static int niffs_setup(niffs *fs) {
  fs->free_pages = 0;
 80041a4:	2300      	movs	r3, #0
  return res;
}

//////////////////////////////////// SETUP ///////////////////////////////////

static int niffs_setup(niffs *fs) {
 80041a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u32_t s;
  u32_t bad_sectors = 0;
  niffs_erase_cnt max_era = 0;
  niffs_erase_cnt min_era = (niffs_erase_cnt)-1;

  for (s = 0; s < fs->sectors; s++) {
 80041aa:	f8d0 c004 	ldr.w	ip, [r0, #4]
  return res;
}

//////////////////////////////////// SETUP ///////////////////////////////////

static int niffs_setup(niffs *fs) {
 80041ae:	4604      	mov	r4, r0
  fs->free_pages = 0;
 80041b0:	6283      	str	r3, [r0, #40]	; 0x28
  fs->dele_pages = 0;
 80041b2:	62c3      	str	r3, [r0, #44]	; 0x2c
  fs->max_era = 0;
 80041b4:	8703      	strh	r3, [r0, #56]	; 0x38
  u32_t s;
  u32_t bad_sectors = 0;
  niffs_erase_cnt max_era = 0;
  niffs_erase_cnt min_era = (niffs_erase_cnt)-1;
 80041b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
static int niffs_setup(niffs *fs) {
  fs->free_pages = 0;
  fs->dele_pages = 0;
  fs->max_era = 0;
  u32_t s;
  u32_t bad_sectors = 0;
 80041ba:	4618      	mov	r0, r3
  niffs_erase_cnt max_era = 0;
  niffs_erase_cnt min_era = (niffs_erase_cnt)-1;

  for (s = 0; s < fs->sectors; s++) {
 80041bc:	4619      	mov	r1, r3
 80041be:	4561      	cmp	r1, ip
 80041c0:	d018      	beq.n	80041f4 <niffs_setup+0x50>
    niffs_sector_hdr *shdr = (niffs_sector_hdr *)_NIFFS_SECTOR_2_ADDR(fs, s);
 80041c2:	68a6      	ldr	r6, [r4, #8]
 80041c4:	6827      	ldr	r7, [r4, #0]
 80041c6:	434e      	muls	r6, r1
    if (shdr->abra != _NIFFS_SECT_MAGIC(fs)) {
 80041c8:	89a5      	ldrh	r5, [r4, #12]
  u32_t bad_sectors = 0;
  niffs_erase_cnt max_era = 0;
  niffs_erase_cnt min_era = (niffs_erase_cnt)-1;

  for (s = 0; s < fs->sectors; s++) {
    niffs_sector_hdr *shdr = (niffs_sector_hdr *)_NIFFS_SECTOR_2_ADDR(fs, s);
 80041ca:	eb07 0806 	add.w	r8, r7, r6
    if (shdr->abra != _NIFFS_SECT_MAGIC(fs)) {
 80041ce:	f8b8 8002 	ldrh.w	r8, [r8, #2]
 80041d2:	f485 4540 	eor.w	r5, r5, #49152	; 0xc000
 80041d6:	f085 0501 	eor.w	r5, r5, #1
 80041da:	45a8      	cmp	r8, r5
 80041dc:	d001      	beq.n	80041e2 <niffs_setup+0x3e>
      bad_sectors++;
 80041de:	3001      	adds	r0, #1
      continue;
 80041e0:	e006      	b.n	80041f0 <niffs_setup+0x4c>
    }
    max_era = NIFFS_MAX(shdr->era_cnt, max_era);
 80041e2:	5bbd      	ldrh	r5, [r7, r6]
 80041e4:	42ab      	cmp	r3, r5
 80041e6:	bf38      	it	cc
 80041e8:	462b      	movcc	r3, r5
    min_era = NIFFS_MIN(shdr->era_cnt, min_era);
 80041ea:	42aa      	cmp	r2, r5
 80041ec:	bf28      	it	cs
 80041ee:	462a      	movcs	r2, r5
  u32_t s;
  u32_t bad_sectors = 0;
  niffs_erase_cnt max_era = 0;
  niffs_erase_cnt min_era = (niffs_erase_cnt)-1;

  for (s = 0; s < fs->sectors; s++) {
 80041f0:	3101      	adds	r1, #1
 80041f2:	e7e4      	b.n	80041be <niffs_setup+0x1a>
      continue;
    }
    max_era = NIFFS_MAX(shdr->era_cnt, max_era);
    min_era = NIFFS_MIN(shdr->era_cnt, min_era);
  }
  if (min_era < ERA_CNT_MIN_OF_LIMIT && max_era > ERA_CNT_MAX_OF_LIMIT) {
 80041f4:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80041f8:	d204      	bcs.n	8004204 <niffs_setup+0x60>
 80041fa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80041fe:	d901      	bls.n	8004204 <niffs_setup+0x60>
    fs->max_era = min_era;
 8004200:	8722      	strh	r2, [r4, #56]	; 0x38
 8004202:	e000      	b.n	8004206 <niffs_setup+0x62>
  } else {
    fs->max_era = max_era;
 8004204:	8723      	strh	r3, [r4, #56]	; 0x38
  }

  // we allow one bad sector only would we lose power during erase of a sector
  if (bad_sectors > 1) {
 8004206:	2801      	cmp	r0, #1
 8004208:	d804      	bhi.n	8004214 <niffs_setup+0x70>
 800420a:	2500      	movs	r5, #0
  }

  for (s = 0; s < fs->sectors; s++) {
    niffs_sector_hdr *shdr = (niffs_sector_hdr *)_NIFFS_SECTOR_2_ADDR(fs, s);
    if (shdr->abra != _NIFFS_SECT_MAGIC(fs)) {
      NIFFS_DBG("check : erasing uninitialized sector %i\n", s);
 800420c:	4f40      	ldr	r7, [pc, #256]	; (8004310 <niffs_setup+0x16c>)
 800420e:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8004314 <niffs_setup+0x170>
 8004212:	e029      	b.n	8004268 <niffs_setup+0xc4>
    fs->max_era = max_era;
  }

  // we allow one bad sector only would we lose power during erase of a sector
  if (bad_sectors > 1) {
    check(ERR_NIFFS_NOT_A_FILESYSTEM);
 8004214:	4b3e      	ldr	r3, [pc, #248]	; (8004310 <niffs_setup+0x16c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	0559      	lsls	r1, r3, #21
 800421a:	d572      	bpl.n	8004302 <niffs_setup+0x15e>
 800421c:	4b3d      	ldr	r3, [pc, #244]	; (8004314 <niffs_setup+0x170>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d16e      	bne.n	8004302 <niffs_setup+0x15e>
 8004224:	f240 73dc 	movw	r3, #2012	; 0x7dc
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	483b      	ldr	r0, [pc, #236]	; (8004318 <niffs_setup+0x174>)
 800422c:	493b      	ldr	r1, [pc, #236]	; (800431c <niffs_setup+0x178>)
 800422e:	4a3c      	ldr	r2, [pc, #240]	; (8004320 <niffs_setup+0x17c>)
 8004230:	4b3c      	ldr	r3, [pc, #240]	; (8004324 <niffs_setup+0x180>)
 8004232:	f004 ffb3 	bl	800919c <arcprint>
 8004236:	e064      	b.n	8004302 <niffs_setup+0x15e>
  }

  for (s = 0; s < fs->sectors; s++) {
    niffs_sector_hdr *shdr = (niffs_sector_hdr *)_NIFFS_SECTOR_2_ADDR(fs, s);
 8004238:	68a2      	ldr	r2, [r4, #8]
    if (shdr->abra != _NIFFS_SECT_MAGIC(fs)) {
 800423a:	6823      	ldr	r3, [r4, #0]
 800423c:	89a1      	ldrh	r1, [r4, #12]
 800423e:	fb02 3305 	mla	r3, r2, r5, r3
 8004242:	885a      	ldrh	r2, [r3, #2]
 8004244:	f481 4340 	eor.w	r3, r1, #49152	; 0xc000
 8004248:	f083 0301 	eor.w	r3, r3, #1
 800424c:	429a      	cmp	r2, r3
 800424e:	d10f      	bne.n	8004270 <niffs_setup+0xcc>
      int res = niffs_erase_sector(fs, s);
      check(res);
    }

    niffs_page_ix ipix;
    for (ipix = 0; ipix < fs->pages_per_sector; ipix++) {
 8004250:	6a23      	ldr	r3, [r4, #32]
      niffs_page_ix pix = _NIFFS_PIX_AT_SECTOR(fs, s) + ipix;
 8004252:	2200      	movs	r2, #0
 8004254:	fb05 f603 	mul.w	r6, r5, r3
      niffs_page_hdr *phdr = (niffs_page_hdr *)_NIFFS_PIX_2_ADDR(fs, pix);
      if (_NIFFS_IS_FREE(phdr)) {
 8004258:	f64f 7cff 	movw	ip, #65535	; 0xffff
      check(res);
    }

    niffs_page_ix ipix;
    for (ipix = 0; ipix < fs->pages_per_sector; ipix++) {
      niffs_page_ix pix = _NIFFS_PIX_AT_SECTOR(fs, s) + ipix;
 800425c:	b2b6      	uxth	r6, r6
      niffs_page_hdr *phdr = (niffs_page_hdr *)_NIFFS_PIX_2_ADDR(fs, pix);
      if (_NIFFS_IS_FREE(phdr)) {
        fs->free_pages++;
      }
      else if (_NIFFS_IS_DELE(phdr) || !_NIFFS_IS_FLAG_VALID(phdr)) {
 800425e:	f64f 79fc 	movw	r9, #65532	; 0xfffc
      int res = niffs_erase_sector(fs, s);
      check(res);
    }

    niffs_page_ix ipix;
    for (ipix = 0; ipix < fs->pages_per_sector; ipix++) {
 8004262:	429a      	cmp	r2, r3
 8004264:	d327      	bcc.n	80042b6 <niffs_setup+0x112>
  // we allow one bad sector only would we lose power during erase of a sector
  if (bad_sectors > 1) {
    check(ERR_NIFFS_NOT_A_FILESYSTEM);
  }

  for (s = 0; s < fs->sectors; s++) {
 8004266:	3501      	adds	r5, #1
 8004268:	6863      	ldr	r3, [r4, #4]
 800426a:	429d      	cmp	r5, r3
 800426c:	d3e4      	bcc.n	8004238 <niffs_setup+0x94>
 800426e:	e046      	b.n	80042fe <niffs_setup+0x15a>
    niffs_sector_hdr *shdr = (niffs_sector_hdr *)_NIFFS_SECTOR_2_ADDR(fs, s);
    if (shdr->abra != _NIFFS_SECT_MAGIC(fs)) {
      NIFFS_DBG("check : erasing uninitialized sector %i\n", s);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	055a      	lsls	r2, r3, #21
 8004274:	d506      	bpl.n	8004284 <niffs_setup+0xe0>
 8004276:	f8d8 3000 	ldr.w	r3, [r8]
 800427a:	b91b      	cbnz	r3, 8004284 <niffs_setup+0xe0>
 800427c:	482a      	ldr	r0, [pc, #168]	; (8004328 <niffs_setup+0x184>)
 800427e:	4629      	mov	r1, r5
 8004280:	f004 ff8c 	bl	800919c <arcprint>
      int res = niffs_erase_sector(fs, s);
 8004284:	4620      	mov	r0, r4
 8004286:	4629      	mov	r1, r5
 8004288:	f7ff fdf6 	bl	8003e78 <niffs_erase_sector>
      check(res);
 800428c:	4606      	mov	r6, r0
 800428e:	2800      	cmp	r0, #0
 8004290:	d0de      	beq.n	8004250 <niffs_setup+0xac>
 8004292:	4b1f      	ldr	r3, [pc, #124]	; (8004310 <niffs_setup+0x16c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	055b      	lsls	r3, r3, #21
 8004298:	d535      	bpl.n	8004306 <niffs_setup+0x162>
 800429a:	4b1e      	ldr	r3, [pc, #120]	; (8004314 <niffs_setup+0x170>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d131      	bne.n	8004306 <niffs_setup+0x162>
 80042a2:	f240 73e4 	movw	r3, #2020	; 0x7e4
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	481b      	ldr	r0, [pc, #108]	; (8004318 <niffs_setup+0x174>)
 80042aa:	4631      	mov	r1, r6
 80042ac:	4a1c      	ldr	r2, [pc, #112]	; (8004320 <niffs_setup+0x17c>)
 80042ae:	4b1d      	ldr	r3, [pc, #116]	; (8004324 <niffs_setup+0x180>)
 80042b0:	f004 ff74 	bl	800919c <arcprint>
 80042b4:	e027      	b.n	8004306 <niffs_setup+0x162>
 80042b6:	1990      	adds	r0, r2, r6
    }

    niffs_page_ix ipix;
    for (ipix = 0; ipix < fs->pages_per_sector; ipix++) {
      niffs_page_ix pix = _NIFFS_PIX_AT_SECTOR(fs, s) + ipix;
      niffs_page_hdr *phdr = (niffs_page_hdr *)_NIFFS_PIX_2_ADDR(fs, pix);
 80042b8:	b280      	uxth	r0, r0
 80042ba:	fbb0 faf3 	udiv	sl, r0, r3
 80042be:	fb03 0b1a 	mls	fp, r3, sl, r0
 80042c2:	68e0      	ldr	r0, [r4, #12]
 80042c4:	68a1      	ldr	r1, [r4, #8]
 80042c6:	fb00 f00b 	mul.w	r0, r0, fp
 80042ca:	fb01 010a 	mla	r1, r1, sl, r0
 80042ce:	6820      	ldr	r0, [r4, #0]
 80042d0:	3104      	adds	r1, #4
 80042d2:	eb00 0a01 	add.w	sl, r0, r1
      if (_NIFFS_IS_FREE(phdr)) {
 80042d6:	5a41      	ldrh	r1, [r0, r1]
 80042d8:	4561      	cmp	r1, ip
 80042da:	d103      	bne.n	80042e4 <niffs_setup+0x140>
        fs->free_pages++;
 80042dc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80042de:	3101      	adds	r1, #1
 80042e0:	62a1      	str	r1, [r4, #40]	; 0x28
 80042e2:	e009      	b.n	80042f8 <niffs_setup+0x154>
      }
      else if (_NIFFS_IS_DELE(phdr) || !_NIFFS_IS_FLAG_VALID(phdr)) {
 80042e4:	b129      	cbz	r1, 80042f2 <niffs_setup+0x14e>
 80042e6:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 80042ea:	3902      	subs	r1, #2
 80042ec:	b289      	uxth	r1, r1
 80042ee:	4549      	cmp	r1, r9
 80042f0:	d802      	bhi.n	80042f8 <niffs_setup+0x154>
        fs->dele_pages++;
 80042f2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80042f4:	3101      	adds	r1, #1
 80042f6:	62e1      	str	r1, [r4, #44]	; 0x2c
      int res = niffs_erase_sector(fs, s);
      check(res);
    }

    niffs_page_ix ipix;
    for (ipix = 0; ipix < fs->pages_per_sector; ipix++) {
 80042f8:	3201      	adds	r2, #1
 80042fa:	b292      	uxth	r2, r2
 80042fc:	e7b1      	b.n	8004262 <niffs_setup+0xbe>
      else if (_NIFFS_IS_DELE(phdr) || !_NIFFS_IS_FLAG_VALID(phdr)) {
        fs->dele_pages++;
      }
    }
  }
  return NIFFS_OK;
 80042fe:	2000      	movs	r0, #0
 8004300:	e002      	b.n	8004308 <niffs_setup+0x164>
    fs->max_era = max_era;
  }

  // we allow one bad sector only would we lose power during erase of a sector
  if (bad_sectors > 1) {
    check(ERR_NIFFS_NOT_A_FILESYSTEM);
 8004302:	4806      	ldr	r0, [pc, #24]	; (800431c <niffs_setup+0x178>)
 8004304:	e000      	b.n	8004308 <niffs_setup+0x164>

  for (s = 0; s < fs->sectors; s++) {
    niffs_sector_hdr *shdr = (niffs_sector_hdr *)_NIFFS_SECTOR_2_ADDR(fs, s);
    if (shdr->abra != _NIFFS_SECT_MAGIC(fs)) {
      NIFFS_DBG("check : erasing uninitialized sector %i\n", s);
      int res = niffs_erase_sector(fs, s);
 8004306:	4630      	mov	r0, r6
        fs->dele_pages++;
      }
    }
  }
  return NIFFS_OK;
}
 8004308:	b003      	add	sp, #12
 800430a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800430e:	bf00      	nop
 8004310:	20004f80 	.word	0x20004f80
 8004314:	20004f84 	.word	0x20004f84
 8004318:	08010535 	.word	0x08010535
 800431c:	ffffd506 	.word	0xffffd506
 8004320:	0800e84d 	.word	0x0800e84d
 8004324:	0801054b 	.word	0x0801054b
 8004328:	08010790 	.word	0x08010790

0800432c <niffs_write_page>:
  check(res);

  return res;
}

TESTATIC int niffs_write_page(niffs *fs, niffs_page_ix pix, niffs_page_hdr *phdr, const u8_t *data, u32_t len) {
 800432c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004330:	4616      	mov	r6, r2
 8004332:	4604      	mov	r4, r0
 8004334:	460d      	mov	r5, r1
 8004336:	4699      	mov	r9, r3
  niffs_page_hdr *orig_phdr = (niffs_page_hdr *)_NIFFS_PIX_2_ADDR(fs, pix);
 8004338:	6801      	ldr	r1, [r0, #0]
 800433a:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800433e:	6a02      	ldr	r2, [r0, #32]
 8004340:	68c3      	ldr	r3, [r0, #12]

  int res = NIFFS_OK;
  if (phdr->id.obj_id == 0 || phdr->id.obj_id == (niffs_obj_id)-1) {
 8004342:	7870      	ldrb	r0, [r6, #1]
  check(res);

  return res;
}

TESTATIC int niffs_write_page(niffs *fs, niffs_page_ix pix, niffs_page_hdr *phdr, const u8_t *data, u32_t len) {
 8004344:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  niffs_page_hdr *orig_phdr = (niffs_page_hdr *)_NIFFS_PIX_2_ADDR(fs, pix);

  int res = NIFFS_OK;
  if (phdr->id.obj_id == 0 || phdr->id.obj_id == (niffs_obj_id)-1) {
 8004348:	3801      	subs	r0, #1
 800434a:	b2c0      	uxtb	r0, r0
 800434c:	28fd      	cmp	r0, #253	; 0xfd
 800434e:	4f59      	ldr	r7, [pc, #356]	; (80044b4 <niffs_write_page+0x188>)
 8004350:	d811      	bhi.n	8004376 <niffs_write_page+0x4a>

  return res;
}

TESTATIC int niffs_write_page(niffs *fs, niffs_page_ix pix, niffs_page_hdr *phdr, const u8_t *data, u32_t len) {
  niffs_page_hdr *orig_phdr = (niffs_page_hdr *)_NIFFS_PIX_2_ADDR(fs, pix);
 8004352:	fbb5 f0f2 	udiv	r0, r5, r2
 8004356:	fb02 5210 	mls	r2, r2, r0, r5
 800435a:	435a      	muls	r2, r3
 800435c:	fb0c 2200 	mla	r2, ip, r0, r2
 8004360:	3204      	adds	r2, #4
 8004362:	1888      	adds	r0, r1, r2

  int res = NIFFS_OK;
  if (phdr->id.obj_id == 0 || phdr->id.obj_id == (niffs_obj_id)-1) {
    res = ERR_NIFFS_WR_PHDR_BAD_ID;
  } else if (!_NIFFS_IS_FREE(orig_phdr) || !_NIFFS_IS_CLEA(orig_phdr)) {
 8004364:	5a8a      	ldrh	r2, [r1, r2]
 8004366:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800436a:	428a      	cmp	r2, r1
 800436c:	d105      	bne.n	800437a <niffs_write_page+0x4e>
 800436e:	8841      	ldrh	r1, [r0, #2]
 8004370:	4291      	cmp	r1, r2
 8004372:	d102      	bne.n	800437a <niffs_write_page+0x4e>
 8004374:	e00c      	b.n	8004390 <niffs_write_page+0x64>
TESTATIC int niffs_write_page(niffs *fs, niffs_page_ix pix, niffs_page_hdr *phdr, const u8_t *data, u32_t len) {
  niffs_page_hdr *orig_phdr = (niffs_page_hdr *)_NIFFS_PIX_2_ADDR(fs, pix);

  int res = NIFFS_OK;
  if (phdr->id.obj_id == 0 || phdr->id.obj_id == (niffs_obj_id)-1) {
    res = ERR_NIFFS_WR_PHDR_BAD_ID;
 8004376:	4c50      	ldr	r4, [pc, #320]	; (80044b8 <niffs_write_page+0x18c>)
 8004378:	e000      	b.n	800437c <niffs_write_page+0x50>
  } else if (!_NIFFS_IS_FREE(orig_phdr) || !_NIFFS_IS_CLEA(orig_phdr)) {
    res = ERR_NIFFS_WR_PHDR_UNFREE_PAGE;
 800437a:	4c50      	ldr	r4, [pc, #320]	; (80044bc <niffs_write_page+0x190>)
  }
  check(res);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	0558      	lsls	r0, r3, #21
 8004380:	d53e      	bpl.n	8004400 <niffs_write_page+0xd4>
 8004382:	4b4f      	ldr	r3, [pc, #316]	; (80044c0 <niffs_write_page+0x194>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d13a      	bne.n	8004400 <niffs_write_page+0xd4>
 800438a:	f240 136d 	movw	r3, #365	; 0x16d
 800438e:	e030      	b.n	80043f2 <niffs_write_page+0xc6>

  NIFFS_ASSERT(data == 0 || len <= _NIFFS_SPIX_2_PDATA_LEN(fs, 1));
 8004390:	f1b9 0f00 	cmp.w	r9, #0
 8004394:	d007      	beq.n	80043a6 <niffs_write_page+0x7a>
 8004396:	3b04      	subs	r3, #4
 8004398:	459a      	cmp	sl, r3
 800439a:	d904      	bls.n	80043a6 <niffs_write_page+0x7a>
 800439c:	4849      	ldr	r0, [pc, #292]	; (80044c4 <niffs_write_page+0x198>)
 800439e:	f240 116f 	movw	r1, #367	; 0x16f
 80043a2:	f7fc fa1d 	bl	80007e0 <SYS_assert>

  NIFFS_DBG("  writ: pix %04x %s oid:%04x spix:%i\n", pix, data ? "DATA":"NODATA", phdr->id.obj_id, phdr->id.spix);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	055b      	lsls	r3, r3, #21
 80043aa:	d42b      	bmi.n	8004404 <niffs_write_page+0xd8>

  if (!_NIFFS_IS_CLEA(phdr)) {
 80043ac:	8872      	ldrh	r2, [r6, #2]
 80043ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d139      	bne.n	800442a <niffs_write_page+0xfe>
    // first, write flag
    res = fs->hal_wr((u8_t *)_NIFFS_PIX_2_ADDR(fs, pix) + offsetof(niffs_page_hdr, flag), (u8_t *)&phdr->flag, sizeof(niffs_flag));
    check(res);
  }
  // .. data ..
  if (data) {
 80043b6:	f1b9 0f00 	cmp.w	r9, #0
 80043ba:	d153      	bne.n	8004464 <niffs_write_page+0x138>
    res = fs->hal_wr((u8_t *)_NIFFS_PIX_2_ADDR(fs, pix) + sizeof(niffs_page_hdr), data, len);
    check(res);
  }

  // .. then id
  res = fs->hal_wr((u8_t *)_NIFFS_PIX_2_ADDR(fs, pix) + offsetof(niffs_page_hdr, id), (u8_t *)&phdr->id, sizeof(niffs_page_hdr_id));
 80043bc:	6a22      	ldr	r2, [r4, #32]
 80043be:	68e0      	ldr	r0, [r4, #12]
 80043c0:	fbb5 f3f2 	udiv	r3, r5, r2
 80043c4:	fb02 5513 	mls	r5, r2, r3, r5
 80043c8:	4368      	muls	r0, r5
 80043ca:	68a1      	ldr	r1, [r4, #8]
 80043cc:	2202      	movs	r2, #2
 80043ce:	fb01 0303 	mla	r3, r1, r3, r0
 80043d2:	6820      	ldr	r0, [r4, #0]
 80043d4:	3304      	adds	r3, #4
 80043d6:	69a4      	ldr	r4, [r4, #24]
 80043d8:	4418      	add	r0, r3
 80043da:	4631      	mov	r1, r6
 80043dc:	47a0      	blx	r4
  check(res);
 80043de:	4604      	mov	r4, r0
 80043e0:	b170      	cbz	r0, 8004400 <niffs_write_page+0xd4>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	055d      	lsls	r5, r3, #21
 80043e6:	d50b      	bpl.n	8004400 <niffs_write_page+0xd4>
 80043e8:	4b35      	ldr	r3, [pc, #212]	; (80044c0 <niffs_write_page+0x194>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	b943      	cbnz	r3, 8004400 <niffs_write_page+0xd4>
 80043ee:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	4834      	ldr	r0, [pc, #208]	; (80044c8 <niffs_write_page+0x19c>)
 80043f6:	4621      	mov	r1, r4
 80043f8:	4a34      	ldr	r2, [pc, #208]	; (80044cc <niffs_write_page+0x1a0>)
 80043fa:	4b32      	ldr	r3, [pc, #200]	; (80044c4 <niffs_write_page+0x198>)
 80043fc:	f004 fece 	bl	800919c <arcprint>
 8004400:	4620      	mov	r0, r4
 8004402:	e053      	b.n	80044ac <niffs_write_page+0x180>
  }
  check(res);

  NIFFS_ASSERT(data == 0 || len <= _NIFFS_SPIX_2_PDATA_LEN(fs, 1));

  NIFFS_DBG("  writ: pix %04x %s oid:%04x spix:%i\n", pix, data ? "DATA":"NODATA", phdr->id.obj_id, phdr->id.spix);
 8004404:	4b2e      	ldr	r3, [pc, #184]	; (80044c0 <niffs_write_page+0x194>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1cf      	bne.n	80043ac <niffs_write_page+0x80>
 800440c:	7832      	ldrb	r2, [r6, #0]
 800440e:	7873      	ldrb	r3, [r6, #1]
 8004410:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 80044d8 <niffs_write_page+0x1ac>
 8004414:	9200      	str	r2, [sp, #0]
 8004416:	4a2e      	ldr	r2, [pc, #184]	; (80044d0 <niffs_write_page+0x1a4>)
 8004418:	482e      	ldr	r0, [pc, #184]	; (80044d4 <niffs_write_page+0x1a8>)
 800441a:	4629      	mov	r1, r5
 800441c:	f1b9 0f00 	cmp.w	r9, #0
 8004420:	bf08      	it	eq
 8004422:	4672      	moveq	r2, lr
 8004424:	f004 feba 	bl	800919c <arcprint>
 8004428:	e7c0      	b.n	80043ac <niffs_write_page+0x80>

  if (!_NIFFS_IS_CLEA(phdr)) {
    // first, write flag
    res = fs->hal_wr((u8_t *)_NIFFS_PIX_2_ADDR(fs, pix) + offsetof(niffs_page_hdr, flag), (u8_t *)&phdr->flag, sizeof(niffs_flag));
 800442a:	6a22      	ldr	r2, [r4, #32]
 800442c:	68e0      	ldr	r0, [r4, #12]
 800442e:	fbb5 f3f2 	udiv	r3, r5, r2
 8004432:	fb02 5213 	mls	r2, r2, r3, r5
 8004436:	4350      	muls	r0, r2
 8004438:	68a1      	ldr	r1, [r4, #8]
 800443a:	2202      	movs	r2, #2
 800443c:	fb01 0003 	mla	r0, r1, r3, r0
 8004440:	6821      	ldr	r1, [r4, #0]
 8004442:	3006      	adds	r0, #6
 8004444:	4408      	add	r0, r1
 8004446:	69a3      	ldr	r3, [r4, #24]
 8004448:	1cb1      	adds	r1, r6, #2
 800444a:	4798      	blx	r3
    check(res);
 800444c:	4680      	mov	r8, r0
 800444e:	2800      	cmp	r0, #0
 8004450:	d0b1      	beq.n	80043b6 <niffs_write_page+0x8a>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	055f      	lsls	r7, r3, #21
 8004456:	d528      	bpl.n	80044aa <niffs_write_page+0x17e>
 8004458:	4b19      	ldr	r3, [pc, #100]	; (80044c0 <niffs_write_page+0x194>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	bb2b      	cbnz	r3, 80044aa <niffs_write_page+0x17e>
 800445e:	f44f 73bb 	mov.w	r3, #374	; 0x176
 8004462:	e01b      	b.n	800449c <niffs_write_page+0x170>
  }
  // .. data ..
  if (data) {
    res = fs->hal_wr((u8_t *)_NIFFS_PIX_2_ADDR(fs, pix) + sizeof(niffs_page_hdr), data, len);
 8004464:	6a22      	ldr	r2, [r4, #32]
 8004466:	68e0      	ldr	r0, [r4, #12]
 8004468:	fbb5 f3f2 	udiv	r3, r5, r2
 800446c:	fb02 5213 	mls	r2, r2, r3, r5
 8004470:	4350      	muls	r0, r2
 8004472:	68a1      	ldr	r1, [r4, #8]
 8004474:	4652      	mov	r2, sl
 8004476:	fb01 0003 	mla	r0, r1, r3, r0
 800447a:	6821      	ldr	r1, [r4, #0]
 800447c:	3008      	adds	r0, #8
 800447e:	4408      	add	r0, r1
 8004480:	69a3      	ldr	r3, [r4, #24]
 8004482:	4649      	mov	r1, r9
 8004484:	4798      	blx	r3
    check(res);
 8004486:	4680      	mov	r8, r0
 8004488:	2800      	cmp	r0, #0
 800448a:	d097      	beq.n	80043bc <niffs_write_page+0x90>
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	055e      	lsls	r6, r3, #21
 8004490:	d50b      	bpl.n	80044aa <niffs_write_page+0x17e>
 8004492:	4b0b      	ldr	r3, [pc, #44]	; (80044c0 <niffs_write_page+0x194>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	b943      	cbnz	r3, 80044aa <niffs_write_page+0x17e>
 8004498:	f240 137b 	movw	r3, #379	; 0x17b
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	480a      	ldr	r0, [pc, #40]	; (80044c8 <niffs_write_page+0x19c>)
 80044a0:	4641      	mov	r1, r8
 80044a2:	4a0a      	ldr	r2, [pc, #40]	; (80044cc <niffs_write_page+0x1a0>)
 80044a4:	4b07      	ldr	r3, [pc, #28]	; (80044c4 <niffs_write_page+0x198>)
 80044a6:	f004 fe79 	bl	800919c <arcprint>
 80044aa:	4640      	mov	r0, r8
  // .. then id
  res = fs->hal_wr((u8_t *)_NIFFS_PIX_2_ADDR(fs, pix) + offsetof(niffs_page_hdr, id), (u8_t *)&phdr->id, sizeof(niffs_page_hdr_id));
  check(res);

  return res;
}
 80044ac:	b002      	add	sp, #8
 80044ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044b2:	bf00      	nop
 80044b4:	20004f80 	.word	0x20004f80
 80044b8:	ffffd4f8 	.word	0xffffd4f8
 80044bc:	ffffd4f9 	.word	0xffffd4f9
 80044c0:	20004f84 	.word	0x20004f84
 80044c4:	0801054b 	.word	0x0801054b
 80044c8:	08010535 	.word	0x08010535
 80044cc:	0800e859 	.word	0x0800e859
 80044d0:	080107bb 	.word	0x080107bb
 80044d4:	080107c0 	.word	0x080107c0
 80044d8:	080107b9 	.word	0x080107b9

080044dc <niffs_map_obj_hdr_ids_v>:
/////////////////////////////////// CHECK ////////////////////////////////////

static int niffs_map_obj_hdr_ids_v(niffs *fs, niffs_page_ix pix, niffs_page_hdr *phdr, void *v_arg) {
  (void)pix;
  (void)v_arg;
  if (_NIFFS_IS_FLAG_VALID(phdr) && !_NIFFS_IS_FREE(phdr) && !_NIFFS_IS_DELE(phdr)) {
 80044dc:	8851      	ldrh	r1, [r2, #2]
 80044de:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80044e2:	3902      	subs	r1, #2
 80044e4:	b289      	uxth	r1, r1
 80044e6:	4299      	cmp	r1, r3
 80044e8:	d91b      	bls.n	8004522 <niffs_map_obj_hdr_ids_v+0x46>
 80044ea:	8811      	ldrh	r1, [r2, #0]
 80044ec:	3301      	adds	r3, #1
 80044ee:	3901      	subs	r1, #1
 80044f0:	b289      	uxth	r1, r1
 80044f2:	4299      	cmp	r1, r3
 80044f4:	d815      	bhi.n	8004522 <niffs_map_obj_hdr_ids_v+0x46>
    if (phdr->id.spix == 0) {
 80044f6:	7813      	ldrb	r3, [r2, #0]
 80044f8:	b99b      	cbnz	r3, 8004522 <niffs_map_obj_hdr_ids_v+0x46>
      // object header page
      niffs_object_hdr *ohdr = (niffs_object_hdr *)phdr;
      if (ohdr->len != NIFFS_UNDEF_LEN && ohdr->len > 0 && ohdr->type != _NIFFS_FTYPE_LINFILE) {
 80044fa:	6853      	ldr	r3, [r2, #4]
 80044fc:	3b01      	subs	r3, #1
 80044fe:	3303      	adds	r3, #3
 8004500:	d80f      	bhi.n	8004522 <niffs_map_obj_hdr_ids_v+0x46>
 8004502:	7e13      	ldrb	r3, [r2, #24]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d00c      	beq.n	8004522 <niffs_map_obj_hdr_ids_v+0x46>
        // Only mark those having a defined length > 0, this way we will remove all unfinished appends
        // to clean file and unfinished deletions.
        // Linear files are not examined, as corresponding data does not reside amongst pages
        // but in a different area.
        niffs_obj_id oid = phdr->id.obj_id;
 8004508:	7851      	ldrb	r1, [r2, #1]
        --oid;
        fs->buf[oid/8] |= 1<<(oid&7);
 800450a:	6902      	ldr	r2, [r0, #16]
        // Only mark those having a defined length > 0, this way we will remove all unfinished appends
        // to clean file and unfinished deletions.
        // Linear files are not examined, as corresponding data does not reside amongst pages
        // but in a different area.
        niffs_obj_id oid = phdr->id.obj_id;
        --oid;
 800450c:	3901      	subs	r1, #1
 800450e:	b2c9      	uxtb	r1, r1
        fs->buf[oid/8] |= 1<<(oid&7);
 8004510:	08cb      	lsrs	r3, r1, #3
 8004512:	2001      	movs	r0, #1
 8004514:	f001 0107 	and.w	r1, r1, #7
 8004518:	fa00 f101 	lsl.w	r1, r0, r1
 800451c:	5cd0      	ldrb	r0, [r2, r3]
 800451e:	4301      	orrs	r1, r0
 8004520:	54d1      	strb	r1, [r2, r3]
      }
    }
  }
  return NIFFS_VIS_CONT;
}
 8004522:	2001      	movs	r0, #1
 8004524:	4770      	bx	lr

08004526 <niffs_chk_movi_objhdr_pages_tidy_v>:
    }
  }
  return NIFFS_VIS_CONT;
}

static int niffs_chk_movi_objhdr_pages_tidy_v(niffs *fs, niffs_page_ix pix, niffs_page_hdr *phdr, void *v_arg) {
 8004526:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004528:	4607      	mov	r7, r0
  niffs_chk_movi_objhdr_tidy_arg *t_arg = (niffs_chk_movi_objhdr_tidy_arg *)v_arg;
  int res;
  if (_NIFFS_IS_FLAG_VALID(phdr) && !_NIFFS_IS_FREE(phdr) && !_NIFFS_IS_DELE(phdr)) {
 800452a:	8850      	ldrh	r0, [r2, #2]
    }
  }
  return NIFFS_VIS_CONT;
}

static int niffs_chk_movi_objhdr_pages_tidy_v(niffs *fs, niffs_page_ix pix, niffs_page_hdr *phdr, void *v_arg) {
 800452c:	461c      	mov	r4, r3
  niffs_chk_movi_objhdr_tidy_arg *t_arg = (niffs_chk_movi_objhdr_tidy_arg *)v_arg;
  int res;
  if (_NIFFS_IS_FLAG_VALID(phdr) && !_NIFFS_IS_FREE(phdr) && !_NIFFS_IS_DELE(phdr)) {
 800452e:	3802      	subs	r0, #2
 8004530:	b280      	uxth	r0, r0
 8004532:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8004536:	4298      	cmp	r0, r3
    }
  }
  return NIFFS_VIS_CONT;
}

static int niffs_chk_movi_objhdr_pages_tidy_v(niffs *fs, niffs_page_ix pix, niffs_page_hdr *phdr, void *v_arg) {
 8004538:	460e      	mov	r6, r1
  niffs_chk_movi_objhdr_tidy_arg *t_arg = (niffs_chk_movi_objhdr_tidy_arg *)v_arg;
  int res;
  if (_NIFFS_IS_FLAG_VALID(phdr) && !_NIFFS_IS_FREE(phdr) && !_NIFFS_IS_DELE(phdr)) {
 800453a:	d931      	bls.n	80045a0 <niffs_chk_movi_objhdr_pages_tidy_v+0x7a>
 800453c:	8810      	ldrh	r0, [r2, #0]
 800453e:	3301      	adds	r3, #1
 8004540:	3801      	subs	r0, #1
 8004542:	b280      	uxth	r0, r0
 8004544:	4298      	cmp	r0, r3
 8004546:	d82b      	bhi.n	80045a0 <niffs_chk_movi_objhdr_pages_tidy_v+0x7a>
    if (phdr->id.spix > 0 && phdr->id.spix > t_arg->gt_spix && phdr->id.obj_id == t_arg->oid) {
 8004548:	7813      	ldrb	r3, [r2, #0]
 800454a:	b34b      	cbz	r3, 80045a0 <niffs_chk_movi_objhdr_pages_tidy_v+0x7a>
 800454c:	7860      	ldrb	r0, [r4, #1]
 800454e:	4298      	cmp	r0, r3
 8004550:	d226      	bcs.n	80045a0 <niffs_chk_movi_objhdr_pages_tidy_v+0x7a>
 8004552:	7850      	ldrb	r0, [r2, #1]
 8004554:	7822      	ldrb	r2, [r4, #0]
 8004556:	4282      	cmp	r2, r0
 8004558:	d122      	bne.n	80045a0 <niffs_chk_movi_objhdr_pages_tidy_v+0x7a>
      NIFFS_DBG("  chck: pix %04x found MOVI obj hdr oid:%04x spix:%i delete\n", pix, phdr->id.obj_id, phdr->id.spix);
 800455a:	4c13      	ldr	r4, [pc, #76]	; (80045a8 <niffs_chk_movi_objhdr_pages_tidy_v+0x82>)
 800455c:	6820      	ldr	r0, [r4, #0]
 800455e:	4625      	mov	r5, r4
 8004560:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8004564:	d005      	beq.n	8004572 <niffs_chk_movi_objhdr_pages_tidy_v+0x4c>
 8004566:	4811      	ldr	r0, [pc, #68]	; (80045ac <niffs_chk_movi_objhdr_pages_tidy_v+0x86>)
 8004568:	6800      	ldr	r0, [r0, #0]
 800456a:	b910      	cbnz	r0, 8004572 <niffs_chk_movi_objhdr_pages_tidy_v+0x4c>
 800456c:	4810      	ldr	r0, [pc, #64]	; (80045b0 <niffs_chk_movi_objhdr_pages_tidy_v+0x8a>)
 800456e:	f004 fe15 	bl	800919c <arcprint>
      res = niffs_delete_page(fs, pix);
 8004572:	4638      	mov	r0, r7
 8004574:	4631      	mov	r1, r6
 8004576:	f7ff f9be 	bl	80038f6 <niffs_delete_page>
      check(res);
 800457a:	4604      	mov	r4, r0
 800457c:	b180      	cbz	r0, 80045a0 <niffs_chk_movi_objhdr_pages_tidy_v+0x7a>
 800457e:	682b      	ldr	r3, [r5, #0]
 8004580:	055a      	lsls	r2, r3, #21
 8004582:	d50b      	bpl.n	800459c <niffs_chk_movi_objhdr_pages_tidy_v+0x76>
 8004584:	4b09      	ldr	r3, [pc, #36]	; (80045ac <niffs_chk_movi_objhdr_pages_tidy_v+0x86>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	b943      	cbnz	r3, 800459c <niffs_chk_movi_objhdr_pages_tidy_v+0x76>
 800458a:	f240 63eb 	movw	r3, #1771	; 0x6eb
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	4808      	ldr	r0, [pc, #32]	; (80045b4 <niffs_chk_movi_objhdr_pages_tidy_v+0x8e>)
 8004592:	4621      	mov	r1, r4
 8004594:	4a08      	ldr	r2, [pc, #32]	; (80045b8 <niffs_chk_movi_objhdr_pages_tidy_v+0x92>)
 8004596:	4b09      	ldr	r3, [pc, #36]	; (80045bc <niffs_chk_movi_objhdr_pages_tidy_v+0x96>)
 8004598:	f004 fe00 	bl	800919c <arcprint>
 800459c:	4620      	mov	r0, r4
 800459e:	e000      	b.n	80045a2 <niffs_chk_movi_objhdr_pages_tidy_v+0x7c>
    }
  }
  return NIFFS_VIS_CONT;
 80045a0:	2001      	movs	r0, #1
}
 80045a2:	b003      	add	sp, #12
 80045a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045a6:	bf00      	nop
 80045a8:	20004f80 	.word	0x20004f80
 80045ac:	20004f84 	.word	0x20004f84
 80045b0:	080107e6 	.word	0x080107e6
 80045b4:	08010535 	.word	0x08010535
 80045b8:	0800e86a 	.word	0x0800e86a
 80045bc:	0801054b 	.word	0x0801054b

080045c0 <niffs_find_page_v>:
  niffs_page_ix pix_mov;
  niffs_obj_id oid;
  niffs_span_ix spix;
} niffs_find_page_arg;

static int niffs_find_page_v(niffs *fs, niffs_page_ix pix, niffs_page_hdr *phdr, void *v_arg) {
 80045c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045c2:	4616      	mov	r6, r2
  niffs_find_page_arg *arg = (niffs_find_page_arg *)v_arg;
  if (_NIFFS_IS_FLAG_VALID(phdr) && !_NIFFS_IS_FREE(phdr) && !_NIFFS_IS_DELE(phdr) &&
 80045c4:	8852      	ldrh	r2, [r2, #2]
  niffs_page_ix pix_mov;
  niffs_obj_id oid;
  niffs_span_ix spix;
} niffs_find_page_arg;

static int niffs_find_page_v(niffs *fs, niffs_page_ix pix, niffs_page_hdr *phdr, void *v_arg) {
 80045c6:	461c      	mov	r4, r3
  niffs_find_page_arg *arg = (niffs_find_page_arg *)v_arg;
  if (_NIFFS_IS_FLAG_VALID(phdr) && !_NIFFS_IS_FREE(phdr) && !_NIFFS_IS_DELE(phdr) &&
 80045c8:	3a02      	subs	r2, #2
 80045ca:	b292      	uxth	r2, r2
 80045cc:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80045d0:	429a      	cmp	r2, r3
  niffs_page_ix pix_mov;
  niffs_obj_id oid;
  niffs_span_ix spix;
} niffs_find_page_arg;

static int niffs_find_page_v(niffs *fs, niffs_page_ix pix, niffs_page_hdr *phdr, void *v_arg) {
 80045d2:	460f      	mov	r7, r1
  niffs_find_page_arg *arg = (niffs_find_page_arg *)v_arg;
  if (_NIFFS_IS_FLAG_VALID(phdr) && !_NIFFS_IS_FREE(phdr) && !_NIFFS_IS_DELE(phdr) &&
 80045d4:	d930      	bls.n	8004638 <niffs_find_page_v+0x78>
 80045d6:	8832      	ldrh	r2, [r6, #0]
 80045d8:	3301      	adds	r3, #1
 80045da:	3a01      	subs	r2, #1
 80045dc:	b292      	uxth	r2, r2
 80045de:	429a      	cmp	r2, r3
 80045e0:	d82a      	bhi.n	8004638 <niffs_find_page_v+0x78>
 80045e2:	7872      	ldrb	r2, [r6, #1]
 80045e4:	79a3      	ldrb	r3, [r4, #6]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d126      	bne.n	8004638 <niffs_find_page_v+0x78>
      phdr->id.obj_id == arg->oid && phdr->id.spix == arg->spix) {
 80045ea:	7832      	ldrb	r2, [r6, #0]
 80045ec:	79e3      	ldrb	r3, [r4, #7]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d122      	bne.n	8004638 <niffs_find_page_v+0x78>
    if (arg->mov_found) {
 80045f2:	78a3      	ldrb	r3, [r4, #2]
 80045f4:	b1ab      	cbz	r3, 8004622 <niffs_find_page_v+0x62>
      // had a previous moving page - delete this
      int res = niffs_delete_page(fs, arg->pix_mov);
 80045f6:	88a1      	ldrh	r1, [r4, #4]
 80045f8:	f7ff f97d 	bl	80038f6 <niffs_delete_page>
      check(res);
 80045fc:	4605      	mov	r5, r0
 80045fe:	b178      	cbz	r0, 8004620 <niffs_find_page_v+0x60>
 8004600:	4b0f      	ldr	r3, [pc, #60]	; (8004640 <niffs_find_page_v+0x80>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	0559      	lsls	r1, r3, #21
 8004606:	d515      	bpl.n	8004634 <niffs_find_page_v+0x74>
 8004608:	4b0e      	ldr	r3, [pc, #56]	; (8004644 <niffs_find_page_v+0x84>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	b993      	cbnz	r3, 8004634 <niffs_find_page_v+0x74>
 800460e:	23da      	movs	r3, #218	; 0xda
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	480d      	ldr	r0, [pc, #52]	; (8004648 <niffs_find_page_v+0x88>)
 8004614:	4629      	mov	r1, r5
 8004616:	4a0d      	ldr	r2, [pc, #52]	; (800464c <niffs_find_page_v+0x8c>)
 8004618:	4b0d      	ldr	r3, [pc, #52]	; (8004650 <niffs_find_page_v+0x90>)
 800461a:	f004 fdbf 	bl	800919c <arcprint>
 800461e:	e009      	b.n	8004634 <niffs_find_page_v+0x74>
      arg->mov_found = 0;
 8004620:	70a0      	strb	r0, [r4, #2]
    }

    if (_NIFFS_IS_MOVI(phdr)) {
 8004622:	8873      	ldrh	r3, [r6, #2]
 8004624:	b91b      	cbnz	r3, 800462e <niffs_find_page_v+0x6e>
      arg->mov_found = 1;
 8004626:	2001      	movs	r0, #1
 8004628:	70a0      	strb	r0, [r4, #2]
      arg->pix_mov = pix;
 800462a:	80a7      	strh	r7, [r4, #4]
 800462c:	e005      	b.n	800463a <niffs_find_page_v+0x7a>
      return NIFFS_VIS_CONT;
    } else {
      arg->pix = pix;
 800462e:	8027      	strh	r7, [r4, #0]
      return NIFFS_OK;
 8004630:	2000      	movs	r0, #0
 8004632:	e002      	b.n	800463a <niffs_find_page_v+0x7a>
  if (_NIFFS_IS_FLAG_VALID(phdr) && !_NIFFS_IS_FREE(phdr) && !_NIFFS_IS_DELE(phdr) &&
      phdr->id.obj_id == arg->oid && phdr->id.spix == arg->spix) {
    if (arg->mov_found) {
      // had a previous moving page - delete this
      int res = niffs_delete_page(fs, arg->pix_mov);
      check(res);
 8004634:	4628      	mov	r0, r5
 8004636:	e000      	b.n	800463a <niffs_find_page_v+0x7a>
    } else {
      arg->pix = pix;
      return NIFFS_OK;
    }
  }
  return NIFFS_VIS_CONT;
 8004638:	2001      	movs	r0, #1
}
 800463a:	b003      	add	sp, #12
 800463c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800463e:	bf00      	nop
 8004640:	20004f80 	.word	0x20004f80
 8004644:	20004f84 	.word	0x20004f84
 8004648:	08010535 	.word	0x08010535
 800464c:	0800e88d 	.word	0x0800e88d
 8004650:	0801054b 	.word	0x0801054b

08004654 <niffs_remove_obj_id_v>:
typedef struct {
  niffs_obj_id oid;
  niffs_span_ix ge_spix;
} niffs_remove_obj_id_arg;

static int niffs_remove_obj_id_v(niffs *fs, niffs_page_ix pix, niffs_page_hdr *phdr, void *v_arg) {
 8004654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!_NIFFS_IS_FREE(phdr) && !_NIFFS_IS_DELE(phdr)) {
 8004656:	8814      	ldrh	r4, [r2, #0]
typedef struct {
  niffs_obj_id oid;
  niffs_span_ix ge_spix;
} niffs_remove_obj_id_arg;

static int niffs_remove_obj_id_v(niffs *fs, niffs_page_ix pix, niffs_page_hdr *phdr, void *v_arg) {
 8004658:	4615      	mov	r5, r2
  if (!_NIFFS_IS_FREE(phdr) && !_NIFFS_IS_DELE(phdr)) {
 800465a:	3c01      	subs	r4, #1
 800465c:	b2a4      	uxth	r4, r4
 800465e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8004662:	4294      	cmp	r4, r2
typedef struct {
  niffs_obj_id oid;
  niffs_span_ix ge_spix;
} niffs_remove_obj_id_arg;

static int niffs_remove_obj_id_v(niffs *fs, niffs_page_ix pix, niffs_page_hdr *phdr, void *v_arg) {
 8004664:	460f      	mov	r7, r1
  if (!_NIFFS_IS_FREE(phdr) && !_NIFFS_IS_DELE(phdr)) {
 8004666:	d82c      	bhi.n	80046c2 <niffs_remove_obj_id_v+0x6e>
    niffs_remove_obj_id_arg *arg = (niffs_remove_obj_id_arg *)v_arg;
    if (phdr->id.obj_id == arg->oid && phdr->id.spix >= arg->ge_spix) {
 8004668:	786c      	ldrb	r4, [r5, #1]
 800466a:	781a      	ldrb	r2, [r3, #0]
 800466c:	4294      	cmp	r4, r2
 800466e:	d128      	bne.n	80046c2 <niffs_remove_obj_id_v+0x6e>
 8004670:	782a      	ldrb	r2, [r5, #0]
 8004672:	785b      	ldrb	r3, [r3, #1]
 8004674:	429a      	cmp	r2, r3
 8004676:	d324      	bcc.n	80046c2 <niffs_remove_obj_id_v+0x6e>
      int res = niffs_delete_page(fs, pix);
 8004678:	f7ff f93d 	bl	80038f6 <niffs_delete_page>
      if (res != NIFFS_OK) {
 800467c:	4604      	mov	r4, r0
 800467e:	b300      	cbz	r0, 80046c2 <niffs_remove_obj_id_v+0x6e>
        NIFFS_DBG("trunc  warn: pix %04x could not delete when trunc %04x/%04x : %i\n", pix, phdr->id.obj_id, phdr->id.spix, res);
 8004680:	4b11      	ldr	r3, [pc, #68]	; (80046c8 <niffs_remove_obj_id_v+0x74>)
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	461e      	mov	r6, r3
 8004686:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800468a:	d009      	beq.n	80046a0 <niffs_remove_obj_id_v+0x4c>
 800468c:	4b0f      	ldr	r3, [pc, #60]	; (80046cc <niffs_remove_obj_id_v+0x78>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	b933      	cbnz	r3, 80046a0 <niffs_remove_obj_id_v+0x4c>
 8004692:	9000      	str	r0, [sp, #0]
 8004694:	786a      	ldrb	r2, [r5, #1]
 8004696:	782b      	ldrb	r3, [r5, #0]
 8004698:	480d      	ldr	r0, [pc, #52]	; (80046d0 <niffs_remove_obj_id_v+0x7c>)
 800469a:	4639      	mov	r1, r7
 800469c:	f004 fd7e 	bl	800919c <arcprint>
        check(res);
 80046a0:	6833      	ldr	r3, [r6, #0]
 80046a2:	0558      	lsls	r0, r3, #21
 80046a4:	d50b      	bpl.n	80046be <niffs_remove_obj_id_v+0x6a>
 80046a6:	4b09      	ldr	r3, [pc, #36]	; (80046cc <niffs_remove_obj_id_v+0x78>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	b943      	cbnz	r3, 80046be <niffs_remove_obj_id_v+0x6a>
 80046ac:	f240 43c3 	movw	r3, #1219	; 0x4c3
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	4808      	ldr	r0, [pc, #32]	; (80046d4 <niffs_remove_obj_id_v+0x80>)
 80046b4:	4621      	mov	r1, r4
 80046b6:	4a08      	ldr	r2, [pc, #32]	; (80046d8 <niffs_remove_obj_id_v+0x84>)
 80046b8:	4b08      	ldr	r3, [pc, #32]	; (80046dc <niffs_remove_obj_id_v+0x88>)
 80046ba:	f004 fd6f 	bl	800919c <arcprint>
 80046be:	4620      	mov	r0, r4
 80046c0:	e000      	b.n	80046c4 <niffs_remove_obj_id_v+0x70>
      }
    }
  }
  return NIFFS_VIS_CONT;
 80046c2:	2001      	movs	r0, #1
}
 80046c4:	b003      	add	sp, #12
 80046c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046c8:	20004f80 	.word	0x20004f80
 80046cc:	20004f84 	.word	0x20004f84
 80046d0:	08010823 	.word	0x08010823
 80046d4:	08010535 	.word	0x08010535
 80046d8:	0800e89f 	.word	0x0800e89f
 80046dc:	0801054b 	.word	0x0801054b

080046e0 <niffs_find_duplicate_obj_hdr_ids_v>:
    }
  }
  return res;
}

static int niffs_find_duplicate_obj_hdr_ids_v(niffs *fs, niffs_page_ix pix, niffs_page_hdr *phdr, void *v_arg) {
 80046e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80046e4:	4604      	mov	r4, r0
  (void)pix;
  (void)v_arg;
  if (_NIFFS_IS_FLAG_VALID(phdr) && !_NIFFS_IS_FREE(phdr) && !_NIFFS_IS_DELE(phdr)) {
 80046e6:	8850      	ldrh	r0, [r2, #2]
 80046e8:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80046ec:	3802      	subs	r0, #2
 80046ee:	b280      	uxth	r0, r0
 80046f0:	4298      	cmp	r0, r3
    }
  }
  return res;
}

static int niffs_find_duplicate_obj_hdr_ids_v(niffs *fs, niffs_page_ix pix, niffs_page_hdr *phdr, void *v_arg) {
 80046f2:	4688      	mov	r8, r1
  (void)pix;
  (void)v_arg;
  if (_NIFFS_IS_FLAG_VALID(phdr) && !_NIFFS_IS_FREE(phdr) && !_NIFFS_IS_DELE(phdr)) {
 80046f4:	d942      	bls.n	800477c <niffs_find_duplicate_obj_hdr_ids_v+0x9c>
 80046f6:	8810      	ldrh	r0, [r2, #0]
 80046f8:	3301      	adds	r3, #1
 80046fa:	3801      	subs	r0, #1
 80046fc:	b280      	uxth	r0, r0
 80046fe:	4298      	cmp	r0, r3
 8004700:	d83c      	bhi.n	800477c <niffs_find_duplicate_obj_hdr_ids_v+0x9c>
    if (phdr->id.spix == 0) {
 8004702:	7813      	ldrb	r3, [r2, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d139      	bne.n	800477c <niffs_find_duplicate_obj_hdr_ids_v+0x9c>
      // object header page
      niffs_object_hdr *ohdr = (niffs_object_hdr *)phdr;
      if (ohdr->len != NIFFS_UNDEF_LEN && ohdr->len > 0) {
 8004708:	6853      	ldr	r3, [r2, #4]
 800470a:	3b01      	subs	r3, #1
 800470c:	3303      	adds	r3, #3
 800470e:	d835      	bhi.n	800477c <niffs_find_duplicate_obj_hdr_ids_v+0x9c>
        // only mark those having a defined length > 0, this way we will remove all unfinished appends
        // to clean file and unfinished deletions
        niffs_obj_id oid = phdr->id.obj_id;
 8004710:	7852      	ldrb	r2, [r2, #1]
        --oid;
        if (fs->buf[oid/8] & 1<<(oid&7)) {
 8004712:	6925      	ldr	r5, [r4, #16]
      niffs_object_hdr *ohdr = (niffs_object_hdr *)phdr;
      if (ohdr->len != NIFFS_UNDEF_LEN && ohdr->len > 0) {
        // only mark those having a defined length > 0, this way we will remove all unfinished appends
        // to clean file and unfinished deletions
        niffs_obj_id oid = phdr->id.obj_id;
        --oid;
 8004714:	1e57      	subs	r7, r2, #1
 8004716:	b2ff      	uxtb	r7, r7
        if (fs->buf[oid/8] & 1<<(oid&7)) {
 8004718:	08fb      	lsrs	r3, r7, #3
 800471a:	5cee      	ldrb	r6, [r5, r3]
 800471c:	f007 0707 	and.w	r7, r7, #7
 8004720:	fa46 f007 	asr.w	r0, r6, r7
 8004724:	07c0      	lsls	r0, r0, #31
 8004726:	d521      	bpl.n	800476c <niffs_find_duplicate_obj_hdr_ids_v+0x8c>
          // id found before, got duplicate
          NIFFS_DBG("  chck: pix %04x found duplicate obj hdr oid:%04x delete\n", pix, phdr->id.obj_id);
 8004728:	4b16      	ldr	r3, [pc, #88]	; (8004784 <niffs_find_duplicate_obj_hdr_ids_v+0xa4>)
 800472a:	6818      	ldr	r0, [r3, #0]
 800472c:	461d      	mov	r5, r3
 800472e:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8004732:	d005      	beq.n	8004740 <niffs_find_duplicate_obj_hdr_ids_v+0x60>
 8004734:	4b14      	ldr	r3, [pc, #80]	; (8004788 <niffs_find_duplicate_obj_hdr_ids_v+0xa8>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	b913      	cbnz	r3, 8004740 <niffs_find_duplicate_obj_hdr_ids_v+0x60>
 800473a:	4814      	ldr	r0, [pc, #80]	; (800478c <niffs_find_duplicate_obj_hdr_ids_v+0xac>)
 800473c:	f004 fd2e 	bl	800919c <arcprint>
          int res = niffs_delete_page(fs, pix);
 8004740:	4620      	mov	r0, r4
 8004742:	4641      	mov	r1, r8
 8004744:	f7ff f8d7 	bl	80038f6 <niffs_delete_page>
          check(res);
 8004748:	4604      	mov	r4, r0
 800474a:	b1b8      	cbz	r0, 800477c <niffs_find_duplicate_obj_hdr_ids_v+0x9c>
 800474c:	682b      	ldr	r3, [r5, #0]
 800474e:	055d      	lsls	r5, r3, #21
 8004750:	d512      	bpl.n	8004778 <niffs_find_duplicate_obj_hdr_ids_v+0x98>
 8004752:	4b0d      	ldr	r3, [pc, #52]	; (8004788 <niffs_find_duplicate_obj_hdr_ids_v+0xa8>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	b97b      	cbnz	r3, 8004778 <niffs_find_duplicate_obj_hdr_ids_v+0x98>
 8004758:	f240 7345 	movw	r3, #1861	; 0x745
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	480c      	ldr	r0, [pc, #48]	; (8004790 <niffs_find_duplicate_obj_hdr_ids_v+0xb0>)
 8004760:	4621      	mov	r1, r4
 8004762:	4a0c      	ldr	r2, [pc, #48]	; (8004794 <niffs_find_duplicate_obj_hdr_ids_v+0xb4>)
 8004764:	4b0c      	ldr	r3, [pc, #48]	; (8004798 <niffs_find_duplicate_obj_hdr_ids_v+0xb8>)
 8004766:	f004 fd19 	bl	800919c <arcprint>
 800476a:	e005      	b.n	8004778 <niffs_find_duplicate_obj_hdr_ids_v+0x98>

        } else {
          // id not found, mark it
          fs->buf[oid/8] |= 1<<(oid&7);
 800476c:	2001      	movs	r0, #1
 800476e:	fa00 f707 	lsl.w	r7, r0, r7
 8004772:	433e      	orrs	r6, r7
 8004774:	54ee      	strb	r6, [r5, r3]
 8004776:	e002      	b.n	800477e <niffs_find_duplicate_obj_hdr_ids_v+0x9e>
        --oid;
        if (fs->buf[oid/8] & 1<<(oid&7)) {
          // id found before, got duplicate
          NIFFS_DBG("  chck: pix %04x found duplicate obj hdr oid:%04x delete\n", pix, phdr->id.obj_id);
          int res = niffs_delete_page(fs, pix);
          check(res);
 8004778:	4620      	mov	r0, r4
 800477a:	e000      	b.n	800477e <niffs_find_duplicate_obj_hdr_ids_v+0x9e>
          fs->buf[oid/8] |= 1<<(oid&7);
        }
      }
    }
  }
  return NIFFS_VIS_CONT;
 800477c:	2001      	movs	r0, #1
}
 800477e:	b002      	add	sp, #8
 8004780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004784:	20004f80 	.word	0x20004f80
 8004788:	20004f84 	.word	0x20004f84
 800478c:	08010865 	.word	0x08010865
 8004790:	08010535 	.word	0x08010535
 8004794:	0800e8b5 	.word	0x0800e8b5
 8004798:	0801054b 	.word	0x0801054b

0800479c <niffs_chk_movi_objhdr_pages_v>:
typedef struct {
  niffs_obj_id oid;
  niffs_span_ix gt_spix;
} niffs_chk_movi_objhdr_tidy_arg;

static int niffs_chk_movi_objhdr_pages_v(niffs *fs, niffs_page_ix pix, niffs_page_hdr *phdr, void *v_arg) {
 800479c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479e:	460d      	mov	r5, r1
  niffs_chk_movi_objhdr_arg *arg = (niffs_chk_movi_objhdr_arg *)v_arg;

  if (!_NIFFS_IS_FREE(phdr) && !_NIFFS_IS_DELE(phdr) && _NIFFS_IS_MOVI(phdr)) {
 80047a0:	8811      	ldrh	r1, [r2, #0]
typedef struct {
  niffs_obj_id oid;
  niffs_span_ix gt_spix;
} niffs_chk_movi_objhdr_tidy_arg;

static int niffs_chk_movi_objhdr_pages_v(niffs *fs, niffs_page_ix pix, niffs_page_hdr *phdr, void *v_arg) {
 80047a2:	461c      	mov	r4, r3
  niffs_chk_movi_objhdr_arg *arg = (niffs_chk_movi_objhdr_arg *)v_arg;

  if (!_NIFFS_IS_FREE(phdr) && !_NIFFS_IS_DELE(phdr) && _NIFFS_IS_MOVI(phdr)) {
 80047a4:	3901      	subs	r1, #1
 80047a6:	b289      	uxth	r1, r1
 80047a8:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 80047ac:	4299      	cmp	r1, r3
 80047ae:	d837      	bhi.n	8004820 <niffs_chk_movi_objhdr_pages_v+0x84>
 80047b0:	8853      	ldrh	r3, [r2, #2]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d134      	bne.n	8004820 <niffs_chk_movi_objhdr_pages_v+0x84>
    if (phdr->id.spix == 0) {
 80047b6:	7813      	ldrb	r3, [r2, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d131      	bne.n	8004820 <niffs_chk_movi_objhdr_pages_v+0x84>
      niffs_object_hdr *ohdr = (niffs_object_hdr *)phdr;
      niffs_page_ix *log = (niffs_page_ix *)fs->buf;
      log[arg->ix] = pix;
 80047bc:	6903      	ldr	r3, [r0, #16]
 80047be:	6821      	ldr	r1, [r4, #0]
      (void)ohdr;
      NIFFS_DBG("  chck: pix %04x register MOVI obj hdr oid:%04x max_spix:%i\n", pix, phdr->id.obj_id, (int)_NIFFS_OFFS_2_SPIX(fs, ohdr->len));
 80047c0:	4e18      	ldr	r6, [pc, #96]	; (8004824 <niffs_chk_movi_objhdr_pages_v+0x88>)

  if (!_NIFFS_IS_FREE(phdr) && !_NIFFS_IS_DELE(phdr) && _NIFFS_IS_MOVI(phdr)) {
    if (phdr->id.spix == 0) {
      niffs_object_hdr *ohdr = (niffs_object_hdr *)phdr;
      niffs_page_ix *log = (niffs_page_ix *)fs->buf;
      log[arg->ix] = pix;
 80047c2:	f823 5011 	strh.w	r5, [r3, r1, lsl #1]
      (void)ohdr;
      NIFFS_DBG("  chck: pix %04x register MOVI obj hdr oid:%04x max_spix:%i\n", pix, phdr->id.obj_id, (int)_NIFFS_OFFS_2_SPIX(fs, ohdr->len));
 80047c6:	6833      	ldr	r3, [r6, #0]
 80047c8:	055f      	lsls	r7, r3, #21
 80047ca:	d516      	bpl.n	80047fa <niffs_chk_movi_objhdr_pages_v+0x5e>
 80047cc:	4b16      	ldr	r3, [pc, #88]	; (8004828 <niffs_chk_movi_objhdr_pages_v+0x8c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	b99b      	cbnz	r3, 80047fa <niffs_chk_movi_objhdr_pages_v+0x5e>
 80047d2:	68c1      	ldr	r1, [r0, #12]
 80047d4:	6857      	ldr	r7, [r2, #4]
 80047d6:	f892 e001 	ldrb.w	lr, [r2, #1]
 80047da:	f1a1 021e 	sub.w	r2, r1, #30
 80047de:	4297      	cmp	r7, r2
 80047e0:	d306      	bcc.n	80047f0 <niffs_chk_movi_objhdr_pages_v+0x54>
 80047e2:	f107 031e 	add.w	r3, r7, #30
 80047e6:	1a5b      	subs	r3, r3, r1
 80047e8:	3904      	subs	r1, #4
 80047ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80047ee:	3301      	adds	r3, #1
 80047f0:	480e      	ldr	r0, [pc, #56]	; (800482c <niffs_chk_movi_objhdr_pages_v+0x90>)
 80047f2:	4629      	mov	r1, r5
 80047f4:	4672      	mov	r2, lr
 80047f6:	f004 fcd1 	bl	800919c <arcprint>
      arg->ix++;
 80047fa:	6823      	ldr	r3, [r4, #0]
      if (arg->ix >= arg->len) {
 80047fc:	6862      	ldr	r2, [r4, #4]
      niffs_object_hdr *ohdr = (niffs_object_hdr *)phdr;
      niffs_page_ix *log = (niffs_page_ix *)fs->buf;
      log[arg->ix] = pix;
      (void)ohdr;
      NIFFS_DBG("  chck: pix %04x register MOVI obj hdr oid:%04x max_spix:%i\n", pix, phdr->id.obj_id, (int)_NIFFS_OFFS_2_SPIX(fs, ohdr->len));
      arg->ix++;
 80047fe:	3301      	adds	r3, #1
      if (arg->ix >= arg->len) {
 8004800:	4293      	cmp	r3, r2
      niffs_object_hdr *ohdr = (niffs_object_hdr *)phdr;
      niffs_page_ix *log = (niffs_page_ix *)fs->buf;
      log[arg->ix] = pix;
      (void)ohdr;
      NIFFS_DBG("  chck: pix %04x register MOVI obj hdr oid:%04x max_spix:%i\n", pix, phdr->id.obj_id, (int)_NIFFS_OFFS_2_SPIX(fs, ohdr->len));
      arg->ix++;
 8004802:	6023      	str	r3, [r4, #0]
      if (arg->ix >= arg->len) {
 8004804:	d30c      	bcc.n	8004820 <niffs_chk_movi_objhdr_pages_v+0x84>
        arg->last_pix = pix;
        // log full, report back and handle what we have
        NIFFS_DBG("  chck: pix %04x register MOVI obj hdr log full", pix);
 8004806:	6833      	ldr	r3, [r6, #0]
      log[arg->ix] = pix;
      (void)ohdr;
      NIFFS_DBG("  chck: pix %04x register MOVI obj hdr oid:%04x max_spix:%i\n", pix, phdr->id.obj_id, (int)_NIFFS_OFFS_2_SPIX(fs, ohdr->len));
      arg->ix++;
      if (arg->ix >= arg->len) {
        arg->last_pix = pix;
 8004808:	8125      	strh	r5, [r4, #8]
        // log full, report back and handle what we have
        NIFFS_DBG("  chck: pix %04x register MOVI obj hdr log full", pix);
 800480a:	055c      	lsls	r4, r3, #21
 800480c:	d506      	bpl.n	800481c <niffs_chk_movi_objhdr_pages_v+0x80>
 800480e:	4b06      	ldr	r3, [pc, #24]	; (8004828 <niffs_chk_movi_objhdr_pages_v+0x8c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	b91b      	cbnz	r3, 800481c <niffs_chk_movi_objhdr_pages_v+0x80>
 8004814:	4806      	ldr	r0, [pc, #24]	; (8004830 <niffs_chk_movi_objhdr_pages_v+0x94>)
 8004816:	4629      	mov	r1, r5
 8004818:	f004 fcc0 	bl	800919c <arcprint>
        return NIFFS_VIS_END;
 800481c:	2002      	movs	r0, #2
 800481e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
    }
  }
  return NIFFS_VIS_CONT;
 8004820:	2001      	movs	r0, #1
}
 8004822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004824:	20004f80 	.word	0x20004f80
 8004828:	20004f84 	.word	0x20004f84
 800482c:	0801089f 	.word	0x0801089f
 8004830:	080108dc 	.word	0x080108dc

08004834 <niffs_find_free_id_v>:

typedef struct {
  const char *conflict_name;
} niffs_find_free_id_arg;

static int niffs_find_free_id_v(niffs *fs, niffs_page_ix pix, niffs_page_hdr *phdr, void *v_arg) {
 8004834:	b537      	push	{r0, r1, r2, r4, r5, lr}
  (void)pix;
  niffs_find_free_id_arg *arg = (niffs_find_free_id_arg *)v_arg;
  if (!_NIFFS_IS_FREE(phdr) && !_NIFFS_IS_DELE(phdr)) {
 8004836:	8814      	ldrh	r4, [r2, #0]
 8004838:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 800483c:	3c01      	subs	r4, #1
 800483e:	b2a4      	uxth	r4, r4
 8004840:	428c      	cmp	r4, r1
 8004842:	d901      	bls.n	8004848 <niffs_find_free_id_v+0x14>
      if (strcmp(arg->conflict_name, (char *)ohdr->name) == 0) {
        check(ERR_NIFFS_NAME_CONFLICT);
      }
    }
  }
  return NIFFS_VIS_CONT;
 8004844:	2001      	movs	r0, #1
 8004846:	e028      	b.n	800489a <niffs_find_free_id_v+0x66>

static int niffs_find_free_id_v(niffs *fs, niffs_page_ix pix, niffs_page_hdr *phdr, void *v_arg) {
  (void)pix;
  niffs_find_free_id_arg *arg = (niffs_find_free_id_arg *)v_arg;
  if (!_NIFFS_IS_FREE(phdr) && !_NIFFS_IS_DELE(phdr)) {
    niffs_obj_id oid = phdr->id.obj_id;
 8004848:	7854      	ldrb	r4, [r2, #1]
    --oid;
    fs->buf[oid/8] |= 1<<(oid&7);
 800484a:	2501      	movs	r5, #1
static int niffs_find_free_id_v(niffs *fs, niffs_page_ix pix, niffs_page_hdr *phdr, void *v_arg) {
  (void)pix;
  niffs_find_free_id_arg *arg = (niffs_find_free_id_arg *)v_arg;
  if (!_NIFFS_IS_FREE(phdr) && !_NIFFS_IS_DELE(phdr)) {
    niffs_obj_id oid = phdr->id.obj_id;
    --oid;
 800484c:	3c01      	subs	r4, #1
 800484e:	b2e4      	uxtb	r4, r4
    fs->buf[oid/8] |= 1<<(oid&7);
 8004850:	08e1      	lsrs	r1, r4, #3
 8004852:	f004 0407 	and.w	r4, r4, #7
 8004856:	fa05 f404 	lsl.w	r4, r5, r4
 800485a:	6900      	ldr	r0, [r0, #16]
 800485c:	5c45      	ldrb	r5, [r0, r1]
 800485e:	432c      	orrs	r4, r5
 8004860:	5444      	strb	r4, [r0, r1]
    if (arg->conflict_name && phdr->id.spix == 0) {
 8004862:	6818      	ldr	r0, [r3, #0]
 8004864:	2800      	cmp	r0, #0
 8004866:	d0ed      	beq.n	8004844 <niffs_find_free_id_v+0x10>
 8004868:	7813      	ldrb	r3, [r2, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1ea      	bne.n	8004844 <niffs_find_free_id_v+0x10>
      // object header page
      niffs_object_hdr *ohdr = (niffs_object_hdr *)phdr;
      if (strcmp(arg->conflict_name, (char *)ohdr->name) == 0) {
 800486e:	f102 0108 	add.w	r1, r2, #8
 8004872:	f7fc fd2c 	bl	80012ce <strcmp>
 8004876:	2800      	cmp	r0, #0
 8004878:	d1e4      	bne.n	8004844 <niffs_find_free_id_v+0x10>
        check(ERR_NIFFS_NAME_CONFLICT);
 800487a:	4b09      	ldr	r3, [pc, #36]	; (80048a0 <niffs_find_free_id_v+0x6c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	055b      	lsls	r3, r3, #21
 8004880:	d50a      	bpl.n	8004898 <niffs_find_free_id_v+0x64>
 8004882:	4b08      	ldr	r3, [pc, #32]	; (80048a4 <niffs_find_free_id_v+0x70>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	b93b      	cbnz	r3, 8004898 <niffs_find_free_id_v+0x64>
 8004888:	2389      	movs	r3, #137	; 0x89
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	4806      	ldr	r0, [pc, #24]	; (80048a8 <niffs_find_free_id_v+0x74>)
 800488e:	4907      	ldr	r1, [pc, #28]	; (80048ac <niffs_find_free_id_v+0x78>)
 8004890:	4a07      	ldr	r2, [pc, #28]	; (80048b0 <niffs_find_free_id_v+0x7c>)
 8004892:	4b08      	ldr	r3, [pc, #32]	; (80048b4 <niffs_find_free_id_v+0x80>)
 8004894:	f004 fc82 	bl	800919c <arcprint>
 8004898:	4804      	ldr	r0, [pc, #16]	; (80048ac <niffs_find_free_id_v+0x78>)
      }
    }
  }
  return NIFFS_VIS_CONT;
}
 800489a:	b003      	add	sp, #12
 800489c:	bd30      	pop	{r4, r5, pc}
 800489e:	bf00      	nop
 80048a0:	20004f80 	.word	0x20004f80
 80048a4:	20004f84 	.word	0x20004f84
 80048a8:	08010535 	.word	0x08010535
 80048ac:	ffffd4f7 	.word	0xffffd4f7
 80048b0:	0800e8d8 	.word	0x0800e8d8
 80048b4:	0801054b 	.word	0x0801054b

080048b8 <niffs_open_v>:
  niffs_page_ix pix_mov;
  niffs_obj_id oid_mov;
  niffs_file_type type;
} niffs_open_arg;

static int niffs_open_v(niffs *fs, niffs_page_ix pix, niffs_page_hdr *phdr, void *v_arg) {
 80048b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80048bc:	4615      	mov	r5, r2
  (void)pix;
  if (_NIFFS_IS_FLAG_VALID(phdr) && !_NIFFS_IS_FREE(phdr) && !_NIFFS_IS_DELE(phdr)) {
 80048be:	8852      	ldrh	r2, [r2, #2]
  niffs_page_ix pix_mov;
  niffs_obj_id oid_mov;
  niffs_file_type type;
} niffs_open_arg;

static int niffs_open_v(niffs *fs, niffs_page_ix pix, niffs_page_hdr *phdr, void *v_arg) {
 80048c0:	461e      	mov	r6, r3
  (void)pix;
  if (_NIFFS_IS_FLAG_VALID(phdr) && !_NIFFS_IS_FREE(phdr) && !_NIFFS_IS_DELE(phdr)) {
 80048c2:	3a02      	subs	r2, #2
 80048c4:	b292      	uxth	r2, r2
 80048c6:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80048ca:	429a      	cmp	r2, r3
  niffs_page_ix pix_mov;
  niffs_obj_id oid_mov;
  niffs_file_type type;
} niffs_open_arg;

static int niffs_open_v(niffs *fs, niffs_page_ix pix, niffs_page_hdr *phdr, void *v_arg) {
 80048cc:	4607      	mov	r7, r0
 80048ce:	4688      	mov	r8, r1
  (void)pix;
  if (_NIFFS_IS_FLAG_VALID(phdr) && !_NIFFS_IS_FREE(phdr) && !_NIFFS_IS_DELE(phdr)) {
 80048d0:	d93f      	bls.n	8004952 <niffs_open_v+0x9a>
 80048d2:	882a      	ldrh	r2, [r5, #0]
 80048d4:	3301      	adds	r3, #1
 80048d6:	3a01      	subs	r2, #1
 80048d8:	b292      	uxth	r2, r2
 80048da:	429a      	cmp	r2, r3
 80048dc:	d839      	bhi.n	8004952 <niffs_open_v+0x9a>
    if (_NIFFS_IS_OBJ_HDR(phdr)) {
 80048de:	786b      	ldrb	r3, [r5, #1]
 80048e0:	3b01      	subs	r3, #1
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2bfd      	cmp	r3, #253	; 0xfd
 80048e6:	d834      	bhi.n	8004952 <niffs_open_v+0x9a>
 80048e8:	782b      	ldrb	r3, [r5, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d131      	bne.n	8004952 <niffs_open_v+0x9a>
      // object header page
      niffs_object_hdr *ohdr = (niffs_object_hdr *)phdr;
      niffs_open_arg *arg = (niffs_open_arg *)v_arg;
      if (strcmp(arg->name, (char *)ohdr->name) == 0 && ohdr->len != 0) {
 80048ee:	6830      	ldr	r0, [r6, #0]
 80048f0:	f105 0108 	add.w	r1, r5, #8
 80048f4:	f7fc fceb 	bl	80012ce <strcmp>
 80048f8:	4604      	mov	r4, r0
 80048fa:	bb50      	cbnz	r0, 8004952 <niffs_open_v+0x9a>
 80048fc:	686b      	ldr	r3, [r5, #4]
 80048fe:	b343      	cbz	r3, 8004952 <niffs_open_v+0x9a>
        // found matching name
        if (arg->oid_mov) {
 8004900:	7ab3      	ldrb	r3, [r6, #10]
 8004902:	b1bb      	cbz	r3, 8004934 <niffs_open_v+0x7c>
          // had a previous moving page - delete this
          int res = niffs_delete_page(fs, arg->pix_mov);
 8004904:	4638      	mov	r0, r7
 8004906:	8931      	ldrh	r1, [r6, #8]
 8004908:	f7fe fff5 	bl	80038f6 <niffs_delete_page>
          check(res);
 800490c:	4607      	mov	r7, r0
 800490e:	b180      	cbz	r0, 8004932 <niffs_open_v+0x7a>
 8004910:	4b12      	ldr	r3, [pc, #72]	; (800495c <niffs_open_v+0xa4>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	055a      	lsls	r2, r3, #21
 8004916:	d51a      	bpl.n	800494e <niffs_open_v+0x96>
 8004918:	4b11      	ldr	r3, [pc, #68]	; (8004960 <niffs_open_v+0xa8>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	b9bb      	cbnz	r3, 800494e <niffs_open_v+0x96>
 800491e:	f240 2383 	movw	r3, #643	; 0x283
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	480f      	ldr	r0, [pc, #60]	; (8004964 <niffs_open_v+0xac>)
 8004926:	4639      	mov	r1, r7
 8004928:	4a0f      	ldr	r2, [pc, #60]	; (8004968 <niffs_open_v+0xb0>)
 800492a:	4b10      	ldr	r3, [pc, #64]	; (800496c <niffs_open_v+0xb4>)
 800492c:	f004 fc36 	bl	800919c <arcprint>
 8004930:	e00d      	b.n	800494e <niffs_open_v+0x96>
          arg->oid_mov = 0;
 8004932:	72b4      	strb	r4, [r6, #10]
        }
        arg->type = ohdr->type;
 8004934:	7e2b      	ldrb	r3, [r5, #24]
 8004936:	72f3      	strb	r3, [r6, #11]
        if (_NIFFS_IS_MOVI(phdr)) {
 8004938:	886a      	ldrh	r2, [r5, #2]
 800493a:	786b      	ldrb	r3, [r5, #1]
 800493c:	b91a      	cbnz	r2, 8004946 <niffs_open_v+0x8e>
          arg->oid_mov = ohdr->phdr.id.obj_id;
 800493e:	72b3      	strb	r3, [r6, #10]
          arg->pix_mov = pix;
 8004940:	f8a6 8008 	strh.w	r8, [r6, #8]
 8004944:	e005      	b.n	8004952 <niffs_open_v+0x9a>
          return NIFFS_VIS_CONT;
        } else {
          arg->oid = ohdr->phdr.id.obj_id;
 8004946:	71b3      	strb	r3, [r6, #6]
          arg->pix = pix;
 8004948:	f8a6 8004 	strh.w	r8, [r6, #4]
 800494c:	e002      	b.n	8004954 <niffs_open_v+0x9c>
      if (strcmp(arg->name, (char *)ohdr->name) == 0 && ohdr->len != 0) {
        // found matching name
        if (arg->oid_mov) {
          // had a previous moving page - delete this
          int res = niffs_delete_page(fs, arg->pix_mov);
          check(res);
 800494e:	463c      	mov	r4, r7
 8004950:	e000      	b.n	8004954 <niffs_open_v+0x9c>
          return NIFFS_OK;
        }
      }
    }
  }
  return NIFFS_VIS_CONT;
 8004952:	2401      	movs	r4, #1
}
 8004954:	4620      	mov	r0, r4
 8004956:	b002      	add	sp, #8
 8004958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800495c:	20004f80 	.word	0x20004f80
 8004960:	20004f84 	.word	0x20004f84
 8004964:	08010535 	.word	0x08010535
 8004968:	0800e8ed 	.word	0x0800e8ed
 800496c:	0801054b 	.word	0x0801054b

08004970 <niffs_traverse>:
  }\
}while(0);

//////////////////////////////////// BASE ////////////////////////////////////

int niffs_traverse(niffs *fs, niffs_page_ix pix_start, niffs_page_ix pix_end, niffs_visitor_f v, void *v_arg) {
 8004970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004972:	4616      	mov	r6, r2
 8004974:	461f      	mov	r7, r3
  int res = NIFFS_OK;
  int v_res = NIFFS_OK;
  niffs_page_ix pix = pix_start;
  if (pix >= fs->pages_per_sector * fs->sectors) {
 8004976:	6a02      	ldr	r2, [r0, #32]
 8004978:	6843      	ldr	r3, [r0, #4]
  }\
}while(0);

//////////////////////////////////// BASE ////////////////////////////////////

int niffs_traverse(niffs *fs, niffs_page_ix pix_start, niffs_page_ix pix_end, niffs_visitor_f v, void *v_arg) {
 800497a:	4605      	mov	r5, r0
  int res = NIFFS_OK;
  int v_res = NIFFS_OK;
  niffs_page_ix pix = pix_start;
  if (pix >= fs->pages_per_sector * fs->sectors) {
 800497c:	4353      	muls	r3, r2
 800497e:	4299      	cmp	r1, r3
  }\
}while(0);

//////////////////////////////////// BASE ////////////////////////////////////

int niffs_traverse(niffs *fs, niffs_page_ix pix_start, niffs_page_ix pix_end, niffs_visitor_f v, void *v_arg) {
 8004980:	460c      	mov	r4, r1
  int res = NIFFS_OK;
  int v_res = NIFFS_OK;
  niffs_page_ix pix = pix_start;
  if (pix >= fs->pages_per_sector * fs->sectors) {
 8004982:	d303      	bcc.n	800498c <niffs_traverse+0x1c>
    pix = 0;
    if (pix == pix_end) return NIFFS_VIS_END;
 8004984:	b90e      	cbnz	r6, 800498a <niffs_traverse+0x1a>
 8004986:	2002      	movs	r0, #2
 8004988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
int niffs_traverse(niffs *fs, niffs_page_ix pix_start, niffs_page_ix pix_end, niffs_visitor_f v, void *v_arg) {
  int res = NIFFS_OK;
  int v_res = NIFFS_OK;
  niffs_page_ix pix = pix_start;
  if (pix >= fs->pages_per_sector * fs->sectors) {
    pix = 0;
 800498a:	2400      	movs	r4, #0
    if (pix == pix_end) return NIFFS_VIS_END;
  }
  do {
    niffs_page_hdr *phdr = (niffs_page_hdr *)_NIFFS_PIX_2_ADDR(fs, pix);
 800498c:	6a29      	ldr	r1, [r5, #32]
 800498e:	68e8      	ldr	r0, [r5, #12]
 8004990:	fbb4 f2f1 	udiv	r2, r4, r1
 8004994:	fb01 4112 	mls	r1, r1, r2, r4
 8004998:	4348      	muls	r0, r1
 800499a:	68ab      	ldr	r3, [r5, #8]
    v_res = v(fs, pix, phdr, v_arg);
 800499c:	4621      	mov	r1, r4
  if (pix >= fs->pages_per_sector * fs->sectors) {
    pix = 0;
    if (pix == pix_end) return NIFFS_VIS_END;
  }
  do {
    niffs_page_hdr *phdr = (niffs_page_hdr *)_NIFFS_PIX_2_ADDR(fs, pix);
 800499e:	fb03 0202 	mla	r2, r3, r2, r0
 80049a2:	682b      	ldr	r3, [r5, #0]
 80049a4:	3204      	adds	r2, #4
    v_res = v(fs, pix, phdr, v_arg);
 80049a6:	441a      	add	r2, r3
 80049a8:	4628      	mov	r0, r5
 80049aa:	9b06      	ldr	r3, [sp, #24]
 80049ac:	47b8      	blx	r7
    if (v_res != NIFFS_VIS_CONT) {
 80049ae:	2801      	cmp	r0, #1
 80049b0:	d10a      	bne.n	80049c8 <niffs_traverse+0x58>
      res = v_res;
      break;
    }
    // next page, wrap if necessary
    pix++;
    if (pix >= fs->pages_per_sector * fs->sectors) {
 80049b2:	686b      	ldr	r3, [r5, #4]
 80049b4:	6a2a      	ldr	r2, [r5, #32]
    if (v_res != NIFFS_VIS_CONT) {
      res = v_res;
      break;
    }
    // next page, wrap if necessary
    pix++;
 80049b6:	3401      	adds	r4, #1
    if (pix >= fs->pages_per_sector * fs->sectors) {
 80049b8:	4353      	muls	r3, r2
    if (v_res != NIFFS_VIS_CONT) {
      res = v_res;
      break;
    }
    // next page, wrap if necessary
    pix++;
 80049ba:	b2a4      	uxth	r4, r4
    if (pix >= fs->pages_per_sector * fs->sectors) {
      pix = 0;
 80049bc:	429c      	cmp	r4, r3
 80049be:	bf28      	it	cs
 80049c0:	2400      	movcs	r4, #0
    }
  } while (pix != pix_end);
 80049c2:	42b4      	cmp	r4, r6
 80049c4:	d1e2      	bne.n	800498c <niffs_traverse+0x1c>
 80049c6:	e7de      	b.n	8004986 <niffs_traverse+0x16>
  if (v_res == NIFFS_VIS_CONT) {
    res = NIFFS_VIS_END;
  }

  return res;
}
 80049c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080049ca <niffs_find_free_page>:
    return NIFFS_OK;
  }
  return NIFFS_VIS_CONT;
}

TESTATIC int niffs_find_free_page(niffs *fs, niffs_page_ix *pix, u32_t excl_sector) {
 80049ca:	b530      	push	{r4, r5, lr}
 80049cc:	4605      	mov	r5, r0
 80049ce:	b085      	sub	sp, #20
  if (pix == 0) check(ERR_NIFFS_NULL_PTR);
 80049d0:	460c      	mov	r4, r1
 80049d2:	b979      	cbnz	r1, 80049f4 <niffs_find_free_page+0x2a>
 80049d4:	4b11      	ldr	r3, [pc, #68]	; (8004a1c <niffs_find_free_page+0x52>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	0559      	lsls	r1, r3, #21
 80049da:	d519      	bpl.n	8004a10 <niffs_find_free_page+0x46>
 80049dc:	4b10      	ldr	r3, [pc, #64]	; (8004a20 <niffs_find_free_page+0x56>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	b9b3      	cbnz	r3, 8004a10 <niffs_find_free_page+0x46>
 80049e2:	23bc      	movs	r3, #188	; 0xbc
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	480f      	ldr	r0, [pc, #60]	; (8004a24 <niffs_find_free_page+0x5a>)
 80049e8:	490f      	ldr	r1, [pc, #60]	; (8004a28 <niffs_find_free_page+0x5e>)
 80049ea:	4a10      	ldr	r2, [pc, #64]	; (8004a2c <niffs_find_free_page+0x62>)
 80049ec:	4b10      	ldr	r3, [pc, #64]	; (8004a30 <niffs_find_free_page+0x66>)
 80049ee:	f004 fbd5 	bl	800919c <arcprint>
 80049f2:	e00d      	b.n	8004a10 <niffs_find_free_page+0x46>

  niffs_find_free_page_arg arg = {
 80049f4:	9102      	str	r1, [sp, #8]
      .pix = pix,
      .excl_sector = excl_sector
  };
  int res = niffs_traverse(fs, fs->last_free_pix, fs->last_free_pix, niffs_find_free_page_v, &arg);
 80049f6:	8c81      	ldrh	r1, [r0, #36]	; 0x24
 80049f8:	ab02      	add	r3, sp, #8
}

TESTATIC int niffs_find_free_page(niffs *fs, niffs_page_ix *pix, u32_t excl_sector) {
  if (pix == 0) check(ERR_NIFFS_NULL_PTR);

  niffs_find_free_page_arg arg = {
 80049fa:	9203      	str	r2, [sp, #12]
      .pix = pix,
      .excl_sector = excl_sector
  };
  int res = niffs_traverse(fs, fs->last_free_pix, fs->last_free_pix, niffs_find_free_page_v, &arg);
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	460a      	mov	r2, r1
 8004a00:	4b0c      	ldr	r3, [pc, #48]	; (8004a34 <niffs_find_free_page+0x6a>)
 8004a02:	f7ff ffb5 	bl	8004970 <niffs_traverse>
  if (res == NIFFS_VIS_END) {
 8004a06:	2802      	cmp	r0, #2
 8004a08:	d004      	beq.n	8004a14 <niffs_find_free_page+0x4a>
    res = ERR_NIFFS_NO_FREE_PAGE;
  } else {
    fs->last_free_pix = *pix;
 8004a0a:	8823      	ldrh	r3, [r4, #0]
 8004a0c:	84ab      	strh	r3, [r5, #36]	; 0x24
 8004a0e:	e002      	b.n	8004a16 <niffs_find_free_page+0x4c>
  }
  return NIFFS_VIS_CONT;
}

TESTATIC int niffs_find_free_page(niffs *fs, niffs_page_ix *pix, u32_t excl_sector) {
  if (pix == 0) check(ERR_NIFFS_NULL_PTR);
 8004a10:	4805      	ldr	r0, [pc, #20]	; (8004a28 <niffs_find_free_page+0x5e>)
 8004a12:	e000      	b.n	8004a16 <niffs_find_free_page+0x4c>
      .pix = pix,
      .excl_sector = excl_sector
  };
  int res = niffs_traverse(fs, fs->last_free_pix, fs->last_free_pix, niffs_find_free_page_v, &arg);
  if (res == NIFFS_VIS_END) {
    res = ERR_NIFFS_NO_FREE_PAGE;
 8004a14:	4808      	ldr	r0, [pc, #32]	; (8004a38 <niffs_find_free_page+0x6e>)
  } else {
    fs->last_free_pix = *pix;
  }
  return res;
}
 8004a16:	b005      	add	sp, #20
 8004a18:	bd30      	pop	{r4, r5, pc}
 8004a1a:	bf00      	nop
 8004a1c:	20004f80 	.word	0x20004f80
 8004a20:	20004f84 	.word	0x20004f84
 8004a24:	08010535 	.word	0x08010535
 8004a28:	ffffd4fb 	.word	0xffffd4fb
 8004a2c:	0800e8fa 	.word	0x0800e8fa
 8004a30:	0801054b 	.word	0x0801054b
 8004a34:	08003899 	.word	0x08003899
 8004a38:	ffffd4fd 	.word	0xffffd4fd

08004a3c <niffs_chk_tidy_movi_objhdr_page>:
    }
  }
  return NIFFS_VIS_CONT;
}

static int niffs_chk_tidy_movi_objhdr_page(niffs *fs, niffs_page_ix pix, niffs_page_ix *dst_pix) {
 8004a3c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004a40:	4690      	mov	r8, r2
  int res;
  niffs_object_hdr *ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, pix);
 8004a42:	6a02      	ldr	r2, [r0, #32]
    }
  }
  return NIFFS_VIS_CONT;
}

static int niffs_chk_tidy_movi_objhdr_page(niffs *fs, niffs_page_ix pix, niffs_page_ix *dst_pix) {
 8004a44:	460d      	mov	r5, r1
  int res;
  niffs_object_hdr *ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, pix);
 8004a46:	fbb1 f3f2 	udiv	r3, r1, r2
 8004a4a:	fb02 5713 	mls	r7, r2, r3, r5
    }
  }
  return NIFFS_VIS_CONT;
}

static int niffs_chk_tidy_movi_objhdr_page(niffs *fs, niffs_page_ix pix, niffs_page_ix *dst_pix) {
 8004a4e:	4604      	mov	r4, r0
  int res;
  niffs_object_hdr *ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, pix);
 8004a50:	68c0      	ldr	r0, [r0, #12]
 8004a52:	68a1      	ldr	r1, [r4, #8]
 8004a54:	4347      	muls	r7, r0
 8004a56:	fb01 7703 	mla	r7, r1, r3, r7
 8004a5a:	6821      	ldr	r1, [r4, #0]
 8004a5c:	3704      	adds	r7, #4
 8004a5e:	440f      	add	r7, r1
  niffs_chk_movi_objhdr_tidy_arg t_arg = {
      .oid = ohdr->phdr.id.obj_id,
      .gt_spix = _NIFFS_OFFS_2_SPIX(fs, ohdr->len == NIFFS_UNDEF_LEN ? 0 : ohdr->len)
 8004a60:	687b      	ldr	r3, [r7, #4]

static int niffs_chk_tidy_movi_objhdr_page(niffs *fs, niffs_page_ix pix, niffs_page_ix *dst_pix) {
  int res;
  niffs_object_hdr *ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, pix);
  niffs_chk_movi_objhdr_tidy_arg t_arg = {
      .oid = ohdr->phdr.id.obj_id,
 8004a62:	7879      	ldrb	r1, [r7, #1]
      .gt_spix = _NIFFS_OFFS_2_SPIX(fs, ohdr->len == NIFFS_UNDEF_LEN ? 0 : ohdr->len)
 8004a64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a68:	bf14      	ite	ne
 8004a6a:	461e      	movne	r6, r3
 8004a6c:	2600      	moveq	r6, #0
 8004a6e:	f1a0 021e 	sub.w	r2, r0, #30
}

static int niffs_chk_tidy_movi_objhdr_page(niffs *fs, niffs_page_ix pix, niffs_page_ix *dst_pix) {
  int res;
  niffs_object_hdr *ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, pix);
  niffs_chk_movi_objhdr_tidy_arg t_arg = {
 8004a72:	4296      	cmp	r6, r2
 8004a74:	f88d 100c 	strb.w	r1, [sp, #12]
 8004a78:	d309      	bcc.n	8004a8e <niffs_chk_tidy_movi_objhdr_page+0x52>
      .oid = ohdr->phdr.id.obj_id,
      .gt_spix = _NIFFS_OFFS_2_SPIX(fs, ohdr->len == NIFFS_UNDEF_LEN ? 0 : ohdr->len)
 8004a7a:	f1c0 0e1e 	rsb	lr, r0, #30
 8004a7e:	4476      	add	r6, lr
 8004a80:	f1a0 0e04 	sub.w	lr, r0, #4
 8004a84:	fbb6 f6fe 	udiv	r6, r6, lr
}

static int niffs_chk_tidy_movi_objhdr_page(niffs *fs, niffs_page_ix pix, niffs_page_ix *dst_pix) {
  int res;
  niffs_object_hdr *ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, pix);
  niffs_chk_movi_objhdr_tidy_arg t_arg = {
 8004a88:	3601      	adds	r6, #1
 8004a8a:	b2f6      	uxtb	r6, r6
 8004a8c:	e000      	b.n	8004a90 <niffs_chk_tidy_movi_objhdr_page+0x54>
 8004a8e:	2600      	movs	r6, #0
      .oid = ohdr->phdr.id.obj_id,
      .gt_spix = _NIFFS_OFFS_2_SPIX(fs, ohdr->len == NIFFS_UNDEF_LEN ? 0 : ohdr->len)
  };
  if (_NIFFS_OFFS_2_PDATA_OFFS(fs, ohdr->len == NIFFS_UNDEF_LEN ? 0 : ohdr->len) == 0) {
 8004a90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a94:	d007      	beq.n	8004aa6 <niffs_chk_tidy_movi_objhdr_page+0x6a>
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d208      	bcs.n	8004aac <niffs_chk_tidy_movi_objhdr_page+0x70>
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	1cd8      	adds	r0, r3, #3
 8004a9e:	bf94      	ite	ls
 8004aa0:	2300      	movls	r3, #0
 8004aa2:	2301      	movhi	r3, #1
 8004aa4:	e00e      	b.n	8004ac4 <niffs_chk_tidy_movi_objhdr_page+0x88>
 8004aa6:	2a00      	cmp	r2, #0
 8004aa8:	d1f7      	bne.n	8004a9a <niffs_chk_tidy_movi_objhdr_page+0x5e>
 8004aaa:	4613      	mov	r3, r2
 8004aac:	f1c0 021e 	rsb	r2, r0, #30
 8004ab0:	4413      	add	r3, r2
 8004ab2:	3804      	subs	r0, #4
 8004ab4:	fbb3 f2f0 	udiv	r2, r3, r0
 8004ab8:	fb00 3312 	mls	r3, r0, r2, r3
 8004abc:	f1d3 0301 	rsbs	r3, r3, #1
 8004ac0:	bf38      	it	cc
 8004ac2:	2300      	movcc	r3, #0
 8004ac4:	b103      	cbz	r3, 8004ac8 <niffs_chk_tidy_movi_objhdr_page+0x8c>
    t_arg.gt_spix--;
 8004ac6:	3e01      	subs	r6, #1
  }
  if (ohdr->type != _NIFFS_FTYPE_LINFILE) {
 8004ac8:	7e3b      	ldrb	r3, [r7, #24]
  niffs_chk_movi_objhdr_tidy_arg t_arg = {
      .oid = ohdr->phdr.id.obj_id,
      .gt_spix = _NIFFS_OFFS_2_SPIX(fs, ohdr->len == NIFFS_UNDEF_LEN ? 0 : ohdr->len)
  };
  if (_NIFFS_OFFS_2_PDATA_OFFS(fs, ohdr->len == NIFFS_UNDEF_LEN ? 0 : ohdr->len) == 0) {
    t_arg.gt_spix--;
 8004aca:	f88d 600d 	strb.w	r6, [sp, #13]
  }
  if (ohdr->type != _NIFFS_FTYPE_LINFILE) {
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	4e3c      	ldr	r6, [pc, #240]	; (8004bc4 <niffs_chk_tidy_movi_objhdr_page+0x188>)
 8004ad2:	d027      	beq.n	8004b24 <niffs_chk_tidy_movi_objhdr_page+0xe8>
    // linear files do not have other pages than object headers in normal area,
    // so this operation will never find anything
    NIFFS_DBG("  chck: find pages oid:%04x spix > %i for deleting\n", t_arg.oid, t_arg.gt_spix);
 8004ad4:	6833      	ldr	r3, [r6, #0]
 8004ad6:	055a      	lsls	r2, r3, #21
 8004ad8:	d507      	bpl.n	8004aea <niffs_chk_tidy_movi_objhdr_page+0xae>
 8004ada:	4b3b      	ldr	r3, [pc, #236]	; (8004bc8 <niffs_chk_tidy_movi_objhdr_page+0x18c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	b923      	cbnz	r3, 8004aea <niffs_chk_tidy_movi_objhdr_page+0xae>
 8004ae0:	483a      	ldr	r0, [pc, #232]	; (8004bcc <niffs_chk_tidy_movi_objhdr_page+0x190>)
 8004ae2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8004ae6:	f004 fb59 	bl	800919c <arcprint>
    res = niffs_traverse(fs, 0, 0, niffs_chk_movi_objhdr_pages_tidy_v, &t_arg);
 8004aea:	ab03      	add	r3, sp, #12
 8004aec:	2100      	movs	r1, #0
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	4620      	mov	r0, r4
 8004af2:	4b37      	ldr	r3, [pc, #220]	; (8004bd0 <niffs_chk_tidy_movi_objhdr_page+0x194>)
 8004af4:	460a      	mov	r2, r1
 8004af6:	f7ff ff3b 	bl	8004970 <niffs_traverse>
    if (res == NIFFS_VIS_END) res = NIFFS_OK;
    check(res);
 8004afa:	f030 0302 	bics.w	r3, r0, #2
  }
  if (ohdr->type != _NIFFS_FTYPE_LINFILE) {
    // linear files do not have other pages than object headers in normal area,
    // so this operation will never find anything
    NIFFS_DBG("  chck: find pages oid:%04x spix > %i for deleting\n", t_arg.oid, t_arg.gt_spix);
    res = niffs_traverse(fs, 0, 0, niffs_chk_movi_objhdr_pages_tidy_v, &t_arg);
 8004afe:	4607      	mov	r7, r0
    if (res == NIFFS_VIS_END) res = NIFFS_OK;
    check(res);
 8004b00:	d010      	beq.n	8004b24 <niffs_chk_tidy_movi_objhdr_page+0xe8>
 8004b02:	6833      	ldr	r3, [r6, #0]
 8004b04:	055b      	lsls	r3, r3, #21
 8004b06:	d556      	bpl.n	8004bb6 <niffs_chk_tidy_movi_objhdr_page+0x17a>
 8004b08:	4b2f      	ldr	r3, [pc, #188]	; (8004bc8 <niffs_chk_tidy_movi_objhdr_page+0x18c>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d152      	bne.n	8004bb6 <niffs_chk_tidy_movi_objhdr_page+0x17a>
 8004b10:	f240 7301 	movw	r3, #1793	; 0x701
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	482f      	ldr	r0, [pc, #188]	; (8004bd4 <niffs_chk_tidy_movi_objhdr_page+0x198>)
 8004b18:	4639      	mov	r1, r7
 8004b1a:	4a2f      	ldr	r2, [pc, #188]	; (8004bd8 <niffs_chk_tidy_movi_objhdr_page+0x19c>)
 8004b1c:	4b2f      	ldr	r3, [pc, #188]	; (8004bdc <niffs_chk_tidy_movi_objhdr_page+0x1a0>)
 8004b1e:	f004 fb3d 	bl	800919c <arcprint>
 8004b22:	e048      	b.n	8004bb6 <niffs_chk_tidy_movi_objhdr_page+0x17a>
  }

  // move obj hdr as written
  NIFFS_DBG("  chck: pix %04x move as written\n", pix);
 8004b24:	6833      	ldr	r3, [r6, #0]
 8004b26:	055f      	lsls	r7, r3, #21
 8004b28:	d506      	bpl.n	8004b38 <niffs_chk_tidy_movi_objhdr_page+0xfc>
 8004b2a:	4b27      	ldr	r3, [pc, #156]	; (8004bc8 <niffs_chk_tidy_movi_objhdr_page+0x18c>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	b91b      	cbnz	r3, 8004b38 <niffs_chk_tidy_movi_objhdr_page+0xfc>
 8004b30:	482b      	ldr	r0, [pc, #172]	; (8004be0 <niffs_chk_tidy_movi_objhdr_page+0x1a4>)
 8004b32:	4629      	mov	r1, r5
 8004b34:	f004 fb32 	bl	800919c <arcprint>
  niffs_page_ix new_pix;
  res = niffs_find_free_page(fs, &new_pix, NIFFS_EXCL_SECT_NONE);
 8004b38:	4620      	mov	r0, r4
 8004b3a:	f10d 010e 	add.w	r1, sp, #14
 8004b3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b42:	f7ff ff42 	bl	80049ca <niffs_find_free_page>
  if (res == ERR_NIFFS_NO_FREE_PAGE) {
 8004b46:	4b27      	ldr	r3, [pc, #156]	; (8004be4 <niffs_chk_tidy_movi_objhdr_page+0x1a8>)
 8004b48:	4298      	cmp	r0, r3
 8004b4a:	d110      	bne.n	8004b6e <niffs_chk_tidy_movi_objhdr_page+0x132>
    NIFFS_DBG("  chck: pix %04x MOVI obj hdr: no free page to move to\n", pix);
 8004b4c:	6833      	ldr	r3, [r6, #0]
 8004b4e:	055c      	lsls	r4, r3, #21
 8004b50:	d506      	bpl.n	8004b60 <niffs_chk_tidy_movi_objhdr_page+0x124>
 8004b52:	4b1d      	ldr	r3, [pc, #116]	; (8004bc8 <niffs_chk_tidy_movi_objhdr_page+0x18c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	b91b      	cbnz	r3, 8004b60 <niffs_chk_tidy_movi_objhdr_page+0x124>
 8004b58:	4823      	ldr	r0, [pc, #140]	; (8004be8 <niffs_chk_tidy_movi_objhdr_page+0x1ac>)
 8004b5a:	4629      	mov	r1, r5
 8004b5c:	f004 fb1e 	bl	800919c <arcprint>
    if (dst_pix) *dst_pix = pix;
 8004b60:	f1b8 0f00 	cmp.w	r8, #0
 8004b64:	d001      	beq.n	8004b6a <niffs_chk_tidy_movi_objhdr_page+0x12e>
 8004b66:	f8a8 5000 	strh.w	r5, [r8]
    res = NIFFS_OK;
 8004b6a:	2000      	movs	r0, #0
 8004b6c:	e026      	b.n	8004bbc <niffs_chk_tidy_movi_objhdr_page+0x180>
  } else {
    if (dst_pix) *dst_pix = new_pix;
 8004b6e:	f1b8 0f00 	cmp.w	r8, #0
 8004b72:	d003      	beq.n	8004b7c <niffs_chk_tidy_movi_objhdr_page+0x140>
 8004b74:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8004b78:	f8a8 3000 	strh.w	r3, [r8]
      }
    }
    else
#endif
    {
      res = niffs_move_page(fs, pix, new_pix, 0, 0, _NIFFS_FLAG_WRITTEN);
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	2101      	movs	r1, #1
 8004b80:	9101      	str	r1, [sp, #4]
 8004b82:	4620      	mov	r0, r4
 8004b84:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	f7fe ffca 	bl	8003b24 <niffs_move_page>
      check(res);
 8004b90:	4604      	mov	r4, r0
 8004b92:	2800      	cmp	r0, #0
 8004b94:	d0e9      	beq.n	8004b6a <niffs_chk_tidy_movi_objhdr_page+0x12e>
 8004b96:	6833      	ldr	r3, [r6, #0]
 8004b98:	0558      	lsls	r0, r3, #21
 8004b9a:	d50e      	bpl.n	8004bba <niffs_chk_tidy_movi_objhdr_page+0x17e>
 8004b9c:	4b0a      	ldr	r3, [pc, #40]	; (8004bc8 <niffs_chk_tidy_movi_objhdr_page+0x18c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	b95b      	cbnz	r3, 8004bba <niffs_chk_tidy_movi_objhdr_page+0x17e>
 8004ba2:	f240 732f 	movw	r3, #1839	; 0x72f
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	480a      	ldr	r0, [pc, #40]	; (8004bd4 <niffs_chk_tidy_movi_objhdr_page+0x198>)
 8004baa:	4621      	mov	r1, r4
 8004bac:	4a0a      	ldr	r2, [pc, #40]	; (8004bd8 <niffs_chk_tidy_movi_objhdr_page+0x19c>)
 8004bae:	4b0b      	ldr	r3, [pc, #44]	; (8004bdc <niffs_chk_tidy_movi_objhdr_page+0x1a0>)
 8004bb0:	f004 faf4 	bl	800919c <arcprint>
 8004bb4:	e001      	b.n	8004bba <niffs_chk_tidy_movi_objhdr_page+0x17e>
 8004bb6:	4638      	mov	r0, r7
 8004bb8:	e000      	b.n	8004bbc <niffs_chk_tidy_movi_objhdr_page+0x180>
 8004bba:	4620      	mov	r0, r4
    }
  }
  return res;
}
 8004bbc:	b004      	add	sp, #16
 8004bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bc2:	bf00      	nop
 8004bc4:	20004f80 	.word	0x20004f80
 8004bc8:	20004f84 	.word	0x20004f84
 8004bcc:	0801090c 	.word	0x0801090c
 8004bd0:	08004527 	.word	0x08004527
 8004bd4:	08010535 	.word	0x08010535
 8004bd8:	0800e90f 	.word	0x0800e90f
 8004bdc:	0801054b 	.word	0x0801054b
 8004be0:	08010940 	.word	0x08010940
 8004be4:	ffffd4fd 	.word	0xffffd4fd
 8004be8:	08010962 	.word	0x08010962

08004bec <niffs_find_page>:
    }
  }
  return NIFFS_VIS_CONT;
}

TESTATIC int niffs_find_page(niffs *fs, niffs_page_ix *pix, niffs_obj_id oid, niffs_span_ix spix, niffs_page_ix start_pix) {
 8004bec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8004bee:	4616      	mov	r6, r2
 8004bf0:	461d      	mov	r5, r3
  if (pix == 0) check(ERR_NIFFS_NULL_PTR);
 8004bf2:	460c      	mov	r4, r1
 8004bf4:	b981      	cbnz	r1, 8004c18 <niffs_find_page+0x2c>
 8004bf6:	4b20      	ldr	r3, [pc, #128]	; (8004c78 <niffs_find_page+0x8c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	055a      	lsls	r2, r3, #21
 8004bfc:	d537      	bpl.n	8004c6e <niffs_find_page+0x82>
 8004bfe:	4b1f      	ldr	r3, [pc, #124]	; (8004c7c <niffs_find_page+0x90>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d133      	bne.n	8004c6e <niffs_find_page+0x82>
 8004c06:	23eb      	movs	r3, #235	; 0xeb
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	481d      	ldr	r0, [pc, #116]	; (8004c80 <niffs_find_page+0x94>)
 8004c0c:	491d      	ldr	r1, [pc, #116]	; (8004c84 <niffs_find_page+0x98>)
 8004c0e:	4a1e      	ldr	r2, [pc, #120]	; (8004c88 <niffs_find_page+0x9c>)
 8004c10:	4b1e      	ldr	r3, [pc, #120]	; (8004c8c <niffs_find_page+0xa0>)
 8004c12:	f004 fac3 	bl	800919c <arcprint>
 8004c16:	e02a      	b.n	8004c6e <niffs_find_page+0x82>

  niffs_find_page_arg arg = {
 8004c18:	2300      	movs	r3, #0
    .oid = oid,
    .spix = spix,
    .mov_found = 0
  };
  int res = niffs_traverse(fs, start_pix, start_pix, niffs_find_page_v, &arg);
 8004c1a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
}

TESTATIC int niffs_find_page(niffs *fs, niffs_page_ix *pix, niffs_obj_id oid, niffs_span_ix spix, niffs_page_ix start_pix) {
  if (pix == 0) check(ERR_NIFFS_NULL_PTR);

  niffs_find_page_arg arg = {
 8004c1e:	9303      	str	r3, [sp, #12]
 8004c20:	9302      	str	r3, [sp, #8]
    .oid = oid,
    .spix = spix,
    .mov_found = 0
  };
  int res = niffs_traverse(fs, start_pix, start_pix, niffs_find_page_v, &arg);
 8004c22:	ab02      	add	r3, sp, #8
}

TESTATIC int niffs_find_page(niffs *fs, niffs_page_ix *pix, niffs_obj_id oid, niffs_span_ix spix, niffs_page_ix start_pix) {
  if (pix == 0) check(ERR_NIFFS_NULL_PTR);

  niffs_find_page_arg arg = {
 8004c24:	f88d 200e 	strb.w	r2, [sp, #14]
    .oid = oid,
    .spix = spix,
    .mov_found = 0
  };
  int res = niffs_traverse(fs, start_pix, start_pix, niffs_find_page_v, &arg);
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	460a      	mov	r2, r1
 8004c2c:	4b18      	ldr	r3, [pc, #96]	; (8004c90 <niffs_find_page+0xa4>)
}

TESTATIC int niffs_find_page(niffs *fs, niffs_page_ix *pix, niffs_obj_id oid, niffs_span_ix spix, niffs_page_ix start_pix) {
  if (pix == 0) check(ERR_NIFFS_NULL_PTR);

  niffs_find_page_arg arg = {
 8004c2e:	f88d 500f 	strb.w	r5, [sp, #15]
    .oid = oid,
    .spix = spix,
    .mov_found = 0
  };
  int res = niffs_traverse(fs, start_pix, start_pix, niffs_find_page_v, &arg);
 8004c32:	f7ff fe9d 	bl	8004970 <niffs_traverse>
  if (res == NIFFS_VIS_END) {
 8004c36:	2802      	cmp	r0, #2
 8004c38:	d115      	bne.n	8004c66 <niffs_find_page+0x7a>
    if (arg.mov_found) {
 8004c3a:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8004c3e:	b1c3      	cbz	r3, 8004c72 <niffs_find_page+0x86>
      NIFFS_DBG("  find: pix %04x warn found MOVI when looking for obj id:%04x spix:%i\n", arg.pix_mov, oid, spix);
 8004c40:	4b0d      	ldr	r3, [pc, #52]	; (8004c78 <niffs_find_page+0x8c>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	055b      	lsls	r3, r3, #21
 8004c46:	d509      	bpl.n	8004c5c <niffs_find_page+0x70>
 8004c48:	4b0c      	ldr	r3, [pc, #48]	; (8004c7c <niffs_find_page+0x90>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	b933      	cbnz	r3, 8004c5c <niffs_find_page+0x70>
 8004c4e:	4811      	ldr	r0, [pc, #68]	; (8004c94 <niffs_find_page+0xa8>)
 8004c50:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8004c54:	4632      	mov	r2, r6
 8004c56:	462b      	mov	r3, r5
 8004c58:	f004 faa0 	bl	800919c <arcprint>
      *pix = arg.pix_mov;
 8004c5c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
      res = NIFFS_OK;
 8004c60:	2000      	movs	r0, #0
  };
  int res = niffs_traverse(fs, start_pix, start_pix, niffs_find_page_v, &arg);
  if (res == NIFFS_VIS_END) {
    if (arg.mov_found) {
      NIFFS_DBG("  find: pix %04x warn found MOVI when looking for obj id:%04x spix:%i\n", arg.pix_mov, oid, spix);
      *pix = arg.pix_mov;
 8004c62:	8023      	strh	r3, [r4, #0]
 8004c64:	e006      	b.n	8004c74 <niffs_find_page+0x88>
      res = NIFFS_OK;
    } else {
      res = ERR_NIFFS_PAGE_NOT_FOUND;
    }
  } else {
    *pix = arg.pix;
 8004c66:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8004c6a:	8023      	strh	r3, [r4, #0]
 8004c6c:	e002      	b.n	8004c74 <niffs_find_page+0x88>
  }
  return NIFFS_VIS_CONT;
}

TESTATIC int niffs_find_page(niffs *fs, niffs_page_ix *pix, niffs_obj_id oid, niffs_span_ix spix, niffs_page_ix start_pix) {
  if (pix == 0) check(ERR_NIFFS_NULL_PTR);
 8004c6e:	4805      	ldr	r0, [pc, #20]	; (8004c84 <niffs_find_page+0x98>)
 8004c70:	e000      	b.n	8004c74 <niffs_find_page+0x88>
    if (arg.mov_found) {
      NIFFS_DBG("  find: pix %04x warn found MOVI when looking for obj id:%04x spix:%i\n", arg.pix_mov, oid, spix);
      *pix = arg.pix_mov;
      res = NIFFS_OK;
    } else {
      res = ERR_NIFFS_PAGE_NOT_FOUND;
 8004c72:	4809      	ldr	r0, [pc, #36]	; (8004c98 <niffs_find_page+0xac>)
    }
  } else {
    *pix = arg.pix;
  }
  return res;
}
 8004c74:	b004      	add	sp, #16
 8004c76:	bd70      	pop	{r4, r5, r6, pc}
 8004c78:	20004f80 	.word	0x20004f80
 8004c7c:	20004f84 	.word	0x20004f84
 8004c80:	08010535 	.word	0x08010535
 8004c84:	ffffd4fb 	.word	0xffffd4fb
 8004c88:	0800e92f 	.word	0x0800e92f
 8004c8c:	0801054b 	.word	0x0801054b
 8004c90:	080045c1 	.word	0x080045c1
 8004c94:	0801099a 	.word	0x0801099a
 8004c98:	ffffd4f0 	.word	0xffffd4f0

08004c9c <niffs_chk_unfinished_movi_data_pages_v>:
    }
  }
  return NIFFS_VIS_CONT;
}

static int niffs_chk_unfinished_movi_data_pages_v(niffs *fs, niffs_page_ix pix, niffs_page_hdr *phdr, void *v_arg) {
 8004c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
  (void)v_arg;
  int res;
  if (!_NIFFS_IS_FREE(phdr) && !_NIFFS_IS_DELE(phdr) && _NIFFS_IS_MOVI(phdr)) {
 8004c9e:	8814      	ldrh	r4, [r2, #0]
 8004ca0:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8004ca4:	3c01      	subs	r4, #1
 8004ca6:	b2a4      	uxth	r4, r4
 8004ca8:	429c      	cmp	r4, r3
    }
  }
  return NIFFS_VIS_CONT;
}

static int niffs_chk_unfinished_movi_data_pages_v(niffs *fs, niffs_page_ix pix, niffs_page_hdr *phdr, void *v_arg) {
 8004caa:	b085      	sub	sp, #20
 8004cac:	4607      	mov	r7, r0
 8004cae:	460d      	mov	r5, r1
  (void)v_arg;
  int res;
  if (!_NIFFS_IS_FREE(phdr) && !_NIFFS_IS_DELE(phdr) && _NIFFS_IS_MOVI(phdr)) {
 8004cb0:	d878      	bhi.n	8004da4 <niffs_chk_unfinished_movi_data_pages_v+0x108>
 8004cb2:	8853      	ldrh	r3, [r2, #2]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d175      	bne.n	8004da4 <niffs_chk_unfinished_movi_data_pages_v+0x108>
    if (phdr->id.spix > 0) {
 8004cb8:	7813      	ldrb	r3, [r2, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d072      	beq.n	8004da4 <niffs_chk_unfinished_movi_data_pages_v+0x108>
      res = niffs_traverse(fs, pix, pix, niffs_chk_find_corresponding_nonmovi_page_v, &phdr->id);
 8004cbe:	9200      	str	r2, [sp, #0]
 8004cc0:	4b3a      	ldr	r3, [pc, #232]	; (8004dac <niffs_chk_unfinished_movi_data_pages_v+0x110>)
 8004cc2:	460a      	mov	r2, r1
 8004cc4:	f7ff fe54 	bl	8004970 <niffs_traverse>
 8004cc8:	4c39      	ldr	r4, [pc, #228]	; (8004db0 <niffs_chk_unfinished_movi_data_pages_v+0x114>)
      if (res == NIFFS_OK) {
 8004cca:	4606      	mov	r6, r0
        // found written page, delete this
        NIFFS_DBG("check : pix %04x MOVI page has WRIT sibling: delete\n", pix);
 8004ccc:	6823      	ldr	r3, [r4, #0]
  (void)v_arg;
  int res;
  if (!_NIFFS_IS_FREE(phdr) && !_NIFFS_IS_DELE(phdr) && _NIFFS_IS_MOVI(phdr)) {
    if (phdr->id.spix > 0) {
      res = niffs_traverse(fs, pix, pix, niffs_chk_find_corresponding_nonmovi_page_v, &phdr->id);
      if (res == NIFFS_OK) {
 8004cce:	b9c8      	cbnz	r0, 8004d04 <niffs_chk_unfinished_movi_data_pages_v+0x68>
        // found written page, delete this
        NIFFS_DBG("check : pix %04x MOVI page has WRIT sibling: delete\n", pix);
 8004cd0:	055b      	lsls	r3, r3, #21
 8004cd2:	d506      	bpl.n	8004ce2 <niffs_chk_unfinished_movi_data_pages_v+0x46>
 8004cd4:	4b37      	ldr	r3, [pc, #220]	; (8004db4 <niffs_chk_unfinished_movi_data_pages_v+0x118>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	b91b      	cbnz	r3, 8004ce2 <niffs_chk_unfinished_movi_data_pages_v+0x46>
 8004cda:	4837      	ldr	r0, [pc, #220]	; (8004db8 <niffs_chk_unfinished_movi_data_pages_v+0x11c>)
 8004cdc:	4629      	mov	r1, r5
 8004cde:	f004 fa5d 	bl	800919c <arcprint>
        res = niffs_delete_page(fs, pix);
 8004ce2:	4629      	mov	r1, r5
 8004ce4:	4638      	mov	r0, r7
 8004ce6:	f7fe fe06 	bl	80038f6 <niffs_delete_page>
        check(res);
 8004cea:	4605      	mov	r5, r0
 8004cec:	2800      	cmp	r0, #0
 8004cee:	d059      	beq.n	8004da4 <niffs_chk_unfinished_movi_data_pages_v+0x108>
 8004cf0:	6823      	ldr	r3, [r4, #0]
 8004cf2:	055f      	lsls	r7, r3, #21
 8004cf4:	d552      	bpl.n	8004d9c <niffs_chk_unfinished_movi_data_pages_v+0x100>
 8004cf6:	4b2f      	ldr	r3, [pc, #188]	; (8004db4 <niffs_chk_unfinished_movi_data_pages_v+0x118>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d14e      	bne.n	8004d9c <niffs_chk_unfinished_movi_data_pages_v+0x100>
 8004cfe:	f240 63a1 	movw	r3, #1697	; 0x6a1
 8004d02:	e034      	b.n	8004d6e <niffs_chk_unfinished_movi_data_pages_v+0xd2>
      } else if (res == NIFFS_VIS_END) {
 8004d04:	2802      	cmp	r0, #2
 8004d06:	d13a      	bne.n	8004d7e <niffs_chk_unfinished_movi_data_pages_v+0xe2>
        res = NIFFS_OK;
        // found no written page, update this
        niffs_page_ix new_pix;
        NIFFS_DBG("check : pix %04x MOVI page alone: move to WRIT\n", pix);
 8004d08:	055e      	lsls	r6, r3, #21
 8004d0a:	d506      	bpl.n	8004d1a <niffs_chk_unfinished_movi_data_pages_v+0x7e>
 8004d0c:	4b29      	ldr	r3, [pc, #164]	; (8004db4 <niffs_chk_unfinished_movi_data_pages_v+0x118>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	b91b      	cbnz	r3, 8004d1a <niffs_chk_unfinished_movi_data_pages_v+0x7e>
 8004d12:	482a      	ldr	r0, [pc, #168]	; (8004dbc <niffs_chk_unfinished_movi_data_pages_v+0x120>)
 8004d14:	4629      	mov	r1, r5
 8004d16:	f004 fa41 	bl	800919c <arcprint>
        res = niffs_find_free_page(fs, &new_pix, NIFFS_EXCL_SECT_NONE);
 8004d1a:	4638      	mov	r0, r7
 8004d1c:	f10d 010e 	add.w	r1, sp, #14
 8004d20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d24:	f7ff fe51 	bl	80049ca <niffs_find_free_page>
        if (res == ERR_NIFFS_NO_FREE_PAGE) {
 8004d28:	4b25      	ldr	r3, [pc, #148]	; (8004dc0 <niffs_chk_unfinished_movi_data_pages_v+0x124>)
 8004d2a:	4298      	cmp	r0, r3
 8004d2c:	d10b      	bne.n	8004d46 <niffs_chk_unfinished_movi_data_pages_v+0xaa>
          NIFFS_DBG("check : pix %04x MOVI page alone: no free page to move to\n", pix);
 8004d2e:	6823      	ldr	r3, [r4, #0]
 8004d30:	055c      	lsls	r4, r3, #21
 8004d32:	d537      	bpl.n	8004da4 <niffs_chk_unfinished_movi_data_pages_v+0x108>
 8004d34:	4b1f      	ldr	r3, [pc, #124]	; (8004db4 <niffs_chk_unfinished_movi_data_pages_v+0x118>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d133      	bne.n	8004da4 <niffs_chk_unfinished_movi_data_pages_v+0x108>
 8004d3c:	4821      	ldr	r0, [pc, #132]	; (8004dc4 <niffs_chk_unfinished_movi_data_pages_v+0x128>)
 8004d3e:	4629      	mov	r1, r5
 8004d40:	f004 fa2c 	bl	800919c <arcprint>
 8004d44:	e02e      	b.n	8004da4 <niffs_chk_unfinished_movi_data_pages_v+0x108>
          res = NIFFS_OK;
        } else {
          res = niffs_move_page(fs, pix, new_pix, 0, 0, _NIFFS_FLAG_WRITTEN);
 8004d46:	2300      	movs	r3, #0
 8004d48:	2101      	movs	r1, #1
 8004d4a:	9101      	str	r1, [sp, #4]
 8004d4c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8004d50:	4629      	mov	r1, r5
 8004d52:	9300      	str	r3, [sp, #0]
 8004d54:	4638      	mov	r0, r7
 8004d56:	f7fe fee5 	bl	8003b24 <niffs_move_page>
        }

        check(res);
 8004d5a:	4605      	mov	r5, r0
 8004d5c:	b310      	cbz	r0, 8004da4 <niffs_chk_unfinished_movi_data_pages_v+0x108>
 8004d5e:	6823      	ldr	r3, [r4, #0]
 8004d60:	0558      	lsls	r0, r3, #21
 8004d62:	d51b      	bpl.n	8004d9c <niffs_chk_unfinished_movi_data_pages_v+0x100>
 8004d64:	4b13      	ldr	r3, [pc, #76]	; (8004db4 <niffs_chk_unfinished_movi_data_pages_v+0x118>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	b9c3      	cbnz	r3, 8004d9c <niffs_chk_unfinished_movi_data_pages_v+0x100>
 8004d6a:	f240 63af 	movw	r3, #1711	; 0x6af
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	4815      	ldr	r0, [pc, #84]	; (8004dc8 <niffs_chk_unfinished_movi_data_pages_v+0x12c>)
 8004d72:	4629      	mov	r1, r5
 8004d74:	4a15      	ldr	r2, [pc, #84]	; (8004dcc <niffs_chk_unfinished_movi_data_pages_v+0x130>)
 8004d76:	4b16      	ldr	r3, [pc, #88]	; (8004dd0 <niffs_chk_unfinished_movi_data_pages_v+0x134>)
 8004d78:	f004 fa10 	bl	800919c <arcprint>
 8004d7c:	e00e      	b.n	8004d9c <niffs_chk_unfinished_movi_data_pages_v+0x100>
      } else {
        // erroneous operation, bail out
        check(res);
 8004d7e:	0559      	lsls	r1, r3, #21
 8004d80:	d50e      	bpl.n	8004da0 <niffs_chk_unfinished_movi_data_pages_v+0x104>
 8004d82:	4b0c      	ldr	r3, [pc, #48]	; (8004db4 <niffs_chk_unfinished_movi_data_pages_v+0x118>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	b95b      	cbnz	r3, 8004da0 <niffs_chk_unfinished_movi_data_pages_v+0x104>
 8004d88:	f240 63b2 	movw	r3, #1714	; 0x6b2
 8004d8c:	9300      	str	r3, [sp, #0]
 8004d8e:	480e      	ldr	r0, [pc, #56]	; (8004dc8 <niffs_chk_unfinished_movi_data_pages_v+0x12c>)
 8004d90:	4631      	mov	r1, r6
 8004d92:	4a0e      	ldr	r2, [pc, #56]	; (8004dcc <niffs_chk_unfinished_movi_data_pages_v+0x130>)
 8004d94:	4b0e      	ldr	r3, [pc, #56]	; (8004dd0 <niffs_chk_unfinished_movi_data_pages_v+0x134>)
 8004d96:	f004 fa01 	bl	800919c <arcprint>
 8004d9a:	e001      	b.n	8004da0 <niffs_chk_unfinished_movi_data_pages_v+0x104>
      res = niffs_traverse(fs, pix, pix, niffs_chk_find_corresponding_nonmovi_page_v, &phdr->id);
      if (res == NIFFS_OK) {
        // found written page, delete this
        NIFFS_DBG("check : pix %04x MOVI page has WRIT sibling: delete\n", pix);
        res = niffs_delete_page(fs, pix);
        check(res);
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	e002      	b.n	8004da6 <niffs_chk_unfinished_movi_data_pages_v+0x10a>
        }

        check(res);
      } else {
        // erroneous operation, bail out
        check(res);
 8004da0:	4630      	mov	r0, r6
 8004da2:	e000      	b.n	8004da6 <niffs_chk_unfinished_movi_data_pages_v+0x10a>
        return res;
      }
    }
  }
  return NIFFS_VIS_CONT;
 8004da4:	2001      	movs	r0, #1
}
 8004da6:	b005      	add	sp, #20
 8004da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004daa:	bf00      	nop
 8004dac:	080038c9 	.word	0x080038c9
 8004db0:	20004f80 	.word	0x20004f80
 8004db4:	20004f84 	.word	0x20004f84
 8004db8:	080109e1 	.word	0x080109e1
 8004dbc:	08010a16 	.word	0x08010a16
 8004dc0:	ffffd4fd 	.word	0xffffd4fd
 8004dc4:	08010a46 	.word	0x08010a46
 8004dc8:	08010535 	.word	0x08010535
 8004dcc:	0800e93f 	.word	0x0800e93f
 8004dd0:	0801054b 	.word	0x0801054b

08004dd4 <niffs_get_filedesc>:
    niffs_inform_page_delete(fs, pix);
  }
  return res;
}

int niffs_get_filedesc(niffs *fs, int fd_ix, niffs_file_desc **fd) {
 8004dd4:	b507      	push	{r0, r1, r2, lr}
  if (fd_ix < 0 || fd_ix >= (int)fs->descs_len) check(ERR_NIFFS_FILEDESC_BAD);
 8004dd6:	2900      	cmp	r1, #0
 8004dd8:	db02      	blt.n	8004de0 <niffs_get_filedesc+0xc>
 8004dda:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004ddc:	4299      	cmp	r1, r3
 8004dde:	db0f      	blt.n	8004e00 <niffs_get_filedesc+0x2c>
 8004de0:	4b16      	ldr	r3, [pc, #88]	; (8004e3c <niffs_get_filedesc+0x68>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	0559      	lsls	r1, r3, #21
 8004de6:	d523      	bpl.n	8004e30 <niffs_get_filedesc+0x5c>
 8004de8:	4b15      	ldr	r3, [pc, #84]	; (8004e40 <niffs_get_filedesc+0x6c>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	bb03      	cbnz	r3, 8004e30 <niffs_get_filedesc+0x5c>
 8004dee:	2374      	movs	r3, #116	; 0x74
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	4814      	ldr	r0, [pc, #80]	; (8004e44 <niffs_get_filedesc+0x70>)
 8004df4:	4914      	ldr	r1, [pc, #80]	; (8004e48 <niffs_get_filedesc+0x74>)
 8004df6:	4a15      	ldr	r2, [pc, #84]	; (8004e4c <niffs_get_filedesc+0x78>)
 8004df8:	4b15      	ldr	r3, [pc, #84]	; (8004e50 <niffs_get_filedesc+0x7c>)
 8004dfa:	f004 f9cf 	bl	800919c <arcprint>
 8004dfe:	e017      	b.n	8004e30 <niffs_get_filedesc+0x5c>
  if (fs->descs[fd_ix].obj_id == 0) check(ERR_NIFFS_FILEDESC_CLOSED);
 8004e00:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004e02:	0109      	lsls	r1, r1, #4
 8004e04:	1858      	adds	r0, r3, r1
 8004e06:	5c5b      	ldrb	r3, [r3, r1]
 8004e08:	b97b      	cbnz	r3, 8004e2a <niffs_get_filedesc+0x56>
 8004e0a:	4b0c      	ldr	r3, [pc, #48]	; (8004e3c <niffs_get_filedesc+0x68>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	055a      	lsls	r2, r3, #21
 8004e10:	d510      	bpl.n	8004e34 <niffs_get_filedesc+0x60>
 8004e12:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <niffs_get_filedesc+0x6c>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	b96b      	cbnz	r3, 8004e34 <niffs_get_filedesc+0x60>
 8004e18:	2375      	movs	r3, #117	; 0x75
 8004e1a:	9300      	str	r3, [sp, #0]
 8004e1c:	4809      	ldr	r0, [pc, #36]	; (8004e44 <niffs_get_filedesc+0x70>)
 8004e1e:	490d      	ldr	r1, [pc, #52]	; (8004e54 <niffs_get_filedesc+0x80>)
 8004e20:	4a0a      	ldr	r2, [pc, #40]	; (8004e4c <niffs_get_filedesc+0x78>)
 8004e22:	4b0b      	ldr	r3, [pc, #44]	; (8004e50 <niffs_get_filedesc+0x7c>)
 8004e24:	f004 f9ba 	bl	800919c <arcprint>
 8004e28:	e004      	b.n	8004e34 <niffs_get_filedesc+0x60>
  *fd = &fs->descs[fd_ix];
 8004e2a:	6010      	str	r0, [r2, #0]
  return NIFFS_OK;
 8004e2c:	2000      	movs	r0, #0
 8004e2e:	e002      	b.n	8004e36 <niffs_get_filedesc+0x62>
  }
  return res;
}

int niffs_get_filedesc(niffs *fs, int fd_ix, niffs_file_desc **fd) {
  if (fd_ix < 0 || fd_ix >= (int)fs->descs_len) check(ERR_NIFFS_FILEDESC_BAD);
 8004e30:	4805      	ldr	r0, [pc, #20]	; (8004e48 <niffs_get_filedesc+0x74>)
 8004e32:	e000      	b.n	8004e36 <niffs_get_filedesc+0x62>
  if (fs->descs[fd_ix].obj_id == 0) check(ERR_NIFFS_FILEDESC_CLOSED);
 8004e34:	4807      	ldr	r0, [pc, #28]	; (8004e54 <niffs_get_filedesc+0x80>)
  *fd = &fs->descs[fd_ix];
  return NIFFS_OK;
}
 8004e36:	b003      	add	sp, #12
 8004e38:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e3c:	20004f80 	.word	0x20004f80
 8004e40:	20004f84 	.word	0x20004f84
 8004e44:	08010535 	.word	0x08010535
 8004e48:	ffffd4f2 	.word	0xffffd4f2
 8004e4c:	0800e966 	.word	0x0800e966
 8004e50:	0801054b 	.word	0x0801054b
 8004e54:	ffffd4f3 	.word	0xffffd4f3

08004e58 <niffs_open>:
    }
  }
  return NIFFS_VIS_CONT;
}

int niffs_open(niffs *fs, const char *name, niffs_fd_flags flags) {
 8004e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e5c:	4606      	mov	r6, r0
 8004e5e:	b086      	sub	sp, #24
 8004e60:	4691      	mov	r9, r2
  int fd_ix;
  int res = NIFFS_OK;

  if (name == 0) check(ERR_NIFFS_NULL_PTR);
 8004e62:	460f      	mov	r7, r1
 8004e64:	b111      	cbz	r1, 8004e6c <niffs_open+0x14>
  return res;
}

static niffs_file_desc *niffs_get_free_fd(niffs *fs, int *ix) {
  u32_t i;
  for (i = 0; i < fs->descs_len; i++) {
 8004e66:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004e68:	2500      	movs	r5, #0
 8004e6a:	e01c      	b.n	8004ea6 <niffs_open+0x4e>

int niffs_open(niffs *fs, const char *name, niffs_fd_flags flags) {
  int fd_ix;
  int res = NIFFS_OK;

  if (name == 0) check(ERR_NIFFS_NULL_PTR);
 8004e6c:	4b5a      	ldr	r3, [pc, #360]	; (8004fd8 <niffs_open+0x180>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	0559      	lsls	r1, r3, #21
 8004e72:	f140 80a8 	bpl.w	8004fc6 <niffs_open+0x16e>
 8004e76:	4b59      	ldr	r3, [pc, #356]	; (8004fdc <niffs_open+0x184>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f040 80a3 	bne.w	8004fc6 <niffs_open+0x16e>
 8004e80:	f240 239a 	movw	r3, #666	; 0x29a
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	4856      	ldr	r0, [pc, #344]	; (8004fe0 <niffs_open+0x188>)
 8004e88:	4956      	ldr	r1, [pc, #344]	; (8004fe4 <niffs_open+0x18c>)
 8004e8a:	4a57      	ldr	r2, [pc, #348]	; (8004fe8 <niffs_open+0x190>)
 8004e8c:	4b57      	ldr	r3, [pc, #348]	; (8004fec <niffs_open+0x194>)
 8004e8e:	f004 f985 	bl	800919c <arcprint>
 8004e92:	e098      	b.n	8004fc6 <niffs_open+0x16e>
}

static niffs_file_desc *niffs_get_free_fd(niffs *fs, int *ix) {
  u32_t i;
  for (i = 0; i < fs->descs_len; i++) {
    if (fs->descs[i].obj_id == 0) {
 8004e94:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8004e96:	012b      	lsls	r3, r5, #4
 8004e98:	f812 8003 	ldrb.w	r8, [r2, r3]
 8004e9c:	18d4      	adds	r4, r2, r3
 8004e9e:	f1b8 0f00 	cmp.w	r8, #0
 8004ea2:	d003      	beq.n	8004eac <niffs_open+0x54>
  return res;
}

static niffs_file_desc *niffs_get_free_fd(niffs *fs, int *ix) {
  u32_t i;
  for (i = 0; i < fs->descs_len; i++) {
 8004ea4:	3501      	adds	r5, #1
 8004ea6:	428d      	cmp	r5, r1
 8004ea8:	d1f4      	bne.n	8004e94 <niffs_open+0x3c>
 8004eaa:	e012      	b.n	8004ed2 <niffs_open+0x7a>

  niffs_file_desc *fd = niffs_get_free_fd(fs, &fd_ix);
  if (fd == 0) check(ERR_NIFFS_OUT_OF_FILEDESCS);

  niffs_open_arg arg;
  niffs_memset(&arg, 0, sizeof(arg));
 8004eac:	f10d 0a0c 	add.w	sl, sp, #12
 8004eb0:	4641      	mov	r1, r8
 8004eb2:	220c      	movs	r2, #12
 8004eb4:	4650      	mov	r0, sl
 8004eb6:	f009 fa6b 	bl	800e390 <memset>
  arg.name = name;
  res = niffs_traverse(fs, 0, 0, niffs_open_v, &arg);
 8004eba:	f8cd a000 	str.w	sl, [sp]
 8004ebe:	4630      	mov	r0, r6
 8004ec0:	4641      	mov	r1, r8
 8004ec2:	4642      	mov	r2, r8
 8004ec4:	4b4a      	ldr	r3, [pc, #296]	; (8004ff0 <niffs_open+0x198>)
  niffs_file_desc *fd = niffs_get_free_fd(fs, &fd_ix);
  if (fd == 0) check(ERR_NIFFS_OUT_OF_FILEDESCS);

  niffs_open_arg arg;
  niffs_memset(&arg, 0, sizeof(arg));
  arg.name = name;
 8004ec6:	9703      	str	r7, [sp, #12]
  res = niffs_traverse(fs, 0, 0, niffs_open_v, &arg);
 8004ec8:	f7ff fd52 	bl	8004970 <niffs_traverse>
  if (res == NIFFS_VIS_END) {
 8004ecc:	2802      	cmp	r0, #2
 8004ece:	d159      	bne.n	8004f84 <niffs_open+0x12c>
 8004ed0:	e011      	b.n	8004ef6 <niffs_open+0x9e>
  int res = NIFFS_OK;

  if (name == 0) check(ERR_NIFFS_NULL_PTR);

  niffs_file_desc *fd = niffs_get_free_fd(fs, &fd_ix);
  if (fd == 0) check(ERR_NIFFS_OUT_OF_FILEDESCS);
 8004ed2:	4b41      	ldr	r3, [pc, #260]	; (8004fd8 <niffs_open+0x180>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	055a      	lsls	r2, r3, #21
 8004ed8:	d577      	bpl.n	8004fca <niffs_open+0x172>
 8004eda:	4b40      	ldr	r3, [pc, #256]	; (8004fdc <niffs_open+0x184>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d173      	bne.n	8004fca <niffs_open+0x172>
 8004ee2:	f240 239d 	movw	r3, #669	; 0x29d
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	483d      	ldr	r0, [pc, #244]	; (8004fe0 <niffs_open+0x188>)
 8004eea:	4942      	ldr	r1, [pc, #264]	; (8004ff4 <niffs_open+0x19c>)
 8004eec:	4a3e      	ldr	r2, [pc, #248]	; (8004fe8 <niffs_open+0x190>)
 8004eee:	4b3f      	ldr	r3, [pc, #252]	; (8004fec <niffs_open+0x194>)
 8004ef0:	f004 f954 	bl	800919c <arcprint>
 8004ef4:	e069      	b.n	8004fca <niffs_open+0x172>
  niffs_open_arg arg;
  niffs_memset(&arg, 0, sizeof(arg));
  arg.name = name;
  res = niffs_traverse(fs, 0, 0, niffs_open_v, &arg);
  if (res == NIFFS_VIS_END) {
    if (arg.oid_mov != 0) {
 8004ef6:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8004efa:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8004fd8 <niffs_open+0x180>
 8004efe:	b37b      	cbz	r3, 8004f60 <niffs_open+0x108>
      NIFFS_DBG("open  : pix %04x found only movi page\n", arg.pix_mov);
 8004f00:	f8d8 3000 	ldr.w	r3, [r8]
 8004f04:	055b      	lsls	r3, r3, #21
 8004f06:	d507      	bpl.n	8004f18 <niffs_open+0xc0>
 8004f08:	4b34      	ldr	r3, [pc, #208]	; (8004fdc <niffs_open+0x184>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	b923      	cbnz	r3, 8004f18 <niffs_open+0xc0>
 8004f0e:	483a      	ldr	r0, [pc, #232]	; (8004ff8 <niffs_open+0x1a0>)
 8004f10:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8004f14:	f004 f942 	bl	800919c <arcprint>
      // tidy up found movi obj hdr page
      niffs_page_ix dst_pix;
      res = niffs_chk_tidy_movi_objhdr_page(fs, arg.pix_mov, &dst_pix);
 8004f18:	4630      	mov	r0, r6
 8004f1a:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8004f1e:	f10d 020a 	add.w	r2, sp, #10
 8004f22:	f7ff fd8b 	bl	8004a3c <niffs_chk_tidy_movi_objhdr_page>
      check(res);
 8004f26:	4606      	mov	r6, r0
 8004f28:	b188      	cbz	r0, 8004f4e <niffs_open+0xf6>
 8004f2a:	f8d8 3000 	ldr.w	r3, [r8]
 8004f2e:	055d      	lsls	r5, r3, #21
 8004f30:	d50b      	bpl.n	8004f4a <niffs_open+0xf2>
 8004f32:	4b2a      	ldr	r3, [pc, #168]	; (8004fdc <niffs_open+0x184>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	b943      	cbnz	r3, 8004f4a <niffs_open+0xf2>
 8004f38:	f240 23a9 	movw	r3, #681	; 0x2a9
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	4828      	ldr	r0, [pc, #160]	; (8004fe0 <niffs_open+0x188>)
 8004f40:	4631      	mov	r1, r6
 8004f42:	4a29      	ldr	r2, [pc, #164]	; (8004fe8 <niffs_open+0x190>)
 8004f44:	4b29      	ldr	r3, [pc, #164]	; (8004fec <niffs_open+0x194>)
 8004f46:	f004 f929 	bl	800919c <arcprint>
 8004f4a:	4630      	mov	r0, r6
 8004f4c:	e040      	b.n	8004fd0 <niffs_open+0x178>
      arg.oid = arg.oid_mov;
 8004f4e:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8004f52:	f88d 3012 	strb.w	r3, [sp, #18]
      arg.pix = dst_pix;
 8004f56:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8004f5a:	f8ad 3010 	strh.w	r3, [sp, #16]
 8004f5e:	e012      	b.n	8004f86 <niffs_open+0x12e>
    } else {
      check(ERR_NIFFS_FILE_NOT_FOUND);
 8004f60:	f8d8 3000 	ldr.w	r3, [r8]
 8004f64:	055c      	lsls	r4, r3, #21
 8004f66:	d532      	bpl.n	8004fce <niffs_open+0x176>
 8004f68:	4b1c      	ldr	r3, [pc, #112]	; (8004fdc <niffs_open+0x184>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d12e      	bne.n	8004fce <niffs_open+0x176>
 8004f70:	f240 23ad 	movw	r3, #685	; 0x2ad
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	481a      	ldr	r0, [pc, #104]	; (8004fe0 <niffs_open+0x188>)
 8004f78:	4920      	ldr	r1, [pc, #128]	; (8004ffc <niffs_open+0x1a4>)
 8004f7a:	4a1b      	ldr	r2, [pc, #108]	; (8004fe8 <niffs_open+0x190>)
 8004f7c:	4b1b      	ldr	r3, [pc, #108]	; (8004fec <niffs_open+0x194>)
 8004f7e:	f004 f90d 	bl	800919c <arcprint>
 8004f82:	e024      	b.n	8004fce <niffs_open+0x176>
    }
  } else if (res != NIFFS_OK) {
 8004f84:	bb20      	cbnz	r0, 8004fd0 <niffs_open+0x178>
    return res;
  }
  NIFFS_DBG("open  : \"%s\" found @ pix %04x\n", name, arg.pix);
 8004f86:	4b14      	ldr	r3, [pc, #80]	; (8004fd8 <niffs_open+0x180>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	0558      	lsls	r0, r3, #21
 8004f8c:	d508      	bpl.n	8004fa0 <niffs_open+0x148>
 8004f8e:	4b13      	ldr	r3, [pc, #76]	; (8004fdc <niffs_open+0x184>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	b92b      	cbnz	r3, 8004fa0 <niffs_open+0x148>
 8004f94:	481a      	ldr	r0, [pc, #104]	; (8005000 <niffs_open+0x1a8>)
 8004f96:	4639      	mov	r1, r7
 8004f98:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8004f9c:	f004 f8fe 	bl	800919c <arcprint>

  niffs_memset(fd, 0, sizeof(niffs_file_desc));
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	2210      	movs	r2, #16
 8004fa6:	f009 f9f3 	bl	800e390 <memset>
  fd->obj_id = arg.oid;
 8004faa:	f89d 3012 	ldrb.w	r3, [sp, #18]
  fd->obj_pix = arg.pix;
  fd->cur_pix = arg.pix;
  fd->type = arg.type;
  fd->flags = flags;
 8004fae:	f884 900e 	strb.w	r9, [r4, #14]
    return res;
  }
  NIFFS_DBG("open  : \"%s\" found @ pix %04x\n", name, arg.pix);

  niffs_memset(fd, 0, sizeof(niffs_file_desc));
  fd->obj_id = arg.oid;
 8004fb2:	7023      	strb	r3, [r4, #0]
  fd->obj_pix = arg.pix;
 8004fb4:	f8bd 3010 	ldrh.w	r3, [sp, #16]

static niffs_file_desc *niffs_get_free_fd(niffs *fs, int *ix) {
  u32_t i;
  for (i = 0; i < fs->descs_len; i++) {
    if (fs->descs[i].obj_id == 0) {
      *ix = i;
 8004fb8:	4628      	mov	r0, r5
  }
  NIFFS_DBG("open  : \"%s\" found @ pix %04x\n", name, arg.pix);

  niffs_memset(fd, 0, sizeof(niffs_file_desc));
  fd->obj_id = arg.oid;
  fd->obj_pix = arg.pix;
 8004fba:	8063      	strh	r3, [r4, #2]
  fd->cur_pix = arg.pix;
 8004fbc:	81a3      	strh	r3, [r4, #12]
  fd->type = arg.type;
 8004fbe:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8004fc2:	7123      	strb	r3, [r4, #4]
  fd->flags = flags;

  check(res);

  return fd_ix;
 8004fc4:	e004      	b.n	8004fd0 <niffs_open+0x178>

int niffs_open(niffs *fs, const char *name, niffs_fd_flags flags) {
  int fd_ix;
  int res = NIFFS_OK;

  if (name == 0) check(ERR_NIFFS_NULL_PTR);
 8004fc6:	4807      	ldr	r0, [pc, #28]	; (8004fe4 <niffs_open+0x18c>)
 8004fc8:	e002      	b.n	8004fd0 <niffs_open+0x178>

  niffs_file_desc *fd = niffs_get_free_fd(fs, &fd_ix);
  if (fd == 0) check(ERR_NIFFS_OUT_OF_FILEDESCS);
 8004fca:	480a      	ldr	r0, [pc, #40]	; (8004ff4 <niffs_open+0x19c>)
 8004fcc:	e000      	b.n	8004fd0 <niffs_open+0x178>
      res = niffs_chk_tidy_movi_objhdr_page(fs, arg.pix_mov, &dst_pix);
      check(res);
      arg.oid = arg.oid_mov;
      arg.pix = dst_pix;
    } else {
      check(ERR_NIFFS_FILE_NOT_FOUND);
 8004fce:	480b      	ldr	r0, [pc, #44]	; (8004ffc <niffs_open+0x1a4>)
  fd->flags = flags;

  check(res);

  return fd_ix;
}
 8004fd0:	b006      	add	sp, #24
 8004fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fd6:	bf00      	nop
 8004fd8:	20004f80 	.word	0x20004f80
 8004fdc:	20004f84 	.word	0x20004f84
 8004fe0:	08010535 	.word	0x08010535
 8004fe4:	ffffd4fb 	.word	0xffffd4fb
 8004fe8:	0800e979 	.word	0x0800e979
 8004fec:	0801054b 	.word	0x0801054b
 8004ff0:	080048b9 	.word	0x080048b9
 8004ff4:	ffffd4f5 	.word	0xffffd4f5
 8004ff8:	08010a81 	.word	0x08010a81
 8004ffc:	ffffd4f4 	.word	0xffffd4f4
 8005000:	08010aa8 	.word	0x08010aa8

08005004 <niffs_close>:

int niffs_close(niffs *fs, int fd_ix) {
 8005004:	b507      	push	{r0, r1, r2, lr}
  int res = NIFFS_OK;

  if (fd_ix < 0 || fd_ix >= (int)fs->descs_len) check(ERR_NIFFS_FILEDESC_BAD);
 8005006:	2900      	cmp	r1, #0
 8005008:	db02      	blt.n	8005010 <niffs_close+0xc>
 800500a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800500c:	4299      	cmp	r1, r3
 800500e:	db10      	blt.n	8005032 <niffs_close+0x2e>
 8005010:	4b10      	ldr	r3, [pc, #64]	; (8005054 <niffs_close+0x50>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	0558      	lsls	r0, r3, #21
 8005016:	d517      	bpl.n	8005048 <niffs_close+0x44>
 8005018:	4b0f      	ldr	r3, [pc, #60]	; (8005058 <niffs_close+0x54>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	b9a3      	cbnz	r3, 8005048 <niffs_close+0x44>
 800501e:	f240 23c3 	movw	r3, #707	; 0x2c3
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	480d      	ldr	r0, [pc, #52]	; (800505c <niffs_close+0x58>)
 8005026:	490e      	ldr	r1, [pc, #56]	; (8005060 <niffs_close+0x5c>)
 8005028:	4a0e      	ldr	r2, [pc, #56]	; (8005064 <niffs_close+0x60>)
 800502a:	4b0f      	ldr	r3, [pc, #60]	; (8005068 <niffs_close+0x64>)
 800502c:	f004 f8b6 	bl	800919c <arcprint>
 8005030:	e00a      	b.n	8005048 <niffs_close+0x44>
  if (fs->descs[fd_ix].obj_id == 0) return NIFFS_OK; // allow closing already closed ones
 8005032:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005034:	0109      	lsls	r1, r1, #4
 8005036:	1858      	adds	r0, r3, r1
 8005038:	5c5b      	ldrb	r3, [r3, r1]
 800503a:	b13b      	cbz	r3, 800504c <niffs_close+0x48>

  niffs_file_desc *fd = &fs->descs[fd_ix];

  niffs_memset(fd, 0, sizeof(niffs_file_desc));
 800503c:	2100      	movs	r1, #0
 800503e:	2210      	movs	r2, #16
 8005040:	f009 f9a6 	bl	800e390 <memset>

  return res;
 8005044:	2000      	movs	r0, #0
 8005046:	e002      	b.n	800504e <niffs_close+0x4a>
}

int niffs_close(niffs *fs, int fd_ix) {
  int res = NIFFS_OK;

  if (fd_ix < 0 || fd_ix >= (int)fs->descs_len) check(ERR_NIFFS_FILEDESC_BAD);
 8005048:	4805      	ldr	r0, [pc, #20]	; (8005060 <niffs_close+0x5c>)
 800504a:	e000      	b.n	800504e <niffs_close+0x4a>
  if (fs->descs[fd_ix].obj_id == 0) return NIFFS_OK; // allow closing already closed ones
 800504c:	4618      	mov	r0, r3
  niffs_file_desc *fd = &fs->descs[fd_ix];

  niffs_memset(fd, 0, sizeof(niffs_file_desc));

  return res;
}
 800504e:	b003      	add	sp, #12
 8005050:	f85d fb04 	ldr.w	pc, [sp], #4
 8005054:	20004f80 	.word	0x20004f80
 8005058:	20004f84 	.word	0x20004f84
 800505c:	08010535 	.word	0x08010535
 8005060:	ffffd4f2 	.word	0xffffd4f2
 8005064:	0800e984 	.word	0x0800e984
 8005068:	0801054b 	.word	0x0801054b

0800506c <niffs_read_ptr>:

int niffs_read_ptr(niffs *fs, int fd_ix, u8_t **data, u32_t *avail) {
 800506c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005070:	b089      	sub	sp, #36	; 0x24
 8005072:	4690      	mov	r8, r2
  niffs_file_desc *fd;
  int res = niffs_get_filedesc(fs, fd_ix, &fd);
 8005074:	aa07      	add	r2, sp, #28
  niffs_memset(fd, 0, sizeof(niffs_file_desc));

  return res;
}

int niffs_read_ptr(niffs *fs, int fd_ix, u8_t **data, u32_t *avail) {
 8005076:	4605      	mov	r5, r0
 8005078:	4699      	mov	r9, r3
  niffs_file_desc *fd;
  int res = niffs_get_filedesc(fs, fd_ix, &fd);
 800507a:	f7ff feab 	bl	8004dd4 <niffs_get_filedesc>
  check(res);
 800507e:	4682      	mov	sl, r0
 8005080:	b188      	cbz	r0, 80050a6 <niffs_read_ptr+0x3a>
 8005082:	4b9d      	ldr	r3, [pc, #628]	; (80052f8 <niffs_read_ptr+0x28c>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	0558      	lsls	r0, r3, #21
 8005088:	d552      	bpl.n	8005130 <niffs_read_ptr+0xc4>
 800508a:	4b9c      	ldr	r3, [pc, #624]	; (80052fc <niffs_read_ptr+0x290>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d14e      	bne.n	8005130 <niffs_read_ptr+0xc4>
 8005092:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	4899      	ldr	r0, [pc, #612]	; (8005300 <niffs_read_ptr+0x294>)
 800509a:	4651      	mov	r1, sl
 800509c:	4a99      	ldr	r2, [pc, #612]	; (8005304 <niffs_read_ptr+0x298>)
 800509e:	4b9a      	ldr	r3, [pc, #616]	; (8005308 <niffs_read_ptr+0x29c>)
 80050a0:	f004 f87c 	bl	800919c <arcprint>
 80050a4:	e044      	b.n	8005130 <niffs_read_ptr+0xc4>

  if ((fd->flags & NIFFS_O_RDONLY) == 0) {
 80050a6:	9f07      	ldr	r7, [sp, #28]
 80050a8:	7bbb      	ldrb	r3, [r7, #14]
 80050aa:	0719      	lsls	r1, r3, #28
 80050ac:	d411      	bmi.n	80050d2 <niffs_read_ptr+0x66>
    check(ERR_NIFFS_NOT_READABLE);
 80050ae:	4b92      	ldr	r3, [pc, #584]	; (80052f8 <niffs_read_ptr+0x28c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	055a      	lsls	r2, r3, #21
 80050b4:	d53e      	bpl.n	8005134 <niffs_read_ptr+0xc8>
 80050b6:	4b91      	ldr	r3, [pc, #580]	; (80052fc <niffs_read_ptr+0x290>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d13a      	bne.n	8005134 <niffs_read_ptr+0xc8>
 80050be:	f240 23d3 	movw	r3, #723	; 0x2d3
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	488e      	ldr	r0, [pc, #568]	; (8005300 <niffs_read_ptr+0x294>)
 80050c6:	4991      	ldr	r1, [pc, #580]	; (800530c <niffs_read_ptr+0x2a0>)
 80050c8:	4a8e      	ldr	r2, [pc, #568]	; (8005304 <niffs_read_ptr+0x298>)
 80050ca:	4b8f      	ldr	r3, [pc, #572]	; (8005308 <niffs_read_ptr+0x29c>)
 80050cc:	f004 f866 	bl	800919c <arcprint>
 80050d0:	e030      	b.n	8005134 <niffs_read_ptr+0xc8>
  }

  niffs_object_hdr *ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);
 80050d2:	8878      	ldrh	r0, [r7, #2]
 80050d4:	6a29      	ldr	r1, [r5, #32]
 80050d6:	68ec      	ldr	r4, [r5, #12]
 80050d8:	fbb0 f3f1 	udiv	r3, r0, r1
 80050dc:	fb01 0013 	mls	r0, r1, r3, r0
 80050e0:	4360      	muls	r0, r4
 80050e2:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80050e6:	f8d5 c000 	ldr.w	ip, [r5]
 80050ea:	fb0b 0003 	mla	r0, fp, r3, r0
 80050ee:	3004      	adds	r0, #4
 80050f0:	eb0c 0200 	add.w	r2, ip, r0
  u32_t flen = ohdr->len == NIFFS_UNDEF_LEN ? 0 : ohdr->len;
 80050f4:	6853      	ldr	r3, [r2, #4]
  if (fd->offs >= flen) {
 80050f6:	68be      	ldr	r6, [r7, #8]
  if ((fd->flags & NIFFS_O_RDONLY) == 0) {
    check(ERR_NIFFS_NOT_READABLE);
  }

  niffs_object_hdr *ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);
  u32_t flen = ohdr->len == NIFFS_UNDEF_LEN ? 0 : ohdr->len;
 80050f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050fc:	bf08      	it	eq
 80050fe:	2300      	moveq	r3, #0
  if (fd->offs >= flen) {
 8005100:	429e      	cmp	r6, r3
 8005102:	d305      	bcc.n	8005110 <niffs_read_ptr+0xa4>
    *data = 0;
 8005104:	f8c8 a000 	str.w	sl, [r8]
    *avail = 0;
    res =  ERR_NIFFS_END_OF_FILE;
 8005108:	4c81      	ldr	r4, [pc, #516]	; (8005310 <niffs_read_ptr+0x2a4>)

  niffs_object_hdr *ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);
  u32_t flen = ohdr->len == NIFFS_UNDEF_LEN ? 0 : ohdr->len;
  if (fd->offs >= flen) {
    *data = 0;
    *avail = 0;
 800510a:	f8c9 a000 	str.w	sl, [r9]
 800510e:	e0ae      	b.n	800526e <niffs_read_ptr+0x202>
    res =  ERR_NIFFS_END_OF_FILE;
  } else if (_NIFFS_IS_DELE(&ohdr->phdr)) res = ERR_NIFFS_PAGE_DELETED;
 8005110:	f83c 0000 	ldrh.w	r0, [ip, r0]
 8005114:	2800      	cmp	r0, #0
 8005116:	f000 80a5 	beq.w	8005264 <niffs_read_ptr+0x1f8>
  else if (_NIFFS_IS_FREE(&ohdr->phdr)) res = ERR_NIFFS_PAGE_FREE;
 800511a:	f64f 7aff 	movw	sl, #65535	; 0xffff
 800511e:	4550      	cmp	r0, sl
 8005120:	f000 80a2 	beq.w	8005268 <niffs_read_ptr+0x1fc>
  else if (ohdr->phdr.id.obj_id != fd->obj_id) res = ERR_NIFFS_INCOHERENT_ID;
 8005124:	7852      	ldrb	r2, [r2, #1]
 8005126:	7838      	ldrb	r0, [r7, #0]
 8005128:	4290      	cmp	r0, r2
 800512a:	f040 809f 	bne.w	800526c <niffs_read_ptr+0x200>
 800512e:	e003      	b.n	8005138 <niffs_read_ptr+0xcc>
 8005130:	4650      	mov	r0, sl
 8005132:	e0de      	b.n	80052f2 <niffs_read_ptr+0x286>
  niffs_file_desc *fd;
  int res = niffs_get_filedesc(fs, fd_ix, &fd);
  check(res);

  if ((fd->flags & NIFFS_O_RDONLY) == 0) {
    check(ERR_NIFFS_NOT_READABLE);
 8005134:	4875      	ldr	r0, [pc, #468]	; (800530c <niffs_read_ptr+0x2a0>)
 8005136:	e0dc      	b.n	80052f2 <niffs_read_ptr+0x286>
  } else if (_NIFFS_IS_DELE(&ohdr->phdr)) res = ERR_NIFFS_PAGE_DELETED;
  else if (_NIFFS_IS_FREE(&ohdr->phdr)) res = ERR_NIFFS_PAGE_FREE;
  else if (ohdr->phdr.id.obj_id != fd->obj_id) res = ERR_NIFFS_INCOHERENT_ID;
  check(res);

  niffs_page_hdr *phdr = (niffs_page_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->cur_pix);
 8005138:	89b8      	ldrh	r0, [r7, #12]
  u32_t rem_tot = flen - fd->offs;
 800513a:	1b9b      	subs	r3, r3, r6
  } else if (_NIFFS_IS_DELE(&ohdr->phdr)) res = ERR_NIFFS_PAGE_DELETED;
  else if (_NIFFS_IS_FREE(&ohdr->phdr)) res = ERR_NIFFS_PAGE_FREE;
  else if (ohdr->phdr.id.obj_id != fd->obj_id) res = ERR_NIFFS_INCOHERENT_ID;
  check(res);

  niffs_page_hdr *phdr = (niffs_page_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->cur_pix);
 800513c:	fbb0 faf1 	udiv	sl, r0, r1
 8005140:	fb01 011a 	mls	r1, r1, sl, r0
 8005144:	4361      	muls	r1, r4
 8005146:	fb0b 1a0a 	mla	sl, fp, sl, r1
 800514a:	f10a 0a04 	add.w	sl, sl, #4
 800514e:	eb0c 010a 	add.w	r1, ip, sl
  u32_t rem_tot = flen - fd->offs;
  u32_t rem_page = _NIFFS_SPIX_2_PDATA_LEN(fs, phdr->id.spix) - _NIFFS_OFFS_2_PDATA_OFFS(fs, fd->offs);
 8005152:	f81c a00a 	ldrb.w	sl, [ip, sl]
  else if (_NIFFS_IS_FREE(&ohdr->phdr)) res = ERR_NIFFS_PAGE_FREE;
  else if (ohdr->phdr.id.obj_id != fd->obj_id) res = ERR_NIFFS_INCOHERENT_ID;
  check(res);

  niffs_page_hdr *phdr = (niffs_page_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->cur_pix);
  u32_t rem_tot = flen - fd->offs;
 8005156:	9304      	str	r3, [sp, #16]
  u32_t rem_page = _NIFFS_SPIX_2_PDATA_LEN(fs, phdr->id.spix) - _NIFFS_OFFS_2_PDATA_OFFS(fs, fd->offs);
 8005158:	f1a4 031e 	sub.w	r3, r4, #30
 800515c:	f1ba 0f00 	cmp.w	sl, #0
 8005160:	bf0c      	ite	eq
 8005162:	f04f 0c1a 	moveq.w	ip, #26
 8005166:	f04f 0c00 	movne.w	ip, #0
 800516a:	429e      	cmp	r6, r3
 800516c:	f8cd a008 	str.w	sl, [sp, #8]
 8005170:	f8cd c00c 	str.w	ip, [sp, #12]
 8005174:	d30a      	bcc.n	800518c <niffs_read_ptr+0x120>
 8005176:	f106 0a1e 	add.w	sl, r6, #30
 800517a:	ebc4 0a0a 	rsb	sl, r4, sl
 800517e:	f1a4 0c04 	sub.w	ip, r4, #4
 8005182:	fbba fbfc 	udiv	fp, sl, ip
 8005186:	fb0c aa1b 	mls	sl, ip, fp, sl
 800518a:	e000      	b.n	800518e <niffs_read_ptr+0x122>
 800518c:	46b2      	mov	sl, r6
  u32_t avail_data;
  if (fd->type == _NIFFS_FTYPE_LINFILE) {
 800518e:	793f      	ldrb	r7, [r7, #4]
 8005190:	2f01      	cmp	r7, #1
 8005192:	d111      	bne.n	80051b8 <niffs_read_ptr+0x14c>
#if !NIFFS_LINEAR_AREA
    check(ERR_NIFFS_BAD_CONF);
 8005194:	4b58      	ldr	r3, [pc, #352]	; (80052f8 <niffs_read_ptr+0x28c>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	055b      	lsls	r3, r3, #21
 800519a:	d561      	bpl.n	8005260 <niffs_read_ptr+0x1f4>
 800519c:	4b57      	ldr	r3, [pc, #348]	; (80052fc <niffs_read_ptr+0x290>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d15d      	bne.n	8005260 <niffs_read_ptr+0x1f4>
 80051a4:	f240 23e7 	movw	r3, #743	; 0x2e7
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	4855      	ldr	r0, [pc, #340]	; (8005300 <niffs_read_ptr+0x294>)
 80051ac:	4959      	ldr	r1, [pc, #356]	; (8005314 <niffs_read_ptr+0x2a8>)
 80051ae:	4a55      	ldr	r2, [pc, #340]	; (8005304 <niffs_read_ptr+0x298>)
 80051b0:	4b55      	ldr	r3, [pc, #340]	; (8005308 <niffs_read_ptr+0x29c>)
 80051b2:	f003 fff3 	bl	800919c <arcprint>
 80051b6:	e053      	b.n	8005260 <niffs_read_ptr+0x1f4>
    *data = lin_file_start_addr + fd->offs;
    *avail = avail_data;
  } else {
    // regular page chopped files
    // make sure span index is coherent
    if (phdr->id.spix != _NIFFS_OFFS_2_SPIX(fs, fd->offs)) {
 80051b8:	429e      	cmp	r6, r3
 80051ba:	d308      	bcc.n	80051ce <niffs_read_ptr+0x162>
 80051bc:	f106 0c1e 	add.w	ip, r6, #30
 80051c0:	ebc4 0c0c 	rsb	ip, r4, ip
 80051c4:	1f27      	subs	r7, r4, #4
 80051c6:	fbbc f7f7 	udiv	r7, ip, r7
 80051ca:	3701      	adds	r7, #1
 80051cc:	e000      	b.n	80051d0 <niffs_read_ptr+0x164>
 80051ce:	2700      	movs	r7, #0
 80051d0:	f8dd c008 	ldr.w	ip, [sp, #8]
 80051d4:	45bc      	cmp	ip, r7
 80051d6:	d036      	beq.n	8005246 <niffs_read_ptr+0x1da>
      niffs_page_ix pix;
      res = niffs_find_page(fs, &pix, fd->obj_id, _NIFFS_OFFS_2_SPIX(fs, fd->offs), fd->cur_pix);
 80051d8:	429e      	cmp	r6, r3
 80051da:	d308      	bcc.n	80051ee <niffs_read_ptr+0x182>
 80051dc:	f106 031e 	add.w	r3, r6, #30
 80051e0:	1b1b      	subs	r3, r3, r4
 80051e2:	1f21      	subs	r1, r4, #4
 80051e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80051e8:	3301      	adds	r3, #1
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	e000      	b.n	80051f0 <niffs_read_ptr+0x184>
 80051ee:	2300      	movs	r3, #0
 80051f0:	9000      	str	r0, [sp, #0]
 80051f2:	f10d 011a 	add.w	r1, sp, #26
 80051f6:	4628      	mov	r0, r5
 80051f8:	f7ff fcf8 	bl	8004bec <niffs_find_page>
      check(res);
 80051fc:	4606      	mov	r6, r0
 80051fe:	b188      	cbz	r0, 8005224 <niffs_read_ptr+0x1b8>
 8005200:	4b3d      	ldr	r3, [pc, #244]	; (80052f8 <niffs_read_ptr+0x28c>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	055f      	lsls	r7, r3, #21
 8005206:	d50b      	bpl.n	8005220 <niffs_read_ptr+0x1b4>
 8005208:	4b3c      	ldr	r3, [pc, #240]	; (80052fc <niffs_read_ptr+0x290>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	b943      	cbnz	r3, 8005220 <niffs_read_ptr+0x1b4>
 800520e:	f240 23fb 	movw	r3, #763	; 0x2fb
 8005212:	9300      	str	r3, [sp, #0]
 8005214:	483a      	ldr	r0, [pc, #232]	; (8005300 <niffs_read_ptr+0x294>)
 8005216:	4631      	mov	r1, r6
 8005218:	4a3a      	ldr	r2, [pc, #232]	; (8005304 <niffs_read_ptr+0x298>)
 800521a:	4b3b      	ldr	r3, [pc, #236]	; (8005308 <niffs_read_ptr+0x29c>)
 800521c:	f003 ffbe 	bl	800919c <arcprint>
 8005220:	4630      	mov	r0, r6
 8005222:	e066      	b.n	80052f2 <niffs_read_ptr+0x286>
      fd->cur_pix = pix;
 8005224:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8005228:	9a07      	ldr	r2, [sp, #28]
      phdr = (niffs_page_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->cur_pix);
 800522a:	6a28      	ldr	r0, [r5, #32]
    // make sure span index is coherent
    if (phdr->id.spix != _NIFFS_OFFS_2_SPIX(fs, fd->offs)) {
      niffs_page_ix pix;
      res = niffs_find_page(fs, &pix, fd->obj_id, _NIFFS_OFFS_2_SPIX(fs, fd->offs), fd->cur_pix);
      check(res);
      fd->cur_pix = pix;
 800522c:	8193      	strh	r3, [r2, #12]
      phdr = (niffs_page_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->cur_pix);
 800522e:	fbb3 f2f0 	udiv	r2, r3, r0
 8005232:	fb00 3312 	mls	r3, r0, r2, r3
 8005236:	68e9      	ldr	r1, [r5, #12]
 8005238:	68ae      	ldr	r6, [r5, #8]
 800523a:	4359      	muls	r1, r3
 800523c:	fb06 1102 	mla	r1, r6, r2, r1
 8005240:	682e      	ldr	r6, [r5, #0]
 8005242:	3104      	adds	r1, #4
 8005244:	4431      	add	r1, r6
    }

    if (_NIFFS_IS_DELE(phdr)) res = ERR_NIFFS_PAGE_DELETED;
 8005246:	880b      	ldrh	r3, [r1, #0]
 8005248:	b1db      	cbz	r3, 8005282 <niffs_read_ptr+0x216>
    else if (_NIFFS_IS_FREE(phdr)) res =  ERR_NIFFS_PAGE_FREE;
 800524a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800524e:	4293      	cmp	r3, r2
 8005250:	d029      	beq.n	80052a6 <niffs_read_ptr+0x23a>
    else if (phdr->id.obj_id != fd->obj_id) res = ERR_NIFFS_INCOHERENT_ID;
 8005252:	9b07      	ldr	r3, [sp, #28]
 8005254:	7848      	ldrb	r0, [r1, #1]
 8005256:	781a      	ldrb	r2, [r3, #0]
 8005258:	4290      	cmp	r0, r2
 800525a:	d028      	beq.n	80052ae <niffs_read_ptr+0x242>
 800525c:	4c2e      	ldr	r4, [pc, #184]	; (8005318 <niffs_read_ptr+0x2ac>)
 800525e:	e011      	b.n	8005284 <niffs_read_ptr+0x218>
  u32_t rem_tot = flen - fd->offs;
  u32_t rem_page = _NIFFS_SPIX_2_PDATA_LEN(fs, phdr->id.spix) - _NIFFS_OFFS_2_PDATA_OFFS(fs, fd->offs);
  u32_t avail_data;
  if (fd->type == _NIFFS_FTYPE_LINFILE) {
#if !NIFFS_LINEAR_AREA
    check(ERR_NIFFS_BAD_CONF);
 8005260:	482c      	ldr	r0, [pc, #176]	; (8005314 <niffs_read_ptr+0x2a8>)
 8005262:	e046      	b.n	80052f2 <niffs_read_ptr+0x286>
  u32_t flen = ohdr->len == NIFFS_UNDEF_LEN ? 0 : ohdr->len;
  if (fd->offs >= flen) {
    *data = 0;
    *avail = 0;
    res =  ERR_NIFFS_END_OF_FILE;
  } else if (_NIFFS_IS_DELE(&ohdr->phdr)) res = ERR_NIFFS_PAGE_DELETED;
 8005264:	4c2d      	ldr	r4, [pc, #180]	; (800531c <niffs_read_ptr+0x2b0>)
 8005266:	e002      	b.n	800526e <niffs_read_ptr+0x202>
  else if (_NIFFS_IS_FREE(&ohdr->phdr)) res = ERR_NIFFS_PAGE_FREE;
 8005268:	4c2d      	ldr	r4, [pc, #180]	; (8005320 <niffs_read_ptr+0x2b4>)
 800526a:	e000      	b.n	800526e <niffs_read_ptr+0x202>
  else if (ohdr->phdr.id.obj_id != fd->obj_id) res = ERR_NIFFS_INCOHERENT_ID;
 800526c:	4c2a      	ldr	r4, [pc, #168]	; (8005318 <niffs_read_ptr+0x2ac>)
  check(res);
 800526e:	4b22      	ldr	r3, [pc, #136]	; (80052f8 <niffs_read_ptr+0x28c>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	055e      	lsls	r6, r3, #21
 8005274:	d519      	bpl.n	80052aa <niffs_read_ptr+0x23e>
 8005276:	4b21      	ldr	r3, [pc, #132]	; (80052fc <niffs_read_ptr+0x290>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	b9b3      	cbnz	r3, 80052aa <niffs_read_ptr+0x23e>
 800527c:	f240 23df 	movw	r3, #735	; 0x2df
 8005280:	e009      	b.n	8005296 <niffs_read_ptr+0x22a>
      check(res);
      fd->cur_pix = pix;
      phdr = (niffs_page_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->cur_pix);
    }

    if (_NIFFS_IS_DELE(phdr)) res = ERR_NIFFS_PAGE_DELETED;
 8005282:	4c26      	ldr	r4, [pc, #152]	; (800531c <niffs_read_ptr+0x2b0>)
    else if (_NIFFS_IS_FREE(phdr)) res =  ERR_NIFFS_PAGE_FREE;
    else if (phdr->id.obj_id != fd->obj_id) res = ERR_NIFFS_INCOHERENT_ID;
    check(res);
 8005284:	4b1c      	ldr	r3, [pc, #112]	; (80052f8 <niffs_read_ptr+0x28c>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	055d      	lsls	r5, r3, #21
 800528a:	d50e      	bpl.n	80052aa <niffs_read_ptr+0x23e>
 800528c:	4b1b      	ldr	r3, [pc, #108]	; (80052fc <niffs_read_ptr+0x290>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	b95b      	cbnz	r3, 80052aa <niffs_read_ptr+0x23e>
 8005292:	f240 3303 	movw	r3, #771	; 0x303
 8005296:	9300      	str	r3, [sp, #0]
 8005298:	4819      	ldr	r0, [pc, #100]	; (8005300 <niffs_read_ptr+0x294>)
 800529a:	4621      	mov	r1, r4
 800529c:	4a19      	ldr	r2, [pc, #100]	; (8005304 <niffs_read_ptr+0x298>)
 800529e:	4b1a      	ldr	r3, [pc, #104]	; (8005308 <niffs_read_ptr+0x29c>)
 80052a0:	f003 ff7c 	bl	800919c <arcprint>
 80052a4:	e001      	b.n	80052aa <niffs_read_ptr+0x23e>
      fd->cur_pix = pix;
      phdr = (niffs_page_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->cur_pix);
    }

    if (_NIFFS_IS_DELE(phdr)) res = ERR_NIFFS_PAGE_DELETED;
    else if (_NIFFS_IS_FREE(phdr)) res =  ERR_NIFFS_PAGE_FREE;
 80052a6:	4c1e      	ldr	r4, [pc, #120]	; (8005320 <niffs_read_ptr+0x2b4>)
 80052a8:	e7ec      	b.n	8005284 <niffs_read_ptr+0x218>
 80052aa:	4620      	mov	r0, r4
 80052ac:	e021      	b.n	80052f2 <niffs_read_ptr+0x286>
    else if (phdr->id.obj_id != fd->obj_id) res = ERR_NIFFS_INCOHERENT_ID;
    check(res);
    *data = (u8_t *)phdr + _NIFFS_OFFS_2_PDATA_OFFS(fs, fd->offs) +
 80052ae:	68ea      	ldr	r2, [r5, #12]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f1a2 001e 	sub.w	r0, r2, #30
 80052b6:	4283      	cmp	r3, r0
 80052b8:	d306      	bcc.n	80052c8 <niffs_read_ptr+0x25c>
 80052ba:	331e      	adds	r3, #30
 80052bc:	1a9b      	subs	r3, r3, r2
 80052be:	3a04      	subs	r2, #4
 80052c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80052c4:	fb02 3310 	mls	r3, r2, r0, r3
 80052c8:	780a      	ldrb	r2, [r1, #0]
  else if (ohdr->phdr.id.obj_id != fd->obj_id) res = ERR_NIFFS_INCOHERENT_ID;
  check(res);

  niffs_page_hdr *phdr = (niffs_page_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->cur_pix);
  u32_t rem_tot = flen - fd->offs;
  u32_t rem_page = _NIFFS_SPIX_2_PDATA_LEN(fs, phdr->id.spix) - _NIFFS_OFFS_2_PDATA_OFFS(fs, fd->offs);
 80052ca:	1f20      	subs	r0, r4, #4
 80052cc:	9c03      	ldr	r4, [sp, #12]

    if (_NIFFS_IS_DELE(phdr)) res = ERR_NIFFS_PAGE_DELETED;
    else if (_NIFFS_IS_FREE(phdr)) res =  ERR_NIFFS_PAGE_FREE;
    else if (phdr->id.obj_id != fd->obj_id) res = ERR_NIFFS_INCOHERENT_ID;
    check(res);
    *data = (u8_t *)phdr + _NIFFS_OFFS_2_PDATA_OFFS(fs, fd->offs) +
 80052ce:	2a00      	cmp	r2, #0
 80052d0:	bf14      	ite	ne
 80052d2:	2204      	movne	r2, #4
 80052d4:	221a      	moveq	r2, #26
  else if (ohdr->phdr.id.obj_id != fd->obj_id) res = ERR_NIFFS_INCOHERENT_ID;
  check(res);

  niffs_page_hdr *phdr = (niffs_page_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->cur_pix);
  u32_t rem_tot = flen - fd->offs;
  u32_t rem_page = _NIFFS_SPIX_2_PDATA_LEN(fs, phdr->id.spix) - _NIFFS_OFFS_2_PDATA_OFFS(fs, fd->offs);
 80052d6:	1b00      	subs	r0, r0, r4
    check(ERR_NIFFS_BAD_CONF);
#else
    avail_data = rem_tot;
#endif
  } else {
    avail_data = NIFFS_MIN(rem_tot, rem_page);
 80052d8:	f8dd b010 	ldr.w	fp, [sp, #16]
  else if (ohdr->phdr.id.obj_id != fd->obj_id) res = ERR_NIFFS_INCOHERENT_ID;
  check(res);

  niffs_page_hdr *phdr = (niffs_page_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->cur_pix);
  u32_t rem_tot = flen - fd->offs;
  u32_t rem_page = _NIFFS_SPIX_2_PDATA_LEN(fs, phdr->id.spix) - _NIFFS_OFFS_2_PDATA_OFFS(fs, fd->offs);
 80052dc:	ebca 0000 	rsb	r0, sl, r0

    if (_NIFFS_IS_DELE(phdr)) res = ERR_NIFFS_PAGE_DELETED;
    else if (_NIFFS_IS_FREE(phdr)) res =  ERR_NIFFS_PAGE_FREE;
    else if (phdr->id.obj_id != fd->obj_id) res = ERR_NIFFS_INCOHERENT_ID;
    check(res);
    *data = (u8_t *)phdr + _NIFFS_OFFS_2_PDATA_OFFS(fs, fd->offs) +
 80052e0:	4413      	add	r3, r2
    check(ERR_NIFFS_BAD_CONF);
#else
    avail_data = rem_tot;
#endif
  } else {
    avail_data = NIFFS_MIN(rem_tot, rem_page);
 80052e2:	4558      	cmp	r0, fp
 80052e4:	bf28      	it	cs
 80052e6:	4658      	movcs	r0, fp

    if (_NIFFS_IS_DELE(phdr)) res = ERR_NIFFS_PAGE_DELETED;
    else if (_NIFFS_IS_FREE(phdr)) res =  ERR_NIFFS_PAGE_FREE;
    else if (phdr->id.obj_id != fd->obj_id) res = ERR_NIFFS_INCOHERENT_ID;
    check(res);
    *data = (u8_t *)phdr + _NIFFS_OFFS_2_PDATA_OFFS(fs, fd->offs) +
 80052e8:	4419      	add	r1, r3
 80052ea:	f8c8 1000 	str.w	r1, [r8]
        (phdr->id.spix == 0 ? sizeof(niffs_object_hdr) : sizeof(niffs_page_hdr));
    *avail = avail_data;
 80052ee:	f8c9 0000 	str.w	r0, [r9]
  }

  return avail_data;
}
 80052f2:	b009      	add	sp, #36	; 0x24
 80052f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052f8:	20004f80 	.word	0x20004f80
 80052fc:	20004f84 	.word	0x20004f84
 8005300:	08010535 	.word	0x08010535
 8005304:	0800e990 	.word	0x0800e990
 8005308:	0801054b 	.word	0x0801054b
 800530c:	ffffd4e6 	.word	0xffffd4e6
 8005310:	ffffd4ef 	.word	0xffffd4ef
 8005314:	ffffd507 	.word	0xffffd507
 8005318:	ffffd4f1 	.word	0xffffd4f1
 800531c:	ffffd4eb 	.word	0xffffd4eb
 8005320:	ffffd4ea 	.word	0xffffd4ea

08005324 <niffs_seek>:

int niffs_seek(niffs *fs, int fd_ix, s32_t offset, u8_t whence) {
 8005324:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005328:	b085      	sub	sp, #20
 800532a:	4614      	mov	r4, r2
  int res = NIFFS_OK;
  niffs_file_desc *fd;

  res = niffs_get_filedesc(fs, fd_ix, &fd);
 800532c:	aa03      	add	r2, sp, #12
  }

  return avail_data;
}

int niffs_seek(niffs *fs, int fd_ix, s32_t offset, u8_t whence) {
 800532e:	4607      	mov	r7, r0
 8005330:	4699      	mov	r9, r3
  int res = NIFFS_OK;
  niffs_file_desc *fd;

  res = niffs_get_filedesc(fs, fd_ix, &fd);
 8005332:	f7ff fd4f 	bl	8004dd4 <niffs_get_filedesc>
  check(res);
 8005336:	4680      	mov	r8, r0
 8005338:	b198      	cbz	r0, 8005362 <niffs_seek+0x3e>
 800533a:	4b4b      	ldr	r3, [pc, #300]	; (8005468 <niffs_seek+0x144>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	055d      	lsls	r5, r3, #21
 8005340:	f140 808e 	bpl.w	8005460 <niffs_seek+0x13c>
 8005344:	4b49      	ldr	r3, [pc, #292]	; (800546c <niffs_seek+0x148>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	f040 8089 	bne.w	8005460 <niffs_seek+0x13c>
 800534e:	f240 3311 	movw	r3, #785	; 0x311
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	4846      	ldr	r0, [pc, #280]	; (8005470 <niffs_seek+0x14c>)
 8005356:	4641      	mov	r1, r8
 8005358:	4a46      	ldr	r2, [pc, #280]	; (8005474 <niffs_seek+0x150>)
 800535a:	4b47      	ldr	r3, [pc, #284]	; (8005478 <niffs_seek+0x154>)
 800535c:	f003 ff1e 	bl	800919c <arcprint>
 8005360:	e07e      	b.n	8005460 <niffs_seek+0x13c>
  niffs_object_hdr *ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);
 8005362:	9e03      	ldr	r6, [sp, #12]
 8005364:	6a3b      	ldr	r3, [r7, #32]
 8005366:	8870      	ldrh	r0, [r6, #2]
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	fbb0 f1f3 	udiv	r1, r0, r3
 800536e:	fb03 0011 	mls	r0, r3, r1, r0
  u32_t flen = ohdr->len == NIFFS_UNDEF_LEN ? 0 : ohdr->len;
 8005372:	683b      	ldr	r3, [r7, #0]
  int res = NIFFS_OK;
  niffs_file_desc *fd;

  res = niffs_get_filedesc(fs, fd_ix, &fd);
  check(res);
  niffs_object_hdr *ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);
 8005374:	68fd      	ldr	r5, [r7, #12]
  u32_t flen = ohdr->len == NIFFS_UNDEF_LEN ? 0 : ohdr->len;
 8005376:	fb02 3201 	mla	r2, r2, r1, r3
 800537a:	fb05 2300 	mla	r3, r5, r0, r2
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8005384:	bf08      	it	eq
 8005386:	2200      	moveq	r2, #0
  s32_t coffs;
  switch (whence) {
 8005388:	f1b9 0f01 	cmp.w	r9, #1
 800538c:	d004      	beq.n	8005398 <niffs_seek+0x74>
 800538e:	f1b9 0f02 	cmp.w	r9, #2
 8005392:	d103      	bne.n	800539c <niffs_seek+0x78>
    break;
  case NIFFS_SEEK_CUR:
    coffs = fd->offs + offset;
    break;
  case NIFFS_SEEK_END:
    coffs = flen + offset;
 8005394:	4414      	add	r4, r2
    break;
 8005396:	e001      	b.n	800539c <niffs_seek+0x78>
  default:
  case NIFFS_SEEK_SET:
    coffs = offset;
    break;
  case NIFFS_SEEK_CUR:
    coffs = fd->offs + offset;
 8005398:	68b3      	ldr	r3, [r6, #8]
 800539a:	441c      	add	r4, r3
  case NIFFS_SEEK_END:
    coffs = flen + offset;
    break;
  }

  if (coffs < 0) {
 800539c:	2c00      	cmp	r4, #0
 800539e:	db03      	blt.n	80053a8 <niffs_seek+0x84>
    coffs = 0;
  } else {
    coffs = NIFFS_MIN(flen, (u32_t)coffs);
 80053a0:	4294      	cmp	r4, r2
 80053a2:	bf28      	it	cs
 80053a4:	4614      	movcs	r4, r2
 80053a6:	e000      	b.n	80053aa <niffs_seek+0x86>
    coffs = flen + offset;
    break;
  }

  if (coffs < 0) {
    coffs = 0;
 80053a8:	2400      	movs	r4, #0
  } else {
    coffs = NIFFS_MIN(flen, (u32_t)coffs);
  }

  if (fd->type != _NIFFS_FTYPE_LINFILE &&
 80053aa:	7933      	ldrb	r3, [r6, #4]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d055      	beq.n	800545c <niffs_seek+0x138>
      _NIFFS_OFFS_2_SPIX(fs, (u32_t)coffs) != _NIFFS_OFFS_2_SPIX(fs, fd->offs)) {
 80053b0:	f1a5 031e 	sub.w	r3, r5, #30
 80053b4:	429c      	cmp	r4, r3
 80053b6:	d307      	bcc.n	80053c8 <niffs_seek+0xa4>
 80053b8:	f1c5 001e 	rsb	r0, r5, #30
 80053bc:	4420      	add	r0, r4
 80053be:	1f29      	subs	r1, r5, #4
 80053c0:	fbb0 f0f1 	udiv	r0, r0, r1
 80053c4:	3001      	adds	r0, #1
 80053c6:	e000      	b.n	80053ca <niffs_seek+0xa6>
 80053c8:	2000      	movs	r0, #0
 80053ca:	68b1      	ldr	r1, [r6, #8]
 80053cc:	4299      	cmp	r1, r3
 80053ce:	d307      	bcc.n	80053e0 <niffs_seek+0xbc>
 80053d0:	311e      	adds	r1, #30
 80053d2:	1b49      	subs	r1, r1, r5
 80053d4:	f1a5 0c04 	sub.w	ip, r5, #4
 80053d8:	fbb1 f1fc 	udiv	r1, r1, ip
 80053dc:	3101      	adds	r1, #1
 80053de:	e000      	b.n	80053e2 <niffs_seek+0xbe>
 80053e0:	2100      	movs	r1, #0
    coffs = 0;
  } else {
    coffs = NIFFS_MIN(flen, (u32_t)coffs);
  }

  if (fd->type != _NIFFS_FTYPE_LINFILE &&
 80053e2:	4288      	cmp	r0, r1
 80053e4:	d03a      	beq.n	800545c <niffs_seek+0x138>
      _NIFFS_OFFS_2_SPIX(fs, (u32_t)coffs) != _NIFFS_OFFS_2_SPIX(fs, fd->offs)) {
    // new page
    if (!((u32_t)coffs == flen && _NIFFS_OFFS_2_PDATA_OFFS(fs, (u32_t)coffs) == 0)) {
 80053e6:	4294      	cmp	r4, r2
 80053e8:	d10c      	bne.n	8005404 <niffs_seek+0xe0>
 80053ea:	429c      	cmp	r4, r3
 80053ec:	d201      	bcs.n	80053f2 <niffs_seek+0xce>
 80053ee:	b94c      	cbnz	r4, 8005404 <niffs_seek+0xe0>
 80053f0:	e034      	b.n	800545c <niffs_seek+0x138>
 80053f2:	f1c5 011e 	rsb	r1, r5, #30
 80053f6:	4421      	add	r1, r4
 80053f8:	1f2a      	subs	r2, r5, #4
 80053fa:	fbb1 f0f2 	udiv	r0, r1, r2
 80053fe:	fb02 1210 	mls	r2, r2, r0, r1
 8005402:	b35a      	cbz	r2, 800545c <niffs_seek+0x138>
      niffs_page_ix seek_pix;
      res = niffs_find_page(fs, &seek_pix, fd->obj_id, _NIFFS_OFFS_2_SPIX(fs, (u32_t)coffs), fd->cur_pix);
 8005404:	429c      	cmp	r4, r3
 8005406:	7832      	ldrb	r2, [r6, #0]
 8005408:	d308      	bcc.n	800541c <niffs_seek+0xf8>
 800540a:	f1c5 031e 	rsb	r3, r5, #30
 800540e:	4423      	add	r3, r4
 8005410:	3d04      	subs	r5, #4
 8005412:	fbb3 f3f5 	udiv	r3, r3, r5
 8005416:	3301      	adds	r3, #1
 8005418:	b2db      	uxtb	r3, r3
 800541a:	e000      	b.n	800541e <niffs_seek+0xfa>
 800541c:	2300      	movs	r3, #0
 800541e:	89b1      	ldrh	r1, [r6, #12]
 8005420:	4638      	mov	r0, r7
 8005422:	9100      	str	r1, [sp, #0]
 8005424:	f10d 010a 	add.w	r1, sp, #10
 8005428:	f7ff fbe0 	bl	8004bec <niffs_find_page>
      check(res);
 800542c:	4605      	mov	r5, r0
 800542e:	b188      	cbz	r0, 8005454 <niffs_seek+0x130>
 8005430:	4b0d      	ldr	r3, [pc, #52]	; (8005468 <niffs_seek+0x144>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	055c      	lsls	r4, r3, #21
 8005436:	d50b      	bpl.n	8005450 <niffs_seek+0x12c>
 8005438:	4b0c      	ldr	r3, [pc, #48]	; (800546c <niffs_seek+0x148>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	b943      	cbnz	r3, 8005450 <niffs_seek+0x12c>
 800543e:	f240 332e 	movw	r3, #814	; 0x32e
 8005442:	9300      	str	r3, [sp, #0]
 8005444:	480a      	ldr	r0, [pc, #40]	; (8005470 <niffs_seek+0x14c>)
 8005446:	4629      	mov	r1, r5
 8005448:	4a0a      	ldr	r2, [pc, #40]	; (8005474 <niffs_seek+0x150>)
 800544a:	4b0b      	ldr	r3, [pc, #44]	; (8005478 <niffs_seek+0x154>)
 800544c:	f003 fea6 	bl	800919c <arcprint>
 8005450:	46a8      	mov	r8, r5
 8005452:	e005      	b.n	8005460 <niffs_seek+0x13c>
      fd->cur_pix = seek_pix;
 8005454:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8005458:	9b03      	ldr	r3, [sp, #12]
 800545a:	819a      	strh	r2, [r3, #12]
    }
  }
  fd->offs = (u32_t)coffs;
 800545c:	9b03      	ldr	r3, [sp, #12]
 800545e:	609c      	str	r4, [r3, #8]

  return res;
}
 8005460:	4640      	mov	r0, r8
 8005462:	b005      	add	sp, #20
 8005464:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005468:	20004f80 	.word	0x20004f80
 800546c:	20004f84 	.word	0x20004f84
 8005470:	08010535 	.word	0x08010535
 8005474:	0800e99f 	.word	0x0800e99f
 8005478:	0801054b 	.word	0x0801054b

0800547c <niffs_gc>:
  int res = found ? NIFFS_OK : ERR_NIFFS_NO_GC_CANDIDATE;
  check(res);
  return res;
}

int niffs_gc(niffs *fs, u32_t *freed_pages, u8_t allow_full_sector) {
 800547c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005480:	4604      	mov	r4, r0
 8005482:	b093      	sub	sp, #76	; 0x4c
      cand->sector = sector;
      cand->era_cnt = shdr_era_cnt;
      cand->free_pages = p_free;
      cand->dele_pages = p_dele;
      cand->busy_pages = p_busy;
      found = 1;
 8005484:	2500      	movs	r5, #0
static int niffs_gc_find_candidate_sector(niffs *fs, niffs_gc_sector_cand *cand, u8_t allow_full_sector) {
  u32_t sector;
  u8_t found = 0;

  // find candidate sector
  s32_t cand_score = 0x80000000;
 8005486:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  int res = found ? NIFFS_OK : ERR_NIFFS_NO_GC_CANDIDATE;
  check(res);
  return res;
}

int niffs_gc(niffs *fs, u32_t *freed_pages, u8_t allow_full_sector) {
 800548a:	910e      	str	r1, [sp, #56]	; 0x38
 800548c:	920f      	str	r2, [sp, #60]	; 0x3c
static int niffs_gc_find_candidate_sector(niffs *fs, niffs_gc_sector_cand *cand, u8_t allow_full_sector) {
  u32_t sector;
  u8_t found = 0;

  // find candidate sector
  s32_t cand_score = 0x80000000;
 800548e:	9009      	str	r0, [sp, #36]	; 0x24
  u32_t busy_pages;
} niffs_gc_sector_cand;

static int niffs_gc_find_candidate_sector(niffs *fs, niffs_gc_sector_cand *cand, u8_t allow_full_sector) {
  u32_t sector;
  u8_t found = 0;
 8005490:	950a      	str	r5, [sp, #40]	; 0x28

  // find candidate sector
  s32_t cand_score = 0x80000000;
  for (sector = 0; sector < fs->sectors; sector++) {
 8005492:	6863      	ldr	r3, [r4, #4]
 8005494:	429d      	cmp	r5, r3
 8005496:	f080 80d0 	bcs.w	800563a <niffs_gc+0x1be>
    niffs_sector_hdr *shdr = (niffs_sector_hdr *)_NIFFS_SECTOR_2_ADDR(fs, sector);
 800549a:	68a2      	ldr	r2, [r4, #8]
 800549c:	6821      	ldr	r1, [r4, #0]
 800549e:	9205      	str	r2, [sp, #20]
 80054a0:	436a      	muls	r2, r5
    if (shdr->abra != _NIFFS_SECT_MAGIC(fs)) {
 80054a2:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80054a6:	4b97      	ldr	r3, [pc, #604]	; (8005704 <niffs_gc+0x288>)
  u8_t found = 0;

  // find candidate sector
  s32_t cand_score = 0x80000000;
  for (sector = 0; sector < fs->sectors; sector++) {
    niffs_sector_hdr *shdr = (niffs_sector_hdr *)_NIFFS_SECTOR_2_ADDR(fs, sector);
 80054a8:	188e      	adds	r6, r1, r2
    if (shdr->abra != _NIFFS_SECT_MAGIC(fs)) {
 80054aa:	ea8c 0303 	eor.w	r3, ip, r3
 80054ae:	8876      	ldrh	r6, [r6, #2]
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	429e      	cmp	r6, r3
 80054b4:	f040 80bf 	bne.w	8005636 <niffs_gc+0x1ba>
      continue;
    }
    niffs_erase_cnt shdr_era_cnt = shdr->era_cnt;
 80054b8:	5a8a      	ldrh	r2, [r1, r2]
 80054ba:	9208      	str	r2, [sp, #32]
    u32_t p_free = 0;
    u32_t p_dele = 0;
    u32_t p_busy = 0;

    niffs_page_ix ipix;
    for (ipix = 0; ipix < fs->pages_per_sector; ipix++) {
 80054bc:	6a22      	ldr	r2, [r4, #32]
      niffs_page_ix pix = _NIFFS_PIX_AT_SECTOR(fs, sector) + ipix;
 80054be:	fb05 f302 	mul.w	r3, r5, r2
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	930c      	str	r3, [sp, #48]	; 0x30
    u32_t p_free = 0;
    u32_t p_dele = 0;
    u32_t p_busy = 0;

    niffs_page_ix ipix;
    for (ipix = 0; ipix < fs->pages_per_sector; ipix++) {
 80054c6:	2300      	movs	r3, #0
    }
    niffs_erase_cnt shdr_era_cnt = shdr->era_cnt;

    u32_t p_free = 0;
    u32_t p_dele = 0;
    u32_t p_busy = 0;
 80054c8:	461e      	mov	r6, r3
      continue;
    }
    niffs_erase_cnt shdr_era_cnt = shdr->era_cnt;

    u32_t p_free = 0;
    u32_t p_dele = 0;
 80054ca:	4698      	mov	r8, r3
    if (shdr->abra != _NIFFS_SECT_MAGIC(fs)) {
      continue;
    }
    niffs_erase_cnt shdr_era_cnt = shdr->era_cnt;

    u32_t p_free = 0;
 80054cc:	461f      	mov	r7, r3
    u32_t p_dele = 0;
    u32_t p_busy = 0;

    niffs_page_ix ipix;
    for (ipix = 0; ipix < fs->pages_per_sector; ipix++) {
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d231      	bcs.n	8005536 <niffs_gc+0xba>
 80054d2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
      niffs_page_ix pix = _NIFFS_PIX_AT_SECTOR(fs, sector) + ipix;
      niffs_page_hdr *phdr = (niffs_page_hdr *)_NIFFS_PIX_2_ADDR(fs, pix);
 80054d6:	9805      	ldr	r0, [sp, #20]
 80054d8:	449a      	add	sl, r3
 80054da:	fa1f fa8a 	uxth.w	sl, sl
 80054de:	fbba f9f2 	udiv	r9, sl, r2
 80054e2:	fb02 aa19 	mls	sl, r2, r9, sl
 80054e6:	fb0c fa0a 	mul.w	sl, ip, sl
 80054ea:	fb00 aa09 	mla	sl, r0, r9, sl
 80054ee:	f10a 0a04 	add.w	sl, sl, #4
 80054f2:	eb01 090a 	add.w	r9, r1, sl
      if (_NIFFS_IS_FREE(phdr) && _NIFFS_IS_CLEA(phdr)) {
 80054f6:	f831 a00a 	ldrh.w	sl, [r1, sl]
 80054fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80054fe:	4582      	cmp	sl, r0
 8005500:	d105      	bne.n	800550e <niffs_gc+0x92>
 8005502:	f8b9 a002 	ldrh.w	sl, [r9, #2]
 8005506:	4582      	cmp	sl, r0
 8005508:	d104      	bne.n	8005514 <niffs_gc+0x98>
        p_free++;
 800550a:	3701      	adds	r7, #1
 800550c:	e010      	b.n	8005530 <niffs_gc+0xb4>
      } else if (_NIFFS_IS_DELE(phdr) || !_NIFFS_IS_FLAG_VALID(phdr)) {
 800550e:	f1ba 0f00 	cmp.w	sl, #0
 8005512:	d009      	beq.n	8005528 <niffs_gc+0xac>
 8005514:	f8b9 9002 	ldrh.w	r9, [r9, #2]
 8005518:	f64f 70fc 	movw	r0, #65532	; 0xfffc
 800551c:	f1a9 0902 	sub.w	r9, r9, #2
 8005520:	fa1f f989 	uxth.w	r9, r9
 8005524:	4581      	cmp	r9, r0
 8005526:	d802      	bhi.n	800552e <niffs_gc+0xb2>
        p_dele++;
 8005528:	f108 0801 	add.w	r8, r8, #1
 800552c:	e000      	b.n	8005530 <niffs_gc+0xb4>
      } else {
        p_busy++;
 800552e:	3601      	adds	r6, #1
    u32_t p_free = 0;
    u32_t p_dele = 0;
    u32_t p_busy = 0;

    niffs_page_ix ipix;
    for (ipix = 0; ipix < fs->pages_per_sector; ipix++) {
 8005530:	3301      	adds	r3, #1
 8005532:	b29b      	uxth	r3, r3
 8005534:	e7cb      	b.n	80054ce <niffs_gc+0x52>
    }

    niffs_erase_cnt era_cnt_diff_typed = fs->max_era - shdr_era_cnt;
    u32_t era_cnt_diff = (u32_t)era_cnt_diff_typed;

    NIFFS_DBG("    gc: sector %2i era:%6i era_d:%4i free:%2i dele:%2i busy:%2i  -- ", sector, shdr_era_cnt, era_cnt_diff, p_free, p_dele, p_busy);
 8005536:	4874      	ldr	r0, [pc, #464]	; (8005708 <niffs_gc+0x28c>)
      } else {
        p_busy++;
      }
    }

    niffs_erase_cnt era_cnt_diff_typed = fs->max_era - shdr_era_cnt;
 8005538:	f8b4 9038 	ldrh.w	r9, [r4, #56]	; 0x38
 800553c:	9a08      	ldr	r2, [sp, #32]
    u32_t era_cnt_diff = (u32_t)era_cnt_diff_typed;

    NIFFS_DBG("    gc: sector %2i era:%6i era_d:%4i free:%2i dele:%2i busy:%2i  -- ", sector, shdr_era_cnt, era_cnt_diff, p_free, p_dele, p_busy);
 800553e:	6803      	ldr	r3, [r0, #0]
      } else {
        p_busy++;
      }
    }

    niffs_erase_cnt era_cnt_diff_typed = fs->max_era - shdr_era_cnt;
 8005540:	ebc2 0909 	rsb	r9, r2, r9
    u32_t era_cnt_diff = (u32_t)era_cnt_diff_typed;

    NIFFS_DBG("    gc: sector %2i era:%6i era_d:%4i free:%2i dele:%2i busy:%2i  -- ", sector, shdr_era_cnt, era_cnt_diff, p_free, p_dele, p_busy);
 8005544:	055b      	lsls	r3, r3, #21
        p_busy++;
      }
    }

    niffs_erase_cnt era_cnt_diff_typed = fs->max_era - shdr_era_cnt;
    u32_t era_cnt_diff = (u32_t)era_cnt_diff_typed;
 8005546:	fa1f f989 	uxth.w	r9, r9

    NIFFS_DBG("    gc: sector %2i era:%6i era_d:%4i free:%2i dele:%2i busy:%2i  -- ", sector, shdr_era_cnt, era_cnt_diff, p_free, p_dele, p_busy);
 800554a:	d50a      	bpl.n	8005562 <niffs_gc+0xe6>
 800554c:	4b6f      	ldr	r3, [pc, #444]	; (800570c <niffs_gc+0x290>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	b93b      	cbnz	r3, 8005562 <niffs_gc+0xe6>
 8005552:	e88d 0180 	stmia.w	sp, {r7, r8}
 8005556:	9602      	str	r6, [sp, #8]
 8005558:	486d      	ldr	r0, [pc, #436]	; (8005710 <niffs_gc+0x294>)
 800555a:	4629      	mov	r1, r5
 800555c:	464b      	mov	r3, r9
 800555e:	f003 fe1d 	bl	800919c <arcprint>

    // never gc a sector that is totally free
    if (p_free == fs->pages_per_sector) {
 8005562:	6a23      	ldr	r3, [r4, #32]
 8005564:	429f      	cmp	r7, r3
 8005566:	d109      	bne.n	800557c <niffs_gc+0x100>
      NIFFS_DBG("skipped, totally free\n");
 8005568:	4a67      	ldr	r2, [pc, #412]	; (8005708 <niffs_gc+0x28c>)
 800556a:	6813      	ldr	r3, [r2, #0]
 800556c:	055e      	lsls	r6, r3, #21
 800556e:	d562      	bpl.n	8005636 <niffs_gc+0x1ba>
 8005570:	4b66      	ldr	r3, [pc, #408]	; (800570c <niffs_gc+0x290>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d15e      	bne.n	8005636 <niffs_gc+0x1ba>
 8005578:	4866      	ldr	r0, [pc, #408]	; (8005714 <niffs_gc+0x298>)
 800557a:	e026      	b.n	80055ca <niffs_gc+0x14e>
      continue;
    }
    // never select sectors that have no room for movement
    if (p_busy > fs->free_pages) {
 800557c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800557e:	4296      	cmp	r6, r2
 8005580:	d909      	bls.n	8005596 <niffs_gc+0x11a>
      NIFFS_DBG("no room for movement\n");
 8005582:	4861      	ldr	r0, [pc, #388]	; (8005708 <niffs_gc+0x28c>)
 8005584:	6803      	ldr	r3, [r0, #0]
 8005586:	0558      	lsls	r0, r3, #21
 8005588:	d555      	bpl.n	8005636 <niffs_gc+0x1ba>
 800558a:	4b60      	ldr	r3, [pc, #384]	; (800570c <niffs_gc+0x290>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d151      	bne.n	8005636 <niffs_gc+0x1ba>
 8005592:	4861      	ldr	r0, [pc, #388]	; (8005718 <niffs_gc+0x29c>)
 8005594:	e019      	b.n	80055ca <niffs_gc+0x14e>
      continue;
    }
    // never select the sector containing the only free pages we've got
    if (fs->free_pages > 0 && p_free == fs->free_pages) {
 8005596:	b15a      	cbz	r2, 80055b0 <niffs_gc+0x134>
 8005598:	4297      	cmp	r7, r2
 800559a:	d109      	bne.n	80055b0 <niffs_gc+0x134>
      NIFFS_DBG("contains the only free pages\n");
 800559c:	4a5a      	ldr	r2, [pc, #360]	; (8005708 <niffs_gc+0x28c>)
 800559e:	6813      	ldr	r3, [r2, #0]
 80055a0:	0559      	lsls	r1, r3, #21
 80055a2:	d548      	bpl.n	8005636 <niffs_gc+0x1ba>
 80055a4:	4b59      	ldr	r3, [pc, #356]	; (800570c <niffs_gc+0x290>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d144      	bne.n	8005636 <niffs_gc+0x1ba>
 80055ac:	485b      	ldr	r0, [pc, #364]	; (800571c <niffs_gc+0x2a0>)
 80055ae:	e00c      	b.n	80055ca <niffs_gc+0x14e>
      continue;
    }
    // only gc full sectors if allowed
    if (p_busy == fs->pages_per_sector && !allow_full_sector) {
 80055b0:	429e      	cmp	r6, r3
 80055b2:	d10d      	bne.n	80055d0 <niffs_gc+0x154>
 80055b4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80055b6:	b958      	cbnz	r0, 80055d0 <niffs_gc+0x154>
      NIFFS_DBG("full, not allowed\n");
 80055b8:	4a53      	ldr	r2, [pc, #332]	; (8005708 <niffs_gc+0x28c>)
 80055ba:	6813      	ldr	r3, [r2, #0]
 80055bc:	055a      	lsls	r2, r3, #21
 80055be:	d53a      	bpl.n	8005636 <niffs_gc+0x1ba>
 80055c0:	4b52      	ldr	r3, [pc, #328]	; (800570c <niffs_gc+0x290>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d136      	bne.n	8005636 <niffs_gc+0x1ba>
 80055c8:	4855      	ldr	r0, [pc, #340]	; (8005720 <niffs_gc+0x2a4>)
 80055ca:	f003 fde7 	bl	800919c <arcprint>
 80055ce:	e032      	b.n	8005636 <niffs_gc+0x1ba>

    // nb: this might select a sector being full with busy pages
    //     but having too low an erase count - this will free
    //     zero pages, but will move long-lived files hogging a
    //     full sector which ruins the wear leveling
    s32_t score = NIFFS_GC_SCORE(era_cnt_diff,
 80055d0:	2264      	movs	r2, #100	; 0x64
 80055d2:	fb02 f107 	mul.w	r1, r2, r7
 80055d6:	fb02 f909 	mul.w	r9, r2, r9
 80055da:	fb02 f006 	mul.w	r0, r2, r6
 80055de:	fb02 f208 	mul.w	r2, r2, r8
 80055e2:	fbb1 f1f3 	udiv	r1, r1, r3
 80055e6:	fbb0 f0f3 	udiv	r0, r0, r3
 80055ea:	eba9 0181 	sub.w	r1, r9, r1, lsl #2
 80055ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80055f6:	fb09 3900 	mla	r9, r9, r0, r3
        (100*p_free)/fs->pages_per_sector,
        (100*p_dele)/fs->pages_per_sector,
        (100*p_busy)/fs->pages_per_sector);
    NIFFS_DBG("score %i\n", score);
 80055fa:	4843      	ldr	r0, [pc, #268]	; (8005708 <niffs_gc+0x28c>)

    // nb: this might select a sector being full with busy pages
    //     but having too low an erase count - this will free
    //     zero pages, but will move long-lived files hogging a
    //     full sector which ruins the wear leveling
    s32_t score = NIFFS_GC_SCORE(era_cnt_diff,
 80055fc:	eb01 0949 	add.w	r9, r1, r9, lsl #1
        (100*p_free)/fs->pages_per_sector,
        (100*p_dele)/fs->pages_per_sector,
        (100*p_busy)/fs->pages_per_sector);
    NIFFS_DBG("score %i\n", score);
 8005600:	6803      	ldr	r3, [r0, #0]
 8005602:	055b      	lsls	r3, r3, #21
 8005604:	d506      	bpl.n	8005614 <niffs_gc+0x198>
 8005606:	4b41      	ldr	r3, [pc, #260]	; (800570c <niffs_gc+0x290>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	b91b      	cbnz	r3, 8005614 <niffs_gc+0x198>
 800560c:	4845      	ldr	r0, [pc, #276]	; (8005724 <niffs_gc+0x2a8>)
 800560e:	4649      	mov	r1, r9
 8005610:	f003 fdc4 	bl	800919c <arcprint>
    if (score > cand_score && p_busy <= fs->free_pages) {
 8005614:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005616:	4591      	cmp	r9, r2
 8005618:	dd0d      	ble.n	8005636 <niffs_gc+0x1ba>
 800561a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800561c:	429e      	cmp	r6, r3
 800561e:	d80a      	bhi.n	8005636 <niffs_gc+0x1ba>
      cand_score = score;
      cand->sector = sector;
      cand->era_cnt = shdr_era_cnt;
 8005620:	9b08      	ldr	r3, [sp, #32]
      cand->free_pages = p_free;
      cand->dele_pages = p_dele;
      cand->busy_pages = p_busy;
      found = 1;
 8005622:	2001      	movs	r0, #1
    s32_t score = NIFFS_GC_SCORE(era_cnt_diff,
        (100*p_free)/fs->pages_per_sector,
        (100*p_dele)/fs->pages_per_sector,
        (100*p_busy)/fs->pages_per_sector);
    NIFFS_DBG("score %i\n", score);
    if (score > cand_score && p_busy <= fs->free_pages) {
 8005624:	9607      	str	r6, [sp, #28]
 8005626:	970b      	str	r7, [sp, #44]	; 0x2c
 8005628:	f8cd 8018 	str.w	r8, [sp, #24]
      cand_score = score;
      cand->sector = sector;
      cand->era_cnt = shdr_era_cnt;
 800562c:	930d      	str	r3, [sp, #52]	; 0x34
    s32_t score = NIFFS_GC_SCORE(era_cnt_diff,
        (100*p_free)/fs->pages_per_sector,
        (100*p_dele)/fs->pages_per_sector,
        (100*p_busy)/fs->pages_per_sector);
    NIFFS_DBG("score %i\n", score);
    if (score > cand_score && p_busy <= fs->free_pages) {
 800562e:	46ab      	mov	fp, r5
 8005630:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
      cand->sector = sector;
      cand->era_cnt = shdr_era_cnt;
      cand->free_pages = p_free;
      cand->dele_pages = p_dele;
      cand->busy_pages = p_busy;
      found = 1;
 8005634:	900a      	str	r0, [sp, #40]	; 0x28
 8005636:	3501      	adds	r5, #1
 8005638:	e72b      	b.n	8005492 <niffs_gc+0x16>
 800563a:	4d33      	ldr	r5, [pc, #204]	; (8005708 <niffs_gc+0x28c>)
    }
  }

  if (found) {
 800563c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    NIFFS_DBG("gc    : found candidate sector %i era_cnt:%i (free:%i dele:%i busy:%i)\n", cand->sector, cand->era_cnt, cand->free_pages, cand->dele_pages, cand->busy_pages);
 800563e:	682b      	ldr	r3, [r5, #0]
      cand->busy_pages = p_busy;
      found = 1;
    }
  }

  if (found) {
 8005640:	b17a      	cbz	r2, 8005662 <niffs_gc+0x1e6>
    NIFFS_DBG("gc    : found candidate sector %i era_cnt:%i (free:%i dele:%i busy:%i)\n", cand->sector, cand->era_cnt, cand->free_pages, cand->dele_pages, cand->busy_pages);
 8005642:	055e      	lsls	r6, r3, #21
 8005644:	d528      	bpl.n	8005698 <niffs_gc+0x21c>
 8005646:	4b31      	ldr	r3, [pc, #196]	; (800570c <niffs_gc+0x290>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	bb2b      	cbnz	r3, 8005698 <niffs_gc+0x21c>
 800564c:	9b06      	ldr	r3, [sp, #24]
 800564e:	9807      	ldr	r0, [sp, #28]
 8005650:	9300      	str	r3, [sp, #0]
 8005652:	9001      	str	r0, [sp, #4]
 8005654:	4659      	mov	r1, fp
 8005656:	4834      	ldr	r0, [pc, #208]	; (8005728 <niffs_gc+0x2ac>)
 8005658:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800565a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800565c:	f003 fd9e 	bl	800919c <arcprint>
 8005660:	e01a      	b.n	8005698 <niffs_gc+0x21c>
  } else {
    NIFFS_DBG("gc    : found no candidate sector\n");
 8005662:	0558      	lsls	r0, r3, #21
 8005664:	d505      	bpl.n	8005672 <niffs_gc+0x1f6>
 8005666:	4b29      	ldr	r3, [pc, #164]	; (800570c <niffs_gc+0x290>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	b913      	cbnz	r3, 8005672 <niffs_gc+0x1f6>
 800566c:	482f      	ldr	r0, [pc, #188]	; (800572c <niffs_gc+0x2b0>)
 800566e:	f003 fd95 	bl	800919c <arcprint>
  }

  int res = found ? NIFFS_OK : ERR_NIFFS_NO_GC_CANDIDATE;
  check(res);
 8005672:	682b      	ldr	r3, [r5, #0]
 8005674:	055f      	lsls	r7, r3, #21
 8005676:	f140 80c0 	bpl.w	80057fa <niffs_gc+0x37e>
 800567a:	4b24      	ldr	r3, [pc, #144]	; (800570c <niffs_gc+0x290>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	f040 80bb 	bne.w	80057fa <niffs_gc+0x37e>
 8005684:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	4829      	ldr	r0, [pc, #164]	; (8005730 <niffs_gc+0x2b4>)
 800568c:	4929      	ldr	r1, [pc, #164]	; (8005734 <niffs_gc+0x2b8>)
 800568e:	4a2a      	ldr	r2, [pc, #168]	; (8005738 <niffs_gc+0x2bc>)
 8005690:	4b2a      	ldr	r3, [pc, #168]	; (800573c <niffs_gc+0x2c0>)
 8005692:	f003 fd83 	bl	800919c <arcprint>
 8005696:	e0b0      	b.n	80057fa <niffs_gc+0x37e>
    niffs_page_ix pix = _NIFFS_PIX_AT_SECTOR(fs, cand.sector) + ipix;
    niffs_page_hdr *phdr = (niffs_page_hdr *)_NIFFS_PIX_2_ADDR(fs, pix);
    if (_NIFFS_IS_FLAG_VALID(phdr) && !_NIFFS_IS_FREE(phdr) && !_NIFFS_IS_DELE(phdr)) {
      niffs_page_ix new_pix;
      // find dst page & move src
      res = niffs_find_free_page(fs, &new_pix, cand.sector);
 8005698:	f04f 0900 	mov.w	r9, #0
  // move all busy pages within sector
  niffs_page_ix ipix;
  for (ipix = 0; ipix < fs->pages_per_sector; ipix++) {
    niffs_page_ix pix = _NIFFS_PIX_AT_SECTOR(fs, cand.sector) + ipix;
    niffs_page_hdr *phdr = (niffs_page_hdr *)_NIFFS_PIX_2_ADDR(fs, pix);
    if (_NIFFS_IS_FLAG_VALID(phdr) && !_NIFFS_IS_FREE(phdr) && !_NIFFS_IS_DELE(phdr)) {
 800569c:	f64f 78fc 	movw	r8, #65532	; 0xfffc
 80056a0:	f64f 77fd 	movw	r7, #65533	; 0xfffd
  int res = niffs_gc_find_candidate_sector(fs, &cand, allow_full_sector);
  check(res);

  // move all busy pages within sector
  niffs_page_ix ipix;
  for (ipix = 0; ipix < fs->pages_per_sector; ipix++) {
 80056a4:	6a23      	ldr	r3, [r4, #32]
 80056a6:	4599      	cmp	r9, r3
 80056a8:	d265      	bcs.n	8005776 <niffs_gc+0x2fa>
    niffs_page_ix pix = _NIFFS_PIX_AT_SECTOR(fs, cand.sector) + ipix;
 80056aa:	fb0b 9a03 	mla	sl, fp, r3, r9
 80056ae:	fa1f fa8a 	uxth.w	sl, sl
    niffs_page_hdr *phdr = (niffs_page_hdr *)_NIFFS_PIX_2_ADDR(fs, pix);
 80056b2:	fbba f2f3 	udiv	r2, sl, r3
 80056b6:	fb03 a312 	mls	r3, r3, r2, sl
 80056ba:	68e0      	ldr	r0, [r4, #12]
 80056bc:	68a1      	ldr	r1, [r4, #8]
 80056be:	4343      	muls	r3, r0
 80056c0:	fb01 3302 	mla	r3, r1, r2, r3
 80056c4:	6822      	ldr	r2, [r4, #0]
 80056c6:	3304      	adds	r3, #4
 80056c8:	18d1      	adds	r1, r2, r3
    if (_NIFFS_IS_FLAG_VALID(phdr) && !_NIFFS_IS_FREE(phdr) && !_NIFFS_IS_DELE(phdr)) {
 80056ca:	8849      	ldrh	r1, [r1, #2]
 80056cc:	3902      	subs	r1, #2
 80056ce:	b289      	uxth	r1, r1
 80056d0:	4541      	cmp	r1, r8
 80056d2:	d94b      	bls.n	800576c <niffs_gc+0x2f0>
 80056d4:	5ad3      	ldrh	r3, [r2, r3]
 80056d6:	3b01      	subs	r3, #1
 80056d8:	b29b      	uxth	r3, r3
 80056da:	42bb      	cmp	r3, r7
 80056dc:	d846      	bhi.n	800576c <niffs_gc+0x2f0>
      niffs_page_ix new_pix;
      // find dst page & move src
      res = niffs_find_free_page(fs, &new_pix, cand.sector);
 80056de:	4620      	mov	r0, r4
 80056e0:	f10d 0146 	add.w	r1, sp, #70	; 0x46
 80056e4:	465a      	mov	r2, fp
 80056e6:	f7ff f970 	bl	80049ca <niffs_find_free_page>
      check(res);
 80056ea:	4606      	mov	r6, r0
 80056ec:	b340      	cbz	r0, 8005740 <niffs_gc+0x2c4>
 80056ee:	682b      	ldr	r3, [r5, #0]
 80056f0:	0559      	lsls	r1, r3, #21
 80056f2:	d57e      	bpl.n	80057f2 <niffs_gc+0x376>
 80056f4:	4b05      	ldr	r3, [pc, #20]	; (800570c <niffs_gc+0x290>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d17a      	bne.n	80057f2 <niffs_gc+0x376>
 80056fc:	f240 6311 	movw	r3, #1553	; 0x611
 8005700:	e048      	b.n	8005794 <niffs_gc+0x318>
 8005702:	bf00      	nop
 8005704:	ffffc001 	.word	0xffffc001
 8005708:	20004f80 	.word	0x20004f80
 800570c:	20004f84 	.word	0x20004f84
 8005710:	08010ac7 	.word	0x08010ac7
 8005714:	08010b0c 	.word	0x08010b0c
 8005718:	08010b23 	.word	0x08010b23
 800571c:	08010b39 	.word	0x08010b39
 8005720:	08010b57 	.word	0x08010b57
 8005724:	08010b6a 	.word	0x08010b6a
 8005728:	08010b74 	.word	0x08010b74
 800572c:	08010bbc 	.word	0x08010bbc
 8005730:	08010535 	.word	0x08010535
 8005734:	ffffd4ec 	.word	0xffffd4ec
 8005738:	0800e9aa 	.word	0x0800e9aa
 800573c:	0801054b 	.word	0x0801054b
      res = niffs_move_page(fs, pix, new_pix, 0, 0, NIFFS_FLAG_MOVE_KEEP);
 8005740:	23aa      	movs	r3, #170	; 0xaa
 8005742:	9000      	str	r0, [sp, #0]
 8005744:	9301      	str	r3, [sp, #4]
 8005746:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
 800574a:	4633      	mov	r3, r6
 800574c:	4620      	mov	r0, r4
 800574e:	4651      	mov	r1, sl
 8005750:	f7fe f9e8 	bl	8003b24 <niffs_move_page>
      check(res);
 8005754:	4606      	mov	r6, r0
 8005756:	b148      	cbz	r0, 800576c <niffs_gc+0x2f0>
 8005758:	682b      	ldr	r3, [r5, #0]
 800575a:	055a      	lsls	r2, r3, #21
 800575c:	d549      	bpl.n	80057f2 <niffs_gc+0x376>
 800575e:	4b30      	ldr	r3, [pc, #192]	; (8005820 <niffs_gc+0x3a4>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d145      	bne.n	80057f2 <niffs_gc+0x376>
 8005766:	f240 6313 	movw	r3, #1555	; 0x613
 800576a:	e013      	b.n	8005794 <niffs_gc+0x318>
  int res = niffs_gc_find_candidate_sector(fs, &cand, allow_full_sector);
  check(res);

  // move all busy pages within sector
  niffs_page_ix ipix;
  for (ipix = 0; ipix < fs->pages_per_sector; ipix++) {
 800576c:	f109 0901 	add.w	r9, r9, #1
 8005770:	fa1f f989 	uxth.w	r9, r9
 8005774:	e796      	b.n	80056a4 <niffs_gc+0x228>
      check(res);
    }
  }

  // erase sector
  res = niffs_erase_sector(fs, cand.sector);
 8005776:	4620      	mov	r0, r4
 8005778:	4659      	mov	r1, fp
 800577a:	f7fe fb7d 	bl	8003e78 <niffs_erase_sector>
  check(res);
 800577e:	4606      	mov	r6, r0
 8005780:	b180      	cbz	r0, 80057a4 <niffs_gc+0x328>
 8005782:	682b      	ldr	r3, [r5, #0]
 8005784:	055b      	lsls	r3, r3, #21
 8005786:	d534      	bpl.n	80057f2 <niffs_gc+0x376>
 8005788:	4b25      	ldr	r3, [pc, #148]	; (8005820 <niffs_gc+0x3a4>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d130      	bne.n	80057f2 <niffs_gc+0x376>
 8005790:	f240 6319 	movw	r3, #1561	; 0x619
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	4823      	ldr	r0, [pc, #140]	; (8005824 <niffs_gc+0x3a8>)
 8005798:	4631      	mov	r1, r6
 800579a:	4a23      	ldr	r2, [pc, #140]	; (8005828 <niffs_gc+0x3ac>)
 800579c:	4b23      	ldr	r3, [pc, #140]	; (800582c <niffs_gc+0x3b0>)
 800579e:	f003 fcfd 	bl	800919c <arcprint>
 80057a2:	e026      	b.n	80057f2 <niffs_gc+0x376>

  // move free cursor if necessary
  if (_NIFFS_PIX_2_SECTOR(fs, fs->last_free_pix) == cand.sector) {
 80057a4:	6a22      	ldr	r2, [r4, #32]
 80057a6:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 80057a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80057ac:	455b      	cmp	r3, fp
 80057ae:	d107      	bne.n	80057c0 <niffs_gc+0x344>
    u32_t new_free_s = cand.sector+1;
    if (new_free_s >= fs->sectors) {
 80057b0:	6861      	ldr	r1, [r4, #4]
  res = niffs_erase_sector(fs, cand.sector);
  check(res);

  // move free cursor if necessary
  if (_NIFFS_PIX_2_SECTOR(fs, fs->last_free_pix) == cand.sector) {
    u32_t new_free_s = cand.sector+1;
 80057b2:	f10b 0301 	add.w	r3, fp, #1
    if (new_free_s >= fs->sectors) {
      new_free_s = 0;
 80057b6:	428b      	cmp	r3, r1
 80057b8:	bf28      	it	cs
 80057ba:	2300      	movcs	r3, #0
    }
    fs->last_free_pix = _NIFFS_PIX_AT_SECTOR(fs, new_free_s);
 80057bc:	4353      	muls	r3, r2
 80057be:	84a3      	strh	r3, [r4, #36]	; 0x24
  }

  // update stats
  fs->dele_pages -= cand.dele_pages;
 80057c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80057c2:	9a06      	ldr	r2, [sp, #24]
  fs->dele_pages -= cand.busy_pages; // this is added by moving all busy pages in erased sector
 80057c4:	9807      	ldr	r0, [sp, #28]
    }
    fs->last_free_pix = _NIFFS_PIX_AT_SECTOR(fs, new_free_s);
  }

  // update stats
  fs->dele_pages -= cand.dele_pages;
 80057c6:	1a9b      	subs	r3, r3, r2
  fs->dele_pages -= cand.busy_pages; // this is added by moving all busy pages in erased sector
 80057c8:	1a1b      	subs	r3, r3, r0
 80057ca:	62e3      	str	r3, [r4, #44]	; 0x2c
  fs->free_pages += (cand.dele_pages + cand.busy_pages);
 80057cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80057ce:	4402      	add	r2, r0
 80057d0:	4413      	add	r3, r2
 80057d2:	62a3      	str	r3, [r4, #40]	; 0x28
  *freed_pages = cand.dele_pages;
 80057d4:	9a06      	ldr	r2, [sp, #24]
 80057d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057d8:	601a      	str	r2, [r3, #0]

  NIFFS_DBG("gc    : freed %i pages (%i dele, %i busy)\n", *freed_pages, cand.dele_pages, cand.busy_pages);
 80057da:	682e      	ldr	r6, [r5, #0]
 80057dc:	f416 6680 	ands.w	r6, r6, #1024	; 0x400
 80057e0:	d007      	beq.n	80057f2 <niffs_gc+0x376>
 80057e2:	4b0f      	ldr	r3, [pc, #60]	; (8005820 <niffs_gc+0x3a4>)
 80057e4:	681e      	ldr	r6, [r3, #0]
 80057e6:	b936      	cbnz	r6, 80057f6 <niffs_gc+0x37a>
 80057e8:	4811      	ldr	r0, [pc, #68]	; (8005830 <niffs_gc+0x3b4>)
 80057ea:	4611      	mov	r1, r2
 80057ec:	9b07      	ldr	r3, [sp, #28]
 80057ee:	f003 fcd5 	bl	800919c <arcprint>
 80057f2:	4630      	mov	r0, r6
 80057f4:	e011      	b.n	800581a <niffs_gc+0x39e>
 80057f6:	2000      	movs	r0, #0
 80057f8:	e00f      	b.n	800581a <niffs_gc+0x39e>
}

int niffs_gc(niffs *fs, u32_t *freed_pages, u8_t allow_full_sector) {
  niffs_gc_sector_cand cand;
  int res = niffs_gc_find_candidate_sector(fs, &cand, allow_full_sector);
  check(res);
 80057fa:	682b      	ldr	r3, [r5, #0]
 80057fc:	055e      	lsls	r6, r3, #21
 80057fe:	d50b      	bpl.n	8005818 <niffs_gc+0x39c>
 8005800:	4b07      	ldr	r3, [pc, #28]	; (8005820 <niffs_gc+0x3a4>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	b943      	cbnz	r3, 8005818 <niffs_gc+0x39c>
 8005806:	f240 6306 	movw	r3, #1542	; 0x606
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	4805      	ldr	r0, [pc, #20]	; (8005824 <niffs_gc+0x3a8>)
 800580e:	4909      	ldr	r1, [pc, #36]	; (8005834 <niffs_gc+0x3b8>)
 8005810:	4a05      	ldr	r2, [pc, #20]	; (8005828 <niffs_gc+0x3ac>)
 8005812:	4b06      	ldr	r3, [pc, #24]	; (800582c <niffs_gc+0x3b0>)
 8005814:	f003 fcc2 	bl	800919c <arcprint>
 8005818:	4806      	ldr	r0, [pc, #24]	; (8005834 <niffs_gc+0x3b8>)
  *freed_pages = cand.dele_pages;

  NIFFS_DBG("gc    : freed %i pages (%i dele, %i busy)\n", *freed_pages, cand.dele_pages, cand.busy_pages);

  return res;
}
 800581a:	b013      	add	sp, #76	; 0x4c
 800581c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005820:	20004f84 	.word	0x20004f84
 8005824:	08010535 	.word	0x08010535
 8005828:	0800e9c9 	.word	0x0800e9c9
 800582c:	0801054b 	.word	0x0801054b
 8005830:	08010bdf 	.word	0x08010bdf
 8005834:	ffffd4ec 	.word	0xffffd4ec

08005838 <niffs_ensure_free_pages>:
  return res;
}

///////////////////////////////////// GC /////////////////////////////////////

static int niffs_ensure_free_pages(niffs *fs, u32_t pages) {
 8005838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  int res = NIFFS_OK;
  int run = 1;

  while (fs->free_pages < fs->pages_per_sector) {
    NIFFS_DBG("ensure: run#%i warn fs crammed, free pages:%i, need at least:%i\n", run, fs->free_pages, fs->pages_per_sector);
 800583c:	f8df 9160 	ldr.w	r9, [pc, #352]	; 80059a0 <niffs_ensure_free_pages+0x168>
 8005840:	f8df a148 	ldr.w	sl, [pc, #328]	; 800598c <niffs_ensure_free_pages+0x154>
  return res;
}

///////////////////////////////////// GC /////////////////////////////////////

static int niffs_ensure_free_pages(niffs *fs, u32_t pages) {
 8005844:	4604      	mov	r4, r0
 8005846:	460e      	mov	r6, r1
  int res = NIFFS_OK;
  int run = 1;
 8005848:	2501      	movs	r5, #1

  while (fs->free_pages < fs->pages_per_sector) {
 800584a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800584c:	6a23      	ldr	r3, [r4, #32]
 800584e:	429a      	cmp	r2, r3
 8005850:	d23a      	bcs.n	80058c8 <niffs_ensure_free_pages+0x90>
    NIFFS_DBG("ensure: run#%i warn fs crammed, free pages:%i, need at least:%i\n", run, fs->free_pages, fs->pages_per_sector);
 8005852:	f8d9 1000 	ldr.w	r1, [r9]
 8005856:	f8df 8148 	ldr.w	r8, [pc, #328]	; 80059a0 <niffs_ensure_free_pages+0x168>
 800585a:	f411 6f80 	tst.w	r1, #1024	; 0x400
 800585e:	d006      	beq.n	800586e <niffs_ensure_free_pages+0x36>
 8005860:	f8da 1000 	ldr.w	r1, [sl]
 8005864:	b919      	cbnz	r1, 800586e <niffs_ensure_free_pages+0x36>
 8005866:	4848      	ldr	r0, [pc, #288]	; (8005988 <niffs_ensure_free_pages+0x150>)
 8005868:	4629      	mov	r1, r5
 800586a:	f003 fc97 	bl	800919c <arcprint>
    // crammed, even the spare sector is dirty
    if (fs->dele_pages < (fs->pages_per_sector - fs->free_pages)) {
 800586e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005870:	6a22      	ldr	r2, [r4, #32]
 8005872:	1ad2      	subs	r2, r2, r3
 8005874:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005876:	4293      	cmp	r3, r2
 8005878:	d210      	bcs.n	800589c <niffs_ensure_free_pages+0x64>
      // cannot ensure even the spare sector
      check(ERR_NIFFS_OVERFLOW);
 800587a:	f8d8 3000 	ldr.w	r3, [r8]
 800587e:	055d      	lsls	r5, r3, #21
 8005880:	d520      	bpl.n	80058c4 <niffs_ensure_free_pages+0x8c>
 8005882:	4b42      	ldr	r3, [pc, #264]	; (800598c <niffs_ensure_free_pages+0x154>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	b9eb      	cbnz	r3, 80058c4 <niffs_ensure_free_pages+0x8c>
 8005888:	f44f 63af 	mov.w	r3, #1400	; 0x578
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	4840      	ldr	r0, [pc, #256]	; (8005990 <niffs_ensure_free_pages+0x158>)
 8005890:	4940      	ldr	r1, [pc, #256]	; (8005994 <niffs_ensure_free_pages+0x15c>)
 8005892:	4a41      	ldr	r2, [pc, #260]	; (8005998 <niffs_ensure_free_pages+0x160>)
 8005894:	4b41      	ldr	r3, [pc, #260]	; (800599c <niffs_ensure_free_pages+0x164>)
 8005896:	f003 fc81 	bl	800919c <arcprint>
 800589a:	e013      	b.n	80058c4 <niffs_ensure_free_pages+0x8c>
    }
    u32_t freed_pages;
    res = niffs_gc(fs, &freed_pages, 0);
 800589c:	4620      	mov	r0, r4
 800589e:	a903      	add	r1, sp, #12
 80058a0:	2200      	movs	r2, #0
 80058a2:	f7ff fdeb 	bl	800547c <niffs_gc>
    check(res);
 80058a6:	4607      	mov	r7, r0
 80058a8:	b150      	cbz	r0, 80058c0 <niffs_ensure_free_pages+0x88>
 80058aa:	f8d8 3000 	ldr.w	r3, [r8]
 80058ae:	055c      	lsls	r4, r3, #21
 80058b0:	d552      	bpl.n	8005958 <niffs_ensure_free_pages+0x120>
 80058b2:	4b36      	ldr	r3, [pc, #216]	; (800598c <niffs_ensure_free_pages+0x154>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d14e      	bne.n	8005958 <niffs_ensure_free_pages+0x120>
 80058ba:	f240 537c 	movw	r3, #1404	; 0x57c
 80058be:	e044      	b.n	800594a <niffs_ensure_free_pages+0x112>
    run++;
 80058c0:	3501      	adds	r5, #1
 80058c2:	e7c2      	b.n	800584a <niffs_ensure_free_pages+0x12>
  while (fs->free_pages < fs->pages_per_sector) {
    NIFFS_DBG("ensure: run#%i warn fs crammed, free pages:%i, need at least:%i\n", run, fs->free_pages, fs->pages_per_sector);
    // crammed, even the spare sector is dirty
    if (fs->dele_pages < (fs->pages_per_sector - fs->free_pages)) {
      // cannot ensure even the spare sector
      check(ERR_NIFFS_OVERFLOW);
 80058c4:	4833      	ldr	r0, [pc, #204]	; (8005994 <niffs_ensure_free_pages+0x15c>)
 80058c6:	e05b      	b.n	8005980 <niffs_ensure_free_pages+0x148>
    res = niffs_gc(fs, &freed_pages, 0);
    check(res);
    run++;
  }

  if (pages > (fs->dele_pages + fs->free_pages - fs->pages_per_sector)) {
 80058c8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80058ca:	4411      	add	r1, r2
 80058cc:	1ac9      	subs	r1, r1, r3
 80058ce:	428e      	cmp	r6, r1
 80058d0:	d911      	bls.n	80058f6 <niffs_ensure_free_pages+0xbe>
    // this will never fit without deleting stuff
    check(ERR_NIFFS_FULL);
 80058d2:	4b33      	ldr	r3, [pc, #204]	; (80059a0 <niffs_ensure_free_pages+0x168>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	0558      	lsls	r0, r3, #21
 80058d8:	d551      	bpl.n	800597e <niffs_ensure_free_pages+0x146>
 80058da:	4b2c      	ldr	r3, [pc, #176]	; (800598c <niffs_ensure_free_pages+0x154>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d14d      	bne.n	800597e <niffs_ensure_free_pages+0x146>
 80058e2:	f240 5382 	movw	r3, #1410	; 0x582
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	4829      	ldr	r0, [pc, #164]	; (8005990 <niffs_ensure_free_pages+0x158>)
 80058ea:	492e      	ldr	r1, [pc, #184]	; (80059a4 <niffs_ensure_free_pages+0x16c>)
 80058ec:	4a2a      	ldr	r2, [pc, #168]	; (8005998 <niffs_ensure_free_pages+0x160>)
 80058ee:	4b2b      	ldr	r3, [pc, #172]	; (800599c <niffs_ensure_free_pages+0x164>)
 80058f0:	f003 fc54 	bl	800919c <arcprint>
 80058f4:	e043      	b.n	800597e <niffs_ensure_free_pages+0x146>
  }

  // try cleaning away needed pages
//#define NIFFS_GC_DBG
  if (pages > fs->free_pages || fs->free_pages - pages < fs->pages_per_sector) {
 80058f6:	4296      	cmp	r6, r2
 80058f8:	d904      	bls.n	8005904 <niffs_ensure_free_pages+0xcc>
    int zero_runs = 0;
    u32_t orig_dele_pages = fs->dele_pages;
    u32_t orig_free_pages = fs->free_pages;
#endif
    while (pages > fs->free_pages || fs->free_pages - pages < fs->pages_per_sector) {
      NIFFS_DBG("ensure: run#%i need %i free, have %i-%i\n", run, pages, fs->free_pages, fs->pages_per_sector);
 80058fa:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80059a0 <niffs_ensure_free_pages+0x168>
 80058fe:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800598c <niffs_ensure_free_pages+0x154>
 8005902:	e005      	b.n	8005910 <niffs_ensure_free_pages+0xd8>
    check(ERR_NIFFS_FULL);
  }

  // try cleaning away needed pages
//#define NIFFS_GC_DBG
  if (pages > fs->free_pages || fs->free_pages - pages < fs->pages_per_sector) {
 8005904:	1b92      	subs	r2, r2, r6
 8005906:	429a      	cmp	r2, r3
 8005908:	d3f7      	bcc.n	80058fa <niffs_ensure_free_pages+0xc2>
 800590a:	2000      	movs	r0, #0
 800590c:	e038      	b.n	8005980 <niffs_ensure_free_pages+0x148>
          printf("want pages: %i   have: %i  had dele: %i  had free: %i\n", pages, fs->free_pages, orig_dele_pages, orig_free_pages);
          NIFFS_ASSERT(0);
        }
      }
#endif
      run++;
 800590e:	3501      	adds	r5, #1
#ifdef NIFFS_GC_DBG
    int zero_runs = 0;
    u32_t orig_dele_pages = fs->dele_pages;
    u32_t orig_free_pages = fs->free_pages;
#endif
    while (pages > fs->free_pages || fs->free_pages - pages < fs->pages_per_sector) {
 8005910:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005912:	429e      	cmp	r6, r3
 8005914:	d92e      	bls.n	8005974 <niffs_ensure_free_pages+0x13c>
      NIFFS_DBG("ensure: run#%i need %i free, have %i-%i\n", run, pages, fs->free_pages, fs->pages_per_sector);
 8005916:	f8d8 2000 	ldr.w	r2, [r8]
 800591a:	0551      	lsls	r1, r2, #21
 800591c:	d41e      	bmi.n	800595c <niffs_ensure_free_pages+0x124>
 800591e:	1e6b      	subs	r3, r5, #1
      u32_t freed_pages;
      // only allow gcing of a full page each fourth run
      res = niffs_gc(fs, &freed_pages, ((run - 1) % 4) == 0);
 8005920:	f013 0f03 	tst.w	r3, #3
 8005924:	4620      	mov	r0, r4
 8005926:	a903      	add	r1, sp, #12
 8005928:	bf14      	ite	ne
 800592a:	2200      	movne	r2, #0
 800592c:	2201      	moveq	r2, #1
 800592e:	f7ff fda5 	bl	800547c <niffs_gc>
      check(res);
 8005932:	4607      	mov	r7, r0
 8005934:	2800      	cmp	r0, #0
 8005936:	d0ea      	beq.n	800590e <niffs_ensure_free_pages+0xd6>
 8005938:	4b19      	ldr	r3, [pc, #100]	; (80059a0 <niffs_ensure_free_pages+0x168>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	055a      	lsls	r2, r3, #21
 800593e:	d50b      	bpl.n	8005958 <niffs_ensure_free_pages+0x120>
 8005940:	4b12      	ldr	r3, [pc, #72]	; (800598c <niffs_ensure_free_pages+0x154>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	b943      	cbnz	r3, 8005958 <niffs_ensure_free_pages+0x120>
 8005946:	f240 5392 	movw	r3, #1426	; 0x592
 800594a:	9300      	str	r3, [sp, #0]
 800594c:	4810      	ldr	r0, [pc, #64]	; (8005990 <niffs_ensure_free_pages+0x158>)
 800594e:	4639      	mov	r1, r7
 8005950:	4a11      	ldr	r2, [pc, #68]	; (8005998 <niffs_ensure_free_pages+0x160>)
 8005952:	4b12      	ldr	r3, [pc, #72]	; (800599c <niffs_ensure_free_pages+0x164>)
 8005954:	f003 fc22 	bl	800919c <arcprint>
#endif
    while (pages > fs->free_pages || fs->free_pages - pages < fs->pages_per_sector) {
      NIFFS_DBG("ensure: run#%i need %i free, have %i-%i\n", run, pages, fs->free_pages, fs->pages_per_sector);
      u32_t freed_pages;
      // only allow gcing of a full page each fourth run
      res = niffs_gc(fs, &freed_pages, ((run - 1) % 4) == 0);
 8005958:	4638      	mov	r0, r7
 800595a:	e011      	b.n	8005980 <niffs_ensure_free_pages+0x148>
    int zero_runs = 0;
    u32_t orig_dele_pages = fs->dele_pages;
    u32_t orig_free_pages = fs->free_pages;
#endif
    while (pages > fs->free_pages || fs->free_pages - pages < fs->pages_per_sector) {
      NIFFS_DBG("ensure: run#%i need %i free, have %i-%i\n", run, pages, fs->free_pages, fs->pages_per_sector);
 800595c:	f8d9 2000 	ldr.w	r2, [r9]
 8005960:	2a00      	cmp	r2, #0
 8005962:	d1dc      	bne.n	800591e <niffs_ensure_free_pages+0xe6>
 8005964:	6a22      	ldr	r2, [r4, #32]
 8005966:	4810      	ldr	r0, [pc, #64]	; (80059a8 <niffs_ensure_free_pages+0x170>)
 8005968:	9200      	str	r2, [sp, #0]
 800596a:	4629      	mov	r1, r5
 800596c:	4632      	mov	r2, r6
 800596e:	f003 fc15 	bl	800919c <arcprint>
 8005972:	e7d4      	b.n	800591e <niffs_ensure_free_pages+0xe6>
#ifdef NIFFS_GC_DBG
    int zero_runs = 0;
    u32_t orig_dele_pages = fs->dele_pages;
    u32_t orig_free_pages = fs->free_pages;
#endif
    while (pages > fs->free_pages || fs->free_pages - pages < fs->pages_per_sector) {
 8005974:	6a22      	ldr	r2, [r4, #32]
 8005976:	1b99      	subs	r1, r3, r6
 8005978:	4291      	cmp	r1, r2
 800597a:	d3cc      	bcc.n	8005916 <niffs_ensure_free_pages+0xde>
 800597c:	e7c5      	b.n	800590a <niffs_ensure_free_pages+0xd2>
    run++;
  }

  if (pages > (fs->dele_pages + fs->free_pages - fs->pages_per_sector)) {
    // this will never fit without deleting stuff
    check(ERR_NIFFS_FULL);
 800597e:	4809      	ldr	r0, [pc, #36]	; (80059a4 <niffs_ensure_free_pages+0x16c>)
      run++;
    }
  }

  return res;
}
 8005980:	b004      	add	sp, #16
 8005982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005986:	bf00      	nop
 8005988:	08010c0a 	.word	0x08010c0a
 800598c:	20004f84 	.word	0x20004f84
 8005990:	08010535 	.word	0x08010535
 8005994:	ffffd4e4 	.word	0xffffd4e4
 8005998:	0800e9d2 	.word	0x0800e9d2
 800599c:	0801054b 	.word	0x0801054b
 80059a0:	20004f80 	.word	0x20004f80
 80059a4:	ffffd4f6 	.word	0xffffd4f6
 80059a8:	08010c4b 	.word	0x08010c4b

080059ac <niffs_create>:

#endif // NIFFS_LINEAR_AREA

/////////////////////////////////// FILE /////////////////////////////////////

int niffs_create(niffs *fs, const char *name, niffs_file_type type, void *meta) {
 80059ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059b0:	4605      	mov	r5, r0
 80059b2:	b08d      	sub	sp, #52	; 0x34
 80059b4:	4691      	mov	r9, r2
  niffs_obj_id oid = 0;
  niffs_page_ix pix;
  int res;

  if (name == 0) check(ERR_NIFFS_NULL_PTR);
 80059b6:	468a      	mov	sl, r1
 80059b8:	b999      	cbnz	r1, 80059e2 <niffs_create+0x36>
 80059ba:	4b9b      	ldr	r3, [pc, #620]	; (8005c28 <niffs_create+0x27c>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	055b      	lsls	r3, r3, #21
 80059c0:	f140 8128 	bpl.w	8005c14 <niffs_create+0x268>
 80059c4:	4b99      	ldr	r3, [pc, #612]	; (8005c2c <niffs_create+0x280>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f040 8123 	bne.w	8005c14 <niffs_create+0x268>
 80059ce:	f240 232a 	movw	r3, #554	; 0x22a
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	4896      	ldr	r0, [pc, #600]	; (8005c30 <niffs_create+0x284>)
 80059d6:	4997      	ldr	r1, [pc, #604]	; (8005c34 <niffs_create+0x288>)
 80059d8:	4a97      	ldr	r2, [pc, #604]	; (8005c38 <niffs_create+0x28c>)
 80059da:	4b98      	ldr	r3, [pc, #608]	; (8005c3c <niffs_create+0x290>)
 80059dc:	f003 fbde 	bl	800919c <arcprint>
 80059e0:	e118      	b.n	8005c14 <niffs_create+0x268>

  res = niffs_ensure_free_pages(fs, 1);
 80059e2:	2101      	movs	r1, #1
 80059e4:	f7ff ff28 	bl	8005838 <niffs_ensure_free_pages>
  check(res);
 80059e8:	4606      	mov	r6, r0
 80059ea:	b160      	cbz	r0, 8005a06 <niffs_create+0x5a>
 80059ec:	4b8e      	ldr	r3, [pc, #568]	; (8005c28 <niffs_create+0x27c>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	055f      	lsls	r7, r3, #21
 80059f2:	f140 8113 	bpl.w	8005c1c <niffs_create+0x270>
 80059f6:	4b8d      	ldr	r3, [pc, #564]	; (8005c2c <niffs_create+0x280>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f040 810e 	bne.w	8005c1c <niffs_create+0x270>
 8005a00:	f240 232d 	movw	r3, #557	; 0x22d
 8005a04:	e0fa      	b.n	8005bfc <niffs_create+0x250>
  return NIFFS_VIS_CONT;
}

TESTATIC int niffs_find_free_id(niffs *fs, niffs_obj_id *oid, const char *conflict_name) {
  if (oid == 0) check(ERR_NIFFS_NULL_PTR);
  niffs_memset(fs->buf, 0, fs->buf_len);
 8005a06:	4631      	mov	r1, r6
 8005a08:	696a      	ldr	r2, [r5, #20]
  niffs_find_free_id_arg arg = {.conflict_name = conflict_name};
 8005a0a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
  return NIFFS_VIS_CONT;
}

TESTATIC int niffs_find_free_id(niffs *fs, niffs_obj_id *oid, const char *conflict_name) {
  if (oid == 0) check(ERR_NIFFS_NULL_PTR);
  niffs_memset(fs->buf, 0, fs->buf_len);
 8005a0e:	6928      	ldr	r0, [r5, #16]
 8005a10:	f008 fcbe 	bl	800e390 <memset>
  niffs_find_free_id_arg arg = {.conflict_name = conflict_name};
 8005a14:	f848 ad24 	str.w	sl, [r8, #-36]!
  int res = niffs_traverse(fs, 0, 0, niffs_find_free_id_v, &arg);
 8005a18:	4631      	mov	r1, r6
 8005a1a:	f8cd 8000 	str.w	r8, [sp]
 8005a1e:	4628      	mov	r0, r5
 8005a20:	4632      	mov	r2, r6
 8005a22:	4b87      	ldr	r3, [pc, #540]	; (8005c40 <niffs_create+0x294>)
 8005a24:	f7fe ffa4 	bl	8004970 <niffs_traverse>

  if (res != NIFFS_VIS_END) check(res);
 8005a28:	f030 0102 	bics.w	r1, r0, #2

TESTATIC int niffs_find_free_id(niffs *fs, niffs_obj_id *oid, const char *conflict_name) {
  if (oid == 0) check(ERR_NIFFS_NULL_PTR);
  niffs_memset(fs->buf, 0, fs->buf_len);
  niffs_find_free_id_arg arg = {.conflict_name = conflict_name};
  int res = niffs_traverse(fs, 0, 0, niffs_find_free_id_v, &arg);
 8005a2c:	4607      	mov	r7, r0

  if (res != NIFFS_VIS_END) check(res);
 8005a2e:	d015      	beq.n	8005a5c <niffs_create+0xb0>
 8005a30:	4b7d      	ldr	r3, [pc, #500]	; (8005c28 <niffs_create+0x27c>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8005a38:	d041      	beq.n	8005abe <niffs_create+0x112>
 8005a3a:	4b7c      	ldr	r3, [pc, #496]	; (8005c2c <niffs_create+0x280>)
 8005a3c:	f8d3 b000 	ldr.w	fp, [r3]
 8005a40:	f1bb 0f00 	cmp.w	fp, #0
 8005a44:	d13e      	bne.n	8005ac4 <niffs_create+0x118>
 8005a46:	2396      	movs	r3, #150	; 0x96
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	4879      	ldr	r0, [pc, #484]	; (8005c30 <niffs_create+0x284>)
 8005a4c:	4639      	mov	r1, r7
 8005a4e:	4a7d      	ldr	r2, [pc, #500]	; (8005c44 <niffs_create+0x298>)
 8005a50:	4b7a      	ldr	r3, [pc, #488]	; (8005c3c <niffs_create+0x290>)
 8005a52:	f003 fba3 	bl	800919c <arcprint>
 8005a56:	463c      	mov	r4, r7
#endif // NIFFS_LINEAR_AREA

/////////////////////////////////// FILE /////////////////////////////////////

int niffs_create(niffs *fs, const char *name, niffs_file_type type, void *meta) {
  niffs_obj_id oid = 0;
 8005a58:	465e      	mov	r6, fp
 8005a5a:	e037      	b.n	8005acc <niffs_create+0x120>
  niffs_find_free_id_arg arg = {.conflict_name = conflict_name};
  int res = niffs_traverse(fs, 0, 0, niffs_find_free_id_v, &arg);

  if (res != NIFFS_VIS_END) check(res);

  u32_t max_id = (fs->pages_per_sector * fs->sectors) - 2;
 8005a5c:	686b      	ldr	r3, [r5, #4]
 8005a5e:	6a2a      	ldr	r2, [r5, #32]
  u32_t cur_id;
  for (cur_id = 0; cur_id < max_id; cur_id += 8) {
 8005a60:	460e      	mov	r6, r1
  niffs_find_free_id_arg arg = {.conflict_name = conflict_name};
  int res = niffs_traverse(fs, 0, 0, niffs_find_free_id_v, &arg);

  if (res != NIFFS_VIS_END) check(res);

  u32_t max_id = (fs->pages_per_sector * fs->sectors) - 2;
 8005a62:	435a      	muls	r2, r3
 8005a64:	3a02      	subs	r2, #2
  u32_t cur_id;
  for (cur_id = 0; cur_id < max_id; cur_id += 8) {
 8005a66:	4296      	cmp	r6, r2
 8005a68:	d219      	bcs.n	8005a9e <niffs_create+0xf2>
    if (fs->buf[cur_id/8] == 0xff) continue;
 8005a6a:	692b      	ldr	r3, [r5, #16]
 8005a6c:	08f1      	lsrs	r1, r6, #3
 8005a6e:	5c59      	ldrb	r1, [r3, r1]
 8005a70:	29ff      	cmp	r1, #255	; 0xff
 8005a72:	d012      	beq.n	8005a9a <niffs_create+0xee>
 8005a74:	2300      	movs	r3, #0
 8005a76:	1c70      	adds	r0, r6, #1
    u8_t bit_ix;
    for (bit_ix = 0; bit_ix < 8; bit_ix++) {
      if ((fs->buf[cur_id/8] & (1<<bit_ix)) == 0 && (cur_id + bit_ix) + 1 < max_id) {
 8005a78:	fa41 f403 	asr.w	r4, r1, r3
 8005a7c:	f014 0401 	ands.w	r4, r4, #1
 8005a80:	b2df      	uxtb	r7, r3
 8005a82:	d107      	bne.n	8005a94 <niffs_create+0xe8>
 8005a84:	eb00 0c03 	add.w	ip, r0, r3
 8005a88:	4594      	cmp	ip, r2
 8005a8a:	d203      	bcs.n	8005a94 <niffs_create+0xe8>
        *oid = (cur_id + bit_ix) + 1;
 8005a8c:	3701      	adds	r7, #1
 8005a8e:	443e      	add	r6, r7
 8005a90:	b2f6      	uxtb	r6, r6
 8005a92:	e030      	b.n	8005af6 <niffs_create+0x14a>
 8005a94:	3301      	adds	r3, #1
  u32_t max_id = (fs->pages_per_sector * fs->sectors) - 2;
  u32_t cur_id;
  for (cur_id = 0; cur_id < max_id; cur_id += 8) {
    if (fs->buf[cur_id/8] == 0xff) continue;
    u8_t bit_ix;
    for (bit_ix = 0; bit_ix < 8; bit_ix++) {
 8005a96:	2b08      	cmp	r3, #8
 8005a98:	d1ee      	bne.n	8005a78 <niffs_create+0xcc>

  if (res != NIFFS_VIS_END) check(res);

  u32_t max_id = (fs->pages_per_sector * fs->sectors) - 2;
  u32_t cur_id;
  for (cur_id = 0; cur_id < max_id; cur_id += 8) {
 8005a9a:	3608      	adds	r6, #8
 8005a9c:	e7e3      	b.n	8005a66 <niffs_create+0xba>
      }
    }
  }

  res = ERR_NIFFS_NO_FREE_ID;
  check(res);
 8005a9e:	4b62      	ldr	r3, [pc, #392]	; (8005c28 <niffs_create+0x27c>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	055e      	lsls	r6, r3, #21
 8005aa4:	d510      	bpl.n	8005ac8 <niffs_create+0x11c>
 8005aa6:	4b61      	ldr	r3, [pc, #388]	; (8005c2c <niffs_create+0x280>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	b96b      	cbnz	r3, 8005ac8 <niffs_create+0x11c>
 8005aac:	23a6      	movs	r3, #166	; 0xa6
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	485f      	ldr	r0, [pc, #380]	; (8005c30 <niffs_create+0x284>)
 8005ab2:	4965      	ldr	r1, [pc, #404]	; (8005c48 <niffs_create+0x29c>)
 8005ab4:	4a63      	ldr	r2, [pc, #396]	; (8005c44 <niffs_create+0x298>)
 8005ab6:	4b61      	ldr	r3, [pc, #388]	; (8005c3c <niffs_create+0x290>)
 8005ab8:	f003 fb70 	bl	800919c <arcprint>
 8005abc:	e004      	b.n	8005ac8 <niffs_create+0x11c>
  if (oid == 0) check(ERR_NIFFS_NULL_PTR);
  niffs_memset(fs->buf, 0, fs->buf_len);
  niffs_find_free_id_arg arg = {.conflict_name = conflict_name};
  int res = niffs_traverse(fs, 0, 0, niffs_find_free_id_v, &arg);

  if (res != NIFFS_VIS_END) check(res);
 8005abe:	4604      	mov	r4, r0
#endif // NIFFS_LINEAR_AREA

/////////////////////////////////// FILE /////////////////////////////////////

int niffs_create(niffs *fs, const char *name, niffs_file_type type, void *meta) {
  niffs_obj_id oid = 0;
 8005ac0:	461e      	mov	r6, r3
 8005ac2:	e003      	b.n	8005acc <niffs_create+0x120>
  if (oid == 0) check(ERR_NIFFS_NULL_PTR);
  niffs_memset(fs->buf, 0, fs->buf_len);
  niffs_find_free_id_arg arg = {.conflict_name = conflict_name};
  int res = niffs_traverse(fs, 0, 0, niffs_find_free_id_v, &arg);

  if (res != NIFFS_VIS_END) check(res);
 8005ac4:	4604      	mov	r4, r0
 8005ac6:	e001      	b.n	8005acc <niffs_create+0x120>
      }
    }
  }

  res = ERR_NIFFS_NO_FREE_ID;
  check(res);
 8005ac8:	4c5f      	ldr	r4, [pc, #380]	; (8005c48 <niffs_create+0x29c>)
 8005aca:	e000      	b.n	8005ace <niffs_create+0x122>

  res = niffs_ensure_free_pages(fs, 1);
  check(res);

  res = niffs_find_free_id(fs, &oid, name);
  check(res);
 8005acc:	b19f      	cbz	r7, 8005af6 <niffs_create+0x14a>
 8005ace:	4b56      	ldr	r3, [pc, #344]	; (8005c28 <niffs_create+0x27c>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	055d      	lsls	r5, r3, #21
 8005ad4:	f140 80a3 	bpl.w	8005c1e <niffs_create+0x272>
 8005ad8:	4b54      	ldr	r3, [pc, #336]	; (8005c2c <niffs_create+0x280>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f040 809e 	bne.w	8005c1e <niffs_create+0x272>
 8005ae2:	f44f 730c 	mov.w	r3, #560	; 0x230
 8005ae6:	9300      	str	r3, [sp, #0]
 8005ae8:	4851      	ldr	r0, [pc, #324]	; (8005c30 <niffs_create+0x284>)
 8005aea:	4621      	mov	r1, r4
 8005aec:	4a52      	ldr	r2, [pc, #328]	; (8005c38 <niffs_create+0x28c>)
 8005aee:	4b53      	ldr	r3, [pc, #332]	; (8005c3c <niffs_create+0x290>)
 8005af0:	f003 fb54 	bl	800919c <arcprint>
 8005af4:	e093      	b.n	8005c1e <niffs_create+0x272>

  res = niffs_find_free_page(fs, &pix, NIFFS_EXCL_SECT_NONE);
 8005af6:	4628      	mov	r0, r5
 8005af8:	f10d 010a 	add.w	r1, sp, #10
 8005afc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b00:	f7fe ff63 	bl	80049ca <niffs_find_free_page>
 8005b04:	4f48      	ldr	r7, [pc, #288]	; (8005c28 <niffs_create+0x27c>)
  check(res);
 8005b06:	4683      	mov	fp, r0
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	b180      	cbz	r0, 8005b2e <niffs_create+0x182>
 8005b0c:	055c      	lsls	r4, r3, #21
 8005b0e:	f140 8083 	bpl.w	8005c18 <niffs_create+0x26c>
 8005b12:	4b46      	ldr	r3, [pc, #280]	; (8005c2c <niffs_create+0x280>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d17e      	bne.n	8005c18 <niffs_create+0x26c>
 8005b1a:	f240 2333 	movw	r3, #563	; 0x233
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	4843      	ldr	r0, [pc, #268]	; (8005c30 <niffs_create+0x284>)
 8005b22:	4659      	mov	r1, fp
 8005b24:	4a44      	ldr	r2, [pc, #272]	; (8005c38 <niffs_create+0x28c>)
 8005b26:	4b45      	ldr	r3, [pc, #276]	; (8005c3c <niffs_create+0x290>)
 8005b28:	f003 fb38 	bl	800919c <arcprint>
 8005b2c:	e074      	b.n	8005c18 <niffs_create+0x26c>

  NIFFS_DBG("create: pix %04x oid:%04x name:%s\n", pix, oid, name);
 8005b2e:	0558      	lsls	r0, r3, #21
 8005b30:	d509      	bpl.n	8005b46 <niffs_create+0x19a>
 8005b32:	4b3e      	ldr	r3, [pc, #248]	; (8005c2c <niffs_create+0x280>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	b933      	cbnz	r3, 8005b46 <niffs_create+0x19a>
 8005b38:	4844      	ldr	r0, [pc, #272]	; (8005c4c <niffs_create+0x2a0>)
 8005b3a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8005b3e:	4632      	mov	r2, r6
 8005b40:	4653      	mov	r3, sl
 8005b42:	f003 fb2b 	bl	800919c <arcprint>

  // write page header & clean object header
  niffs_super_hdr hdr;
  hdr.ohdr.phdr.flag = _NIFFS_FLAG_CLEAN;
 8005b46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b4a:	f8ad 300e 	strh.w	r3, [sp, #14]
  hdr.ohdr.phdr.id.obj_id = oid;
  hdr.ohdr.phdr.id.spix = 0;
 8005b4e:	f89d 300c 	ldrb.w	r3, [sp, #12]
  hdr.ohdr.len = NIFFS_UNDEF_LEN;
  hdr.ohdr.type = type;
  niffs_strncpy((char *)hdr.ohdr.name, name, NIFFS_NAME_LEN);
 8005b52:	f108 0008 	add.w	r0, r8, #8

  // write page header & clean object header
  niffs_super_hdr hdr;
  hdr.ohdr.phdr.flag = _NIFFS_FLAG_CLEAN;
  hdr.ohdr.phdr.id.obj_id = oid;
  hdr.ohdr.phdr.id.spix = 0;
 8005b56:	f36f 0307 	bfc	r3, #0, #8
 8005b5a:	f88d 300c 	strb.w	r3, [sp, #12]
  hdr.ohdr.len = NIFFS_UNDEF_LEN;
  hdr.ohdr.type = type;
  niffs_strncpy((char *)hdr.ohdr.name, name, NIFFS_NAME_LEN);
 8005b5e:	4651      	mov	r1, sl
  // write page header & clean object header
  niffs_super_hdr hdr;
  hdr.ohdr.phdr.flag = _NIFFS_FLAG_CLEAN;
  hdr.ohdr.phdr.id.obj_id = oid;
  hdr.ohdr.phdr.id.spix = 0;
  hdr.ohdr.len = NIFFS_UNDEF_LEN;
 8005b60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  hdr.ohdr.type = type;
  niffs_strncpy((char *)hdr.ohdr.name, name, NIFFS_NAME_LEN);
 8005b64:	2210      	movs	r2, #16
  NIFFS_DBG("create: pix %04x oid:%04x name:%s\n", pix, oid, name);

  // write page header & clean object header
  niffs_super_hdr hdr;
  hdr.ohdr.phdr.flag = _NIFFS_FLAG_CLEAN;
  hdr.ohdr.phdr.id.obj_id = oid;
 8005b66:	f88d 600d 	strb.w	r6, [sp, #13]
  hdr.ohdr.phdr.id.spix = 0;
  hdr.ohdr.len = NIFFS_UNDEF_LEN;
 8005b6a:	9304      	str	r3, [sp, #16]
  hdr.ohdr.type = type;
 8005b6c:	f88d 9024 	strb.w	r9, [sp, #36]	; 0x24
  niffs_strncpy((char *)hdr.ohdr.name, name, NIFFS_NAME_LEN);
 8005b70:	f7fb fbdc 	bl	800132c <strncpy>

  u32_t xtra_meta_len = 0;
  switch (type) {
 8005b74:	f1b9 0f00 	cmp.w	r9, #0
 8005b78:	d021      	beq.n	8005bbe <niffs_create+0x212>
 8005b7a:	f1b9 0f01 	cmp.w	r9, #1
 8005b7e:	d108      	bne.n	8005b92 <niffs_create+0x1e6>
        sizeof(niffs_linear_file_hdr) - sizeof(niffs_object_hdr));
    xtra_meta_len = sizeof(niffs_linear_file_hdr) - sizeof(niffs_page_hdr);
    break;
#else
    (void)meta;
    check(ERR_NIFFS_BAD_CONF);
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	0559      	lsls	r1, r3, #21
 8005b84:	d519      	bpl.n	8005bba <niffs_create+0x20e>
 8005b86:	4b29      	ldr	r3, [pc, #164]	; (8005c2c <niffs_create+0x280>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	b9b3      	cbnz	r3, 8005bba <niffs_create+0x20e>
 8005b8c:	f240 235b 	movw	r3, #603	; 0x25b
 8005b90:	e00c      	b.n	8005bac <niffs_create+0x200>
#endif
  }
  default:
    NIFFS_ASSERT(0);
 8005b92:	482a      	ldr	r0, [pc, #168]	; (8005c3c <niffs_create+0x290>)
 8005b94:	f240 215f 	movw	r1, #607	; 0x25f
 8005b98:	f7fa fe22 	bl	80007e0 <SYS_assert>
    check(ERR_NIFFS_BAD_CONF);
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	055a      	lsls	r2, r3, #21
 8005ba0:	d50b      	bpl.n	8005bba <niffs_create+0x20e>
 8005ba2:	4b22      	ldr	r3, [pc, #136]	; (8005c2c <niffs_create+0x280>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	b943      	cbnz	r3, 8005bba <niffs_create+0x20e>
 8005ba8:	f44f 7318 	mov.w	r3, #608	; 0x260
 8005bac:	9300      	str	r3, [sp, #0]
 8005bae:	4820      	ldr	r0, [pc, #128]	; (8005c30 <niffs_create+0x284>)
 8005bb0:	4927      	ldr	r1, [pc, #156]	; (8005c50 <niffs_create+0x2a4>)
 8005bb2:	4a21      	ldr	r2, [pc, #132]	; (8005c38 <niffs_create+0x28c>)
 8005bb4:	4b21      	ldr	r3, [pc, #132]	; (8005c3c <niffs_create+0x290>)
 8005bb6:	f003 faf1 	bl	800919c <arcprint>
 8005bba:	4c25      	ldr	r4, [pc, #148]	; (8005c50 <niffs_create+0x2a4>)
 8005bbc:	e02f      	b.n	8005c1e <niffs_create+0x272>
  }

  NIFFS_DBG("        type:%02x xtra_meta_len:%i\n", type, xtra_meta_len);
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	055b      	lsls	r3, r3, #21
 8005bc2:	d507      	bpl.n	8005bd4 <niffs_create+0x228>
 8005bc4:	4b19      	ldr	r3, [pc, #100]	; (8005c2c <niffs_create+0x280>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	b923      	cbnz	r3, 8005bd4 <niffs_create+0x228>
 8005bca:	4822      	ldr	r0, [pc, #136]	; (8005c54 <niffs_create+0x2a8>)
 8005bcc:	4649      	mov	r1, r9
 8005bce:	2216      	movs	r2, #22
 8005bd0:	f003 fae4 	bl	800919c <arcprint>
  res = niffs_write_page(fs, pix, &hdr.ohdr.phdr,
 8005bd4:	2316      	movs	r3, #22
 8005bd6:	9300      	str	r3, [sp, #0]
 8005bd8:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8005bdc:	4628      	mov	r0, r5
 8005bde:	4642      	mov	r2, r8
 8005be0:	f108 0304 	add.w	r3, r8, #4
 8005be4:	f7fe fba2 	bl	800432c <niffs_write_page>
      (u8_t *)&hdr.ohdr + offsetof(niffs_object_hdr, len),
      xtra_meta_len);

  check(res);
 8005be8:	4606      	mov	r6, r0
 8005bea:	b178      	cbz	r0, 8005c0c <niffs_create+0x260>
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	055f      	lsls	r7, r3, #21
 8005bf0:	d514      	bpl.n	8005c1c <niffs_create+0x270>
 8005bf2:	4b0e      	ldr	r3, [pc, #56]	; (8005c2c <niffs_create+0x280>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	b98b      	cbnz	r3, 8005c1c <niffs_create+0x270>
 8005bf8:	f44f 731a 	mov.w	r3, #616	; 0x268
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	480c      	ldr	r0, [pc, #48]	; (8005c30 <niffs_create+0x284>)
 8005c00:	4631      	mov	r1, r6
 8005c02:	4a0d      	ldr	r2, [pc, #52]	; (8005c38 <niffs_create+0x28c>)
 8005c04:	4b0d      	ldr	r3, [pc, #52]	; (8005c3c <niffs_create+0x290>)
 8005c06:	f003 fac9 	bl	800919c <arcprint>
 8005c0a:	e007      	b.n	8005c1c <niffs_create+0x270>
  fs->free_pages--;
 8005c0c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	62ab      	str	r3, [r5, #40]	; 0x28

  return res;
 8005c12:	e004      	b.n	8005c1e <niffs_create+0x272>
int niffs_create(niffs *fs, const char *name, niffs_file_type type, void *meta) {
  niffs_obj_id oid = 0;
  niffs_page_ix pix;
  int res;

  if (name == 0) check(ERR_NIFFS_NULL_PTR);
 8005c14:	4c07      	ldr	r4, [pc, #28]	; (8005c34 <niffs_create+0x288>)
 8005c16:	e002      	b.n	8005c1e <niffs_create+0x272>
 8005c18:	465c      	mov	r4, fp
 8005c1a:	e000      	b.n	8005c1e <niffs_create+0x272>
 8005c1c:	4634      	mov	r4, r6

  check(res);
  fs->free_pages--;

  return res;
}
 8005c1e:	4620      	mov	r0, r4
 8005c20:	b00d      	add	sp, #52	; 0x34
 8005c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c26:	bf00      	nop
 8005c28:	20004f80 	.word	0x20004f80
 8005c2c:	20004f84 	.word	0x20004f84
 8005c30:	08010535 	.word	0x08010535
 8005c34:	ffffd4fb 	.word	0xffffd4fb
 8005c38:	0800e9ea 	.word	0x0800e9ea
 8005c3c:	0801054b 	.word	0x0801054b
 8005c40:	08004835 	.word	0x08004835
 8005c44:	0800e9f7 	.word	0x0800e9f7
 8005c48:	ffffd4fa 	.word	0xffffd4fa
 8005c4c:	08010c74 	.word	0x08010c74
 8005c50:	ffffd507 	.word	0xffffd507
 8005c54:	08010c97 	.word	0x08010c97

08005c58 <niffs_append>:
  fd->offs = (u32_t)coffs;

  return res;
}

int niffs_append(niffs *fs, int fd_ix, const u8_t *src, u32_t len) {
 8005c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c5c:	b08b      	sub	sp, #44	; 0x2c
 8005c5e:	9205      	str	r2, [sp, #20]
  int res = NIFFS_OK;
  niffs_file_desc *fd;
  res = niffs_get_filedesc(fs, fd_ix, &fd);
 8005c60:	aa08      	add	r2, sp, #32
  fd->offs = (u32_t)coffs;

  return res;
}

int niffs_append(niffs *fs, int fd_ix, const u8_t *src, u32_t len) {
 8005c62:	4604      	mov	r4, r0
 8005c64:	4698      	mov	r8, r3
  int res = NIFFS_OK;
  niffs_file_desc *fd;
  res = niffs_get_filedesc(fs, fd_ix, &fd);
 8005c66:	f7ff f8b5 	bl	8004dd4 <niffs_get_filedesc>
  check(res);
 8005c6a:	4605      	mov	r5, r0
 8005c6c:	b160      	cbz	r0, 8005c88 <niffs_append+0x30>
 8005c6e:	4b88      	ldr	r3, [pc, #544]	; (8005e90 <niffs_append+0x238>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	055a      	lsls	r2, r3, #21
 8005c74:	f140 80ee 	bpl.w	8005e54 <niffs_append+0x1fc>
 8005c78:	4b86      	ldr	r3, [pc, #536]	; (8005e94 <niffs_append+0x23c>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f040 80e9 	bne.w	8005e54 <niffs_append+0x1fc>
 8005c82:	f240 333b 	movw	r3, #827	; 0x33b
 8005c86:	e090      	b.n	8005daa <niffs_append+0x152>

  if ((fd->flags & NIFFS_O_WRONLY) == 0) {
 8005c88:	9a08      	ldr	r2, [sp, #32]
 8005c8a:	7b93      	ldrb	r3, [r2, #14]
 8005c8c:	06db      	lsls	r3, r3, #27
 8005c8e:	d413      	bmi.n	8005cb8 <niffs_append+0x60>
    check(ERR_NIFFS_NOT_WRITABLE);
 8005c90:	4b7f      	ldr	r3, [pc, #508]	; (8005e90 <niffs_append+0x238>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	055f      	lsls	r7, r3, #21
 8005c96:	f140 80c0 	bpl.w	8005e1a <niffs_append+0x1c2>
 8005c9a:	4b7e      	ldr	r3, [pc, #504]	; (8005e94 <niffs_append+0x23c>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f040 80bb 	bne.w	8005e1a <niffs_append+0x1c2>
 8005ca4:	f240 333e 	movw	r3, #830	; 0x33e
 8005ca8:	9300      	str	r3, [sp, #0]
 8005caa:	487b      	ldr	r0, [pc, #492]	; (8005e98 <niffs_append+0x240>)
 8005cac:	497b      	ldr	r1, [pc, #492]	; (8005e9c <niffs_append+0x244>)
 8005cae:	4a7c      	ldr	r2, [pc, #496]	; (8005ea0 <niffs_append+0x248>)
 8005cb0:	4b7c      	ldr	r3, [pc, #496]	; (8005ea4 <niffs_append+0x24c>)
 8005cb2:	f003 fa73 	bl	800919c <arcprint>
 8005cb6:	e0b0      	b.n	8005e1a <niffs_append+0x1c2>
  }

  if (len == 0) return NIFFS_OK;
 8005cb8:	f1b8 0f00 	cmp.w	r8, #0
 8005cbc:	f000 80ab 	beq.w	8005e16 <niffs_append+0x1be>

  u8_t *orig_ohdr_addr = (u8_t *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);
 8005cc0:	8856      	ldrh	r6, [r2, #2]
 8005cc2:	6a25      	ldr	r5, [r4, #32]
 8005cc4:	68e3      	ldr	r3, [r4, #12]
 8005cc6:	fbb6 f1f5 	udiv	r1, r6, r5
 8005cca:	fb05 6511 	mls	r5, r5, r1, r6
 8005cce:	435d      	muls	r5, r3
 8005cd0:	68a0      	ldr	r0, [r4, #8]
 8005cd2:	9603      	str	r6, [sp, #12]
 8005cd4:	fb00 5101 	mla	r1, r0, r1, r5
 8005cd8:	6826      	ldr	r6, [r4, #0]
 8005cda:	3104      	adds	r1, #4
 8005cdc:	440e      	add	r6, r1
  niffs_object_hdr *orig_ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);
  niffs_page_ix orig_obj_pix = fd->obj_pix;
  u8_t *dst_ohdr_addr = 0; // used at header update in the end of function
  niffs_page_ix dst_ohdr_pix = 0;

  if (orig_ohdr->phdr.id.obj_id != fd->obj_id) check(ERR_NIFFS_INCOHERENT_ID);
 8005cde:	7871      	ldrb	r1, [r6, #1]
 8005ce0:	7812      	ldrb	r2, [r2, #0]
    check(ERR_NIFFS_NOT_WRITABLE);
  }

  if (len == 0) return NIFFS_OK;

  u8_t *orig_ohdr_addr = (u8_t *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);
 8005ce2:	9604      	str	r6, [sp, #16]
  niffs_object_hdr *orig_ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);
  niffs_page_ix orig_obj_pix = fd->obj_pix;
  u8_t *dst_ohdr_addr = 0; // used at header update in the end of function
  niffs_page_ix dst_ohdr_pix = 0;

  if (orig_ohdr->phdr.id.obj_id != fd->obj_id) check(ERR_NIFFS_INCOHERENT_ID);
 8005ce4:	4291      	cmp	r1, r2
 8005ce6:	d011      	beq.n	8005d0c <niffs_append+0xb4>
 8005ce8:	4b69      	ldr	r3, [pc, #420]	; (8005e90 <niffs_append+0x238>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	055e      	lsls	r6, r3, #21
 8005cee:	d50b      	bpl.n	8005d08 <niffs_append+0xb0>
 8005cf0:	4b68      	ldr	r3, [pc, #416]	; (8005e94 <niffs_append+0x23c>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	b943      	cbnz	r3, 8005d08 <niffs_append+0xb0>
 8005cf6:	f240 3349 	movw	r3, #841	; 0x349
 8005cfa:	9300      	str	r3, [sp, #0]
 8005cfc:	4866      	ldr	r0, [pc, #408]	; (8005e98 <niffs_append+0x240>)
 8005cfe:	496a      	ldr	r1, [pc, #424]	; (8005ea8 <niffs_append+0x250>)
 8005d00:	4a67      	ldr	r2, [pc, #412]	; (8005ea0 <niffs_append+0x248>)
 8005d02:	4b68      	ldr	r3, [pc, #416]	; (8005ea4 <niffs_append+0x24c>)
 8005d04:	f003 fa4a 	bl	800919c <arcprint>
 8005d08:	4867      	ldr	r0, [pc, #412]	; (8005ea8 <niffs_append+0x250>)
 8005d0a:	e3cf      	b.n	80064ac <niffs_append+0x854>

  // CHECK SPACE
  u32_t file_offs = orig_ohdr->len == NIFFS_UNDEF_LEN ? 0 : orig_ohdr->len;
 8005d0c:	9804      	ldr	r0, [sp, #16]
 8005d0e:	6846      	ldr	r6, [r0, #4]
 8005d10:	f1a3 001e 	sub.w	r0, r3, #30
 8005d14:	1c75      	adds	r5, r6, #1
 8005d16:	d000      	beq.n	8005d1a <niffs_append+0xc2>
    }
  }
  else
#endif
  {
    if (file_offs == 0 && _NIFFS_OFFS_2_SPIX(fs, len-1) == 0) {
 8005d18:	b96e      	cbnz	r6, 8005d36 <niffs_append+0xde>
 8005d1a:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8005d1e:	4282      	cmp	r2, r0
 8005d20:	d34b      	bcc.n	8005dba <niffs_append+0x162>
 8005d22:	f1c3 021d 	rsb	r2, r3, #29
 8005d26:	4442      	add	r2, r8
 8005d28:	1f19      	subs	r1, r3, #4
 8005d2a:	fbb2 f2f1 	udiv	r2, r2, r1
 8005d2e:	3201      	adds	r2, #1
 8005d30:	f04f 0600 	mov.w	r6, #0
 8005d34:	d042      	beq.n	8005dbc <niffs_append+0x164>
      // no need to allocate a new page, just fill in existing file
    } else {
      // one extra for new object header
      u32_t needed_pages = _NIFFS_OFFS_2_SPIX(fs, len + file_offs) - _NIFFS_OFFS_2_SPIX(fs, file_offs) +
 8005d36:	eb06 0208 	add.w	r2, r6, r8
 8005d3a:	4282      	cmp	r2, r0
 8005d3c:	d307      	bcc.n	8005d4e <niffs_append+0xf6>
 8005d3e:	f1c3 051e 	rsb	r5, r3, #30
 8005d42:	4415      	add	r5, r2
 8005d44:	1f19      	subs	r1, r3, #4
 8005d46:	fbb5 f5f1 	udiv	r5, r5, r1
 8005d4a:	3501      	adds	r5, #1
 8005d4c:	e000      	b.n	8005d50 <niffs_append+0xf8>
 8005d4e:	2500      	movs	r5, #0
 8005d50:	4286      	cmp	r6, r0
 8005d52:	d307      	bcc.n	8005d64 <niffs_append+0x10c>
 8005d54:	f1c3 011e 	rsb	r1, r3, #30
 8005d58:	4431      	add	r1, r6
 8005d5a:	1f1f      	subs	r7, r3, #4
 8005d5c:	fbb1 f1f7 	udiv	r1, r1, r7
 8005d60:	3101      	adds	r1, #1
 8005d62:	e000      	b.n	8005d66 <niffs_append+0x10e>
 8005d64:	2100      	movs	r1, #0
            (_NIFFS_OFFS_2_PDATA_OFFS(fs, len + file_offs) == 0 ? -1 : 0) +
 8005d66:	4282      	cmp	r2, r0
 8005d68:	d307      	bcc.n	8005d7a <niffs_append+0x122>
 8005d6a:	f1c3 001e 	rsb	r0, r3, #30
 8005d6e:	4402      	add	r2, r0
 8005d70:	3b04      	subs	r3, #4
 8005d72:	fbb2 f0f3 	udiv	r0, r2, r3
 8005d76:	fb03 2210 	mls	r2, r3, r0, r2
 8005d7a:	f1d2 0201 	rsbs	r2, r2, #1
 8005d7e:	bf38      	it	cc
 8005d80:	2200      	movcc	r2, #0
  {
    if (file_offs == 0 && _NIFFS_OFFS_2_SPIX(fs, len-1) == 0) {
      // no need to allocate a new page, just fill in existing file
    } else {
      // one extra for new object header
      u32_t needed_pages = _NIFFS_OFFS_2_SPIX(fs, len + file_offs) - _NIFFS_OFFS_2_SPIX(fs, file_offs) +
 8005d82:	2e00      	cmp	r6, #0
 8005d84:	bf18      	it	ne
 8005d86:	3501      	addne	r5, #1
 8005d88:	1a69      	subs	r1, r5, r1
            (_NIFFS_OFFS_2_PDATA_OFFS(fs, len + file_offs) == 0 ? -1 : 0) +
            (file_offs == 0 ? 0 : 1);
      res = niffs_ensure_free_pages(fs, needed_pages);
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	1a89      	subs	r1, r1, r2
 8005d8e:	f7ff fd53 	bl	8005838 <niffs_ensure_free_pages>
      check(res);
 8005d92:	4605      	mov	r5, r0
 8005d94:	b190      	cbz	r0, 8005dbc <niffs_append+0x164>
 8005d96:	4b3e      	ldr	r3, [pc, #248]	; (8005e90 <niffs_append+0x238>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	0558      	lsls	r0, r3, #21
 8005d9c:	d55a      	bpl.n	8005e54 <niffs_append+0x1fc>
 8005d9e:	4b3d      	ldr	r3, [pc, #244]	; (8005e94 <niffs_append+0x23c>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d156      	bne.n	8005e54 <niffs_append+0x1fc>
 8005da6:	f44f 735d 	mov.w	r3, #884	; 0x374
 8005daa:	9300      	str	r3, [sp, #0]
 8005dac:	483a      	ldr	r0, [pc, #232]	; (8005e98 <niffs_append+0x240>)
 8005dae:	4629      	mov	r1, r5
 8005db0:	4a3b      	ldr	r2, [pc, #236]	; (8005ea0 <niffs_append+0x248>)
 8005db2:	4b3c      	ldr	r3, [pc, #240]	; (8005ea4 <niffs_append+0x24c>)
 8005db4:	f003 f9f2 	bl	800919c <arcprint>
 8005db8:	e04c      	b.n	8005e54 <niffs_append+0x1fc>
 8005dba:	2600      	movs	r6, #0
    }
  }

  // repopulate if moved by gc
  if (fd->obj_pix != orig_obj_pix) {
 8005dbc:	9a08      	ldr	r2, [sp, #32]
 8005dbe:	9903      	ldr	r1, [sp, #12]
 8005dc0:	8853      	ldrh	r3, [r2, #2]
 8005dc2:	428b      	cmp	r3, r1
 8005dc4:	d013      	beq.n	8005dee <niffs_append+0x196>
    orig_ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);
 8005dc6:	6a20      	ldr	r0, [r4, #32]
 8005dc8:	68a1      	ldr	r1, [r4, #8]
 8005dca:	fbb3 f5f0 	udiv	r5, r3, r0
 8005dce:	fb00 3715 	mls	r7, r0, r5, r3
 8005dd2:	68e0      	ldr	r0, [r4, #12]
    if (orig_ohdr->phdr.id.obj_id != fd->obj_id) res = ERR_NIFFS_INCOHERENT_ID;
 8005dd4:	7812      	ldrb	r2, [r2, #0]
    }
  }

  // repopulate if moved by gc
  if (fd->obj_pix != orig_obj_pix) {
    orig_ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);
 8005dd6:	4378      	muls	r0, r7
 8005dd8:	fb01 0105 	mla	r1, r1, r5, r0
 8005ddc:	6827      	ldr	r7, [r4, #0]
 8005dde:	3104      	adds	r1, #4
 8005de0:	440f      	add	r7, r1
    if (orig_ohdr->phdr.id.obj_id != fd->obj_id) res = ERR_NIFFS_INCOHERENT_ID;
 8005de2:	7879      	ldrb	r1, [r7, #1]
    }
  }

  // repopulate if moved by gc
  if (fd->obj_pix != orig_obj_pix) {
    orig_ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);
 8005de4:	9704      	str	r7, [sp, #16]
    if (orig_ohdr->phdr.id.obj_id != fd->obj_id) res = ERR_NIFFS_INCOHERENT_ID;
 8005de6:	4291      	cmp	r1, r2
 8005de8:	f040 8353 	bne.w	8006492 <niffs_append+0x83a>
 8005dec:	9303      	str	r3, [sp, #12]
  }
  check(res);

  u32_t data_offs = 0;
  u32_t written = 0;
  if (file_offs > 0 && _NIFFS_IS_WRIT(&orig_ohdr->phdr)) {
 8005dee:	b11e      	cbz	r6, 8005df8 <niffs_append+0x1a0>
 8005df0:	9804      	ldr	r0, [sp, #16]
 8005df2:	8842      	ldrh	r2, [r0, #2]
 8005df4:	2a01      	cmp	r2, #1
 8005df6:	d012      	beq.n	8005e1e <niffs_append+0x1c6>
    res = fs->hal_wr((u8_t *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix) + offsetof(niffs_object_hdr, phdr) + offsetof(niffs_page_hdr, flag), (u8_t *)&flag, sizeof(niffs_flag));
    check(res);
  }

  // WRITE DATA
  if (fd->type == _NIFFS_FTYPE_LINFILE) {
 8005df8:	9b08      	ldr	r3, [sp, #32]
 8005dfa:	791b      	ldrb	r3, [r3, #4]
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d032      	beq.n	8005e66 <niffs_append+0x20e>
 8005e00:	f04f 0b00 	mov.w	fp, #0
 8005e04:	46d9      	mov	r9, fp
 8005e06:	f8cd b008 	str.w	fp, [sp, #8]
#else
    check(ERR_NIFFS_LINEAR_FILE);
#endif
  } else {
    // operate on per page basis
    while (res == NIFFS_OK && written < len) {
 8005e0a:	45c3      	cmp	fp, r8
 8005e0c:	d350      	bcc.n	8005eb0 <niffs_append+0x258>
  }

  check(res);

  // HEADER UPDATE
  if (written == 0) {
 8005e0e:	f1bb 0f00 	cmp.w	fp, #0
 8005e12:	f040 8270 	bne.w	80062f6 <niffs_append+0x69e>
 8005e16:	2000      	movs	r0, #0
 8005e18:	e348      	b.n	80064ac <niffs_append+0x854>
  niffs_file_desc *fd;
  res = niffs_get_filedesc(fs, fd_ix, &fd);
  check(res);

  if ((fd->flags & NIFFS_O_WRONLY) == 0) {
    check(ERR_NIFFS_NOT_WRITABLE);
 8005e1a:	4820      	ldr	r0, [pc, #128]	; (8005e9c <niffs_append+0x244>)
 8005e1c:	e346      	b.n	80064ac <niffs_append+0x854>
  u32_t data_offs = 0;
  u32_t written = 0;
  if (file_offs > 0 && _NIFFS_IS_WRIT(&orig_ohdr->phdr)) {
    // changing existing file - write flag, mark obj header as MOVI
    niffs_flag flag = _NIFFS_FLAG_MOVING;
    res = fs->hal_wr((u8_t *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix) + offsetof(niffs_object_hdr, phdr) + offsetof(niffs_page_hdr, flag), (u8_t *)&flag, sizeof(niffs_flag));
 8005e1e:	6a25      	ldr	r5, [r4, #32]

  u32_t data_offs = 0;
  u32_t written = 0;
  if (file_offs > 0 && _NIFFS_IS_WRIT(&orig_ohdr->phdr)) {
    // changing existing file - write flag, mark obj header as MOVI
    niffs_flag flag = _NIFFS_FLAG_MOVING;
 8005e20:	a90a      	add	r1, sp, #40	; 0x28
 8005e22:	2200      	movs	r2, #0
 8005e24:	f821 2d04 	strh.w	r2, [r1, #-4]!
    res = fs->hal_wr((u8_t *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix) + offsetof(niffs_object_hdr, phdr) + offsetof(niffs_page_hdr, flag), (u8_t *)&flag, sizeof(niffs_flag));
 8005e28:	fbb3 f2f5 	udiv	r2, r3, r5
 8005e2c:	fb05 3312 	mls	r3, r5, r2, r3
 8005e30:	68e7      	ldr	r7, [r4, #12]
 8005e32:	68a0      	ldr	r0, [r4, #8]
 8005e34:	435f      	muls	r7, r3
 8005e36:	fb00 7002 	mla	r0, r0, r2, r7
 8005e3a:	6827      	ldr	r7, [r4, #0]
 8005e3c:	3006      	adds	r0, #6
 8005e3e:	69a5      	ldr	r5, [r4, #24]
 8005e40:	4438      	add	r0, r7
 8005e42:	2202      	movs	r2, #2
 8005e44:	47a8      	blx	r5
    check(res);
 8005e46:	4605      	mov	r5, r0
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	d0d5      	beq.n	8005df8 <niffs_append+0x1a0>
 8005e4c:	4b10      	ldr	r3, [pc, #64]	; (8005e90 <niffs_append+0x238>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	0559      	lsls	r1, r3, #21
 8005e52:	d401      	bmi.n	8005e58 <niffs_append+0x200>
      if (file_offs + data_offs == 0) {
        // just fill up obj header
        avail = NIFFS_MIN(len, _NIFFS_SPIX_2_PDATA_LEN(fs, 0));
        NIFFS_DBG("append: pix %04x obj hdr oid:%04x spix:0 len:%i\n", fd->obj_pix, fd->obj_id, avail);
        // .. data ..
        res = fs->hal_wr((u8_t *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix) + sizeof(niffs_object_hdr), src, avail);
 8005e54:	4628      	mov	r0, r5
 8005e56:	e329      	b.n	80064ac <niffs_append+0x854>
  u32_t written = 0;
  if (file_offs > 0 && _NIFFS_IS_WRIT(&orig_ohdr->phdr)) {
    // changing existing file - write flag, mark obj header as MOVI
    niffs_flag flag = _NIFFS_FLAG_MOVING;
    res = fs->hal_wr((u8_t *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix) + offsetof(niffs_object_hdr, phdr) + offsetof(niffs_page_hdr, flag), (u8_t *)&flag, sizeof(niffs_flag));
    check(res);
 8005e58:	4b0e      	ldr	r3, [pc, #56]	; (8005e94 <niffs_append+0x23c>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1f9      	bne.n	8005e54 <niffs_append+0x1fc>
 8005e60:	f240 3387 	movw	r3, #903	; 0x387
 8005e64:	e7a1      	b.n	8005daa <niffs_append+0x152>
      data_offs += avail;
      written += avail;
      fd->offs += avail;
    }
#else
    check(ERR_NIFFS_LINEAR_FILE);
 8005e66:	4b0a      	ldr	r3, [pc, #40]	; (8005e90 <niffs_append+0x238>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	055a      	lsls	r2, r3, #21
 8005e6c:	f140 830f 	bpl.w	800648e <niffs_append+0x836>
 8005e70:	4b08      	ldr	r3, [pc, #32]	; (8005e94 <niffs_append+0x23c>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f040 830a 	bne.w	800648e <niffs_append+0x836>
 8005e7a:	f240 33ab 	movw	r3, #939	; 0x3ab
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	4805      	ldr	r0, [pc, #20]	; (8005e98 <niffs_append+0x240>)
 8005e82:	490a      	ldr	r1, [pc, #40]	; (8005eac <niffs_append+0x254>)
 8005e84:	4a06      	ldr	r2, [pc, #24]	; (8005ea0 <niffs_append+0x248>)
 8005e86:	4b07      	ldr	r3, [pc, #28]	; (8005ea4 <niffs_append+0x24c>)
 8005e88:	f003 f988 	bl	800919c <arcprint>
 8005e8c:	e2ff      	b.n	800648e <niffs_append+0x836>
 8005e8e:	bf00      	nop
 8005e90:	20004f80 	.word	0x20004f80
 8005e94:	20004f84 	.word	0x20004f84
 8005e98:	08010535 	.word	0x08010535
 8005e9c:	ffffd4e7 	.word	0xffffd4e7
 8005ea0:	0800ea0a 	.word	0x0800ea0a
 8005ea4:	0801054b 	.word	0x0801054b
 8005ea8:	ffffd4f1 	.word	0xffffd4f1
 8005eac:	ffffd4e3 	.word	0xffffd4e3
    // operate on per page basis
    while (res == NIFFS_OK && written < len) {
      u32_t avail;

      // case 1: newly created empty file, fill in object header
      if (file_offs + data_offs == 0) {
 8005eb0:	eb1b 0506 	adds.w	r5, fp, r6
 8005eb4:	68e7      	ldr	r7, [r4, #12]
 8005eb6:	d143      	bne.n	8005f40 <niffs_append+0x2e8>
        // just fill up obj header
        avail = NIFFS_MIN(len, _NIFFS_SPIX_2_PDATA_LEN(fs, 0));
        NIFFS_DBG("append: pix %04x obj hdr oid:%04x spix:0 len:%i\n", fd->obj_pix, fd->obj_id, avail);
 8005eb8:	4988      	ldr	r1, [pc, #544]	; (80060dc <niffs_append+0x484>)
      u32_t avail;

      // case 1: newly created empty file, fill in object header
      if (file_offs + data_offs == 0) {
        // just fill up obj header
        avail = NIFFS_MIN(len, _NIFFS_SPIX_2_PDATA_LEN(fs, 0));
 8005eba:	3f1e      	subs	r7, #30
        NIFFS_DBG("append: pix %04x obj hdr oid:%04x spix:0 len:%i\n", fd->obj_pix, fd->obj_id, avail);
 8005ebc:	680b      	ldr	r3, [r1, #0]
      u32_t avail;

      // case 1: newly created empty file, fill in object header
      if (file_offs + data_offs == 0) {
        // just fill up obj header
        avail = NIFFS_MIN(len, _NIFFS_SPIX_2_PDATA_LEN(fs, 0));
 8005ebe:	45b8      	cmp	r8, r7
 8005ec0:	bf38      	it	cc
 8005ec2:	4647      	movcc	r7, r8
        NIFFS_DBG("append: pix %04x obj hdr oid:%04x spix:0 len:%i\n", fd->obj_pix, fd->obj_id, avail);
 8005ec4:	055b      	lsls	r3, r3, #21
 8005ec6:	d509      	bpl.n	8005edc <niffs_append+0x284>
 8005ec8:	4b85      	ldr	r3, [pc, #532]	; (80060e0 <niffs_append+0x488>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	b933      	cbnz	r3, 8005edc <niffs_append+0x284>
 8005ece:	9b08      	ldr	r3, [sp, #32]
 8005ed0:	4884      	ldr	r0, [pc, #528]	; (80060e4 <niffs_append+0x48c>)
 8005ed2:	8859      	ldrh	r1, [r3, #2]
 8005ed4:	781a      	ldrb	r2, [r3, #0]
 8005ed6:	463b      	mov	r3, r7
 8005ed8:	f003 f960 	bl	800919c <arcprint>
        // .. data ..
        res = fs->hal_wr((u8_t *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix) + sizeof(niffs_object_hdr), src, avail);
 8005edc:	9b08      	ldr	r3, [sp, #32]
 8005ede:	6a22      	ldr	r2, [r4, #32]
 8005ee0:	8859      	ldrh	r1, [r3, #2]
 8005ee2:	68e5      	ldr	r5, [r4, #12]
 8005ee4:	fbb1 f3f2 	udiv	r3, r1, r2
 8005ee8:	fb02 1213 	mls	r2, r2, r3, r1
 8005eec:	4355      	muls	r5, r2
 8005eee:	68a0      	ldr	r0, [r4, #8]
 8005ef0:	9905      	ldr	r1, [sp, #20]
 8005ef2:	fb00 5303 	mla	r3, r0, r3, r5
 8005ef6:	6820      	ldr	r0, [r4, #0]
 8005ef8:	331e      	adds	r3, #30
 8005efa:	69a5      	ldr	r5, [r4, #24]
 8005efc:	4418      	add	r0, r3
 8005efe:	463a      	mov	r2, r7
 8005f00:	47a8      	blx	r5
        check(res);
 8005f02:	4605      	mov	r5, r0
 8005f04:	b150      	cbz	r0, 8005f1c <niffs_append+0x2c4>
 8005f06:	4b75      	ldr	r3, [pc, #468]	; (80060dc <niffs_append+0x484>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	055f      	lsls	r7, r3, #21
 8005f0c:	d5a2      	bpl.n	8005e54 <niffs_append+0x1fc>
 8005f0e:	4b74      	ldr	r3, [pc, #464]	; (80060e0 <niffs_append+0x488>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d19e      	bne.n	8005e54 <niffs_append+0x1fc>
 8005f16:	f240 33b9 	movw	r3, #953	; 0x3b9
 8005f1a:	e746      	b.n	8005daa <niffs_append+0x152>

        dst_ohdr_addr = (u8_t *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix); // original obj hdr
 8005f1c:	9b08      	ldr	r3, [sp, #32]
 8005f1e:	6a22      	ldr	r2, [r4, #32]
 8005f20:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005f24:	68e0      	ldr	r0, [r4, #12]
 8005f26:	fbb9 f3f2 	udiv	r3, r9, r2
 8005f2a:	fb02 9213 	mls	r2, r2, r3, r9
 8005f2e:	4350      	muls	r0, r2
 8005f30:	68a1      	ldr	r1, [r4, #8]
 8005f32:	fb01 0303 	mla	r3, r1, r3, r0
 8005f36:	6821      	ldr	r1, [r4, #0]
 8005f38:	3304      	adds	r3, #4
 8005f3a:	4419      	add	r1, r3
 8005f3c:	9102      	str	r1, [sp, #8]
 8005f3e:	e1d1      	b.n	80062e4 <niffs_append+0x68c>
        dst_ohdr_pix = fd->obj_pix;
      }

      // case 2: add a new page
      else if (_NIFFS_OFFS_2_PDATA_OFFS(fs, file_offs + data_offs) == 0) {
 8005f40:	f1a7 031e 	sub.w	r3, r7, #30
 8005f44:	429d      	cmp	r5, r3
 8005f46:	d368      	bcc.n	800601a <niffs_append+0x3c2>
 8005f48:	f1c7 021e 	rsb	r2, r7, #30
 8005f4c:	442a      	add	r2, r5
 8005f4e:	3f04      	subs	r7, #4
 8005f50:	fbb2 f3f7 	udiv	r3, r2, r7
 8005f54:	fb07 2213 	mls	r2, r7, r3, r2
 8005f58:	2a00      	cmp	r2, #0
 8005f5a:	d15c      	bne.n	8006016 <niffs_append+0x3be>
        // find new page
        avail = NIFFS_MIN(len - written, _NIFFS_SPIX_2_PDATA_LEN(fs, 1));
 8005f5c:	ebcb 0308 	rsb	r3, fp, r8
        niffs_page_ix new_pix;
        res = niffs_find_free_page(fs, &new_pix, NIFFS_EXCL_SECT_NONE);
 8005f60:	4620      	mov	r0, r4
 8005f62:	f10d 011e 	add.w	r1, sp, #30
 8005f66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
      }

      // case 2: add a new page
      else if (_NIFFS_OFFS_2_PDATA_OFFS(fs, file_offs + data_offs) == 0) {
        // find new page
        avail = NIFFS_MIN(len - written, _NIFFS_SPIX_2_PDATA_LEN(fs, 1));
 8005f6a:	42bb      	cmp	r3, r7
 8005f6c:	bf38      	it	cc
 8005f6e:	461f      	movcc	r7, r3
        niffs_page_ix new_pix;
        res = niffs_find_free_page(fs, &new_pix, NIFFS_EXCL_SECT_NONE);
 8005f70:	f7fe fd2b 	bl	80049ca <niffs_find_free_page>
        check(res);
 8005f74:	4682      	mov	sl, r0
 8005f76:	b160      	cbz	r0, 8005f92 <niffs_append+0x33a>
 8005f78:	4b58      	ldr	r3, [pc, #352]	; (80060dc <niffs_append+0x484>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	055e      	lsls	r6, r3, #21
 8005f7e:	f140 81af 	bpl.w	80062e0 <niffs_append+0x688>
 8005f82:	4b57      	ldr	r3, [pc, #348]	; (80060e0 <niffs_append+0x488>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f040 81aa 	bne.w	80062e0 <niffs_append+0x688>
 8005f8c:	f240 33c5 	movw	r3, #965	; 0x3c5
 8005f90:	e09b      	b.n	80060ca <niffs_append+0x472>

        niffs_page_hdr new_phdr;
        new_phdr.id.obj_id = fd->obj_id;
 8005f92:	9b08      	ldr	r3, [sp, #32]
        new_phdr.id.spix = _NIFFS_OFFS_2_SPIX(fs, file_offs + data_offs);
 8005f94:	68e1      	ldr	r1, [r4, #12]
        niffs_page_ix new_pix;
        res = niffs_find_free_page(fs, &new_pix, NIFFS_EXCL_SECT_NONE);
        check(res);

        niffs_page_hdr new_phdr;
        new_phdr.id.obj_id = fd->obj_id;
 8005f96:	781a      	ldrb	r2, [r3, #0]
        new_phdr.id.spix = _NIFFS_OFFS_2_SPIX(fs, file_offs + data_offs);
 8005f98:	f1a1 031e 	sub.w	r3, r1, #30
 8005f9c:	429d      	cmp	r5, r3
        niffs_page_ix new_pix;
        res = niffs_find_free_page(fs, &new_pix, NIFFS_EXCL_SECT_NONE);
        check(res);

        niffs_page_hdr new_phdr;
        new_phdr.id.obj_id = fd->obj_id;
 8005f9e:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
        new_phdr.id.spix = _NIFFS_OFFS_2_SPIX(fs, file_offs + data_offs);
 8005fa2:	d308      	bcc.n	8005fb6 <niffs_append+0x35e>
 8005fa4:	f1c1 031e 	rsb	r3, r1, #30
 8005fa8:	442b      	add	r3, r5
 8005faa:	3904      	subs	r1, #4
 8005fac:	fbb3 f3f1 	udiv	r3, r3, r1
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	e000      	b.n	8005fb8 <niffs_append+0x360>
 8005fb6:	4603      	mov	r3, r0
        new_phdr.flag = _NIFFS_FLAG_WRITTEN;
        NIFFS_DBG("append: pix %04x full page oid:%04x spix:%i len:%i\n", new_pix, fd->obj_id, new_phdr.id.spix, avail);
 8005fb8:	4848      	ldr	r0, [pc, #288]	; (80060dc <niffs_append+0x484>)
        check(res);

        niffs_page_hdr new_phdr;
        new_phdr.id.obj_id = fd->obj_id;
        new_phdr.id.spix = _NIFFS_OFFS_2_SPIX(fs, file_offs + data_offs);
        new_phdr.flag = _NIFFS_FLAG_WRITTEN;
 8005fba:	2101      	movs	r1, #1
 8005fbc:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
        NIFFS_DBG("append: pix %04x full page oid:%04x spix:%i len:%i\n", new_pix, fd->obj_id, new_phdr.id.spix, avail);
 8005fc0:	6801      	ldr	r1, [r0, #0]
        res = niffs_find_free_page(fs, &new_pix, NIFFS_EXCL_SECT_NONE);
        check(res);

        niffs_page_hdr new_phdr;
        new_phdr.id.obj_id = fd->obj_id;
        new_phdr.id.spix = _NIFFS_OFFS_2_SPIX(fs, file_offs + data_offs);
 8005fc2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        new_phdr.flag = _NIFFS_FLAG_WRITTEN;
        NIFFS_DBG("append: pix %04x full page oid:%04x spix:%i len:%i\n", new_pix, fd->obj_id, new_phdr.id.spix, avail);
 8005fc6:	054d      	lsls	r5, r1, #21
 8005fc8:	d508      	bpl.n	8005fdc <niffs_append+0x384>
 8005fca:	4945      	ldr	r1, [pc, #276]	; (80060e0 <niffs_append+0x488>)
 8005fcc:	6809      	ldr	r1, [r1, #0]
 8005fce:	b929      	cbnz	r1, 8005fdc <niffs_append+0x384>
 8005fd0:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8005fd4:	9700      	str	r7, [sp, #0]
 8005fd6:	4844      	ldr	r0, [pc, #272]	; (80060e8 <niffs_append+0x490>)
 8005fd8:	f003 f8e0 	bl	800919c <arcprint>

        res = niffs_write_page(fs, new_pix, &new_phdr, src, avail);
 8005fdc:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8005fe0:	9700      	str	r7, [sp, #0]
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	aa09      	add	r2, sp, #36	; 0x24
 8005fe6:	9b05      	ldr	r3, [sp, #20]
 8005fe8:	f7fe f9a0 	bl	800432c <niffs_write_page>
        check(res);
 8005fec:	4605      	mov	r5, r0
 8005fee:	b160      	cbz	r0, 800600a <niffs_append+0x3b2>
 8005ff0:	4b3a      	ldr	r3, [pc, #232]	; (80060dc <niffs_append+0x484>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	055c      	lsls	r4, r3, #21
 8005ff6:	f57f af2d 	bpl.w	8005e54 <niffs_append+0x1fc>
 8005ffa:	4b39      	ldr	r3, [pc, #228]	; (80060e0 <niffs_append+0x488>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	f47f af28 	bne.w	8005e54 <niffs_append+0x1fc>
 8006004:	f240 33ce 	movw	r3, #974	; 0x3ce
 8006008:	e6cf      	b.n	8005daa <niffs_append+0x152>
        fs->free_pages--;
 800600a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        fd->cur_pix = new_pix;
 800600c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
        new_phdr.flag = _NIFFS_FLAG_WRITTEN;
        NIFFS_DBG("append: pix %04x full page oid:%04x spix:%i len:%i\n", new_pix, fd->obj_id, new_phdr.id.spix, avail);

        res = niffs_write_page(fs, new_pix, &new_phdr, src, avail);
        check(res);
        fs->free_pages--;
 8006010:	3b01      	subs	r3, #1
 8006012:	62a3      	str	r3, [r4, #40]	; 0x28
 8006014:	e161      	b.n	80062da <niffs_append+0x682>
      }

      // case 3: rewrite a page
      else {
        niffs_page_ix src_pix;
        if (_NIFFS_OFFS_2_SPIX(fs, file_offs + data_offs) == 0) {
 8006016:	1c58      	adds	r0, r3, #1
 8006018:	d104      	bne.n	8006024 <niffs_append+0x3cc>
          // rewriting object header page
          src_pix = fd->obj_pix;
 800601a:	9b08      	ldr	r3, [sp, #32]
 800601c:	885b      	ldrh	r3, [r3, #2]
 800601e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006022:	e019      	b.n	8006058 <niffs_append+0x400>
        } else {
          // rewriting plain data page, so go get it
          res = niffs_find_page(fs, &src_pix, fd->obj_id, _NIFFS_OFFS_2_SPIX(fs, file_offs + data_offs), fd->cur_pix);
 8006024:	9908      	ldr	r1, [sp, #32]
 8006026:	3301      	adds	r3, #1
 8006028:	780a      	ldrb	r2, [r1, #0]
 800602a:	8989      	ldrh	r1, [r1, #12]
 800602c:	4620      	mov	r0, r4
 800602e:	9100      	str	r1, [sp, #0]
 8006030:	b2db      	uxtb	r3, r3
 8006032:	f10d 011e 	add.w	r1, sp, #30
 8006036:	f7fe fdd9 	bl	8004bec <niffs_find_page>
          check(res);
 800603a:	4607      	mov	r7, r0
 800603c:	b160      	cbz	r0, 8006058 <niffs_append+0x400>
 800603e:	4b27      	ldr	r3, [pc, #156]	; (80060dc <niffs_append+0x484>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	0559      	lsls	r1, r3, #21
 8006044:	f140 81b7 	bpl.w	80063b6 <niffs_append+0x75e>
 8006048:	4b25      	ldr	r3, [pc, #148]	; (80060e0 <niffs_append+0x488>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	f040 81b2 	bne.w	80063b6 <niffs_append+0x75e>
 8006052:	f44f 7377 	mov.w	r3, #988	; 0x3dc
 8006056:	e16e      	b.n	8006336 <niffs_append+0x6de>
        }

        // find new page
        avail = NIFFS_MIN(len - written,
 8006058:	68e3      	ldr	r3, [r4, #12]
 800605a:	f1a3 001e 	sub.w	r0, r3, #30
 800605e:	4285      	cmp	r5, r0
 8006060:	f1a3 0104 	sub.w	r1, r3, #4
 8006064:	d201      	bcs.n	800606a <niffs_append+0x412>
 8006066:	221a      	movs	r2, #26
 8006068:	e007      	b.n	800607a <niffs_append+0x422>
 800606a:	f1c3 021e 	rsb	r2, r3, #30
 800606e:	442a      	add	r2, r5
 8006070:	fbb2 f2f1 	udiv	r2, r2, r1
 8006074:	3201      	adds	r2, #1
 8006076:	d0f6      	beq.n	8006066 <niffs_append+0x40e>
 8006078:	2200      	movs	r2, #0
 800607a:	4285      	cmp	r5, r0
 800607c:	d308      	bcc.n	8006090 <niffs_append+0x438>
 800607e:	f1c3 071e 	rsb	r7, r3, #30
 8006082:	442f      	add	r7, r5
 8006084:	1f18      	subs	r0, r3, #4
 8006086:	fbb7 f3f0 	udiv	r3, r7, r0
 800608a:	fb00 7313 	mls	r3, r0, r3, r7
 800608e:	e000      	b.n	8006092 <niffs_append+0x43a>
 8006090:	462b      	mov	r3, r5
 8006092:	1a8a      	subs	r2, r1, r2
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	ebcb 0008 	rsb	r0, fp, r8
 800609a:	4283      	cmp	r3, r0
 800609c:	bf34      	ite	cc
 800609e:	461f      	movcc	r7, r3
 80060a0:	4607      	movcs	r7, r0
            _NIFFS_SPIX_2_PDATA_LEN(fs, _NIFFS_OFFS_2_SPIX(fs, file_offs + data_offs)) -
            _NIFFS_OFFS_2_PDATA_OFFS(fs, file_offs + data_offs));
        niffs_page_ix new_pix;
        res = niffs_find_free_page(fs, &new_pix, NIFFS_EXCL_SECT_NONE);
 80060a2:	a909      	add	r1, sp, #36	; 0x24
 80060a4:	4620      	mov	r0, r4
 80060a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060aa:	f7fe fc8e 	bl	80049ca <niffs_find_free_page>
        check(res);
 80060ae:	4682      	mov	sl, r0
 80060b0:	b310      	cbz	r0, 80060f8 <niffs_append+0x4a0>
 80060b2:	4b0a      	ldr	r3, [pc, #40]	; (80060dc <niffs_append+0x484>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	055a      	lsls	r2, r3, #21
 80060b8:	f140 8112 	bpl.w	80062e0 <niffs_append+0x688>
 80060bc:	4b08      	ldr	r3, [pc, #32]	; (80060e0 <niffs_append+0x488>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f040 810d 	bne.w	80062e0 <niffs_append+0x688>
 80060c6:	f240 33e5 	movw	r3, #997	; 0x3e5
 80060ca:	9300      	str	r3, [sp, #0]
 80060cc:	4807      	ldr	r0, [pc, #28]	; (80060ec <niffs_append+0x494>)
 80060ce:	4651      	mov	r1, sl
 80060d0:	4a07      	ldr	r2, [pc, #28]	; (80060f0 <niffs_append+0x498>)
 80060d2:	4b08      	ldr	r3, [pc, #32]	; (80060f4 <niffs_append+0x49c>)
 80060d4:	f003 f862 	bl	800919c <arcprint>
 80060d8:	e102      	b.n	80062e0 <niffs_append+0x688>
 80060da:	bf00      	nop
 80060dc:	20004f80 	.word	0x20004f80
 80060e0:	20004f84 	.word	0x20004f84
 80060e4:	08010cbb 	.word	0x08010cbb
 80060e8:	08010cec 	.word	0x08010cec
 80060ec:	08010535 	.word	0x08010535
 80060f0:	0800ea0a 	.word	0x0800ea0a
 80060f4:	0801054b 	.word	0x0801054b
        NIFFS_DBG("append: pix %04x is free\n", new_pix);
 80060f8:	4993      	ldr	r1, [pc, #588]	; (8006348 <niffs_append+0x6f0>)
 80060fa:	680b      	ldr	r3, [r1, #0]
 80060fc:	055b      	lsls	r3, r3, #21
 80060fe:	d507      	bpl.n	8006110 <niffs_append+0x4b8>
 8006100:	4b92      	ldr	r3, [pc, #584]	; (800634c <niffs_append+0x6f4>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	b923      	cbnz	r3, 8006110 <niffs_append+0x4b8>
 8006106:	4892      	ldr	r0, [pc, #584]	; (8006350 <niffs_append+0x6f8>)
 8006108:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800610c:	f003 f846 	bl	800919c <arcprint>

        // modify page
        if (_NIFFS_OFFS_2_SPIX(fs, file_offs + data_offs) == 0) {
 8006110:	68e3      	ldr	r3, [r4, #12]
 8006112:	f1a3 021e 	sub.w	r2, r3, #30
 8006116:	4295      	cmp	r5, r2
 8006118:	d308      	bcc.n	800612c <niffs_append+0x4d4>
 800611a:	f1c3 0c1e 	rsb	ip, r3, #30
 800611e:	44ac      	add	ip, r5
 8006120:	1f1a      	subs	r2, r3, #4
 8006122:	fbbc fef2 	udiv	lr, ip, r2
 8006126:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800612a:	d167      	bne.n	80061fc <niffs_append+0x5a4>
          NIFFS_DBG("append: pix %04x modify obj hdr oid:%04x spix:%i len:%i\n", fd->obj_pix, fd->obj_id, 0, avail);
 800612c:	4a86      	ldr	r2, [pc, #536]	; (8006348 <niffs_append+0x6f0>)
 800612e:	6813      	ldr	r3, [r2, #0]
 8006130:	0558      	lsls	r0, r3, #21
 8006132:	d509      	bpl.n	8006148 <niffs_append+0x4f0>
 8006134:	4b85      	ldr	r3, [pc, #532]	; (800634c <niffs_append+0x6f4>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	b933      	cbnz	r3, 8006148 <niffs_append+0x4f0>
 800613a:	9a08      	ldr	r2, [sp, #32]
 800613c:	4885      	ldr	r0, [pc, #532]	; (8006354 <niffs_append+0x6fc>)
 800613e:	8851      	ldrh	r1, [r2, #2]
 8006140:	7812      	ldrb	r2, [r2, #0]
 8006142:	9700      	str	r7, [sp, #0]
 8006144:	f003 f82a 	bl	800919c <arcprint>
          // rewriting object header, include object header data
          // copy header and current data
          _NIFFS_RD(fs, fs->buf, (u8_t *)_NIFFS_PIX_2_ADDR(fs, src_pix), sizeof(niffs_object_hdr) + file_offs);
 8006148:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 800614c:	6a22      	ldr	r2, [r4, #32]
 800614e:	68a1      	ldr	r1, [r4, #8]
 8006150:	fbb0 f3f2 	udiv	r3, r0, r2
 8006154:	fb02 0213 	mls	r2, r2, r3, r0
 8006158:	68e0      	ldr	r0, [r4, #12]
 800615a:	f106 051a 	add.w	r5, r6, #26
 800615e:	4342      	muls	r2, r0
 8006160:	fb01 2103 	mla	r1, r1, r3, r2
 8006164:	6822      	ldr	r2, [r4, #0]
 8006166:	3104      	adds	r1, #4
 8006168:	4411      	add	r1, r2
 800616a:	6920      	ldr	r0, [r4, #16]
 800616c:	462a      	mov	r2, r5
 800616e:	f008 f8bb 	bl	800e2e8 <memcpy>
          // copy from new data
          niffs_memcpy(&fs->buf[sizeof(niffs_object_hdr) + file_offs], src, avail);
 8006172:	6920      	ldr	r0, [r4, #16]
 8006174:	9905      	ldr	r1, [sp, #20]
 8006176:	4428      	add	r0, r5
 8006178:	463a      	mov	r2, r7
 800617a:	f008 f8b5 	bl	800e2e8 <memcpy>

          // reset new object header to be written
          niffs_object_hdr *new_ohdr_data = (niffs_object_hdr *)(fs->buf);
 800617e:	6925      	ldr	r5, [r4, #16]
          new_ohdr_data->len = NIFFS_UNDEF_LEN;
 8006180:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
          new_ohdr_data->phdr.flag = _NIFFS_FLAG_CLEAN;
 8006184:	806b      	strh	r3, [r5, #2]
          dst_ohdr_addr = (u8_t *)_NIFFS_PIX_2_ADDR(fs, new_pix);
 8006186:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
 800618a:	6a22      	ldr	r2, [r4, #32]
          // copy from new data
          niffs_memcpy(&fs->buf[sizeof(niffs_object_hdr) + file_offs], src, avail);

          // reset new object header to be written
          niffs_object_hdr *new_ohdr_data = (niffs_object_hdr *)(fs->buf);
          new_ohdr_data->len = NIFFS_UNDEF_LEN;
 800618c:	80ab      	strh	r3, [r5, #4]
 800618e:	80eb      	strh	r3, [r5, #6]
          new_ohdr_data->phdr.flag = _NIFFS_FLAG_CLEAN;
          dst_ohdr_addr = (u8_t *)_NIFFS_PIX_2_ADDR(fs, new_pix);
 8006190:	fbb9 f3f2 	udiv	r3, r9, r2
 8006194:	fb02 9213 	mls	r2, r2, r3, r9
 8006198:	68e0      	ldr	r0, [r4, #12]
 800619a:	68a1      	ldr	r1, [r4, #8]
 800619c:	4350      	muls	r0, r2
 800619e:	fb01 0303 	mla	r3, r1, r3, r0
 80061a2:	6821      	ldr	r1, [r4, #0]
          dst_ohdr_pix = new_pix;
          NIFFS_DBG("append: new obj hdr pix %04x\n", new_pix);
 80061a4:	4868      	ldr	r0, [pc, #416]	; (8006348 <niffs_append+0x6f0>)

          // reset new object header to be written
          niffs_object_hdr *new_ohdr_data = (niffs_object_hdr *)(fs->buf);
          new_ohdr_data->len = NIFFS_UNDEF_LEN;
          new_ohdr_data->phdr.flag = _NIFFS_FLAG_CLEAN;
          dst_ohdr_addr = (u8_t *)_NIFFS_PIX_2_ADDR(fs, new_pix);
 80061a6:	3304      	adds	r3, #4
 80061a8:	4419      	add	r1, r3
          dst_ohdr_pix = new_pix;
          NIFFS_DBG("append: new obj hdr pix %04x\n", new_pix);
 80061aa:	6803      	ldr	r3, [r0, #0]

          // reset new object header to be written
          niffs_object_hdr *new_ohdr_data = (niffs_object_hdr *)(fs->buf);
          new_ohdr_data->len = NIFFS_UNDEF_LEN;
          new_ohdr_data->phdr.flag = _NIFFS_FLAG_CLEAN;
          dst_ohdr_addr = (u8_t *)_NIFFS_PIX_2_ADDR(fs, new_pix);
 80061ac:	9102      	str	r1, [sp, #8]
          dst_ohdr_pix = new_pix;
          NIFFS_DBG("append: new obj hdr pix %04x\n", new_pix);
 80061ae:	0559      	lsls	r1, r3, #21
 80061b0:	d506      	bpl.n	80061c0 <niffs_append+0x568>
 80061b2:	4b66      	ldr	r3, [pc, #408]	; (800634c <niffs_append+0x6f4>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	b91b      	cbnz	r3, 80061c0 <niffs_append+0x568>
 80061b8:	4867      	ldr	r0, [pc, #412]	; (8006358 <niffs_append+0x700>)
 80061ba:	4649      	mov	r1, r9
 80061bc:	f002 ffee 	bl	800919c <arcprint>
          res = niffs_write_page(fs, new_pix, &new_ohdr_data->phdr, &fs->buf[sizeof(niffs_page_hdr)],
 80061c0:	68e2      	ldr	r2, [r4, #12]
 80061c2:	6923      	ldr	r3, [r4, #16]
 80061c4:	3a04      	subs	r2, #4
 80061c6:	9200      	str	r2, [sp, #0]
 80061c8:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80061cc:	462a      	mov	r2, r5
 80061ce:	4620      	mov	r0, r4
 80061d0:	3304      	adds	r3, #4
 80061d2:	f7fe f8ab 	bl	800432c <niffs_write_page>
              _NIFFS_SPIX_2_PDATA_LEN(fs, 1));
          check(res);
 80061d6:	4605      	mov	r5, r0
 80061d8:	b160      	cbz	r0, 80061f4 <niffs_append+0x59c>
 80061da:	4b5b      	ldr	r3, [pc, #364]	; (8006348 <niffs_append+0x6f0>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	055a      	lsls	r2, r3, #21
 80061e0:	f57f ae38 	bpl.w	8005e54 <niffs_append+0x1fc>
 80061e4:	4b59      	ldr	r3, [pc, #356]	; (800634c <niffs_append+0x6f4>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	f47f ae33 	bne.w	8005e54 <niffs_append+0x1fc>
 80061ee:	f240 33fa 	movw	r3, #1018	; 0x3fa
 80061f2:	e5da      	b.n	8005daa <niffs_append+0x152>
          fs->free_pages--;
 80061f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80061f6:	3b01      	subs	r3, #1
 80061f8:	62a3      	str	r3, [r4, #40]	; 0x28
        res = niffs_find_free_page(fs, &new_pix, NIFFS_EXCL_SECT_NONE);
        check(res);
        NIFFS_DBG("append: pix %04x is free\n", new_pix);

        // modify page
        if (_NIFFS_OFFS_2_SPIX(fs, file_offs + data_offs) == 0) {
 80061fa:	e06c      	b.n	80062d6 <niffs_append+0x67e>
          check(res);
          fs->free_pages--;
        } else {
          // rewrite plain data page
          // copy from src
          _NIFFS_RD(fs, fs->buf,
 80061fc:	6a21      	ldr	r1, [r4, #32]
 80061fe:	f8bd a01e 	ldrh.w	sl, [sp, #30]
 8006202:	fb02 c21e 	mls	r2, r2, lr, ip
 8006206:	fbba f0f1 	udiv	r0, sl, r1
 800620a:	fb01 aa10 	mls	sl, r1, r0, sl
 800620e:	fb03 fa0a 	mul.w	sl, r3, sl
 8006212:	68a3      	ldr	r3, [r4, #8]
 8006214:	6821      	ldr	r1, [r4, #0]
 8006216:	fb03 aa00 	mla	sl, r3, r0, sl
 800621a:	f10a 0a08 	add.w	sl, sl, #8
 800621e:	6920      	ldr	r0, [r4, #16]
 8006220:	4451      	add	r1, sl
 8006222:	f008 f861 	bl	800e2e8 <memcpy>
              (u8_t *)_NIFFS_PIX_2_ADDR(fs, src_pix) +
                (_NIFFS_OFFS_2_SPIX(fs, file_offs + data_offs) == 0 ? sizeof(niffs_object_hdr) : sizeof(niffs_page_hdr)),
              _NIFFS_OFFS_2_PDATA_OFFS(fs, file_offs + data_offs));
          // copy from new data
          niffs_memcpy(&fs->buf[ _NIFFS_OFFS_2_PDATA_OFFS(fs, file_offs + data_offs)],
 8006226:	68e3      	ldr	r3, [r4, #12]
 8006228:	6920      	ldr	r0, [r4, #16]
 800622a:	f1a3 021e 	sub.w	r2, r3, #30
 800622e:	4295      	cmp	r5, r2
 8006230:	d308      	bcc.n	8006244 <niffs_append+0x5ec>
 8006232:	f1c3 011e 	rsb	r1, r3, #30
 8006236:	4429      	add	r1, r5
 8006238:	1f1a      	subs	r2, r3, #4
 800623a:	fbb1 f3f2 	udiv	r3, r1, r2
 800623e:	fb02 1313 	mls	r3, r2, r3, r1
 8006242:	e000      	b.n	8006246 <niffs_append+0x5ee>
 8006244:	462b      	mov	r3, r5
 8006246:	4418      	add	r0, r3
 8006248:	9905      	ldr	r1, [sp, #20]
 800624a:	463a      	mov	r2, r7
 800624c:	f008 f84c 	bl	800e2e8 <memcpy>
              src, avail);
          NIFFS_DBG("append: pix %04x modify page oid:%04x spix:%i len:%i\n", src_pix, fd->obj_id, (u32_t)_NIFFS_OFFS_2_SPIX(fs, file_offs + data_offs), avail);
 8006250:	483d      	ldr	r0, [pc, #244]	; (8006348 <niffs_append+0x6f0>)
 8006252:	6803      	ldr	r3, [r0, #0]
 8006254:	055b      	lsls	r3, r3, #21
 8006256:	d516      	bpl.n	8006286 <niffs_append+0x62e>
 8006258:	4b3c      	ldr	r3, [pc, #240]	; (800634c <niffs_append+0x6f4>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	b99b      	cbnz	r3, 8006286 <niffs_append+0x62e>
 800625e:	68e0      	ldr	r0, [r4, #12]
 8006260:	9a08      	ldr	r2, [sp, #32]
 8006262:	f1a0 0e1e 	sub.w	lr, r0, #30
 8006266:	4575      	cmp	r5, lr
 8006268:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 800626c:	7812      	ldrb	r2, [r2, #0]
 800626e:	d306      	bcc.n	800627e <niffs_append+0x626>
 8006270:	f1c0 031e 	rsb	r3, r0, #30
 8006274:	442b      	add	r3, r5
 8006276:	3804      	subs	r0, #4
 8006278:	fbb3 f3f0 	udiv	r3, r3, r0
 800627c:	3301      	adds	r3, #1
 800627e:	9700      	str	r7, [sp, #0]
 8006280:	4836      	ldr	r0, [pc, #216]	; (800635c <niffs_append+0x704>)
 8006282:	f002 ff8b 	bl	800919c <arcprint>
          NIFFS_DBG("append: new pix %04x\n", new_pix);
 8006286:	4930      	ldr	r1, [pc, #192]	; (8006348 <niffs_append+0x6f0>)
 8006288:	680b      	ldr	r3, [r1, #0]
 800628a:	055d      	lsls	r5, r3, #21
 800628c:	d507      	bpl.n	800629e <niffs_append+0x646>
 800628e:	4b2f      	ldr	r3, [pc, #188]	; (800634c <niffs_append+0x6f4>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	b923      	cbnz	r3, 800629e <niffs_append+0x646>
 8006294:	4832      	ldr	r0, [pc, #200]	; (8006360 <niffs_append+0x708>)
 8006296:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800629a:	f002 ff7f 	bl	800919c <arcprint>

          // move page, rewrite data
          res = niffs_move_page(fs, src_pix, new_pix, fs->buf, _NIFFS_SPIX_2_PDATA_LEN(fs, 1), _NIFFS_FLAG_WRITTEN);
 800629e:	68e3      	ldr	r3, [r4, #12]
 80062a0:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 80062a4:	3b04      	subs	r3, #4
 80062a6:	9300      	str	r3, [sp, #0]
 80062a8:	2301      	movs	r3, #1
 80062aa:	9301      	str	r3, [sp, #4]
 80062ac:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80062b0:	4620      	mov	r0, r4
 80062b2:	6923      	ldr	r3, [r4, #16]
 80062b4:	f7fd fc36 	bl	8003b24 <niffs_move_page>
          check(res);
 80062b8:	4605      	mov	r5, r0
 80062ba:	b160      	cbz	r0, 80062d6 <niffs_append+0x67e>
 80062bc:	4b22      	ldr	r3, [pc, #136]	; (8006348 <niffs_append+0x6f0>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	0558      	lsls	r0, r3, #21
 80062c2:	f57f adc7 	bpl.w	8005e54 <niffs_append+0x1fc>
 80062c6:	4b21      	ldr	r3, [pc, #132]	; (800634c <niffs_append+0x6f4>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f47f adc2 	bne.w	8005e54 <niffs_append+0x1fc>
 80062d0:	f240 430b 	movw	r3, #1035	; 0x40b
 80062d4:	e569      	b.n	8005daa <niffs_append+0x152>
        }

        fd->cur_pix = new_pix;
 80062d6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80062da:	9b08      	ldr	r3, [sp, #32]
 80062dc:	819a      	strh	r2, [r3, #12]
 80062de:	e001      	b.n	80062e4 <niffs_append+0x68c>
        // find new page
        avail = NIFFS_MIN(len - written,
            _NIFFS_SPIX_2_PDATA_LEN(fs, _NIFFS_OFFS_2_SPIX(fs, file_offs + data_offs)) -
            _NIFFS_OFFS_2_PDATA_OFFS(fs, file_offs + data_offs));
        niffs_page_ix new_pix;
        res = niffs_find_free_page(fs, &new_pix, NIFFS_EXCL_SECT_NONE);
 80062e0:	4650      	mov	r0, sl
 80062e2:	e0e3      	b.n	80064ac <niffs_append+0x854>
        }

        fd->cur_pix = new_pix;
      }

      src += avail;
 80062e4:	9a05      	ldr	r2, [sp, #20]
      data_offs += avail;
      written += avail;
      fd->offs += avail;
 80062e6:	9b08      	ldr	r3, [sp, #32]
        }

        fd->cur_pix = new_pix;
      }

      src += avail;
 80062e8:	443a      	add	r2, r7
 80062ea:	9205      	str	r2, [sp, #20]
      data_offs += avail;
      written += avail;
      fd->offs += avail;
 80062ec:	689a      	ldr	r2, [r3, #8]

        fd->cur_pix = new_pix;
      }

      src += avail;
      data_offs += avail;
 80062ee:	44bb      	add	fp, r7
      written += avail;
      fd->offs += avail;
 80062f0:	4417      	add	r7, r2
 80062f2:	609f      	str	r7, [r3, #8]
 80062f4:	e589      	b.n	8005e0a <niffs_append+0x1b2>
    // note: if header has been marked as movi, this will be remedied
    // once the file is opened again or on a check
    return res;
  }
  // move original object header if necessary
  if (dst_ohdr_addr == 0) {
 80062f6:	9b02      	ldr	r3, [sp, #8]
 80062f8:	4d13      	ldr	r5, [pc, #76]	; (8006348 <niffs_append+0x6f0>)
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d15d      	bne.n	80063ba <niffs_append+0x762>
    // find free page
    niffs_page_ix new_pix;
    res = niffs_find_free_page(fs, &new_pix, NIFFS_EXCL_SECT_NONE);
 80062fe:	a909      	add	r1, sp, #36	; 0x24
 8006300:	4620      	mov	r0, r4
 8006302:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006306:	f7fe fb60 	bl	80049ca <niffs_find_free_page>
    NIFFS_DBG("append: header update for new object hdr (only length change), pix %04x\n", new_pix);
 800630a:	682b      	ldr	r3, [r5, #0]
  }
  // move original object header if necessary
  if (dst_ohdr_addr == 0) {
    // find free page
    niffs_page_ix new_pix;
    res = niffs_find_free_page(fs, &new_pix, NIFFS_EXCL_SECT_NONE);
 800630c:	4607      	mov	r7, r0
    NIFFS_DBG("append: header update for new object hdr (only length change), pix %04x\n", new_pix);
 800630e:	0559      	lsls	r1, r3, #21
 8006310:	d507      	bpl.n	8006322 <niffs_append+0x6ca>
 8006312:	4b0e      	ldr	r3, [pc, #56]	; (800634c <niffs_append+0x6f4>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	b923      	cbnz	r3, 8006322 <niffs_append+0x6ca>
 8006318:	4812      	ldr	r0, [pc, #72]	; (8006364 <niffs_append+0x70c>)
 800631a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800631e:	f002 ff3d 	bl	800919c <arcprint>
    check(res);
 8006322:	b33f      	cbz	r7, 8006374 <niffs_append+0x71c>
 8006324:	682b      	ldr	r3, [r5, #0]
 8006326:	055a      	lsls	r2, r3, #21
 8006328:	d545      	bpl.n	80063b6 <niffs_append+0x75e>
 800632a:	4b08      	ldr	r3, [pc, #32]	; (800634c <niffs_append+0x6f4>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d141      	bne.n	80063b6 <niffs_append+0x75e>
 8006332:	f240 4327 	movw	r3, #1063	; 0x427
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	480b      	ldr	r0, [pc, #44]	; (8006368 <niffs_append+0x710>)
 800633a:	4639      	mov	r1, r7
 800633c:	4a0b      	ldr	r2, [pc, #44]	; (800636c <niffs_append+0x714>)
 800633e:	4b0c      	ldr	r3, [pc, #48]	; (8006370 <niffs_append+0x718>)
 8006340:	f002 ff2c 	bl	800919c <arcprint>
 8006344:	e037      	b.n	80063b6 <niffs_append+0x75e>
 8006346:	bf00      	nop
 8006348:	20004f80 	.word	0x20004f80
 800634c:	20004f84 	.word	0x20004f84
 8006350:	08010d20 	.word	0x08010d20
 8006354:	08010d3a 	.word	0x08010d3a
 8006358:	08010d73 	.word	0x08010d73
 800635c:	08010d91 	.word	0x08010d91
 8006360:	08010dc7 	.word	0x08010dc7
 8006364:	08010ddd 	.word	0x08010ddd
 8006368:	08010535 	.word	0x08010535
 800636c:	0800ea0a 	.word	0x0800ea0a
 8006370:	0801054b 	.word	0x0801054b

    dst_ohdr_addr = (u8_t *)_NIFFS_PIX_2_ADDR(fs, new_pix);

    // copy from old hdr
    _NIFFS_RD(fs, fs->buf, orig_ohdr_addr, fs->page_size);
 8006374:	68e2      	ldr	r2, [r4, #12]
 8006376:	6920      	ldr	r0, [r4, #16]
 8006378:	9904      	ldr	r1, [sp, #16]
 800637a:	f007 ffb5 	bl	800e2e8 <memcpy>

    ((niffs_object_hdr *)fs->buf)->len = len + file_offs;

    // move header page, rewrite length data
    res = niffs_move_page(fs, fd->obj_pix, new_pix, fs->buf + sizeof(niffs_page_hdr), fs->page_size - sizeof(niffs_page_hdr), _NIFFS_FLAG_WRITTEN);
 800637e:	68e0      	ldr	r0, [r4, #12]
    dst_ohdr_addr = (u8_t *)_NIFFS_PIX_2_ADDR(fs, new_pix);

    // copy from old hdr
    _NIFFS_RD(fs, fs->buf, orig_ohdr_addr, fs->page_size);

    ((niffs_object_hdr *)fs->buf)->len = len + file_offs;
 8006380:	6923      	ldr	r3, [r4, #16]

    // move header page, rewrite length data
    res = niffs_move_page(fs, fd->obj_pix, new_pix, fs->buf + sizeof(niffs_page_hdr), fs->page_size - sizeof(niffs_page_hdr), _NIFFS_FLAG_WRITTEN);
 8006382:	9a08      	ldr	r2, [sp, #32]
 8006384:	3804      	subs	r0, #4
    dst_ohdr_addr = (u8_t *)_NIFFS_PIX_2_ADDR(fs, new_pix);

    // copy from old hdr
    _NIFFS_RD(fs, fs->buf, orig_ohdr_addr, fs->page_size);

    ((niffs_object_hdr *)fs->buf)->len = len + file_offs;
 8006386:	4446      	add	r6, r8

    // move header page, rewrite length data
    res = niffs_move_page(fs, fd->obj_pix, new_pix, fs->buf + sizeof(niffs_page_hdr), fs->page_size - sizeof(niffs_page_hdr), _NIFFS_FLAG_WRITTEN);
 8006388:	8851      	ldrh	r1, [r2, #2]
    dst_ohdr_addr = (u8_t *)_NIFFS_PIX_2_ADDR(fs, new_pix);

    // copy from old hdr
    _NIFFS_RD(fs, fs->buf, orig_ohdr_addr, fs->page_size);

    ((niffs_object_hdr *)fs->buf)->len = len + file_offs;
 800638a:	f843 6f04 	str.w	r6, [r3, #4]!

    // move header page, rewrite length data
    res = niffs_move_page(fs, fd->obj_pix, new_pix, fs->buf + sizeof(niffs_page_hdr), fs->page_size - sizeof(niffs_page_hdr), _NIFFS_FLAG_WRITTEN);
 800638e:	9000      	str	r0, [sp, #0]
 8006390:	2001      	movs	r0, #1
 8006392:	9001      	str	r0, [sp, #4]
 8006394:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8006398:	4620      	mov	r0, r4
 800639a:	f7fd fbc3 	bl	8003b24 <niffs_move_page>
    check(res);
 800639e:	4604      	mov	r4, r0
 80063a0:	b148      	cbz	r0, 80063b6 <niffs_append+0x75e>
 80063a2:	682b      	ldr	r3, [r5, #0]
 80063a4:	055b      	lsls	r3, r3, #21
 80063a6:	d570      	bpl.n	800648a <niffs_append+0x832>
 80063a8:	4b42      	ldr	r3, [pc, #264]	; (80064b4 <niffs_append+0x85c>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d16c      	bne.n	800648a <niffs_append+0x832>
 80063b0:	f240 4332 	movw	r3, #1074	; 0x432
 80063b4:	e05f      	b.n	8006476 <niffs_append+0x81e>
 80063b6:	4638      	mov	r0, r7
 80063b8:	e078      	b.n	80064ac <niffs_append+0x854>
  } else {
    // just fill in clean object header
    // .. write length..
    NIFFS_DBG("append: header update for object hdr (including data), pix %04x\n", dst_ohdr_pix);
 80063ba:	682b      	ldr	r3, [r5, #0]
 80063bc:	055f      	lsls	r7, r3, #21
 80063be:	d506      	bpl.n	80063ce <niffs_append+0x776>
 80063c0:	4b3c      	ldr	r3, [pc, #240]	; (80064b4 <niffs_append+0x85c>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	b91b      	cbnz	r3, 80063ce <niffs_append+0x776>
 80063c6:	483c      	ldr	r0, [pc, #240]	; (80064b8 <niffs_append+0x860>)
 80063c8:	4649      	mov	r1, r9
 80063ca:	f002 fee7 	bl	800919c <arcprint>
    u32_t length = len + file_offs;
 80063ce:	4446      	add	r6, r8
 80063d0:	9609      	str	r6, [sp, #36]	; 0x24
    res = fs->hal_wr((u8_t *)dst_ohdr_addr + offsetof(niffs_object_hdr, len), (u8_t *)&length, sizeof(u32_t));
 80063d2:	9e02      	ldr	r6, [sp, #8]
 80063d4:	69a3      	ldr	r3, [r4, #24]
 80063d6:	1d30      	adds	r0, r6, #4
 80063d8:	a909      	add	r1, sp, #36	; 0x24
 80063da:	2204      	movs	r2, #4
 80063dc:	4798      	blx	r3
    check(res);
 80063de:	4606      	mov	r6, r0
 80063e0:	b148      	cbz	r0, 80063f6 <niffs_append+0x79e>
 80063e2:	682b      	ldr	r3, [r5, #0]
 80063e4:	055d      	lsls	r5, r3, #21
 80063e6:	d54e      	bpl.n	8006486 <niffs_append+0x82e>
 80063e8:	4b32      	ldr	r3, [pc, #200]	; (80064b4 <niffs_append+0x85c>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d14a      	bne.n	8006486 <niffs_append+0x82e>
 80063f0:	f240 4339 	movw	r3, #1081	; 0x439
 80063f4:	e013      	b.n	800641e <niffs_append+0x7c6>
    // .. write flag..
    niffs_flag flag = _NIFFS_FLAG_WRITTEN;
    res = fs->hal_wr((u8_t *)dst_ohdr_addr + offsetof(niffs_object_hdr, phdr) + offsetof(niffs_page_hdr, flag), (u8_t *)&flag, sizeof(niffs_flag));
 80063f6:	9e02      	ldr	r6, [sp, #8]
    NIFFS_DBG("append: header update for object hdr (including data), pix %04x\n", dst_ohdr_pix);
    u32_t length = len + file_offs;
    res = fs->hal_wr((u8_t *)dst_ohdr_addr + offsetof(niffs_object_hdr, len), (u8_t *)&length, sizeof(u32_t));
    check(res);
    // .. write flag..
    niffs_flag flag = _NIFFS_FLAG_WRITTEN;
 80063f8:	a90a      	add	r1, sp, #40	; 0x28
 80063fa:	2301      	movs	r3, #1
 80063fc:	f821 3d0a 	strh.w	r3, [r1, #-10]!
    res = fs->hal_wr((u8_t *)dst_ohdr_addr + offsetof(niffs_object_hdr, phdr) + offsetof(niffs_page_hdr, flag), (u8_t *)&flag, sizeof(niffs_flag));
 8006400:	1cb0      	adds	r0, r6, #2
 8006402:	69a3      	ldr	r3, [r4, #24]
 8006404:	2202      	movs	r2, #2
 8006406:	4798      	blx	r3
    check(res);
 8006408:	4606      	mov	r6, r0
 800640a:	b180      	cbz	r0, 800642e <niffs_append+0x7d6>
 800640c:	682b      	ldr	r3, [r5, #0]
 800640e:	055c      	lsls	r4, r3, #21
 8006410:	d539      	bpl.n	8006486 <niffs_append+0x82e>
 8006412:	4b28      	ldr	r3, [pc, #160]	; (80064b4 <niffs_append+0x85c>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d135      	bne.n	8006486 <niffs_append+0x82e>
 800641a:	f240 433d 	movw	r3, #1085	; 0x43d
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	4826      	ldr	r0, [pc, #152]	; (80064bc <niffs_append+0x864>)
 8006422:	4631      	mov	r1, r6
 8006424:	4a26      	ldr	r2, [pc, #152]	; (80064c0 <niffs_append+0x868>)
 8006426:	4b27      	ldr	r3, [pc, #156]	; (80064c4 <niffs_append+0x86c>)
 8006428:	f002 feb8 	bl	800919c <arcprint>
 800642c:	e02b      	b.n	8006486 <niffs_append+0x82e>
    // check if object header moved
    if (dst_ohdr_addr != orig_ohdr_addr) {
 800642e:	9e02      	ldr	r6, [sp, #8]
 8006430:	9804      	ldr	r0, [sp, #16]
 8006432:	4286      	cmp	r6, r0
 8006434:	f43f acef 	beq.w	8005e16 <niffs_append+0x1be>
      NIFFS_DBG("append: header update inform, moved from pix %04x\n", orig_obj_pix);
 8006438:	682b      	ldr	r3, [r5, #0]
 800643a:	0558      	lsls	r0, r3, #21
 800643c:	d506      	bpl.n	800644c <niffs_append+0x7f4>
 800643e:	4b1d      	ldr	r3, [pc, #116]	; (80064b4 <niffs_append+0x85c>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	b91b      	cbnz	r3, 800644c <niffs_append+0x7f4>
 8006444:	4820      	ldr	r0, [pc, #128]	; (80064c8 <niffs_append+0x870>)
 8006446:	9903      	ldr	r1, [sp, #12]
 8006448:	f002 fea8 	bl	800919c <arcprint>
      niffs_inform_page_movement(fs, orig_obj_pix, dst_ohdr_pix);
 800644c:	4620      	mov	r0, r4
 800644e:	9903      	ldr	r1, [sp, #12]
 8006450:	464a      	mov	r2, r9
 8006452:	f7fd fb1b 	bl	8003a8c <niffs_inform_page_movement>
      // .. and remove old
      res = niffs_delete_page(fs, orig_obj_pix);
 8006456:	4620      	mov	r0, r4
 8006458:	9903      	ldr	r1, [sp, #12]
 800645a:	f7fd fa4c 	bl	80038f6 <niffs_delete_page>
      check(res);
 800645e:	4604      	mov	r4, r0
 8006460:	2800      	cmp	r0, #0
 8006462:	f43f acd8 	beq.w	8005e16 <niffs_append+0x1be>
 8006466:	682b      	ldr	r3, [r5, #0]
 8006468:	0559      	lsls	r1, r3, #21
 800646a:	d50e      	bpl.n	800648a <niffs_append+0x832>
 800646c:	4b11      	ldr	r3, [pc, #68]	; (80064b4 <niffs_append+0x85c>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	b95b      	cbnz	r3, 800648a <niffs_append+0x832>
 8006472:	f240 4344 	movw	r3, #1092	; 0x444
 8006476:	9300      	str	r3, [sp, #0]
 8006478:	4810      	ldr	r0, [pc, #64]	; (80064bc <niffs_append+0x864>)
 800647a:	4621      	mov	r1, r4
 800647c:	4a10      	ldr	r2, [pc, #64]	; (80064c0 <niffs_append+0x868>)
 800647e:	4b11      	ldr	r3, [pc, #68]	; (80064c4 <niffs_append+0x86c>)
 8006480:	f002 fe8c 	bl	800919c <arcprint>
 8006484:	e001      	b.n	800648a <niffs_append+0x832>
 8006486:	4630      	mov	r0, r6
 8006488:	e010      	b.n	80064ac <niffs_append+0x854>
 800648a:	4620      	mov	r0, r4
 800648c:	e00e      	b.n	80064ac <niffs_append+0x854>
      data_offs += avail;
      written += avail;
      fd->offs += avail;
    }
#else
    check(ERR_NIFFS_LINEAR_FILE);
 800648e:	480f      	ldr	r0, [pc, #60]	; (80064cc <niffs_append+0x874>)
 8006490:	e00c      	b.n	80064ac <niffs_append+0x854>
    orig_ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);
    if (orig_ohdr->phdr.id.obj_id != fd->obj_id) res = ERR_NIFFS_INCOHERENT_ID;
    orig_ohdr_addr = (u8_t *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);
    orig_obj_pix = fd->obj_pix;
  }
  check(res);
 8006492:	4b0f      	ldr	r3, [pc, #60]	; (80064d0 <niffs_append+0x878>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	055a      	lsls	r2, r3, #21
 8006498:	f57f ac36 	bpl.w	8005d08 <niffs_append+0xb0>
 800649c:	4b05      	ldr	r3, [pc, #20]	; (80064b4 <niffs_append+0x85c>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f47f ac31 	bne.w	8005d08 <niffs_append+0xb0>
 80064a6:	f240 337f 	movw	r3, #895	; 0x37f
 80064aa:	e426      	b.n	8005cfa <niffs_append+0xa2>
      check(res);
    }
  }

  return res;
}
 80064ac:	b00b      	add	sp, #44	; 0x2c
 80064ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064b2:	bf00      	nop
 80064b4:	20004f84 	.word	0x20004f84
 80064b8:	08010e26 	.word	0x08010e26
 80064bc:	08010535 	.word	0x08010535
 80064c0:	0800ea0a 	.word	0x0800ea0a
 80064c4:	0801054b 	.word	0x0801054b
 80064c8:	08010e67 	.word	0x08010e67
 80064cc:	ffffd4e3 	.word	0xffffd4e3
 80064d0:	20004f80 	.word	0x20004f80

080064d4 <niffs_modify>:

int niffs_modify(niffs *fs, int fd_ix, u32_t offset, const u8_t *src, u32_t len) {
 80064d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d8:	b08b      	sub	sp, #44	; 0x2c
 80064da:	9205      	str	r2, [sp, #20]
  int res = NIFFS_OK;
  niffs_file_desc *fd;
  res = niffs_get_filedesc(fs, fd_ix, &fd);
 80064dc:	aa09      	add	r2, sp, #36	; 0x24
  }

  return res;
}

int niffs_modify(niffs *fs, int fd_ix, u32_t offset, const u8_t *src, u32_t len) {
 80064de:	4604      	mov	r4, r0
 80064e0:	9306      	str	r3, [sp, #24]
  int res = NIFFS_OK;
  niffs_file_desc *fd;
  res = niffs_get_filedesc(fs, fd_ix, &fd);
 80064e2:	f7fe fc77 	bl	8004dd4 <niffs_get_filedesc>
  check(res);
 80064e6:	4605      	mov	r5, r0
 80064e8:	b160      	cbz	r0, 8006504 <niffs_modify+0x30>
 80064ea:	4b6d      	ldr	r3, [pc, #436]	; (80066a0 <niffs_modify+0x1cc>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	055a      	lsls	r2, r3, #21
 80064f0:	f140 8216 	bpl.w	8006920 <niffs_modify+0x44c>
 80064f4:	4b6b      	ldr	r3, [pc, #428]	; (80066a4 <niffs_modify+0x1d0>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f040 8211 	bne.w	8006920 <niffs_modify+0x44c>
 80064fe:	f240 434f 	movw	r3, #1103	; 0x44f
 8006502:	e19c      	b.n	800683e <niffs_modify+0x36a>

  if ((fd->flags & NIFFS_O_WRONLY) == 0) {
 8006504:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006506:	7b93      	ldrb	r3, [r2, #14]
 8006508:	06db      	lsls	r3, r3, #27
 800650a:	d413      	bmi.n	8006534 <niffs_modify+0x60>
    check(ERR_NIFFS_NOT_WRITABLE);
 800650c:	4b64      	ldr	r3, [pc, #400]	; (80066a0 <niffs_modify+0x1cc>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	055f      	lsls	r7, r3, #21
 8006512:	f140 81ff 	bpl.w	8006914 <niffs_modify+0x440>
 8006516:	4b63      	ldr	r3, [pc, #396]	; (80066a4 <niffs_modify+0x1d0>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	f040 81fa 	bne.w	8006914 <niffs_modify+0x440>
 8006520:	f240 4352 	movw	r3, #1106	; 0x452
 8006524:	9300      	str	r3, [sp, #0]
 8006526:	4860      	ldr	r0, [pc, #384]	; (80066a8 <niffs_modify+0x1d4>)
 8006528:	4960      	ldr	r1, [pc, #384]	; (80066ac <niffs_modify+0x1d8>)
 800652a:	4a61      	ldr	r2, [pc, #388]	; (80066b0 <niffs_modify+0x1dc>)
 800652c:	4b61      	ldr	r3, [pc, #388]	; (80066b4 <niffs_modify+0x1e0>)
 800652e:	f002 fe35 	bl	800919c <arcprint>
 8006532:	e1ef      	b.n	8006914 <niffs_modify+0x440>
  }
  if (fd->type == _NIFFS_FTYPE_LINFILE) {
 8006534:	7913      	ldrb	r3, [r2, #4]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d113      	bne.n	8006562 <niffs_modify+0x8e>
    check(ERR_NIFFS_LINEAR_FILE); // only append and full delete is allowed for linears
 800653a:	4b59      	ldr	r3, [pc, #356]	; (80066a0 <niffs_modify+0x1cc>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	055e      	lsls	r6, r3, #21
 8006540:	f140 81ea 	bpl.w	8006918 <niffs_modify+0x444>
 8006544:	4b57      	ldr	r3, [pc, #348]	; (80066a4 <niffs_modify+0x1d0>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	f040 81e5 	bne.w	8006918 <niffs_modify+0x444>
 800654e:	f240 4355 	movw	r3, #1109	; 0x455
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	4854      	ldr	r0, [pc, #336]	; (80066a8 <niffs_modify+0x1d4>)
 8006556:	4958      	ldr	r1, [pc, #352]	; (80066b8 <niffs_modify+0x1e4>)
 8006558:	4a55      	ldr	r2, [pc, #340]	; (80066b0 <niffs_modify+0x1dc>)
 800655a:	4b56      	ldr	r3, [pc, #344]	; (80066b4 <niffs_modify+0x1e0>)
 800655c:	f002 fe1e 	bl	800919c <arcprint>
 8006560:	e1da      	b.n	8006918 <niffs_modify+0x444>
  }

  if (len == 0) return NIFFS_OK;
 8006562:	9814      	ldr	r0, [sp, #80]	; 0x50
 8006564:	b908      	cbnz	r0, 800656a <niffs_modify+0x96>
 8006566:	2000      	movs	r0, #0
 8006568:	e1db      	b.n	8006922 <niffs_modify+0x44e>
  niffs_object_hdr *orig_ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);
 800656a:	8856      	ldrh	r6, [r2, #2]
 800656c:	6a27      	ldr	r7, [r4, #32]
 800656e:	68e3      	ldr	r3, [r4, #12]
 8006570:	fbb6 f0f7 	udiv	r0, r6, r7
 8006574:	fb07 6910 	mls	r9, r7, r0, r6
 8006578:	fb03 f909 	mul.w	r9, r3, r9
 800657c:	68a1      	ldr	r1, [r4, #8]
  niffs_page_ix orig_obj_pix = fd->obj_pix;
  if (orig_ohdr->phdr.id.obj_id != fd->obj_id) check(ERR_NIFFS_INCOHERENT_ID);
 800657e:	7812      	ldrb	r2, [r2, #0]
  if (fd->type == _NIFFS_FTYPE_LINFILE) {
    check(ERR_NIFFS_LINEAR_FILE); // only append and full delete is allowed for linears
  }

  if (len == 0) return NIFFS_OK;
  niffs_object_hdr *orig_ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);
 8006580:	fb01 9900 	mla	r9, r1, r0, r9
 8006584:	6821      	ldr	r1, [r4, #0]
 8006586:	f109 0904 	add.w	r9, r9, #4
 800658a:	4489      	add	r9, r1
  niffs_page_ix orig_obj_pix = fd->obj_pix;
  if (orig_ohdr->phdr.id.obj_id != fd->obj_id) check(ERR_NIFFS_INCOHERENT_ID);
 800658c:	f899 1001 	ldrb.w	r1, [r9, #1]
 8006590:	4291      	cmp	r1, r2
 8006592:	d00a      	beq.n	80065aa <niffs_modify+0xd6>
 8006594:	4b42      	ldr	r3, [pc, #264]	; (80066a0 <niffs_modify+0x1cc>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	055d      	lsls	r5, r3, #21
 800659a:	d57b      	bpl.n	8006694 <niffs_modify+0x1c0>
 800659c:	4b41      	ldr	r3, [pc, #260]	; (80066a4 <niffs_modify+0x1d0>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d177      	bne.n	8006694 <niffs_modify+0x1c0>
 80065a4:	f240 435b 	movw	r3, #1115	; 0x45b
 80065a8:	e06d      	b.n	8006686 <niffs_modify+0x1b2>
  u32_t file_offs = orig_ohdr->len == NIFFS_UNDEF_LEN ? 0 : orig_ohdr->len;
 80065aa:	f8d9 2004 	ldr.w	r2, [r9, #4]
  if (offset + len > file_offs) {
 80065ae:	9814      	ldr	r0, [sp, #80]	; 0x50
 80065b0:	9905      	ldr	r1, [sp, #20]

  if (len == 0) return NIFFS_OK;
  niffs_object_hdr *orig_ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);
  niffs_page_ix orig_obj_pix = fd->obj_pix;
  if (orig_ohdr->phdr.id.obj_id != fd->obj_id) check(ERR_NIFFS_INCOHERENT_ID);
  u32_t file_offs = orig_ohdr->len == NIFFS_UNDEF_LEN ? 0 : orig_ohdr->len;
 80065b2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80065b6:	bf08      	it	eq
 80065b8:	2200      	moveq	r2, #0
  if (offset + len > file_offs) {
 80065ba:	4408      	add	r0, r1
 80065bc:	4290      	cmp	r0, r2
 80065be:	d913      	bls.n	80065e8 <niffs_modify+0x114>
    check(ERR_NIFFS_MODIFY_BEYOND_FILE);
 80065c0:	4b37      	ldr	r3, [pc, #220]	; (80066a0 <niffs_modify+0x1cc>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	055c      	lsls	r4, r3, #21
 80065c6:	f140 81a9 	bpl.w	800691c <niffs_modify+0x448>
 80065ca:	4b36      	ldr	r3, [pc, #216]	; (80066a4 <niffs_modify+0x1d0>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f040 81a4 	bne.w	800691c <niffs_modify+0x448>
 80065d4:	f240 435e 	movw	r3, #1118	; 0x45e
 80065d8:	9300      	str	r3, [sp, #0]
 80065da:	4833      	ldr	r0, [pc, #204]	; (80066a8 <niffs_modify+0x1d4>)
 80065dc:	4937      	ldr	r1, [pc, #220]	; (80066bc <niffs_modify+0x1e8>)
 80065de:	4a34      	ldr	r2, [pc, #208]	; (80066b0 <niffs_modify+0x1dc>)
 80065e0:	4b34      	ldr	r3, [pc, #208]	; (80066b4 <niffs_modify+0x1e0>)
 80065e2:	f002 fddb 	bl	800919c <arcprint>
 80065e6:	e199      	b.n	800691c <niffs_modify+0x448>
  }

  // CHECK SPACE
  niffs_span_ix start = _NIFFS_OFFS_2_SPIX(fs, offset);
 80065e8:	9905      	ldr	r1, [sp, #20]
 80065ea:	f1a3 021e 	sub.w	r2, r3, #30
 80065ee:	4291      	cmp	r1, r2
 80065f0:	d307      	bcc.n	8006602 <niffs_modify+0x12e>
 80065f2:	f1c3 051e 	rsb	r5, r3, #30
 80065f6:	440d      	add	r5, r1
 80065f8:	1f19      	subs	r1, r3, #4
 80065fa:	fbb5 f5f1 	udiv	r5, r5, r1
 80065fe:	3501      	adds	r5, #1
 8006600:	b2ed      	uxtb	r5, r5
  niffs_span_ix end = _NIFFS_OFFS_2_SPIX(fs, offset+len);
 8006602:	4290      	cmp	r0, r2
 8006604:	d308      	bcc.n	8006618 <niffs_modify+0x144>
 8006606:	f1c3 021e 	rsb	r2, r3, #30
 800660a:	4410      	add	r0, r2
 800660c:	3b04      	subs	r3, #4
 800660e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006612:	3301      	adds	r3, #1
 8006614:	b2db      	uxtb	r3, r3
 8006616:	e000      	b.n	800661a <niffs_modify+0x146>
 8006618:	2300      	movs	r3, #0

  u32_t needed_pages = end-start+1;
 800661a:	1b59      	subs	r1, r3, r5
  res = niffs_ensure_free_pages(fs, needed_pages);
 800661c:	4620      	mov	r0, r4
 800661e:	3101      	adds	r1, #1
 8006620:	f7ff f90a 	bl	8005838 <niffs_ensure_free_pages>

  check(res);
 8006624:	4605      	mov	r5, r0
 8006626:	b160      	cbz	r0, 8006642 <niffs_modify+0x16e>
 8006628:	4b1d      	ldr	r3, [pc, #116]	; (80066a0 <niffs_modify+0x1cc>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	0558      	lsls	r0, r3, #21
 800662e:	f140 8177 	bpl.w	8006920 <niffs_modify+0x44c>
 8006632:	4b1c      	ldr	r3, [pc, #112]	; (80066a4 <niffs_modify+0x1d0>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	f040 8172 	bne.w	8006920 <niffs_modify+0x44c>
 800663c:	f44f 638d 	mov.w	r3, #1128	; 0x468
 8006640:	e0fd      	b.n	800683e <niffs_modify+0x36a>

  // repopulate if moved by gc
  if (fd->obj_pix != orig_obj_pix) {
 8006642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006644:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006648:	45b2      	cmp	sl, r6
 800664a:	d025      	beq.n	8006698 <niffs_modify+0x1c4>
    orig_ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);
 800664c:	6a21      	ldr	r1, [r4, #32]
 800664e:	68e5      	ldr	r5, [r4, #12]
 8006650:	fbba f2f1 	udiv	r2, sl, r1
 8006654:	fb01 a912 	mls	r9, r1, r2, sl
 8006658:	fb05 f909 	mul.w	r9, r5, r9
 800665c:	68a0      	ldr	r0, [r4, #8]
    if (orig_ohdr->phdr.id.obj_id != fd->obj_id) check(ERR_NIFFS_INCOHERENT_ID);
 800665e:	781b      	ldrb	r3, [r3, #0]

  check(res);

  // repopulate if moved by gc
  if (fd->obj_pix != orig_obj_pix) {
    orig_ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);
 8006660:	fb00 9902 	mla	r9, r0, r2, r9
 8006664:	6820      	ldr	r0, [r4, #0]
 8006666:	f109 0904 	add.w	r9, r9, #4
 800666a:	4481      	add	r9, r0
    if (orig_ohdr->phdr.id.obj_id != fd->obj_id) check(ERR_NIFFS_INCOHERENT_ID);
 800666c:	f899 2001 	ldrb.w	r2, [r9, #1]
 8006670:	429a      	cmp	r2, r3
 8006672:	d011      	beq.n	8006698 <niffs_modify+0x1c4>
 8006674:	4b0a      	ldr	r3, [pc, #40]	; (80066a0 <niffs_modify+0x1cc>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	0559      	lsls	r1, r3, #21
 800667a:	d50b      	bpl.n	8006694 <niffs_modify+0x1c0>
 800667c:	4b09      	ldr	r3, [pc, #36]	; (80066a4 <niffs_modify+0x1d0>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	b943      	cbnz	r3, 8006694 <niffs_modify+0x1c0>
 8006682:	f240 436d 	movw	r3, #1133	; 0x46d
 8006686:	9300      	str	r3, [sp, #0]
 8006688:	4807      	ldr	r0, [pc, #28]	; (80066a8 <niffs_modify+0x1d4>)
 800668a:	490d      	ldr	r1, [pc, #52]	; (80066c0 <niffs_modify+0x1ec>)
 800668c:	4a08      	ldr	r2, [pc, #32]	; (80066b0 <niffs_modify+0x1dc>)
 800668e:	4b09      	ldr	r3, [pc, #36]	; (80066b4 <niffs_modify+0x1e0>)
 8006690:	f002 fd84 	bl	800919c <arcprint>
 8006694:	480a      	ldr	r0, [pc, #40]	; (80066c0 <niffs_modify+0x1ec>)
 8006696:	e144      	b.n	8006922 <niffs_modify+0x44e>
  }

  u32_t written = 0;
 8006698:	f04f 0800 	mov.w	r8, #0

  // WRITE DATA
  niffs_page_ix search_pix = fd->obj_pix;
  // operate on per page basis
  while (res == NIFFS_OK && written < len) {
 800669c:	e032      	b.n	8006704 <niffs_modify+0x230>
 800669e:	bf00      	nop
 80066a0:	20004f80 	.word	0x20004f80
 80066a4:	20004f84 	.word	0x20004f84
 80066a8:	08010535 	.word	0x08010535
 80066ac:	ffffd4e7 	.word	0xffffd4e7
 80066b0:	0800ea17 	.word	0x0800ea17
 80066b4:	0801054b 	.word	0x0801054b
 80066b8:	ffffd4e3 	.word	0xffffd4e3
 80066bc:	ffffd4ee 	.word	0xffffd4ee
 80066c0:	ffffd4f1 	.word	0xffffd4f1
      }

      // find dst page & move src
      res = niffs_find_free_page(fs, &new_pix, NIFFS_EXCL_SECT_NONE);
      check(res);
      res = niffs_move_page(fs, orig_pix, new_pix, fs->buf, pdata_len +
 80066c4:	9804      	ldr	r0, [sp, #16]
 80066c6:	2f00      	cmp	r7, #0
 80066c8:	bf0c      	ite	eq
 80066ca:	2716      	moveq	r7, #22
 80066cc:	2700      	movne	r7, #0
 80066ce:	4407      	add	r7, r0
 80066d0:	2001      	movs	r0, #1
 80066d2:	6923      	ldr	r3, [r4, #16]
 80066d4:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80066d8:	9001      	str	r0, [sp, #4]
 80066da:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80066de:	9700      	str	r7, [sp, #0]
 80066e0:	4620      	mov	r0, r4
 80066e2:	f7fd fa1f 	bl	8003b24 <niffs_move_page>
          (spix == 0 ? sizeof(niffs_object_hdr) - sizeof(niffs_page_hdr) : 0), _NIFFS_FLAG_WRITTEN);
      check(res);
 80066e6:	4605      	mov	r5, r0
 80066e8:	2800      	cmp	r0, #0
 80066ea:	f040 80da 	bne.w	80068a2 <niffs_modify+0x3ce>
      check(res);
    }

    written += avail;
    src += avail;
    fd->offs += written;
 80066ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
      check(res);
      res = niffs_move_page(fs, orig_pix, new_pix, src, avail, _NIFFS_FLAG_WRITTEN);
      check(res);
    }

    written += avail;
 80066f0:	44b0      	add	r8, r6
    src += avail;
    fd->offs += written;
 80066f2:	689a      	ldr	r2, [r3, #8]
      res = niffs_move_page(fs, orig_pix, new_pix, src, avail, _NIFFS_FLAG_WRITTEN);
      check(res);
    }

    written += avail;
    src += avail;
 80066f4:	9906      	ldr	r1, [sp, #24]
    fd->offs += written;
 80066f6:	4442      	add	r2, r8
 80066f8:	609a      	str	r2, [r3, #8]
    fd->cur_pix = new_pix;
 80066fa:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
      res = niffs_move_page(fs, orig_pix, new_pix, src, avail, _NIFFS_FLAG_WRITTEN);
      check(res);
    }

    written += avail;
    src += avail;
 80066fe:	4431      	add	r1, r6
 8006700:	9106      	str	r1, [sp, #24]
    fd->offs += written;
    fd->cur_pix = new_pix;
 8006702:	819a      	strh	r2, [r3, #12]
  u32_t written = 0;

  // WRITE DATA
  niffs_page_ix search_pix = fd->obj_pix;
  // operate on per page basis
  while (res == NIFFS_OK && written < len) {
 8006704:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006706:	4590      	cmp	r8, r2
 8006708:	f4bf af2d 	bcs.w	8006566 <niffs_modify+0x92>
    u32_t avail;
    niffs_span_ix spix = _NIFFS_OFFS_2_SPIX(fs, offset + written);
 800670c:	68e2      	ldr	r2, [r4, #12]
 800670e:	9d05      	ldr	r5, [sp, #20]
 8006710:	f1a2 011e 	sub.w	r1, r2, #30
 8006714:	4445      	add	r5, r8
 8006716:	428d      	cmp	r5, r1
 8006718:	f1a2 0304 	sub.w	r3, r2, #4
 800671c:	f0c0 8097 	bcc.w	800684e <niffs_modify+0x37a>
 8006720:	f1c2 071e 	rsb	r7, r2, #30
 8006724:	442f      	add	r7, r5
 8006726:	fbb7 f7f3 	udiv	r7, r7, r3
 800672a:	3701      	adds	r7, #1
    u32_t pdata_len = _NIFFS_SPIX_2_PDATA_LEN(fs, spix);
 800672c:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8006730:	bf18      	it	ne
 8006732:	2000      	movne	r0, #0
 8006734:	f000 808b 	beq.w	800684e <niffs_modify+0x37a>
 8006738:	1a18      	subs	r0, r3, r0
    u32_t pdata_offs = _NIFFS_OFFS_2_PDATA_OFFS(fs, offset + written);
 800673a:	428d      	cmp	r5, r1
  niffs_page_ix search_pix = fd->obj_pix;
  // operate on per page basis
  while (res == NIFFS_OK && written < len) {
    u32_t avail;
    niffs_span_ix spix = _NIFFS_OFFS_2_SPIX(fs, offset + written);
    u32_t pdata_len = _NIFFS_SPIX_2_PDATA_LEN(fs, spix);
 800673c:	9004      	str	r0, [sp, #16]
    u32_t pdata_offs = _NIFFS_OFFS_2_PDATA_OFFS(fs, offset + written);
 800673e:	d306      	bcc.n	800674e <niffs_modify+0x27a>
 8006740:	f1c2 021e 	rsb	r2, r2, #30
 8006744:	4415      	add	r5, r2
 8006746:	fbb5 f2f3 	udiv	r2, r5, r3
 800674a:	fb03 5512 	mls	r5, r3, r2, r5
    avail = pdata_len - pdata_offs;
 800674e:	9a04      	ldr	r2, [sp, #16]
    avail = NIFFS_MIN(len - written, avail);
 8006750:	9814      	ldr	r0, [sp, #80]	; 0x50
  while (res == NIFFS_OK && written < len) {
    u32_t avail;
    niffs_span_ix spix = _NIFFS_OFFS_2_SPIX(fs, offset + written);
    u32_t pdata_len = _NIFFS_SPIX_2_PDATA_LEN(fs, spix);
    u32_t pdata_offs = _NIFFS_OFFS_2_PDATA_OFFS(fs, offset + written);
    avail = pdata_len - pdata_offs;
 8006752:	1b56      	subs	r6, r2, r5
    avail = NIFFS_MIN(len - written, avail);
 8006754:	ebc8 0300 	rsb	r3, r8, r0
 8006758:	429e      	cmp	r6, r3
 800675a:	bf28      	it	cs
 800675c:	461e      	movcs	r6, r3

    u32_t buf_offs = 0;
    if (spix == 0) {
 800675e:	2f00      	cmp	r7, #0
 8006760:	d178      	bne.n	8006854 <niffs_modify+0x380>
      // copy object hdr data
      niffs_memcpy(fs->buf, (u8_t *)orig_ohdr + sizeof(niffs_page_hdr), sizeof(niffs_object_hdr) - sizeof(niffs_page_hdr));
 8006762:	6922      	ldr	r2, [r4, #16]
 8006764:	f109 0304 	add.w	r3, r9, #4
 8006768:	f109 0118 	add.w	r1, r9, #24
 800676c:	f853 0b04 	ldr.w	r0, [r3], #4
 8006770:	428b      	cmp	r3, r1
 8006772:	f842 0b04 	str.w	r0, [r2], #4
 8006776:	d1f9      	bne.n	800676c <niffs_modify+0x298>
 8006778:	881b      	ldrh	r3, [r3, #0]
      buf_offs = sizeof(niffs_object_hdr) - sizeof(niffs_page_hdr);
 800677a:	2116      	movs	r1, #22
    avail = NIFFS_MIN(len - written, avail);

    u32_t buf_offs = 0;
    if (spix == 0) {
      // copy object hdr data
      niffs_memcpy(fs->buf, (u8_t *)orig_ohdr + sizeof(niffs_page_hdr), sizeof(niffs_object_hdr) - sizeof(niffs_page_hdr));
 800677c:	8013      	strh	r3, [r2, #0]
      buf_offs = sizeof(niffs_object_hdr) - sizeof(niffs_page_hdr);
 800677e:	9107      	str	r1, [sp, #28]
    }

    // find original page
    niffs_page_ix orig_pix;
    res = niffs_find_page(fs, &orig_pix, fd->obj_id, spix, search_pix);
 8006780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006782:	4620      	mov	r0, r4
 8006784:	781a      	ldrb	r2, [r3, #0]
 8006786:	a908      	add	r1, sp, #32
 8006788:	f8cd a000 	str.w	sl, [sp]
 800678c:	463b      	mov	r3, r7
 800678e:	f7fe fa2d 	bl	8004bec <niffs_find_page>
 8006792:	f8df b194 	ldr.w	fp, [pc, #404]	; 8006928 <niffs_modify+0x454>
    check(res);
 8006796:	4682      	mov	sl, r0
 8006798:	2800      	cmp	r0, #0
 800679a:	d15e      	bne.n	800685a <niffs_modify+0x386>
    search_pix = orig_pix;

    NIFFS_DBG("modify: pix %04x oid:%04x spix:%i offs:%i len:%i\n", orig_pix, fd->obj_id, spix, pdata_offs, avail);
 800679c:	4862      	ldr	r0, [pc, #392]	; (8006928 <niffs_modify+0x454>)

    // find original page
    niffs_page_ix orig_pix;
    res = niffs_find_page(fs, &orig_pix, fd->obj_id, spix, search_pix);
    check(res);
    search_pix = orig_pix;
 800679e:	f8bd a020 	ldrh.w	sl, [sp, #32]

    NIFFS_DBG("modify: pix %04x oid:%04x spix:%i offs:%i len:%i\n", orig_pix, fd->obj_id, spix, pdata_offs, avail);
 80067a2:	6803      	ldr	r3, [r0, #0]
 80067a4:	055b      	lsls	r3, r3, #21
 80067a6:	d46a      	bmi.n	800687e <niffs_modify+0x3aa>

    niffs_page_ix new_pix;

    if (spix == 0 || avail < pdata_len) {
 80067a8:	2f00      	cmp	r7, #0
 80067aa:	d176      	bne.n	800689a <niffs_modify+0x3c6>
      // in midst of a page
      u8_t *orig_data_addr = _NIFFS_PIX_2_ADDR(fs, orig_pix);
 80067ac:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80067b0:	6a22      	ldr	r2, [r4, #32]
 80067b2:	68a0      	ldr	r0, [r4, #8]
 80067b4:	fbb1 f3f2 	udiv	r3, r1, r2
 80067b8:	fb02 1213 	mls	r2, r2, r3, r1
 80067bc:	68e1      	ldr	r1, [r4, #12]
 80067be:	434a      	muls	r2, r1
 80067c0:	fb00 2303 	mla	r3, r0, r3, r2
 80067c4:	6820      	ldr	r0, [r4, #0]
 80067c6:	3304      	adds	r3, #4
 80067c8:	4418      	add	r0, r3
      orig_data_addr += spix == 0 ? sizeof(niffs_object_hdr) : sizeof(niffs_page_hdr);
 80067ca:	2f00      	cmp	r7, #0
 80067cc:	bf14      	ite	ne
 80067ce:	2204      	movne	r2, #4
 80067d0:	221a      	moveq	r2, #26
 80067d2:	eb00 0b02 	add.w	fp, r0, r2

      if (pdata_offs > 0) {
 80067d6:	b135      	cbz	r5, 80067e6 <niffs_modify+0x312>
        // copy original start
        _NIFFS_RD(fs, &fs->buf[buf_offs], orig_data_addr, pdata_offs);
 80067d8:	9a07      	ldr	r2, [sp, #28]
 80067da:	6920      	ldr	r0, [r4, #16]
 80067dc:	4659      	mov	r1, fp
 80067de:	4410      	add	r0, r2
 80067e0:	462a      	mov	r2, r5
 80067e2:	f007 fd81 	bl	800e2e8 <memcpy>
      }

      // copy new data
      niffs_memcpy(&fs->buf[buf_offs + pdata_offs], src, avail);
 80067e6:	9b07      	ldr	r3, [sp, #28]
 80067e8:	6920      	ldr	r0, [r4, #16]
 80067ea:	442b      	add	r3, r5
 80067ec:	4418      	add	r0, r3
 80067ee:	4632      	mov	r2, r6
 80067f0:	9906      	ldr	r1, [sp, #24]
 80067f2:	9303      	str	r3, [sp, #12]
 80067f4:	f007 fd78 	bl	800e2e8 <memcpy>

      if (pdata_offs + avail < pdata_len) {
 80067f8:	9804      	ldr	r0, [sp, #16]
 80067fa:	1972      	adds	r2, r6, r5
 80067fc:	4282      	cmp	r2, r0
 80067fe:	9b03      	ldr	r3, [sp, #12]
 8006800:	d208      	bcs.n	8006814 <niffs_modify+0x340>
        // copy original end
        _NIFFS_RD(fs, &fs->buf[buf_offs + pdata_offs + avail], &orig_data_addr[pdata_offs + avail], pdata_len - (pdata_offs + avail));
 8006802:	1998      	adds	r0, r3, r6
 8006804:	6921      	ldr	r1, [r4, #16]
 8006806:	9b04      	ldr	r3, [sp, #16]
 8006808:	4408      	add	r0, r1
 800680a:	eb0b 0102 	add.w	r1, fp, r2
 800680e:	1a9a      	subs	r2, r3, r2
 8006810:	f007 fd6a 	bl	800e2e8 <memcpy>
      }

      // find dst page & move src
      res = niffs_find_free_page(fs, &new_pix, NIFFS_EXCL_SECT_NONE);
 8006814:	4620      	mov	r0, r4
 8006816:	f10d 0122 	add.w	r1, sp, #34	; 0x22
 800681a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800681e:	f7fe f8d4 	bl	80049ca <niffs_find_free_page>
      check(res);
 8006822:	4605      	mov	r5, r0
 8006824:	2800      	cmp	r0, #0
 8006826:	f43f af4d 	beq.w	80066c4 <niffs_modify+0x1f0>
 800682a:	4b3f      	ldr	r3, [pc, #252]	; (8006928 <niffs_modify+0x454>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	055e      	lsls	r6, r3, #21
 8006830:	d576      	bpl.n	8006920 <niffs_modify+0x44c>
 8006832:	4b3e      	ldr	r3, [pc, #248]	; (800692c <niffs_modify+0x458>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d172      	bne.n	8006920 <niffs_modify+0x44c>
 800683a:	f240 43a2 	movw	r3, #1186	; 0x4a2
    } else {
      // a full page
      res = niffs_find_free_page(fs, &new_pix, NIFFS_EXCL_SECT_NONE);
      check(res);
      res = niffs_move_page(fs, orig_pix, new_pix, src, avail, _NIFFS_FLAG_WRITTEN);
      check(res);
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	483b      	ldr	r0, [pc, #236]	; (8006930 <niffs_modify+0x45c>)
 8006842:	4629      	mov	r1, r5
 8006844:	4a3b      	ldr	r2, [pc, #236]	; (8006934 <niffs_modify+0x460>)
 8006846:	4b3c      	ldr	r3, [pc, #240]	; (8006938 <niffs_modify+0x464>)
 8006848:	f002 fca8 	bl	800919c <arcprint>
 800684c:	e068      	b.n	8006920 <niffs_modify+0x44c>
    check(ERR_NIFFS_MODIFY_BEYOND_FILE);
  }

  // CHECK SPACE
  niffs_span_ix start = _NIFFS_OFFS_2_SPIX(fs, offset);
  niffs_span_ix end = _NIFFS_OFFS_2_SPIX(fs, offset+len);
 800684e:	2700      	movs	r7, #0
  niffs_page_ix search_pix = fd->obj_pix;
  // operate on per page basis
  while (res == NIFFS_OK && written < len) {
    u32_t avail;
    niffs_span_ix spix = _NIFFS_OFFS_2_SPIX(fs, offset + written);
    u32_t pdata_len = _NIFFS_SPIX_2_PDATA_LEN(fs, spix);
 8006850:	201a      	movs	r0, #26
 8006852:	e771      	b.n	8006738 <niffs_modify+0x264>
    u32_t pdata_offs = _NIFFS_OFFS_2_PDATA_OFFS(fs, offset + written);
    avail = pdata_len - pdata_offs;
    avail = NIFFS_MIN(len - written, avail);

    u32_t buf_offs = 0;
 8006854:	2200      	movs	r2, #0
 8006856:	9207      	str	r2, [sp, #28]
 8006858:	e792      	b.n	8006780 <niffs_modify+0x2ac>
    }

    // find original page
    niffs_page_ix orig_pix;
    res = niffs_find_page(fs, &orig_pix, fd->obj_id, spix, search_pix);
    check(res);
 800685a:	f8db 3000 	ldr.w	r3, [fp]
 800685e:	055a      	lsls	r2, r3, #21
 8006860:	d556      	bpl.n	8006910 <niffs_modify+0x43c>
 8006862:	4b32      	ldr	r3, [pc, #200]	; (800692c <niffs_modify+0x458>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d152      	bne.n	8006910 <niffs_modify+0x43c>
 800686a:	f240 4387 	movw	r3, #1159	; 0x487
 800686e:	9300      	str	r3, [sp, #0]
 8006870:	482f      	ldr	r0, [pc, #188]	; (8006930 <niffs_modify+0x45c>)
 8006872:	4651      	mov	r1, sl
 8006874:	4a2f      	ldr	r2, [pc, #188]	; (8006934 <niffs_modify+0x460>)
 8006876:	4b30      	ldr	r3, [pc, #192]	; (8006938 <niffs_modify+0x464>)
 8006878:	f002 fc90 	bl	800919c <arcprint>
 800687c:	e048      	b.n	8006910 <niffs_modify+0x43c>
    search_pix = orig_pix;

    NIFFS_DBG("modify: pix %04x oid:%04x spix:%i offs:%i len:%i\n", orig_pix, fd->obj_id, spix, pdata_offs, avail);
 800687e:	492b      	ldr	r1, [pc, #172]	; (800692c <niffs_modify+0x458>)
 8006880:	680b      	ldr	r3, [r1, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d190      	bne.n	80067a8 <niffs_modify+0x2d4>
 8006886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006888:	482c      	ldr	r0, [pc, #176]	; (800693c <niffs_modify+0x468>)
 800688a:	781a      	ldrb	r2, [r3, #0]
 800688c:	4651      	mov	r1, sl
 800688e:	e88d 0060 	stmia.w	sp, {r5, r6}
 8006892:	463b      	mov	r3, r7
 8006894:	f002 fc82 	bl	800919c <arcprint>
 8006898:	e786      	b.n	80067a8 <niffs_modify+0x2d4>

    niffs_page_ix new_pix;

    if (spix == 0 || avail < pdata_len) {
 800689a:	9a04      	ldr	r2, [sp, #16]
 800689c:	4296      	cmp	r6, r2
 800689e:	d385      	bcc.n	80067ac <niffs_modify+0x2d8>
 80068a0:	e00a      	b.n	80068b8 <niffs_modify+0x3e4>
      // find dst page & move src
      res = niffs_find_free_page(fs, &new_pix, NIFFS_EXCL_SECT_NONE);
      check(res);
      res = niffs_move_page(fs, orig_pix, new_pix, fs->buf, pdata_len +
          (spix == 0 ? sizeof(niffs_object_hdr) - sizeof(niffs_page_hdr) : 0), _NIFFS_FLAG_WRITTEN);
      check(res);
 80068a2:	4b21      	ldr	r3, [pc, #132]	; (8006928 <niffs_modify+0x454>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	055c      	lsls	r4, r3, #21
 80068a8:	d53a      	bpl.n	8006920 <niffs_modify+0x44c>
 80068aa:	4b20      	ldr	r3, [pc, #128]	; (800692c <niffs_modify+0x458>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d136      	bne.n	8006920 <niffs_modify+0x44c>
 80068b2:	f240 43a5 	movw	r3, #1189	; 0x4a5
 80068b6:	e7c2      	b.n	800683e <niffs_modify+0x36a>
    } else {
      // a full page
      res = niffs_find_free_page(fs, &new_pix, NIFFS_EXCL_SECT_NONE);
 80068b8:	4620      	mov	r0, r4
 80068ba:	f10d 0122 	add.w	r1, sp, #34	; 0x22
 80068be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068c2:	f7fe f882 	bl	80049ca <niffs_find_free_page>
      check(res);
 80068c6:	4605      	mov	r5, r0
 80068c8:	b148      	cbz	r0, 80068de <niffs_modify+0x40a>
 80068ca:	f8db 3000 	ldr.w	r3, [fp]
 80068ce:	0558      	lsls	r0, r3, #21
 80068d0:	d526      	bpl.n	8006920 <niffs_modify+0x44c>
 80068d2:	4b16      	ldr	r3, [pc, #88]	; (800692c <niffs_modify+0x458>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	bb1b      	cbnz	r3, 8006920 <niffs_modify+0x44c>
 80068d8:	f240 43a9 	movw	r3, #1193	; 0x4a9
 80068dc:	e7af      	b.n	800683e <niffs_modify+0x36a>
      res = niffs_move_page(fs, orig_pix, new_pix, src, avail, _NIFFS_FLAG_WRITTEN);
 80068de:	2301      	movs	r3, #1
 80068e0:	9301      	str	r3, [sp, #4]
 80068e2:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80068e6:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80068ea:	9600      	str	r6, [sp, #0]
 80068ec:	4620      	mov	r0, r4
 80068ee:	9b06      	ldr	r3, [sp, #24]
 80068f0:	f7fd f918 	bl	8003b24 <niffs_move_page>
      check(res);
 80068f4:	4605      	mov	r5, r0
 80068f6:	2800      	cmp	r0, #0
 80068f8:	f43f aef9 	beq.w	80066ee <niffs_modify+0x21a>
 80068fc:	f8db 3000 	ldr.w	r3, [fp]
 8006900:	0559      	lsls	r1, r3, #21
 8006902:	d50d      	bpl.n	8006920 <niffs_modify+0x44c>
 8006904:	4b09      	ldr	r3, [pc, #36]	; (800692c <niffs_modify+0x458>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	b953      	cbnz	r3, 8006920 <niffs_modify+0x44c>
 800690a:	f240 43ab 	movw	r3, #1195	; 0x4ab
 800690e:	e796      	b.n	800683e <niffs_modify+0x36a>
      buf_offs = sizeof(niffs_object_hdr) - sizeof(niffs_page_hdr);
    }

    // find original page
    niffs_page_ix orig_pix;
    res = niffs_find_page(fs, &orig_pix, fd->obj_id, spix, search_pix);
 8006910:	4650      	mov	r0, sl
 8006912:	e006      	b.n	8006922 <niffs_modify+0x44e>
  niffs_file_desc *fd;
  res = niffs_get_filedesc(fs, fd_ix, &fd);
  check(res);

  if ((fd->flags & NIFFS_O_WRONLY) == 0) {
    check(ERR_NIFFS_NOT_WRITABLE);
 8006914:	480a      	ldr	r0, [pc, #40]	; (8006940 <niffs_modify+0x46c>)
 8006916:	e004      	b.n	8006922 <niffs_modify+0x44e>
  }
  if (fd->type == _NIFFS_FTYPE_LINFILE) {
    check(ERR_NIFFS_LINEAR_FILE); // only append and full delete is allowed for linears
 8006918:	480a      	ldr	r0, [pc, #40]	; (8006944 <niffs_modify+0x470>)
 800691a:	e002      	b.n	8006922 <niffs_modify+0x44e>
  niffs_object_hdr *orig_ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);
  niffs_page_ix orig_obj_pix = fd->obj_pix;
  if (orig_ohdr->phdr.id.obj_id != fd->obj_id) check(ERR_NIFFS_INCOHERENT_ID);
  u32_t file_offs = orig_ohdr->len == NIFFS_UNDEF_LEN ? 0 : orig_ohdr->len;
  if (offset + len > file_offs) {
    check(ERR_NIFFS_MODIFY_BEYOND_FILE);
 800691c:	480a      	ldr	r0, [pc, #40]	; (8006948 <niffs_modify+0x474>)
 800691e:	e000      	b.n	8006922 <niffs_modify+0x44e>
 8006920:	4628      	mov	r0, r5
    fd->offs += written;
    fd->cur_pix = new_pix;
  }

  return res;
}
 8006922:	b00b      	add	sp, #44	; 0x2c
 8006924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006928:	20004f80 	.word	0x20004f80
 800692c:	20004f84 	.word	0x20004f84
 8006930:	08010535 	.word	0x08010535
 8006934:	0800ea17 	.word	0x0800ea17
 8006938:	0801054b 	.word	0x0801054b
 800693c:	08010e9a 	.word	0x08010e9a
 8006940:	ffffd4e7 	.word	0xffffd4e7
 8006944:	ffffd4e3 	.word	0xffffd4e3
 8006948:	ffffd4ee 	.word	0xffffd4ee

0800694c <niffs_truncate>:
    }
  }
  return NIFFS_VIS_CONT;
}

int niffs_truncate(niffs *fs, int fd_ix, u32_t new_len) {
 800694c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006950:	b086      	sub	sp, #24
 8006952:	4615      	mov	r5, r2
  int res = NIFFS_OK;

  niffs_file_desc *fd;
  res = niffs_get_filedesc(fs, fd_ix, &fd);
 8006954:	aa04      	add	r2, sp, #16
    }
  }
  return NIFFS_VIS_CONT;
}

int niffs_truncate(niffs *fs, int fd_ix, u32_t new_len) {
 8006956:	4604      	mov	r4, r0
  int res = NIFFS_OK;

  niffs_file_desc *fd;
  res = niffs_get_filedesc(fs, fd_ix, &fd);
 8006958:	f7fe fa3c 	bl	8004dd4 <niffs_get_filedesc>
  check(res);
 800695c:	4606      	mov	r6, r0
 800695e:	b150      	cbz	r0, 8006976 <niffs_truncate+0x2a>
 8006960:	4b98      	ldr	r3, [pc, #608]	; (8006bc4 <niffs_truncate+0x278>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	055a      	lsls	r2, r3, #21
 8006966:	d569      	bpl.n	8006a3c <niffs_truncate+0xf0>
 8006968:	4b97      	ldr	r3, [pc, #604]	; (8006bc8 <niffs_truncate+0x27c>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d165      	bne.n	8006a3c <niffs_truncate+0xf0>
 8006970:	f240 43cf 	movw	r3, #1231	; 0x4cf
 8006974:	e05b      	b.n	8006a2e <niffs_truncate+0xe2>

  if ((fd->flags & NIFFS_O_WRONLY) == 0) {
 8006976:	9a04      	ldr	r2, [sp, #16]
 8006978:	7b93      	ldrb	r3, [r2, #14]
 800697a:	06db      	lsls	r3, r3, #27
 800697c:	d411      	bmi.n	80069a2 <niffs_truncate+0x56>
    check(ERR_NIFFS_NOT_WRITABLE);
 800697e:	4b91      	ldr	r3, [pc, #580]	; (8006bc4 <niffs_truncate+0x278>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	055f      	lsls	r7, r3, #21
 8006984:	d55c      	bpl.n	8006a40 <niffs_truncate+0xf4>
 8006986:	4b90      	ldr	r3, [pc, #576]	; (8006bc8 <niffs_truncate+0x27c>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d158      	bne.n	8006a40 <niffs_truncate+0xf4>
 800698e:	f240 43d2 	movw	r3, #1234	; 0x4d2
 8006992:	9300      	str	r3, [sp, #0]
 8006994:	488d      	ldr	r0, [pc, #564]	; (8006bcc <niffs_truncate+0x280>)
 8006996:	498e      	ldr	r1, [pc, #568]	; (8006bd0 <niffs_truncate+0x284>)
 8006998:	4a8e      	ldr	r2, [pc, #568]	; (8006bd4 <niffs_truncate+0x288>)
 800699a:	4b8f      	ldr	r3, [pc, #572]	; (8006bd8 <niffs_truncate+0x28c>)
 800699c:	f002 fbfe 	bl	800919c <arcprint>
 80069a0:	e04e      	b.n	8006a40 <niffs_truncate+0xf4>
  }
  if (fd->type == _NIFFS_FTYPE_LINFILE && new_len != 0) {
 80069a2:	7913      	ldrb	r3, [r2, #4]
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d112      	bne.n	80069ce <niffs_truncate+0x82>
 80069a8:	b18d      	cbz	r5, 80069ce <niffs_truncate+0x82>
    check(ERR_NIFFS_LINEAR_FILE); // only append and full delete is allowed for linears
 80069aa:	4b86      	ldr	r3, [pc, #536]	; (8006bc4 <niffs_truncate+0x278>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	055e      	lsls	r6, r3, #21
 80069b0:	d548      	bpl.n	8006a44 <niffs_truncate+0xf8>
 80069b2:	4b85      	ldr	r3, [pc, #532]	; (8006bc8 <niffs_truncate+0x27c>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d144      	bne.n	8006a44 <niffs_truncate+0xf8>
 80069ba:	f240 43d5 	movw	r3, #1237	; 0x4d5
 80069be:	9300      	str	r3, [sp, #0]
 80069c0:	4882      	ldr	r0, [pc, #520]	; (8006bcc <niffs_truncate+0x280>)
 80069c2:	4986      	ldr	r1, [pc, #536]	; (8006bdc <niffs_truncate+0x290>)
 80069c4:	4a83      	ldr	r2, [pc, #524]	; (8006bd4 <niffs_truncate+0x288>)
 80069c6:	4b84      	ldr	r3, [pc, #528]	; (8006bd8 <niffs_truncate+0x28c>)
 80069c8:	f002 fbe8 	bl	800919c <arcprint>
 80069cc:	e03a      	b.n	8006a44 <niffs_truncate+0xf8>
  }

  niffs_page_ix orig_ohdr_pix = fd->obj_pix;
 80069ce:	f8b2 8002 	ldrh.w	r8, [r2, #2]
  niffs_object_hdr *orig_ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);
 80069d2:	6a21      	ldr	r1, [r4, #32]
 80069d4:	68e6      	ldr	r6, [r4, #12]
 80069d6:	fbb8 f3f1 	udiv	r3, r8, r1
 80069da:	fb01 8713 	mls	r7, r1, r3, r8
 80069de:	4377      	muls	r7, r6
 80069e0:	68a0      	ldr	r0, [r4, #8]
  u32_t flen = orig_ohdr->len == NIFFS_UNDEF_LEN ? 0 : orig_ohdr->len;
  if (orig_ohdr->phdr.id.obj_id != fd->obj_id) res = ERR_NIFFS_INCOHERENT_ID;
 80069e2:	7812      	ldrb	r2, [r2, #0]
  if (fd->type == _NIFFS_FTYPE_LINFILE && new_len != 0) {
    check(ERR_NIFFS_LINEAR_FILE); // only append and full delete is allowed for linears
  }

  niffs_page_ix orig_ohdr_pix = fd->obj_pix;
  niffs_object_hdr *orig_ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);
 80069e4:	fb00 7703 	mla	r7, r0, r3, r7
 80069e8:	6820      	ldr	r0, [r4, #0]
 80069ea:	3704      	adds	r7, #4
 80069ec:	4407      	add	r7, r0
  u32_t flen = orig_ohdr->len == NIFFS_UNDEF_LEN ? 0 : orig_ohdr->len;
 80069ee:	687b      	ldr	r3, [r7, #4]
  if (orig_ohdr->phdr.id.obj_id != fd->obj_id) res = ERR_NIFFS_INCOHERENT_ID;
 80069f0:	7879      	ldrb	r1, [r7, #1]
    check(ERR_NIFFS_LINEAR_FILE); // only append and full delete is allowed for linears
  }

  niffs_page_ix orig_ohdr_pix = fd->obj_pix;
  niffs_object_hdr *orig_ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);
  u32_t flen = orig_ohdr->len == NIFFS_UNDEF_LEN ? 0 : orig_ohdr->len;
 80069f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069f6:	bf08      	it	eq
 80069f8:	2300      	moveq	r3, #0
  if (orig_ohdr->phdr.id.obj_id != fd->obj_id) res = ERR_NIFFS_INCOHERENT_ID;
 80069fa:	4291      	cmp	r1, r2
 80069fc:	d124      	bne.n	8006a48 <niffs_truncate+0xfc>
  else if (new_len > flen) res = ERR_NIFFS_TRUNCATE_BEYOND_FILE;
 80069fe:	429d      	cmp	r5, r3
 8006a00:	d901      	bls.n	8006a06 <niffs_truncate+0xba>
 8006a02:	4c77      	ldr	r4, [pc, #476]	; (8006be0 <niffs_truncate+0x294>)
 8006a04:	e021      	b.n	8006a4a <niffs_truncate+0xfe>
  check(res);
  if (new_len != 0 && new_len == flen) {
 8006a06:	2d00      	cmp	r5, #0
 8006a08:	d02c      	beq.n	8006a64 <niffs_truncate+0x118>
 8006a0a:	429d      	cmp	r5, r3
 8006a0c:	f000 80d8 	beq.w	8006bc0 <niffs_truncate+0x274>
  // CHECK SPACE
  if (new_len == 0) {
    // no need to allocate a new page, just remove the lot
  } else {
    // one extra for new object header
    res = niffs_ensure_free_pages(fs, 1);
 8006a10:	4620      	mov	r0, r4
 8006a12:	2101      	movs	r1, #1
 8006a14:	f7fe ff10 	bl	8005838 <niffs_ensure_free_pages>
    check(res);
 8006a18:	4606      	mov	r6, r0
 8006a1a:	b318      	cbz	r0, 8006a64 <niffs_truncate+0x118>
 8006a1c:	4b69      	ldr	r3, [pc, #420]	; (8006bc4 <niffs_truncate+0x278>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	055d      	lsls	r5, r3, #21
 8006a22:	d50b      	bpl.n	8006a3c <niffs_truncate+0xf0>
 8006a24:	4b68      	ldr	r3, [pc, #416]	; (8006bc8 <niffs_truncate+0x27c>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	b943      	cbnz	r3, 8006a3c <niffs_truncate+0xf0>
 8006a2a:	f44f 639d 	mov.w	r3, #1256	; 0x4e8
 8006a2e:	9300      	str	r3, [sp, #0]
 8006a30:	4866      	ldr	r0, [pc, #408]	; (8006bcc <niffs_truncate+0x280>)
 8006a32:	4631      	mov	r1, r6
 8006a34:	4a67      	ldr	r2, [pc, #412]	; (8006bd4 <niffs_truncate+0x288>)
 8006a36:	4b68      	ldr	r3, [pc, #416]	; (8006bd8 <niffs_truncate+0x28c>)
 8006a38:	f002 fbb0 	bl	800919c <arcprint>
 8006a3c:	4630      	mov	r0, r6
 8006a3e:	e14b      	b.n	8006cd8 <niffs_truncate+0x38c>
  niffs_file_desc *fd;
  res = niffs_get_filedesc(fs, fd_ix, &fd);
  check(res);

  if ((fd->flags & NIFFS_O_WRONLY) == 0) {
    check(ERR_NIFFS_NOT_WRITABLE);
 8006a40:	4863      	ldr	r0, [pc, #396]	; (8006bd0 <niffs_truncate+0x284>)
 8006a42:	e149      	b.n	8006cd8 <niffs_truncate+0x38c>
  }
  if (fd->type == _NIFFS_FTYPE_LINFILE && new_len != 0) {
    check(ERR_NIFFS_LINEAR_FILE); // only append and full delete is allowed for linears
 8006a44:	4865      	ldr	r0, [pc, #404]	; (8006bdc <niffs_truncate+0x290>)
 8006a46:	e147      	b.n	8006cd8 <niffs_truncate+0x38c>
  }

  niffs_page_ix orig_ohdr_pix = fd->obj_pix;
  niffs_object_hdr *orig_ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);
  u32_t flen = orig_ohdr->len == NIFFS_UNDEF_LEN ? 0 : orig_ohdr->len;
  if (orig_ohdr->phdr.id.obj_id != fd->obj_id) res = ERR_NIFFS_INCOHERENT_ID;
 8006a48:	4c66      	ldr	r4, [pc, #408]	; (8006be4 <niffs_truncate+0x298>)
  else if (new_len > flen) res = ERR_NIFFS_TRUNCATE_BEYOND_FILE;
  check(res);
 8006a4a:	4b5e      	ldr	r3, [pc, #376]	; (8006bc4 <niffs_truncate+0x278>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	055d      	lsls	r5, r3, #21
 8006a50:	f140 80b4 	bpl.w	8006bbc <niffs_truncate+0x270>
 8006a54:	4b5c      	ldr	r3, [pc, #368]	; (8006bc8 <niffs_truncate+0x27c>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f040 80af 	bne.w	8006bbc <niffs_truncate+0x270>
 8006a5e:	f240 43dd 	movw	r3, #1245	; 0x4dd
 8006a62:	e029      	b.n	8006ab8 <niffs_truncate+0x16c>
    res = niffs_ensure_free_pages(fs, 1);
    check(res);
  }

  // repopulate if moved by gc
  if (fd->obj_pix != orig_ohdr_pix) {
 8006a64:	9a04      	ldr	r2, [sp, #16]
 8006a66:	4e57      	ldr	r6, [pc, #348]	; (8006bc4 <niffs_truncate+0x278>)
 8006a68:	8853      	ldrh	r3, [r2, #2]
 8006a6a:	4543      	cmp	r3, r8
 8006a6c:	f040 80c0 	bne.w	8006bf0 <niffs_truncate+0x2a4>
    orig_ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);
    if (orig_ohdr->phdr.id.obj_id != fd->obj_id) res = ERR_NIFFS_INCOHERENT_ID;
  }
  check(res);

  NIFFS_DBG("trunc : make oid %04x %i bytes\n", orig_ohdr->phdr.id.obj_id, new_len);
 8006a70:	6833      	ldr	r3, [r6, #0]
 8006a72:	0558      	lsls	r0, r3, #21
 8006a74:	d507      	bpl.n	8006a86 <niffs_truncate+0x13a>
 8006a76:	4b54      	ldr	r3, [pc, #336]	; (8006bc8 <niffs_truncate+0x27c>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	b923      	cbnz	r3, 8006a86 <niffs_truncate+0x13a>
 8006a7c:	485a      	ldr	r0, [pc, #360]	; (8006be8 <niffs_truncate+0x29c>)
 8006a7e:	7879      	ldrb	r1, [r7, #1]
 8006a80:	462a      	mov	r2, r5
 8006a82:	f002 fb8b 	bl	800919c <arcprint>
 8006a86:	9b04      	ldr	r3, [sp, #16]

  // MARK HEADER
  if (new_len) {
 8006a88:	b9f5      	cbnz	r5, 8006ac8 <niffs_truncate+0x17c>
    // move header page, rewrite length data
    res = niffs_move_page(fs, fd->obj_pix, new_pix, fs->buf + sizeof(niffs_page_hdr), fs->page_size - sizeof(niffs_page_hdr), _NIFFS_FLAG_WRITTEN);
    check(res);
  } else {
    // removing, zero length
    if (fd->type ==_NIFFS_FTYPE_LINFILE) {
 8006a8a:	791a      	ldrb	r2, [r3, #4]
 8006a8c:	8859      	ldrh	r1, [r3, #2]
 8006a8e:	2a01      	cmp	r2, #1
 8006a90:	f040 80dd 	bne.w	8006c4e <niffs_truncate+0x302>
      // linear files: just erase header, sectors are lazily erased when overwritten
      res = niffs_delete_page(fs, fd->obj_pix);
 8006a94:	4620      	mov	r0, r4
 8006a96:	f7fc ff2e 	bl	80038f6 <niffs_delete_page>
      check(res);
 8006a9a:	4604      	mov	r4, r0
 8006a9c:	2800      	cmp	r0, #0
 8006a9e:	f000 808f 	beq.w	8006bc0 <niffs_truncate+0x274>
 8006aa2:	6833      	ldr	r3, [r6, #0]
 8006aa4:	055a      	lsls	r2, r3, #21
 8006aa6:	f140 8089 	bpl.w	8006bbc <niffs_truncate+0x270>
 8006aaa:	4b47      	ldr	r3, [pc, #284]	; (8006bc8 <niffs_truncate+0x27c>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f040 8084 	bne.w	8006bbc <niffs_truncate+0x270>
 8006ab4:	f240 530d 	movw	r3, #1293	; 0x50d
  if (res == NIFFS_VIS_END) res = NIFFS_OK;

  if (res == NIFFS_OK && new_len == 0) {
    // remove header
    res = niffs_delete_page(fs, fd->obj_pix);
    check(res);
 8006ab8:	9300      	str	r3, [sp, #0]
 8006aba:	4844      	ldr	r0, [pc, #272]	; (8006bcc <niffs_truncate+0x280>)
 8006abc:	4621      	mov	r1, r4
 8006abe:	4a45      	ldr	r2, [pc, #276]	; (8006bd4 <niffs_truncate+0x288>)
 8006ac0:	4b45      	ldr	r3, [pc, #276]	; (8006bd8 <niffs_truncate+0x28c>)
 8006ac2:	f002 fb6b 	bl	800919c <arcprint>
 8006ac6:	e079      	b.n	8006bbc <niffs_truncate+0x270>
  NIFFS_DBG("trunc : make oid %04x %i bytes\n", orig_ohdr->phdr.id.obj_id, new_len);

  // MARK HEADER
  if (new_len) {
    // changing existing file - write flag, mark obj header as MOVI
    niffs_flag flag = _NIFFS_FLAG_MOVING;
 8006ac8:	a906      	add	r1, sp, #24
 8006aca:	2200      	movs	r2, #0
    res = fs->hal_wr((u8_t *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix) + offsetof(niffs_object_hdr, phdr) + offsetof(niffs_page_hdr, flag), (u8_t *)&flag, sizeof(niffs_flag));
 8006acc:	8858      	ldrh	r0, [r3, #2]
  NIFFS_DBG("trunc : make oid %04x %i bytes\n", orig_ohdr->phdr.id.obj_id, new_len);

  // MARK HEADER
  if (new_len) {
    // changing existing file - write flag, mark obj header as MOVI
    niffs_flag flag = _NIFFS_FLAG_MOVING;
 8006ace:	f821 2d0a 	strh.w	r2, [r1, #-10]!
    res = fs->hal_wr((u8_t *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix) + offsetof(niffs_object_hdr, phdr) + offsetof(niffs_page_hdr, flag), (u8_t *)&flag, sizeof(niffs_flag));
 8006ad2:	6a22      	ldr	r2, [r4, #32]
 8006ad4:	68a7      	ldr	r7, [r4, #8]
 8006ad6:	fbb0 f3f2 	udiv	r3, r0, r2
 8006ada:	fb02 0013 	mls	r0, r2, r3, r0
 8006ade:	68e2      	ldr	r2, [r4, #12]
 8006ae0:	4350      	muls	r0, r2
 8006ae2:	fb07 0303 	mla	r3, r7, r3, r0
 8006ae6:	1d98      	adds	r0, r3, #6
 8006ae8:	6823      	ldr	r3, [r4, #0]
 8006aea:	69a7      	ldr	r7, [r4, #24]
 8006aec:	4418      	add	r0, r3
 8006aee:	2202      	movs	r2, #2
 8006af0:	47b8      	blx	r7
    check(res);
 8006af2:	4607      	mov	r7, r0
 8006af4:	2800      	cmp	r0, #0
 8006af6:	f040 808d 	bne.w	8006c14 <niffs_truncate+0x2c8>

    // rewrite new object header, new length
    niffs_page_ix new_pix;
    res = niffs_find_free_page(fs, &new_pix, NIFFS_EXCL_SECT_NONE);
 8006afa:	4620      	mov	r0, r4
 8006afc:	a905      	add	r1, sp, #20
 8006afe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b02:	f7fd ff62 	bl	80049ca <niffs_find_free_page>
    check(res);
 8006b06:	4607      	mov	r7, r0
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	f040 808d 	bne.w	8006c28 <niffs_truncate+0x2dc>

    // copy from old hdr
    _NIFFS_RD(fs, fs->buf, _NIFFS_PIX_2_ADDR(fs, fd->obj_pix), fs->page_size);
 8006b0e:	9b04      	ldr	r3, [sp, #16]
 8006b10:	6a21      	ldr	r1, [r4, #32]
 8006b12:	8858      	ldrh	r0, [r3, #2]
 8006b14:	68e2      	ldr	r2, [r4, #12]
 8006b16:	fbb0 f3f1 	udiv	r3, r0, r1
 8006b1a:	fb01 0113 	mls	r1, r1, r3, r0
 8006b1e:	4351      	muls	r1, r2
 8006b20:	68a7      	ldr	r7, [r4, #8]
 8006b22:	6920      	ldr	r0, [r4, #16]
 8006b24:	fb07 1303 	mla	r3, r7, r3, r1
 8006b28:	6827      	ldr	r7, [r4, #0]
 8006b2a:	1d19      	adds	r1, r3, #4
 8006b2c:	4439      	add	r1, r7
 8006b2e:	f007 fbdb 	bl	800e2e8 <memcpy>

    ((niffs_object_hdr *)fs->buf)->len = new_len;

    // move header page, rewrite length data
    res = niffs_move_page(fs, fd->obj_pix, new_pix, fs->buf + sizeof(niffs_page_hdr), fs->page_size - sizeof(niffs_page_hdr), _NIFFS_FLAG_WRITTEN);
 8006b32:	68e0      	ldr	r0, [r4, #12]
    check(res);

    // copy from old hdr
    _NIFFS_RD(fs, fs->buf, _NIFFS_PIX_2_ADDR(fs, fd->obj_pix), fs->page_size);

    ((niffs_object_hdr *)fs->buf)->len = new_len;
 8006b34:	6923      	ldr	r3, [r4, #16]

    // move header page, rewrite length data
    res = niffs_move_page(fs, fd->obj_pix, new_pix, fs->buf + sizeof(niffs_page_hdr), fs->page_size - sizeof(niffs_page_hdr), _NIFFS_FLAG_WRITTEN);
 8006b36:	9a04      	ldr	r2, [sp, #16]
 8006b38:	3804      	subs	r0, #4
 8006b3a:	8851      	ldrh	r1, [r2, #2]
    check(res);

    // copy from old hdr
    _NIFFS_RD(fs, fs->buf, _NIFFS_PIX_2_ADDR(fs, fd->obj_pix), fs->page_size);

    ((niffs_object_hdr *)fs->buf)->len = new_len;
 8006b3c:	f843 5f04 	str.w	r5, [r3, #4]!

    // move header page, rewrite length data
    res = niffs_move_page(fs, fd->obj_pix, new_pix, fs->buf + sizeof(niffs_page_hdr), fs->page_size - sizeof(niffs_page_hdr), _NIFFS_FLAG_WRITTEN);
 8006b40:	9000      	str	r0, [sp, #0]
 8006b42:	2001      	movs	r0, #1
 8006b44:	9001      	str	r0, [sp, #4]
 8006b46:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	f7fc ffea 	bl	8003b24 <niffs_move_page>
    check(res);
 8006b50:	4607      	mov	r7, r0
 8006b52:	2800      	cmp	r0, #0
 8006b54:	d172      	bne.n	8006c3c <niffs_truncate+0x2f0>
      check(res);
    }
  }

  // REMOVE PAGES
  niffs_span_ix del_start_spix = _NIFFS_OFFS_2_SPIX(fs, new_len);
 8006b56:	68e3      	ldr	r3, [r4, #12]
 8006b58:	f1a3 021e 	sub.w	r2, r3, #30
 8006b5c:	4295      	cmp	r5, r2
 8006b5e:	f0c0 80a0 	bcc.w	8006ca2 <niffs_truncate+0x356>
 8006b62:	f1c3 001e 	rsb	r0, r3, #30
 8006b66:	1f19      	subs	r1, r3, #4
 8006b68:	4428      	add	r0, r5
 8006b6a:	fbb0 f2f1 	udiv	r2, r0, r1
 8006b6e:	1c53      	adds	r3, r2, #1

  if (_NIFFS_OFFS_2_PDATA_OFFS(fs, new_len) || del_start_spix == 0) {
 8006b70:	fb01 0212 	mls	r2, r1, r2, r0
      check(res);
    }
  }

  // REMOVE PAGES
  niffs_span_ix del_start_spix = _NIFFS_OFFS_2_SPIX(fs, new_len);
 8006b74:	b2db      	uxtb	r3, r3

  if (_NIFFS_OFFS_2_PDATA_OFFS(fs, new_len) || del_start_spix == 0) {
 8006b76:	2a00      	cmp	r2, #0
 8006b78:	f040 8094 	bne.w	8006ca4 <niffs_truncate+0x358>
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f000 8091 	beq.w	8006ca4 <niffs_truncate+0x358>
    del_start_spix++;
  }

  niffs_remove_obj_id_arg trunc_arg = {
      .oid = fd->obj_id,
 8006b82:	9a04      	ldr	r2, [sp, #16]
      .ge_spix = del_start_spix
  };

  // might seem unnecessary when spix > EOF, but this is a part of cleaning away garbage as well
  res = niffs_traverse(fs, 0, 0, niffs_remove_obj_id_v, &trunc_arg);
 8006b84:	2100      	movs	r1, #0

  if (_NIFFS_OFFS_2_PDATA_OFFS(fs, new_len) || del_start_spix == 0) {
    del_start_spix++;
  }

  niffs_remove_obj_id_arg trunc_arg = {
 8006b86:	7812      	ldrb	r2, [r2, #0]
 8006b88:	f88d 3015 	strb.w	r3, [sp, #21]
      .oid = fd->obj_id,
      .ge_spix = del_start_spix
  };

  // might seem unnecessary when spix > EOF, but this is a part of cleaning away garbage as well
  res = niffs_traverse(fs, 0, 0, niffs_remove_obj_id_v, &trunc_arg);
 8006b8c:	ab05      	add	r3, sp, #20

  if (_NIFFS_OFFS_2_PDATA_OFFS(fs, new_len) || del_start_spix == 0) {
    del_start_spix++;
  }

  niffs_remove_obj_id_arg trunc_arg = {
 8006b8e:	f88d 2014 	strb.w	r2, [sp, #20]
      .oid = fd->obj_id,
      .ge_spix = del_start_spix
  };

  // might seem unnecessary when spix > EOF, but this is a part of cleaning away garbage as well
  res = niffs_traverse(fs, 0, 0, niffs_remove_obj_id_v, &trunc_arg);
 8006b92:	9300      	str	r3, [sp, #0]
 8006b94:	4620      	mov	r0, r4
 8006b96:	4b15      	ldr	r3, [pc, #84]	; (8006bec <niffs_truncate+0x2a0>)
 8006b98:	460a      	mov	r2, r1
 8006b9a:	f7fd fee9 	bl	8004970 <niffs_traverse>
  if (res == NIFFS_VIS_END) res = NIFFS_OK;

  if (res == NIFFS_OK && new_len == 0) {
 8006b9e:	f030 0302 	bics.w	r3, r0, #2
 8006ba2:	f040 8099 	bne.w	8006cd8 <niffs_truncate+0x38c>
 8006ba6:	b95d      	cbnz	r5, 8006bc0 <niffs_truncate+0x274>
    // remove header
    res = niffs_delete_page(fs, fd->obj_pix);
 8006ba8:	9b04      	ldr	r3, [sp, #16]
 8006baa:	4620      	mov	r0, r4
 8006bac:	8859      	ldrh	r1, [r3, #2]
 8006bae:	f7fc fea2 	bl	80038f6 <niffs_delete_page>
    check(res);
 8006bb2:	4604      	mov	r4, r0
 8006bb4:	b120      	cbz	r0, 8006bc0 <niffs_truncate+0x274>
 8006bb6:	6833      	ldr	r3, [r6, #0]
 8006bb8:	055e      	lsls	r6, r3, #21
 8006bba:	d476      	bmi.n	8006caa <niffs_truncate+0x35e>
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	e08b      	b.n	8006cd8 <niffs_truncate+0x38c>
  u32_t flen = orig_ohdr->len == NIFFS_UNDEF_LEN ? 0 : orig_ohdr->len;
  if (orig_ohdr->phdr.id.obj_id != fd->obj_id) res = ERR_NIFFS_INCOHERENT_ID;
  else if (new_len > flen) res = ERR_NIFFS_TRUNCATE_BEYOND_FILE;
  check(res);
  if (new_len != 0 && new_len == flen) {
    return NIFFS_OK;
 8006bc0:	2000      	movs	r0, #0
 8006bc2:	e089      	b.n	8006cd8 <niffs_truncate+0x38c>
 8006bc4:	20004f80 	.word	0x20004f80
 8006bc8:	20004f84 	.word	0x20004f84
 8006bcc:	08010535 	.word	0x08010535
 8006bd0:	ffffd4e7 	.word	0xffffd4e7
 8006bd4:	0800ea24 	.word	0x0800ea24
 8006bd8:	0801054b 	.word	0x0801054b
 8006bdc:	ffffd4e3 	.word	0xffffd4e3
 8006be0:	ffffd4ed 	.word	0xffffd4ed
 8006be4:	ffffd4f1 	.word	0xffffd4f1
 8006be8:	08010ecc 	.word	0x08010ecc
 8006bec:	08004655 	.word	0x08004655
    check(res);
  }

  // repopulate if moved by gc
  if (fd->obj_pix != orig_ohdr_pix) {
    orig_ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);
 8006bf0:	6a20      	ldr	r0, [r4, #32]
 8006bf2:	68e7      	ldr	r7, [r4, #12]
 8006bf4:	fbb3 f1f0 	udiv	r1, r3, r0
 8006bf8:	fb00 3311 	mls	r3, r0, r1, r3
 8006bfc:	435f      	muls	r7, r3
 8006bfe:	68a3      	ldr	r3, [r4, #8]
 8006c00:	fb03 7701 	mla	r7, r3, r1, r7
 8006c04:	6821      	ldr	r1, [r4, #0]
 8006c06:	3704      	adds	r7, #4
 8006c08:	440f      	add	r7, r1
    if (orig_ohdr->phdr.id.obj_id != fd->obj_id) res = ERR_NIFFS_INCOHERENT_ID;
 8006c0a:	7879      	ldrb	r1, [r7, #1]
 8006c0c:	7813      	ldrb	r3, [r2, #0]
 8006c0e:	4299      	cmp	r1, r3
 8006c10:	d152      	bne.n	8006cb8 <niffs_truncate+0x36c>
 8006c12:	e72d      	b.n	8006a70 <niffs_truncate+0x124>
  // MARK HEADER
  if (new_len) {
    // changing existing file - write flag, mark obj header as MOVI
    niffs_flag flag = _NIFFS_FLAG_MOVING;
    res = fs->hal_wr((u8_t *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix) + offsetof(niffs_object_hdr, phdr) + offsetof(niffs_page_hdr, flag), (u8_t *)&flag, sizeof(niffs_flag));
    check(res);
 8006c14:	6833      	ldr	r3, [r6, #0]
 8006c16:	055c      	lsls	r4, r3, #21
 8006c18:	d541      	bpl.n	8006c9e <niffs_truncate+0x352>
 8006c1a:	4b31      	ldr	r3, [pc, #196]	; (8006ce0 <niffs_truncate+0x394>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d13d      	bne.n	8006c9e <niffs_truncate+0x352>
 8006c22:	f240 43f9 	movw	r3, #1273	; 0x4f9
 8006c26:	e033      	b.n	8006c90 <niffs_truncate+0x344>

    // rewrite new object header, new length
    niffs_page_ix new_pix;
    res = niffs_find_free_page(fs, &new_pix, NIFFS_EXCL_SECT_NONE);
    check(res);
 8006c28:	6833      	ldr	r3, [r6, #0]
 8006c2a:	0558      	lsls	r0, r3, #21
 8006c2c:	d537      	bpl.n	8006c9e <niffs_truncate+0x352>
 8006c2e:	4b2c      	ldr	r3, [pc, #176]	; (8006ce0 <niffs_truncate+0x394>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d133      	bne.n	8006c9e <niffs_truncate+0x352>
 8006c36:	f240 43fe 	movw	r3, #1278	; 0x4fe
 8006c3a:	e029      	b.n	8006c90 <niffs_truncate+0x344>

    ((niffs_object_hdr *)fs->buf)->len = new_len;

    // move header page, rewrite length data
    res = niffs_move_page(fs, fd->obj_pix, new_pix, fs->buf + sizeof(niffs_page_hdr), fs->page_size - sizeof(niffs_page_hdr), _NIFFS_FLAG_WRITTEN);
    check(res);
 8006c3c:	6833      	ldr	r3, [r6, #0]
 8006c3e:	0559      	lsls	r1, r3, #21
 8006c40:	d52d      	bpl.n	8006c9e <niffs_truncate+0x352>
 8006c42:	4b27      	ldr	r3, [pc, #156]	; (8006ce0 <niffs_truncate+0x394>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	bb53      	cbnz	r3, 8006c9e <niffs_truncate+0x352>
 8006c48:	f240 5307 	movw	r3, #1287	; 0x507
 8006c4c:	e020      	b.n	8006c90 <niffs_truncate+0x344>
      res = niffs_delete_page(fs, fd->obj_pix);
      check(res);
      return res;
    } else {
      u32_t length = 0;
      res = fs->hal_wr((u8_t *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix) + offsetof(niffs_object_hdr, len), (u8_t *)&length, sizeof(u32_t));
 8006c4e:	6a20      	ldr	r0, [r4, #32]
 8006c50:	68a7      	ldr	r7, [r4, #8]
 8006c52:	fbb1 f2f0 	udiv	r2, r1, r0
 8006c56:	fb00 1012 	mls	r0, r0, r2, r1
 8006c5a:	68e1      	ldr	r1, [r4, #12]
      // linear files: just erase header, sectors are lazily erased when overwritten
      res = niffs_delete_page(fs, fd->obj_pix);
      check(res);
      return res;
    } else {
      u32_t length = 0;
 8006c5c:	ab06      	add	r3, sp, #24
      res = fs->hal_wr((u8_t *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix) + offsetof(niffs_object_hdr, len), (u8_t *)&length, sizeof(u32_t));
 8006c5e:	4348      	muls	r0, r1
 8006c60:	fb07 0202 	mla	r2, r7, r2, r0
 8006c64:	f102 0008 	add.w	r0, r2, #8
 8006c68:	6822      	ldr	r2, [r4, #0]
      // linear files: just erase header, sectors are lazily erased when overwritten
      res = niffs_delete_page(fs, fd->obj_pix);
      check(res);
      return res;
    } else {
      u32_t length = 0;
 8006c6a:	f843 5d04 	str.w	r5, [r3, #-4]!
      res = fs->hal_wr((u8_t *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix) + offsetof(niffs_object_hdr, len), (u8_t *)&length, sizeof(u32_t));
 8006c6e:	69a7      	ldr	r7, [r4, #24]
 8006c70:	4410      	add	r0, r2
 8006c72:	4619      	mov	r1, r3
 8006c74:	2204      	movs	r2, #4
 8006c76:	47b8      	blx	r7
      check(res);
 8006c78:	4607      	mov	r7, r0
 8006c7a:	2800      	cmp	r0, #0
 8006c7c:	f43f af6b 	beq.w	8006b56 <niffs_truncate+0x20a>
 8006c80:	6833      	ldr	r3, [r6, #0]
 8006c82:	055b      	lsls	r3, r3, #21
 8006c84:	d50b      	bpl.n	8006c9e <niffs_truncate+0x352>
 8006c86:	4b16      	ldr	r3, [pc, #88]	; (8006ce0 <niffs_truncate+0x394>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	b943      	cbnz	r3, 8006c9e <niffs_truncate+0x352>
 8006c8c:	f240 5312 	movw	r3, #1298	; 0x512
 8006c90:	9300      	str	r3, [sp, #0]
 8006c92:	4814      	ldr	r0, [pc, #80]	; (8006ce4 <niffs_truncate+0x398>)
 8006c94:	4639      	mov	r1, r7
 8006c96:	4a14      	ldr	r2, [pc, #80]	; (8006ce8 <niffs_truncate+0x39c>)
 8006c98:	4b14      	ldr	r3, [pc, #80]	; (8006cec <niffs_truncate+0x3a0>)
 8006c9a:	f002 fa7f 	bl	800919c <arcprint>
 8006c9e:	4638      	mov	r0, r7
 8006ca0:	e01a      	b.n	8006cd8 <niffs_truncate+0x38c>
    }
  }

  // REMOVE PAGES
  niffs_span_ix del_start_spix = _NIFFS_OFFS_2_SPIX(fs, new_len);
 8006ca2:	2300      	movs	r3, #0

  if (_NIFFS_OFFS_2_PDATA_OFFS(fs, new_len) || del_start_spix == 0) {
    del_start_spix++;
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	e76b      	b.n	8006b82 <niffs_truncate+0x236>
  if (res == NIFFS_VIS_END) res = NIFFS_OK;

  if (res == NIFFS_OK && new_len == 0) {
    // remove header
    res = niffs_delete_page(fs, fd->obj_pix);
    check(res);
 8006caa:	4b0d      	ldr	r3, [pc, #52]	; (8006ce0 <niffs_truncate+0x394>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d184      	bne.n	8006bbc <niffs_truncate+0x270>
 8006cb2:	f240 5329 	movw	r3, #1321	; 0x529
 8006cb6:	e6ff      	b.n	8006ab8 <niffs_truncate+0x16c>
  // repopulate if moved by gc
  if (fd->obj_pix != orig_ohdr_pix) {
    orig_ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);
    if (orig_ohdr->phdr.id.obj_id != fd->obj_id) res = ERR_NIFFS_INCOHERENT_ID;
  }
  check(res);
 8006cb8:	6833      	ldr	r3, [r6, #0]
 8006cba:	0559      	lsls	r1, r3, #21
 8006cbc:	d50b      	bpl.n	8006cd6 <niffs_truncate+0x38a>
 8006cbe:	4b08      	ldr	r3, [pc, #32]	; (8006ce0 <niffs_truncate+0x394>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	b943      	cbnz	r3, 8006cd6 <niffs_truncate+0x38a>
 8006cc4:	f44f 639e 	mov.w	r3, #1264	; 0x4f0
 8006cc8:	9300      	str	r3, [sp, #0]
 8006cca:	4806      	ldr	r0, [pc, #24]	; (8006ce4 <niffs_truncate+0x398>)
 8006ccc:	4908      	ldr	r1, [pc, #32]	; (8006cf0 <niffs_truncate+0x3a4>)
 8006cce:	4a06      	ldr	r2, [pc, #24]	; (8006ce8 <niffs_truncate+0x39c>)
 8006cd0:	4b06      	ldr	r3, [pc, #24]	; (8006cec <niffs_truncate+0x3a0>)
 8006cd2:	f002 fa63 	bl	800919c <arcprint>
  }

  // repopulate if moved by gc
  if (fd->obj_pix != orig_ohdr_pix) {
    orig_ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, fd->obj_pix);
    if (orig_ohdr->phdr.id.obj_id != fd->obj_id) res = ERR_NIFFS_INCOHERENT_ID;
 8006cd6:	4806      	ldr	r0, [pc, #24]	; (8006cf0 <niffs_truncate+0x3a4>)
    res = niffs_delete_page(fs, fd->obj_pix);
    check(res);
  }

  return res;
}
 8006cd8:	b006      	add	sp, #24
 8006cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cde:	bf00      	nop
 8006ce0:	20004f84 	.word	0x20004f84
 8006ce4:	08010535 	.word	0x08010535
 8006ce8:	0800ea24 	.word	0x0800ea24
 8006cec:	0801054b 	.word	0x0801054b
 8006cf0:	ffffd4f1 	.word	0xffffd4f1

08006cf4 <niffs_rename>:

int niffs_rename(niffs *fs, const char *old_name, const char *new_name) {
 8006cf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006cf8:	4604      	mov	r4, r0
 8006cfa:	b087      	sub	sp, #28
 8006cfc:	4690      	mov	r8, r2
  niffs_page_ix dst_pix;
  niffs_page_ix src_pix;
  int res;

  if (old_name == 0) check(ERR_NIFFS_NULL_PTR);
 8006cfe:	4689      	mov	r9, r1
 8006d00:	4d85      	ldr	r5, [pc, #532]	; (8006f18 <niffs_rename+0x224>)
 8006d02:	b959      	cbnz	r1, 8006d1c <niffs_rename+0x28>
 8006d04:	682b      	ldr	r3, [r5, #0]
 8006d06:	055d      	lsls	r5, r3, #21
 8006d08:	f140 80f9 	bpl.w	8006efe <niffs_rename+0x20a>
 8006d0c:	4b83      	ldr	r3, [pc, #524]	; (8006f1c <niffs_rename+0x228>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f040 80f4 	bne.w	8006efe <niffs_rename+0x20a>
 8006d16:	f240 5334 	movw	r3, #1332	; 0x534
 8006d1a:	e00b      	b.n	8006d34 <niffs_rename+0x40>
  if (new_name == 0) check(ERR_NIFFS_NULL_PTR);
 8006d1c:	b992      	cbnz	r2, 8006d44 <niffs_rename+0x50>
 8006d1e:	682b      	ldr	r3, [r5, #0]
 8006d20:	055c      	lsls	r4, r3, #21
 8006d22:	f140 80ec 	bpl.w	8006efe <niffs_rename+0x20a>
 8006d26:	4b7d      	ldr	r3, [pc, #500]	; (8006f1c <niffs_rename+0x228>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f040 80e7 	bne.w	8006efe <niffs_rename+0x20a>
 8006d30:	f240 5335 	movw	r3, #1333	; 0x535
 8006d34:	9300      	str	r3, [sp, #0]
 8006d36:	487a      	ldr	r0, [pc, #488]	; (8006f20 <niffs_rename+0x22c>)
 8006d38:	497a      	ldr	r1, [pc, #488]	; (8006f24 <niffs_rename+0x230>)
 8006d3a:	4a7b      	ldr	r2, [pc, #492]	; (8006f28 <niffs_rename+0x234>)
 8006d3c:	4b7b      	ldr	r3, [pc, #492]	; (8006f2c <niffs_rename+0x238>)
 8006d3e:	f002 fa2d 	bl	800919c <arcprint>
 8006d42:	e0dc      	b.n	8006efe <niffs_rename+0x20a>

  res = niffs_ensure_free_pages(fs, 1);
 8006d44:	2101      	movs	r1, #1
 8006d46:	f7fe fd77 	bl	8005838 <niffs_ensure_free_pages>
  check(res);
 8006d4a:	4606      	mov	r6, r0
 8006d4c:	b158      	cbz	r0, 8006d66 <niffs_rename+0x72>
 8006d4e:	682b      	ldr	r3, [r5, #0]
 8006d50:	0558      	lsls	r0, r3, #21
 8006d52:	f140 80d8 	bpl.w	8006f06 <niffs_rename+0x212>
 8006d56:	4b71      	ldr	r3, [pc, #452]	; (8006f1c <niffs_rename+0x228>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f040 80d3 	bne.w	8006f06 <niffs_rename+0x212>
 8006d60:	f44f 63a7 	mov.w	r3, #1336	; 0x538
 8006d64:	e013      	b.n	8006d8e <niffs_rename+0x9a>

  res = niffs_find_free_page(fs, &dst_pix, NIFFS_EXCL_SECT_NONE);
 8006d66:	4620      	mov	r0, r4
 8006d68:	f10d 010a 	add.w	r1, sp, #10
 8006d6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d70:	f7fd fe2b 	bl	80049ca <niffs_find_free_page>
  check(res);
 8006d74:	682b      	ldr	r3, [r5, #0]
 8006d76:	4606      	mov	r6, r0
 8006d78:	b188      	cbz	r0, 8006d9e <niffs_rename+0xaa>
 8006d7a:	0559      	lsls	r1, r3, #21
 8006d7c:	f140 80c3 	bpl.w	8006f06 <niffs_rename+0x212>
 8006d80:	4b66      	ldr	r3, [pc, #408]	; (8006f1c <niffs_rename+0x228>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f040 80be 	bne.w	8006f06 <niffs_rename+0x212>
 8006d8a:	f240 533b 	movw	r3, #1339	; 0x53b
 8006d8e:	9300      	str	r3, [sp, #0]
 8006d90:	4863      	ldr	r0, [pc, #396]	; (8006f20 <niffs_rename+0x22c>)
 8006d92:	4631      	mov	r1, r6
 8006d94:	4a64      	ldr	r2, [pc, #400]	; (8006f28 <niffs_rename+0x234>)
 8006d96:	4b65      	ldr	r3, [pc, #404]	; (8006f2c <niffs_rename+0x238>)
 8006d98:	f002 fa00 	bl	800919c <arcprint>
 8006d9c:	e0b3      	b.n	8006f06 <niffs_rename+0x212>

  NIFFS_DBG("rename: name:%s->%s\n", old_name, new_name);
 8006d9e:	055a      	lsls	r2, r3, #21
 8006da0:	d507      	bpl.n	8006db2 <niffs_rename+0xbe>
 8006da2:	4b5e      	ldr	r3, [pc, #376]	; (8006f1c <niffs_rename+0x228>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	b923      	cbnz	r3, 8006db2 <niffs_rename+0xbe>
 8006da8:	4861      	ldr	r0, [pc, #388]	; (8006f30 <niffs_rename+0x23c>)
 8006daa:	4649      	mov	r1, r9
 8006dac:	4642      	mov	r2, r8
 8006dae:	f002 f9f5 	bl	800919c <arcprint>

  niffs_open_arg arg;

  // find src file
  niffs_memset(&arg, 0, sizeof(arg));
 8006db2:	af03      	add	r7, sp, #12
 8006db4:	2100      	movs	r1, #0
 8006db6:	220c      	movs	r2, #12
 8006db8:	4638      	mov	r0, r7
 8006dba:	f007 fae9 	bl	800e390 <memset>
  arg.name = old_name;
  res = niffs_traverse(fs, 0, 0, niffs_open_v, &arg);
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	9700      	str	r7, [sp, #0]
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	460a      	mov	r2, r1
 8006dc6:	4b5b      	ldr	r3, [pc, #364]	; (8006f34 <niffs_rename+0x240>)

  niffs_open_arg arg;

  // find src file
  niffs_memset(&arg, 0, sizeof(arg));
  arg.name = old_name;
 8006dc8:	f8cd 900c 	str.w	r9, [sp, #12]
  res = niffs_traverse(fs, 0, 0, niffs_open_v, &arg);
 8006dcc:	f7fd fdd0 	bl	8004970 <niffs_traverse>
  if (res == NIFFS_VIS_END) {
 8006dd0:	2802      	cmp	r0, #2
  niffs_open_arg arg;

  // find src file
  niffs_memset(&arg, 0, sizeof(arg));
  arg.name = old_name;
  res = niffs_traverse(fs, 0, 0, niffs_open_v, &arg);
 8006dd2:	4606      	mov	r6, r0
  if (res == NIFFS_VIS_END) {
 8006dd4:	d118      	bne.n	8006e08 <niffs_rename+0x114>
    if (arg.oid_mov != 0) {
 8006dd6:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8006dda:	b113      	cbz	r3, 8006de2 <niffs_rename+0xee>
      src_pix = arg.pix_mov;
 8006ddc:	f8bd 9014 	ldrh.w	r9, [sp, #20]
 8006de0:	e01f      	b.n	8006e22 <niffs_rename+0x12e>
    } else {
      check(ERR_NIFFS_FILE_NOT_FOUND);
 8006de2:	682b      	ldr	r3, [r5, #0]
 8006de4:	055b      	lsls	r3, r3, #21
 8006de6:	f140 808c 	bpl.w	8006f02 <niffs_rename+0x20e>
 8006dea:	4b4c      	ldr	r3, [pc, #304]	; (8006f1c <niffs_rename+0x228>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	f040 8087 	bne.w	8006f02 <niffs_rename+0x20e>
 8006df4:	f240 5349 	movw	r3, #1353	; 0x549
 8006df8:	9300      	str	r3, [sp, #0]
 8006dfa:	4849      	ldr	r0, [pc, #292]	; (8006f20 <niffs_rename+0x22c>)
 8006dfc:	494e      	ldr	r1, [pc, #312]	; (8006f38 <niffs_rename+0x244>)
 8006dfe:	4a4a      	ldr	r2, [pc, #296]	; (8006f28 <niffs_rename+0x234>)
 8006e00:	4b4a      	ldr	r3, [pc, #296]	; (8006f2c <niffs_rename+0x238>)
 8006e02:	f002 f9cb 	bl	800919c <arcprint>
 8006e06:	e07c      	b.n	8006f02 <niffs_rename+0x20e>
    }
  } else if (res != NIFFS_OK) {
 8006e08:	b148      	cbz	r0, 8006e1e <niffs_rename+0x12a>
    check(res);
 8006e0a:	682b      	ldr	r3, [r5, #0]
 8006e0c:	055f      	lsls	r7, r3, #21
 8006e0e:	d57a      	bpl.n	8006f06 <niffs_rename+0x212>
 8006e10:	4b42      	ldr	r3, [pc, #264]	; (8006f1c <niffs_rename+0x228>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d176      	bne.n	8006f06 <niffs_rename+0x212>
 8006e18:	f240 534c 	movw	r3, #1356	; 0x54c
 8006e1c:	e7b7      	b.n	8006d8e <niffs_rename+0x9a>
  } else {
    src_pix = arg.pix;
 8006e1e:	f8bd 9010 	ldrh.w	r9, [sp, #16]
  }

  // find dst file
  niffs_memset(&arg, 0, sizeof(arg));
 8006e22:	2100      	movs	r1, #0
 8006e24:	220c      	movs	r2, #12
 8006e26:	4638      	mov	r0, r7
 8006e28:	f007 fab2 	bl	800e390 <memset>
  arg.name = new_name;
  res = niffs_traverse(fs, 0, 0, niffs_open_v, &arg);
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	9700      	str	r7, [sp, #0]
 8006e30:	4620      	mov	r0, r4
 8006e32:	460a      	mov	r2, r1
 8006e34:	4b3f      	ldr	r3, [pc, #252]	; (8006f34 <niffs_rename+0x240>)
    src_pix = arg.pix;
  }

  // find dst file
  niffs_memset(&arg, 0, sizeof(arg));
  arg.name = new_name;
 8006e36:	f8cd 800c 	str.w	r8, [sp, #12]
  res = niffs_traverse(fs, 0, 0, niffs_open_v, &arg);
 8006e3a:	f7fd fd99 	bl	8004970 <niffs_traverse>
  if (res == NIFFS_VIS_END) {
 8006e3e:	2802      	cmp	r0, #2
  }

  // find dst file
  niffs_memset(&arg, 0, sizeof(arg));
  arg.name = new_name;
  res = niffs_traverse(fs, 0, 0, niffs_open_v, &arg);
 8006e40:	4606      	mov	r6, r0
  if (res == NIFFS_VIS_END) {
 8006e42:	d10c      	bne.n	8006e5e <niffs_rename+0x16a>
    if (arg.oid_mov == 0) {
 8006e44:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8006e48:	b323      	cbz	r3, 8006e94 <niffs_rename+0x1a0>
      res = NIFFS_OK;
    } else {
      check(ERR_NIFFS_NAME_CONFLICT);
 8006e4a:	682b      	ldr	r3, [r5, #0]
 8006e4c:	055d      	lsls	r5, r3, #21
 8006e4e:	d55c      	bpl.n	8006f0a <niffs_rename+0x216>
 8006e50:	4b32      	ldr	r3, [pc, #200]	; (8006f1c <niffs_rename+0x228>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d158      	bne.n	8006f0a <niffs_rename+0x216>
 8006e58:	f240 5359 	movw	r3, #1369	; 0x559
 8006e5c:	e012      	b.n	8006e84 <niffs_rename+0x190>
    }
  } else if (res != NIFFS_OK) {
    check(res);
 8006e5e:	682b      	ldr	r3, [r5, #0]
    if (arg.oid_mov == 0) {
      res = NIFFS_OK;
    } else {
      check(ERR_NIFFS_NAME_CONFLICT);
    }
  } else if (res != NIFFS_OK) {
 8006e60:	b140      	cbz	r0, 8006e74 <niffs_rename+0x180>
    check(res);
 8006e62:	055c      	lsls	r4, r3, #21
 8006e64:	d54f      	bpl.n	8006f06 <niffs_rename+0x212>
 8006e66:	4b2d      	ldr	r3, [pc, #180]	; (8006f1c <niffs_rename+0x228>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d14b      	bne.n	8006f06 <niffs_rename+0x212>
 8006e6e:	f240 535c 	movw	r3, #1372	; 0x55c
 8006e72:	e78c      	b.n	8006d8e <niffs_rename+0x9a>
  } else {
    check(ERR_NIFFS_NAME_CONFLICT);
 8006e74:	0558      	lsls	r0, r3, #21
 8006e76:	d548      	bpl.n	8006f0a <niffs_rename+0x216>
 8006e78:	4b28      	ldr	r3, [pc, #160]	; (8006f1c <niffs_rename+0x228>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d144      	bne.n	8006f0a <niffs_rename+0x216>
 8006e80:	f240 535e 	movw	r3, #1374	; 0x55e
 8006e84:	9300      	str	r3, [sp, #0]
 8006e86:	4826      	ldr	r0, [pc, #152]	; (8006f20 <niffs_rename+0x22c>)
 8006e88:	492c      	ldr	r1, [pc, #176]	; (8006f3c <niffs_rename+0x248>)
 8006e8a:	4a27      	ldr	r2, [pc, #156]	; (8006f28 <niffs_rename+0x234>)
 8006e8c:	4b27      	ldr	r3, [pc, #156]	; (8006f2c <niffs_rename+0x238>)
 8006e8e:	f002 f985 	bl	800919c <arcprint>
 8006e92:	e03a      	b.n	8006f0a <niffs_rename+0x216>
  }

  // modify obj hdr
  niffs_page_hdr *src_phdr_addr = (niffs_page_hdr *) _NIFFS_PIX_2_ADDR(fs, src_pix);
 8006e94:	6a21      	ldr	r1, [r4, #32]
 8006e96:	68e2      	ldr	r2, [r4, #12]
 8006e98:	fbb9 f3f1 	udiv	r3, r9, r1
 8006e9c:	fb01 9113 	mls	r1, r1, r3, r9
 8006ea0:	4351      	muls	r1, r2
 8006ea2:	68a0      	ldr	r0, [r4, #8]
 8006ea4:	6826      	ldr	r6, [r4, #0]
 8006ea6:	fb00 1303 	mla	r3, r0, r3, r1
 8006eaa:	1d19      	adds	r1, r3, #4
  _NIFFS_RD(fs, fs->buf, (u8_t *)src_phdr_addr, fs->page_size);
 8006eac:	6920      	ldr	r0, [r4, #16]
 8006eae:	4431      	add	r1, r6
 8006eb0:	f007 fa1a 	bl	800e2e8 <memcpy>
  niffs_strncpy((char *)fs->buf + offsetof(niffs_object_hdr, name), new_name, NIFFS_NAME_LEN);
 8006eb4:	6920      	ldr	r0, [r4, #16]
 8006eb6:	4641      	mov	r1, r8
 8006eb8:	2210      	movs	r2, #16
 8006eba:	3008      	adds	r0, #8
 8006ebc:	f7fa fa36 	bl	800132c <strncpy>

  // move and rewrite
  res = niffs_move_page(fs, src_pix, dst_pix, fs->buf + sizeof(niffs_page_hdr),
 8006ec0:	68e1      	ldr	r1, [r4, #12]
 8006ec2:	6923      	ldr	r3, [r4, #16]
 8006ec4:	3904      	subs	r1, #4
 8006ec6:	9100      	str	r1, [sp, #0]
 8006ec8:	21aa      	movs	r1, #170	; 0xaa
 8006eca:	9101      	str	r1, [sp, #4]
 8006ecc:	4620      	mov	r0, r4
 8006ece:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8006ed2:	4649      	mov	r1, r9
 8006ed4:	3304      	adds	r3, #4
 8006ed6:	f7fc fe25 	bl	8003b24 <niffs_move_page>
           _NIFFS_SPIX_2_PDATA_LEN(fs, 1), NIFFS_FLAG_MOVE_KEEP);
  check(res);
 8006eda:	4604      	mov	r4, r0
 8006edc:	b1b8      	cbz	r0, 8006f0e <niffs_rename+0x21a>
 8006ede:	682b      	ldr	r3, [r5, #0]
 8006ee0:	0559      	lsls	r1, r3, #21
 8006ee2:	d514      	bpl.n	8006f0e <niffs_rename+0x21a>
 8006ee4:	4b0d      	ldr	r3, [pc, #52]	; (8006f1c <niffs_rename+0x228>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	b98b      	cbnz	r3, 8006f0e <niffs_rename+0x21a>
 8006eea:	f240 5369 	movw	r3, #1385	; 0x569
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	480b      	ldr	r0, [pc, #44]	; (8006f20 <niffs_rename+0x22c>)
 8006ef2:	4621      	mov	r1, r4
 8006ef4:	4a0c      	ldr	r2, [pc, #48]	; (8006f28 <niffs_rename+0x234>)
 8006ef6:	4b0d      	ldr	r3, [pc, #52]	; (8006f2c <niffs_rename+0x238>)
 8006ef8:	f002 f950 	bl	800919c <arcprint>
 8006efc:	e007      	b.n	8006f0e <niffs_rename+0x21a>
int niffs_rename(niffs *fs, const char *old_name, const char *new_name) {
  niffs_page_ix dst_pix;
  niffs_page_ix src_pix;
  int res;

  if (old_name == 0) check(ERR_NIFFS_NULL_PTR);
 8006efe:	4809      	ldr	r0, [pc, #36]	; (8006f24 <niffs_rename+0x230>)
 8006f00:	e006      	b.n	8006f10 <niffs_rename+0x21c>
  res = niffs_traverse(fs, 0, 0, niffs_open_v, &arg);
  if (res == NIFFS_VIS_END) {
    if (arg.oid_mov != 0) {
      src_pix = arg.pix_mov;
    } else {
      check(ERR_NIFFS_FILE_NOT_FOUND);
 8006f02:	480d      	ldr	r0, [pc, #52]	; (8006f38 <niffs_rename+0x244>)
 8006f04:	e004      	b.n	8006f10 <niffs_rename+0x21c>
 8006f06:	4630      	mov	r0, r6
 8006f08:	e002      	b.n	8006f10 <niffs_rename+0x21c>
  res = niffs_traverse(fs, 0, 0, niffs_open_v, &arg);
  if (res == NIFFS_VIS_END) {
    if (arg.oid_mov == 0) {
      res = NIFFS_OK;
    } else {
      check(ERR_NIFFS_NAME_CONFLICT);
 8006f0a:	480c      	ldr	r0, [pc, #48]	; (8006f3c <niffs_rename+0x248>)
 8006f0c:	e000      	b.n	8006f10 <niffs_rename+0x21c>
 8006f0e:	4620      	mov	r0, r4
  // move and rewrite
  res = niffs_move_page(fs, src_pix, dst_pix, fs->buf + sizeof(niffs_page_hdr),
           _NIFFS_SPIX_2_PDATA_LEN(fs, 1), NIFFS_FLAG_MOVE_KEEP);
  check(res);
  return res;
}
 8006f10:	b007      	add	sp, #28
 8006f12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f16:	bf00      	nop
 8006f18:	20004f80 	.word	0x20004f80
 8006f1c:	20004f84 	.word	0x20004f84
 8006f20:	08010535 	.word	0x08010535
 8006f24:	ffffd4fb 	.word	0xffffd4fb
 8006f28:	0800ea33 	.word	0x0800ea33
 8006f2c:	0801054b 	.word	0x0801054b
 8006f30:	08010eec 	.word	0x08010eec
 8006f34:	080048b9 	.word	0x080048b9
 8006f38:	ffffd4f4 	.word	0xffffd4f4
 8006f3c:	ffffd4f7 	.word	0xffffd4f7

08006f40 <niffs_chk>:
  } while (1);

  return NIFFS_OK;
}

int niffs_chk(niffs *fs) {
 8006f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u32_t dummy;
  if (fs->mounted) check(ERR_NIFFS_MOUNTED);
 8006f44:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
  } while (1);

  return NIFFS_OK;
}

int niffs_chk(niffs *fs) {
 8006f48:	b089      	sub	sp, #36	; 0x24
 8006f4a:	4606      	mov	r6, r0
 8006f4c:	4d87      	ldr	r5, [pc, #540]	; (800716c <niffs_chk+0x22c>)
  u32_t dummy;
  if (fs->mounted) check(ERR_NIFFS_MOUNTED);
 8006f4e:	b183      	cbz	r3, 8006f72 <niffs_chk+0x32>
 8006f50:	682b      	ldr	r3, [r5, #0]
 8006f52:	055e      	lsls	r6, r3, #21
 8006f54:	d56d      	bpl.n	8007032 <niffs_chk+0xf2>
 8006f56:	4b86      	ldr	r3, [pc, #536]	; (8007170 <niffs_chk+0x230>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d169      	bne.n	8007032 <niffs_chk+0xf2>
 8006f5e:	f240 738b 	movw	r3, #1931	; 0x78b
 8006f62:	9300      	str	r3, [sp, #0]
 8006f64:	4883      	ldr	r0, [pc, #524]	; (8007174 <niffs_chk+0x234>)
 8006f66:	4984      	ldr	r1, [pc, #528]	; (8007178 <niffs_chk+0x238>)
 8006f68:	4a84      	ldr	r2, [pc, #528]	; (800717c <niffs_chk+0x23c>)
 8006f6a:	4b85      	ldr	r3, [pc, #532]	; (8007180 <niffs_chk+0x240>)
 8006f6c:	f002 f916 	bl	800919c <arcprint>
 8006f70:	e05f      	b.n	8007032 <niffs_chk+0xf2>
  // However, in aborted cases there can be only one unfinished page (MOV),
  // which might need a new free page. Mostly, pages are deleted during a
  // niffs_chk.

  // fixes aborted sector erases
  int res = niffs_setup(fs);
 8006f72:	f7fd f917 	bl	80041a4 <niffs_setup>
  check(res);
 8006f76:	682b      	ldr	r3, [r5, #0]
 8006f78:	4604      	mov	r4, r0
 8006f7a:	b150      	cbz	r0, 8006f92 <niffs_chk+0x52>
 8006f7c:	055d      	lsls	r5, r3, #21
 8006f7e:	f140 81b3 	bpl.w	80072e8 <niffs_chk+0x3a8>
 8006f82:	4b7b      	ldr	r3, [pc, #492]	; (8007170 <niffs_chk+0x230>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f040 81ae 	bne.w	80072e8 <niffs_chk+0x3a8>
 8006f8c:	f240 7396 	movw	r3, #1942	; 0x796
 8006f90:	e047      	b.n	8007022 <niffs_chk+0xe2>

  // fixes pages with bad headers - aborted in midst of movements
  // fixes object headers with zero length - aborted truncate to zero
  // fixes orphaned data pages, pages with oids having no corresponding object header - safety cleanup
  NIFFS_DBG("check : * delete orphans by id, aborted removes, bad flags, dirty pages\n");
 8006f92:	055c      	lsls	r4, r3, #21
 8006f94:	d505      	bpl.n	8006fa2 <niffs_chk+0x62>
 8006f96:	4b76      	ldr	r3, [pc, #472]	; (8007170 <niffs_chk+0x230>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	b913      	cbnz	r3, 8006fa2 <niffs_chk+0x62>
 8006f9c:	4879      	ldr	r0, [pc, #484]	; (8007184 <niffs_chk+0x244>)
 8006f9e:	f002 f8fd 	bl	800919c <arcprint>
}

static int niffs_chk_delete_orphans_by_id_and_bad_flag_and_dirty_pages(niffs *fs) {
  niffs_memset(fs->buf, 0, fs->buf_len);
  // map all ids taken by object headers
  int res = niffs_traverse(fs, 0, 0, niffs_map_obj_hdr_ids_v, 0);
 8006fa2:	2700      	movs	r7, #0
  }
  return NIFFS_VIS_CONT;
}

static int niffs_chk_delete_orphans_by_id_and_bad_flag_and_dirty_pages(niffs *fs) {
  niffs_memset(fs->buf, 0, fs->buf_len);
 8006fa4:	2100      	movs	r1, #0
 8006fa6:	6972      	ldr	r2, [r6, #20]
 8006fa8:	6930      	ldr	r0, [r6, #16]
 8006faa:	f007 f9f1 	bl	800e390 <memset>
  // map all ids taken by object headers
  int res = niffs_traverse(fs, 0, 0, niffs_map_obj_hdr_ids_v, 0);
 8006fae:	9700      	str	r7, [sp, #0]
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	4639      	mov	r1, r7
 8006fb4:	463a      	mov	r2, r7
 8006fb6:	4b74      	ldr	r3, [pc, #464]	; (8007188 <niffs_chk+0x248>)
 8006fb8:	f7fd fcda 	bl	8004970 <niffs_traverse>
  if (res != NIFFS_VIS_END)  {
 8006fbc:	2802      	cmp	r0, #2
}

static int niffs_chk_delete_orphans_by_id_and_bad_flag_and_dirty_pages(niffs *fs) {
  niffs_memset(fs->buf, 0, fs->buf_len);
  // map all ids taken by object headers
  int res = niffs_traverse(fs, 0, 0, niffs_map_obj_hdr_ids_v, 0);
 8006fbe:	4604      	mov	r4, r0
  if (res != NIFFS_VIS_END)  {
 8006fc0:	d00a      	beq.n	8006fd8 <niffs_chk+0x98>
    check(res);
 8006fc2:	2800      	cmp	r0, #0
 8006fc4:	d037      	beq.n	8007036 <niffs_chk+0xf6>
 8006fc6:	682b      	ldr	r3, [r5, #0]
 8006fc8:	0558      	lsls	r0, r3, #21
 8006fca:	d51f      	bpl.n	800700c <niffs_chk+0xcc>
 8006fcc:	4b68      	ldr	r3, [pc, #416]	; (8007170 <niffs_chk+0x230>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	b9e3      	cbnz	r3, 800700c <niffs_chk+0xcc>
 8006fd2:	f240 637f 	movw	r3, #1663	; 0x67f
 8006fd6:	e012      	b.n	8006ffe <niffs_chk+0xbe>
    return res;
  }
  // remove orphaned and bad flag pages
  res = niffs_traverse(fs, 0, 0, niffs_chk_delete_orphan_bad_dirty_v, 0);
 8006fd8:	4b6c      	ldr	r3, [pc, #432]	; (800718c <niffs_chk+0x24c>)
 8006fda:	9700      	str	r7, [sp, #0]
 8006fdc:	4630      	mov	r0, r6
 8006fde:	4639      	mov	r1, r7
 8006fe0:	463a      	mov	r2, r7
 8006fe2:	f7fd fcc5 	bl	8004970 <niffs_traverse>
  if (res != NIFFS_VIS_END)  {
    check(res);
 8006fe6:	f030 0302 	bics.w	r3, r0, #2
  if (res != NIFFS_VIS_END)  {
    check(res);
    return res;
  }
  // remove orphaned and bad flag pages
  res = niffs_traverse(fs, 0, 0, niffs_chk_delete_orphan_bad_dirty_v, 0);
 8006fea:	4604      	mov	r4, r0
  if (res != NIFFS_VIS_END)  {
    check(res);
 8006fec:	d023      	beq.n	8007036 <niffs_chk+0xf6>
 8006fee:	682b      	ldr	r3, [r5, #0]
 8006ff0:	0559      	lsls	r1, r3, #21
 8006ff2:	d50b      	bpl.n	800700c <niffs_chk+0xcc>
 8006ff4:	4b5e      	ldr	r3, [pc, #376]	; (8007170 <niffs_chk+0x230>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	b943      	cbnz	r3, 800700c <niffs_chk+0xcc>
 8006ffa:	f240 6385 	movw	r3, #1669	; 0x685
 8006ffe:	9300      	str	r3, [sp, #0]
 8007000:	485c      	ldr	r0, [pc, #368]	; (8007174 <niffs_chk+0x234>)
 8007002:	4621      	mov	r1, r4
 8007004:	4a62      	ldr	r2, [pc, #392]	; (8007190 <niffs_chk+0x250>)
 8007006:	4b5e      	ldr	r3, [pc, #376]	; (8007180 <niffs_chk+0x240>)
 8007008:	f002 f8c8 	bl	800919c <arcprint>
  // fixes pages with bad headers - aborted in midst of movements
  // fixes object headers with zero length - aborted truncate to zero
  // fixes orphaned data pages, pages with oids having no corresponding object header - safety cleanup
  NIFFS_DBG("check : * delete orphans by id, aborted removes, bad flags, dirty pages\n");
  res = niffs_chk_delete_orphans_by_id_and_bad_flag_and_dirty_pages(fs);
  check(res);
 800700c:	682b      	ldr	r3, [r5, #0]
 800700e:	0558      	lsls	r0, r3, #21
 8007010:	f140 816a 	bpl.w	80072e8 <niffs_chk+0x3a8>
 8007014:	4b56      	ldr	r3, [pc, #344]	; (8007170 <niffs_chk+0x230>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2b00      	cmp	r3, #0
 800701a:	f040 8165 	bne.w	80072e8 <niffs_chk+0x3a8>
 800701e:	f240 739d 	movw	r3, #1949	; 0x79d
 8007022:	9300      	str	r3, [sp, #0]
 8007024:	4853      	ldr	r0, [pc, #332]	; (8007174 <niffs_chk+0x234>)
 8007026:	4621      	mov	r1, r4
 8007028:	4a54      	ldr	r2, [pc, #336]	; (800717c <niffs_chk+0x23c>)
 800702a:	4b55      	ldr	r3, [pc, #340]	; (8007180 <niffs_chk+0x240>)
 800702c:	f002 f8b6 	bl	800919c <arcprint>
 8007030:	e15a      	b.n	80072e8 <niffs_chk+0x3a8>
  return NIFFS_OK;
}

int niffs_chk(niffs *fs) {
  u32_t dummy;
  if (fs->mounted) check(ERR_NIFFS_MOUNTED);
 8007032:	4c51      	ldr	r4, [pc, #324]	; (8007178 <niffs_chk+0x238>)
 8007034:	e158      	b.n	80072e8 <niffs_chk+0x3a8>
  check(res);

  // fixes data pages marked as moving -
  //     either moves them as written if written page never became finalized
  //     or else deletes moving page if corresponding written page was found
  NIFFS_DBG("check : * finalize moving pages\n");
 8007036:	682b      	ldr	r3, [r5, #0]
 8007038:	0559      	lsls	r1, r3, #21
 800703a:	d505      	bpl.n	8007048 <niffs_chk+0x108>
 800703c:	4b4c      	ldr	r3, [pc, #304]	; (8007170 <niffs_chk+0x230>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	b913      	cbnz	r3, 8007048 <niffs_chk+0x108>
 8007042:	4854      	ldr	r0, [pc, #336]	; (8007194 <niffs_chk+0x254>)
 8007044:	f002 f8aa 	bl	800919c <arcprint>
  }
  return NIFFS_VIS_CONT;
}

static int niffs_chk_unfinished_movi_data_pages(niffs *fs) {
  int res = niffs_traverse(fs, 0, 0, niffs_chk_unfinished_movi_data_pages_v, 0);
 8007048:	2100      	movs	r1, #0
 800704a:	4b53      	ldr	r3, [pc, #332]	; (8007198 <niffs_chk+0x258>)
 800704c:	9100      	str	r1, [sp, #0]
 800704e:	4630      	mov	r0, r6
 8007050:	460a      	mov	r2, r1
 8007052:	f7fd fc8d 	bl	8004970 <niffs_traverse>
  if (res == NIFFS_VIS_END) {
    res = NIFFS_OK;
  }
  check(res);
 8007056:	f030 0302 	bics.w	r3, r0, #2
  }
  return NIFFS_VIS_CONT;
}

static int niffs_chk_unfinished_movi_data_pages(niffs *fs) {
  int res = niffs_traverse(fs, 0, 0, niffs_chk_unfinished_movi_data_pages_v, 0);
 800705a:	4604      	mov	r4, r0
  if (res == NIFFS_VIS_END) {
    res = NIFFS_OK;
  }
  check(res);
 800705c:	682b      	ldr	r3, [r5, #0]
 800705e:	d019      	beq.n	8007094 <niffs_chk+0x154>
 8007060:	055a      	lsls	r2, r3, #21
 8007062:	d50b      	bpl.n	800707c <niffs_chk+0x13c>
 8007064:	4b42      	ldr	r3, [pc, #264]	; (8007170 <niffs_chk+0x230>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	b943      	cbnz	r3, 800707c <niffs_chk+0x13c>
 800706a:	f240 63bf 	movw	r3, #1727	; 0x6bf
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	4840      	ldr	r0, [pc, #256]	; (8007174 <niffs_chk+0x234>)
 8007072:	4621      	mov	r1, r4
 8007074:	4a49      	ldr	r2, [pc, #292]	; (800719c <niffs_chk+0x25c>)
 8007076:	4b42      	ldr	r3, [pc, #264]	; (8007180 <niffs_chk+0x240>)
 8007078:	f002 f890 	bl	800919c <arcprint>
  // fixes data pages marked as moving -
  //     either moves them as written if written page never became finalized
  //     or else deletes moving page if corresponding written page was found
  NIFFS_DBG("check : * finalize moving pages\n");
  res = niffs_chk_unfinished_movi_data_pages(fs);
  check(res);
 800707c:	682b      	ldr	r3, [r5, #0]
 800707e:	055a      	lsls	r2, r3, #21
 8007080:	f140 8132 	bpl.w	80072e8 <niffs_chk+0x3a8>
 8007084:	4b3a      	ldr	r3, [pc, #232]	; (8007170 <niffs_chk+0x230>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	f040 812d 	bne.w	80072e8 <niffs_chk+0x3a8>
 800708e:	f240 73a4 	movw	r3, #1956	; 0x7a4
 8007092:	e7c6      	b.n	8007022 <niffs_chk+0xe2>

  // fixes object headers with duplicate ids
  NIFFS_DBG("check : * remove object headers with duplicate ids\n");
 8007094:	055b      	lsls	r3, r3, #21
 8007096:	d505      	bpl.n	80070a4 <niffs_chk+0x164>
 8007098:	4b35      	ldr	r3, [pc, #212]	; (8007170 <niffs_chk+0x230>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	b913      	cbnz	r3, 80070a4 <niffs_chk+0x164>
 800709e:	4840      	ldr	r0, [pc, #256]	; (80071a0 <niffs_chk+0x260>)
 80070a0:	f002 f87c 	bl	800919c <arcprint>
  }
  return NIFFS_VIS_CONT;
}

static int niffs_find_duplicate_obj_hdr_ids(niffs *fs) {
  niffs_memset(fs->buf, 0, fs->buf_len);
 80070a4:	2100      	movs	r1, #0
 80070a6:	6972      	ldr	r2, [r6, #20]
 80070a8:	6930      	ldr	r0, [r6, #16]
 80070aa:	f007 f971 	bl	800e390 <memset>
  // map all ids taken by object headers, find duplicates
  int res = niffs_traverse(fs, 0, 0, niffs_find_duplicate_obj_hdr_ids_v, 0);
 80070ae:	2100      	movs	r1, #0
 80070b0:	4b3c      	ldr	r3, [pc, #240]	; (80071a4 <niffs_chk+0x264>)
 80070b2:	9100      	str	r1, [sp, #0]
 80070b4:	4630      	mov	r0, r6
 80070b6:	460a      	mov	r2, r1
 80070b8:	f7fd fc5a 	bl	8004970 <niffs_traverse>
  if (res != NIFFS_VIS_END) {
    check(res);
 80070bc:	f030 0302 	bics.w	r3, r0, #2
}

static int niffs_find_duplicate_obj_hdr_ids(niffs *fs) {
  niffs_memset(fs->buf, 0, fs->buf_len);
  // map all ids taken by object headers, find duplicates
  int res = niffs_traverse(fs, 0, 0, niffs_find_duplicate_obj_hdr_ids_v, 0);
 80070c0:	4604      	mov	r4, r0
  if (res != NIFFS_VIS_END) {
    check(res);
 80070c2:	682b      	ldr	r3, [r5, #0]
 80070c4:	d011      	beq.n	80070ea <niffs_chk+0x1aa>
 80070c6:	055b      	lsls	r3, r3, #21
 80070c8:	f140 8105 	bpl.w	80072d6 <niffs_chk+0x396>
 80070cc:	4b28      	ldr	r3, [pc, #160]	; (8007170 <niffs_chk+0x230>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f040 8100 	bne.w	80072d6 <niffs_chk+0x396>
 80070d6:	f240 7356 	movw	r3, #1878	; 0x756
 80070da:	9300      	str	r3, [sp, #0]
 80070dc:	4825      	ldr	r0, [pc, #148]	; (8007174 <niffs_chk+0x234>)
 80070de:	4621      	mov	r1, r4
 80070e0:	4a31      	ldr	r2, [pc, #196]	; (80071a8 <niffs_chk+0x268>)
 80070e2:	4b27      	ldr	r3, [pc, #156]	; (8007180 <niffs_chk+0x240>)
 80070e4:	f002 f85a 	bl	800919c <arcprint>
 80070e8:	e0f5      	b.n	80072d6 <niffs_chk+0x396>
  NIFFS_DBG("check : * remove object headers with duplicate ids\n");
  res = niffs_find_duplicate_obj_hdr_ids(fs);
  check(res);

  // fixes orphaned data pages by aborted file length update
  NIFFS_DBG("check : * delete orphans by length\n");
 80070ea:	055f      	lsls	r7, r3, #21
 80070ec:	d505      	bpl.n	80070fa <niffs_chk+0x1ba>
 80070ee:	4b20      	ldr	r3, [pc, #128]	; (8007170 <niffs_chk+0x230>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	b913      	cbnz	r3, 80070fa <niffs_chk+0x1ba>
 80070f4:	482d      	ldr	r0, [pc, #180]	; (80071ac <niffs_chk+0x26c>)
 80070f6:	f002 f851 	bl	800919c <arcprint>
  return NIFFS_OK;
}

static int niffs_chk_movi_objhdr_pages(niffs *fs) {
  // clear buffer
  niffs_memset(fs->buf, 0, fs->buf_len);
 80070fa:	6972      	ldr	r2, [r6, #20]
 80070fc:	6930      	ldr	r0, [r6, #16]
 80070fe:	2100      	movs	r1, #0
 8007100:	f007 f946 	bl	800e390 <memset>

  niffs_chk_movi_objhdr_arg arg = {
      .ix = 0,
      .len = fs->buf_len / sizeof(niffs_page_ix),
 8007104:	6972      	ldr	r2, [r6, #20]

static int niffs_chk_movi_objhdr_pages(niffs *fs) {
  // clear buffer
  niffs_memset(fs->buf, 0, fs->buf_len);

  niffs_chk_movi_objhdr_arg arg = {
 8007106:	2300      	movs	r3, #0
      .ix = 0,
      .len = fs->buf_len / sizeof(niffs_page_ix),
 8007108:	0852      	lsrs	r2, r2, #1
  };

  int res;
  do {
    // find a chunk or all movi obj hdrs, and tidy away any orphaned pages
    NIFFS_DBG("check : find MOVI obj pix:%04x--end\n", arg.last_pix);
 800710a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007170 <niffs_chk+0x230>

static int niffs_chk_movi_objhdr_pages(niffs *fs) {
  // clear buffer
  niffs_memset(fs->buf, 0, fs->buf_len);

  niffs_chk_movi_objhdr_arg arg = {
 800710e:	9305      	str	r3, [sp, #20]
 8007110:	9206      	str	r2, [sp, #24]
 8007112:	f8ad 301c 	strh.w	r3, [sp, #28]

  int res;
  do {
    // find a chunk or all movi obj hdrs, and tidy away any orphaned pages
    NIFFS_DBG("check : find MOVI obj pix:%04x--end\n", arg.last_pix);
    res = niffs_traverse(fs, arg.last_pix, 0, niffs_chk_movi_objhdr_pages_v, &arg);
 8007116:	f10d 0a14 	add.w	sl, sp, #20
  };

  int res;
  do {
    // find a chunk or all movi obj hdrs, and tidy away any orphaned pages
    NIFFS_DBG("check : find MOVI obj pix:%04x--end\n", arg.last_pix);
 800711a:	682b      	ldr	r3, [r5, #0]
 800711c:	055f      	lsls	r7, r3, #21
 800711e:	d507      	bpl.n	8007130 <niffs_chk+0x1f0>
 8007120:	f8db 3000 	ldr.w	r3, [fp]
 8007124:	b923      	cbnz	r3, 8007130 <niffs_chk+0x1f0>
 8007126:	4822      	ldr	r0, [pc, #136]	; (80071b0 <niffs_chk+0x270>)
 8007128:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800712c:	f002 f836 	bl	800919c <arcprint>
    res = niffs_traverse(fs, arg.last_pix, 0, niffs_chk_movi_objhdr_pages_v, &arg);
 8007130:	4b20      	ldr	r3, [pc, #128]	; (80071b4 <niffs_chk+0x274>)
 8007132:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8007136:	f8cd a000 	str.w	sl, [sp]
 800713a:	4630      	mov	r0, r6
 800713c:	2200      	movs	r2, #0
 800713e:	f7fd fc17 	bl	8004970 <niffs_traverse>
    u8_t cont = res == NIFFS_VIS_END;
    if (res == NIFFS_VIS_END) res = NIFFS_OK;
    check(res);
 8007142:	f030 0402 	bics.w	r4, r0, #2

  int res;
  do {
    // find a chunk or all movi obj hdrs, and tidy away any orphaned pages
    NIFFS_DBG("check : find MOVI obj pix:%04x--end\n", arg.last_pix);
    res = niffs_traverse(fs, arg.last_pix, 0, niffs_chk_movi_objhdr_pages_v, &arg);
 8007146:	4607      	mov	r7, r0
    u8_t cont = res == NIFFS_VIS_END;
    if (res == NIFFS_VIS_END) res = NIFFS_OK;
    check(res);
 8007148:	682b      	ldr	r3, [r5, #0]
 800714a:	d037      	beq.n	80071bc <niffs_chk+0x27c>
 800714c:	055c      	lsls	r4, r3, #21
 800714e:	d571      	bpl.n	8007234 <niffs_chk+0x2f4>
 8007150:	4b07      	ldr	r3, [pc, #28]	; (8007170 <niffs_chk+0x230>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d16d      	bne.n	8007234 <niffs_chk+0x2f4>
 8007158:	f240 736d 	movw	r3, #1901	; 0x76d
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	4805      	ldr	r0, [pc, #20]	; (8007174 <niffs_chk+0x234>)
 8007160:	4639      	mov	r1, r7
 8007162:	4a15      	ldr	r2, [pc, #84]	; (80071b8 <niffs_chk+0x278>)
 8007164:	4b06      	ldr	r3, [pc, #24]	; (8007180 <niffs_chk+0x240>)
 8007166:	f002 f819 	bl	800919c <arcprint>
 800716a:	e063      	b.n	8007234 <niffs_chk+0x2f4>
 800716c:	20004f80 	.word	0x20004f80
 8007170:	20004f84 	.word	0x20004f84
 8007174:	08010535 	.word	0x08010535
 8007178:	ffffd4e9 	.word	0xffffd4e9
 800717c:	0800ea40 	.word	0x0800ea40
 8007180:	0801054b 	.word	0x0801054b
 8007184:	08010f01 	.word	0x08010f01
 8007188:	080044dd 	.word	0x080044dd
 800718c:	08003f51 	.word	0x08003f51
 8007190:	0800ea4a 	.word	0x0800ea4a
 8007194:	08010f4a 	.word	0x08010f4a
 8007198:	08004c9d 	.word	0x08004c9d
 800719c:	0800ea86 	.word	0x0800ea86
 80071a0:	08010f6b 	.word	0x08010f6b
 80071a4:	080046e1 	.word	0x080046e1
 80071a8:	0800eaab 	.word	0x0800eaab
 80071ac:	08010f9f 	.word	0x08010f9f
 80071b0:	08010fc3 	.word	0x08010fc3
 80071b4:	0800479d 	.word	0x0800479d
 80071b8:	0800eacc 	.word	0x0800eacc

    // remove all pages with too high a span index for this object header
    NIFFS_DBG("check : find MOVI obj pix:%04x--end - got us %i entries\n", arg.last_pix, arg.ix);
 80071bc:	0558      	lsls	r0, r3, #21
 80071be:	d508      	bpl.n	80071d2 <niffs_chk+0x292>
 80071c0:	f8db 3000 	ldr.w	r3, [fp]
 80071c4:	b92b      	cbnz	r3, 80071d2 <niffs_chk+0x292>
 80071c6:	484a      	ldr	r0, [pc, #296]	; (80072f0 <niffs_chk+0x3b0>)
 80071c8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80071cc:	9a05      	ldr	r2, [sp, #20]
 80071ce:	f001 ffe5 	bl	800919c <arcprint>
    u32_t i;
    niffs_page_ix *log = (niffs_page_ix *)fs->buf;
 80071d2:	6933      	ldr	r3, [r6, #16]
    for (i = 0; i < arg.ix; i++) {
 80071d4:	f04f 0900 	mov.w	r9, #0
 80071d8:	9a05      	ldr	r2, [sp, #20]
 80071da:	4591      	cmp	r9, r2
 80071dc:	d21c      	bcs.n	8007218 <niffs_chk+0x2d8>
      res = niffs_chk_tidy_movi_objhdr_page(fs, log[i], 0);
 80071de:	f833 1019 	ldrh.w	r1, [r3, r9, lsl #1]
 80071e2:	4630      	mov	r0, r6
 80071e4:	2200      	movs	r2, #0
 80071e6:	9303      	str	r3, [sp, #12]
 80071e8:	f7fd fc28 	bl	8004a3c <niffs_chk_tidy_movi_objhdr_page>
      check(res);
 80071ec:	9b03      	ldr	r3, [sp, #12]
 80071ee:	4680      	mov	r8, r0
 80071f0:	b178      	cbz	r0, 8007212 <niffs_chk+0x2d2>
 80071f2:	682b      	ldr	r3, [r5, #0]
 80071f4:	0559      	lsls	r1, r3, #21
 80071f6:	d51f      	bpl.n	8007238 <niffs_chk+0x2f8>
 80071f8:	4b3e      	ldr	r3, [pc, #248]	; (80072f4 <niffs_chk+0x3b4>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	b9e3      	cbnz	r3, 8007238 <niffs_chk+0x2f8>
 80071fe:	f240 7375 	movw	r3, #1909	; 0x775
 8007202:	9300      	str	r3, [sp, #0]
 8007204:	483c      	ldr	r0, [pc, #240]	; (80072f8 <niffs_chk+0x3b8>)
 8007206:	4641      	mov	r1, r8
 8007208:	4a3c      	ldr	r2, [pc, #240]	; (80072fc <niffs_chk+0x3bc>)
 800720a:	4b3d      	ldr	r3, [pc, #244]	; (8007300 <niffs_chk+0x3c0>)
 800720c:	f001 ffc6 	bl	800919c <arcprint>
 8007210:	e012      	b.n	8007238 <niffs_chk+0x2f8>

    // remove all pages with too high a span index for this object header
    NIFFS_DBG("check : find MOVI obj pix:%04x--end - got us %i entries\n", arg.last_pix, arg.ix);
    u32_t i;
    niffs_page_ix *log = (niffs_page_ix *)fs->buf;
    for (i = 0; i < arg.ix; i++) {
 8007212:	f109 0901 	add.w	r9, r9, #1
 8007216:	e7df      	b.n	80071d8 <niffs_chk+0x298>
      res = niffs_chk_tidy_movi_objhdr_page(fs, log[i], 0);
      check(res);
    }

    if (cont) {
 8007218:	2f02      	cmp	r7, #2
 800721a:	f47f af7e 	bne.w	800711a <niffs_chk+0x1da>
      // either finished, or log full
      if (arg.ix >= arg.len) {
 800721e:	9b06      	ldr	r3, [sp, #24]
 8007220:	429a      	cmp	r2, r3
 8007222:	d315      	bcc.n	8007250 <niffs_chk+0x310>
        // log full, continue
        niffs_memset(fs->buf, 0, fs->buf_len);
 8007224:	6930      	ldr	r0, [r6, #16]
 8007226:	2100      	movs	r1, #0
 8007228:	6972      	ldr	r2, [r6, #20]
 800722a:	f007 f8b1 	bl	800e390 <memset>
        arg.ix = 0;
 800722e:	2300      	movs	r3, #0
 8007230:	9305      	str	r3, [sp, #20]
 8007232:	e770      	b.n	8007116 <niffs_chk+0x1d6>

  int res;
  do {
    // find a chunk or all movi obj hdrs, and tidy away any orphaned pages
    NIFFS_DBG("check : find MOVI obj pix:%04x--end\n", arg.last_pix);
    res = niffs_traverse(fs, arg.last_pix, 0, niffs_chk_movi_objhdr_pages_v, &arg);
 8007234:	463c      	mov	r4, r7
 8007236:	e000      	b.n	800723a <niffs_chk+0x2fa>
    // remove all pages with too high a span index for this object header
    NIFFS_DBG("check : find MOVI obj pix:%04x--end - got us %i entries\n", arg.last_pix, arg.ix);
    u32_t i;
    niffs_page_ix *log = (niffs_page_ix *)fs->buf;
    for (i = 0; i < arg.ix; i++) {
      res = niffs_chk_tidy_movi_objhdr_page(fs, log[i], 0);
 8007238:	4644      	mov	r4, r8
  check(res);

  // fixes orphaned data pages by aborted file length update
  NIFFS_DBG("check : * delete orphans by length\n");
  res = niffs_chk_movi_objhdr_pages(fs);
  check(res);
 800723a:	b14c      	cbz	r4, 8007250 <niffs_chk+0x310>
 800723c:	682b      	ldr	r3, [r5, #0]
 800723e:	055a      	lsls	r2, r3, #21
 8007240:	d552      	bpl.n	80072e8 <niffs_chk+0x3a8>
 8007242:	4b2c      	ldr	r3, [pc, #176]	; (80072f4 <niffs_chk+0x3b4>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d14e      	bne.n	80072e8 <niffs_chk+0x3a8>
 800724a:	f240 73ae 	movw	r3, #1966	; 0x7ae
 800724e:	e6e8      	b.n	8007022 <niffs_chk+0xe2>

  // do a gc if crammed
  res = niffs_setup(fs); // recount pages
 8007250:	4630      	mov	r0, r6
 8007252:	f7fc ffa7 	bl	80041a4 <niffs_setup>
  check(res);
 8007256:	4607      	mov	r7, r0
 8007258:	b180      	cbz	r0, 800727c <niffs_chk+0x33c>
 800725a:	682b      	ldr	r3, [r5, #0]
 800725c:	055b      	lsls	r3, r3, #21
 800725e:	d536      	bpl.n	80072ce <niffs_chk+0x38e>
 8007260:	4b24      	ldr	r3, [pc, #144]	; (80072f4 <niffs_chk+0x3b4>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d132      	bne.n	80072ce <niffs_chk+0x38e>
 8007268:	f240 73b2 	movw	r3, #1970	; 0x7b2
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	4822      	ldr	r0, [pc, #136]	; (80072f8 <niffs_chk+0x3b8>)
 8007270:	4639      	mov	r1, r7
 8007272:	4a24      	ldr	r2, [pc, #144]	; (8007304 <niffs_chk+0x3c4>)
 8007274:	4b22      	ldr	r3, [pc, #136]	; (8007300 <niffs_chk+0x3c0>)
 8007276:	f001 ff91 	bl	800919c <arcprint>
 800727a:	e028      	b.n	80072ce <niffs_chk+0x38e>
  if (fs->free_pages < fs->pages_per_sector) {
 800727c:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800727e:	6a32      	ldr	r2, [r6, #32]
 8007280:	4291      	cmp	r1, r2
 8007282:	d231      	bcs.n	80072e8 <niffs_chk+0x3a8>
    NIFFS_DBG("check : * gc needed, %i free, must at least have %i\n", fs->free_pages, fs->pages_per_sector);
 8007284:	682b      	ldr	r3, [r5, #0]
 8007286:	055f      	lsls	r7, r3, #21
 8007288:	d505      	bpl.n	8007296 <niffs_chk+0x356>
 800728a:	4b1a      	ldr	r3, [pc, #104]	; (80072f4 <niffs_chk+0x3b4>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	b913      	cbnz	r3, 8007296 <niffs_chk+0x356>
 8007290:	481d      	ldr	r0, [pc, #116]	; (8007308 <niffs_chk+0x3c8>)
 8007292:	f001 ff83 	bl	800919c <arcprint>
    res = niffs_gc(fs, &dummy, 0);
 8007296:	4630      	mov	r0, r6
 8007298:	4651      	mov	r1, sl
 800729a:	2200      	movs	r2, #0
 800729c:	f7fe f8ee 	bl	800547c <niffs_gc>
    if (res == ERR_NIFFS_NO_GC_CANDIDATE)  {
 80072a0:	4b1a      	ldr	r3, [pc, #104]	; (800730c <niffs_chk+0x3cc>)
  // do a gc if crammed
  res = niffs_setup(fs); // recount pages
  check(res);
  if (fs->free_pages < fs->pages_per_sector) {
    NIFFS_DBG("check : * gc needed, %i free, must at least have %i\n", fs->free_pages, fs->pages_per_sector);
    res = niffs_gc(fs, &dummy, 0);
 80072a2:	4606      	mov	r6, r0
    if (res == ERR_NIFFS_NO_GC_CANDIDATE)  {
 80072a4:	4298      	cmp	r0, r3
 80072a6:	d001      	beq.n	80072ac <niffs_chk+0x36c>
      res = ERR_NIFFS_OVERFLOW;
    }
  }

  check(res);
 80072a8:	b908      	cbnz	r0, 80072ae <niffs_chk+0x36e>
 80072aa:	e01d      	b.n	80072e8 <niffs_chk+0x3a8>
  check(res);
  if (fs->free_pages < fs->pages_per_sector) {
    NIFFS_DBG("check : * gc needed, %i free, must at least have %i\n", fs->free_pages, fs->pages_per_sector);
    res = niffs_gc(fs, &dummy, 0);
    if (res == ERR_NIFFS_NO_GC_CANDIDATE)  {
      res = ERR_NIFFS_OVERFLOW;
 80072ac:	4e18      	ldr	r6, [pc, #96]	; (8007310 <niffs_chk+0x3d0>)
    }
  }

  check(res);
 80072ae:	682b      	ldr	r3, [r5, #0]
 80072b0:	055c      	lsls	r4, r3, #21
 80072b2:	d50e      	bpl.n	80072d2 <niffs_chk+0x392>
 80072b4:	4b0f      	ldr	r3, [pc, #60]	; (80072f4 <niffs_chk+0x3b4>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	b95b      	cbnz	r3, 80072d2 <niffs_chk+0x392>
 80072ba:	f240 73bb 	movw	r3, #1979	; 0x7bb
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	480d      	ldr	r0, [pc, #52]	; (80072f8 <niffs_chk+0x3b8>)
 80072c2:	4631      	mov	r1, r6
 80072c4:	4a0f      	ldr	r2, [pc, #60]	; (8007304 <niffs_chk+0x3c4>)
 80072c6:	4b0e      	ldr	r3, [pc, #56]	; (8007300 <niffs_chk+0x3c0>)
 80072c8:	f001 ff68 	bl	800919c <arcprint>
 80072cc:	e001      	b.n	80072d2 <niffs_chk+0x392>
 80072ce:	463c      	mov	r4, r7
 80072d0:	e00a      	b.n	80072e8 <niffs_chk+0x3a8>
 80072d2:	4634      	mov	r4, r6
 80072d4:	e008      	b.n	80072e8 <niffs_chk+0x3a8>
  check(res);

  // fixes object headers with duplicate ids
  NIFFS_DBG("check : * remove object headers with duplicate ids\n");
  res = niffs_find_duplicate_obj_hdr_ids(fs);
  check(res);
 80072d6:	682b      	ldr	r3, [r5, #0]
 80072d8:	055e      	lsls	r6, r3, #21
 80072da:	d505      	bpl.n	80072e8 <niffs_chk+0x3a8>
 80072dc:	4b05      	ldr	r3, [pc, #20]	; (80072f4 <niffs_chk+0x3b4>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	b913      	cbnz	r3, 80072e8 <niffs_chk+0x3a8>
 80072e2:	f240 73a9 	movw	r3, #1961	; 0x7a9
 80072e6:	e69c      	b.n	8007022 <niffs_chk+0xe2>
  }

  check(res);

  return res;
}
 80072e8:	4620      	mov	r0, r4
 80072ea:	b009      	add	sp, #36	; 0x24
 80072ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f0:	08010fe8 	.word	0x08010fe8
 80072f4:	20004f84 	.word	0x20004f84
 80072f8:	08010535 	.word	0x08010535
 80072fc:	0800eacc 	.word	0x0800eacc
 8007300:	0801054b 	.word	0x0801054b
 8007304:	0800ea40 	.word	0x0800ea40
 8007308:	08011021 	.word	0x08011021
 800730c:	ffffd4ec 	.word	0xffffd4ec
 8007310:	ffffd4e4 	.word	0xffffd4e4

08007314 <NIFFS_init>:

///////////////////////////////////// API ////////////////////////////////////

int NIFFS_init(niffs *fs, u8_t *phys_addr, u32_t sectors, u32_t sector_size, u32_t page_size,
    u8_t *buf, u32_t buf_len, niffs_file_desc *descs, u32_t file_desc_len,
    niffs_hal_erase_f erase_f, niffs_hal_write_f write_f, u32_t lin_sectors) {
 8007314:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007318:	4604      	mov	r4, r0
 800731a:	461f      	mov	r7, r3
  fs->phys_addr = phys_addr;
  fs->sectors = sectors;
  fs->sector_size = sector_size;
 800731c:	60a3      	str	r3, [r4, #8]
  fs->buf = buf;
 800731e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

///////////////////////////////////// API ////////////////////////////////////

int NIFFS_init(niffs *fs, u8_t *phys_addr, u32_t sectors, u32_t sector_size, u32_t page_size,
    u8_t *buf, u32_t buf_len, niffs_file_desc *descs, u32_t file_desc_len,
    niffs_hal_erase_f erase_f, niffs_hal_write_f write_f, u32_t lin_sectors) {
 8007320:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  fs->phys_addr = phys_addr;
  fs->sectors = sectors;
  fs->sector_size = sector_size;
  fs->buf = buf;
 8007322:	6123      	str	r3, [r4, #16]
  fs->buf_len = buf_len;
  fs->hal_er = erase_f;
 8007324:	9b0f      	ldr	r3, [sp, #60]	; 0x3c

///////////////////////////////////// API ////////////////////////////////////

int NIFFS_init(niffs *fs, u8_t *phys_addr, u32_t sectors, u32_t sector_size, u32_t page_size,
    u8_t *buf, u32_t buf_len, niffs_file_desc *descs, u32_t file_desc_len,
    niffs_hal_erase_f erase_f, niffs_hal_write_f write_f, u32_t lin_sectors) {
 8007326:	4691      	mov	r9, r2
 8007328:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800732c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800732e:	980d      	ldr	r0, [sp, #52]	; 0x34
  fs->phys_addr = phys_addr;
  fs->sectors = sectors;
  fs->sector_size = sector_size;
  fs->buf = buf;
  fs->buf_len = buf_len;
  fs->hal_er = erase_f;
 8007330:	61e3      	str	r3, [r4, #28]
  fs->hal_wr = write_f;
 8007332:	9b10      	ldr	r3, [sp, #64]	; 0x40

int NIFFS_init(niffs *fs, u8_t *phys_addr, u32_t sectors, u32_t sector_size, u32_t page_size,
    u8_t *buf, u32_t buf_len, niffs_file_desc *descs, u32_t file_desc_len,
    niffs_hal_erase_f erase_f, niffs_hal_write_f write_f, u32_t lin_sectors) {
  fs->phys_addr = phys_addr;
  fs->sectors = sectors;
 8007334:	e884 0202 	stmia.w	r4, {r1, r9}
  fs->buf_len = buf_len;
  fs->hal_er = erase_f;
  fs->hal_wr = write_f;
  fs->descs = descs;
  fs->descs_len = file_desc_len;
  fs->last_free_pix = 0;
 8007338:	2100      	movs	r1, #0
  fs->sectors = sectors;
  fs->sector_size = sector_size;
  fs->buf = buf;
  fs->buf_len = buf_len;
  fs->hal_er = erase_f;
  fs->hal_wr = write_f;
 800733a:	61a3      	str	r3, [r4, #24]
  fs->descs = descs;
  fs->descs_len = file_desc_len;
 800733c:	6362      	str	r2, [r4, #52]	; 0x34
    niffs_hal_erase_f erase_f, niffs_hal_write_f write_f, u32_t lin_sectors) {
  fs->phys_addr = phys_addr;
  fs->sectors = sectors;
  fs->sector_size = sector_size;
  fs->buf = buf;
  fs->buf_len = buf_len;
 800733e:	f8c4 a014 	str.w	sl, [r4, #20]
  fs->hal_er = erase_f;
  fs->hal_wr = write_f;
  fs->descs = descs;
 8007342:	6320      	str	r0, [r4, #48]	; 0x30
  fs->descs_len = file_desc_len;
  fs->last_free_pix = 0;
 8007344:	84a1      	strh	r1, [r4, #36]	; 0x24
  fs->mounted = 0;
 8007346:	f884 1026 	strb.w	r1, [r4, #38]	; 0x26
  fs->max_era = 0;
 800734a:	8721      	strh	r1, [r4, #56]	; 0x38

  u32_t pages_per_sector = sector_size / page_size;
 800734c:	fbb7 f8f6 	udiv	r8, r7, r6
  niffs_memset(descs, 0, file_desc_len * sizeof(niffs_file_desc));
 8007350:	0112      	lsls	r2, r2, #4
 8007352:	f007 f81d 	bl	800e390 <memset>

  // calculate actual page size incl page header - leave room for sector header
  if (sector_size % page_size < sizeof(niffs_sector_hdr)) {
 8007356:	fb06 7318 	mls	r3, r6, r8, r7
 800735a:	2b03      	cmp	r3, #3
 800735c:	d80b      	bhi.n	8007376 <NIFFS_init+0x62>
    fs->page_size = page_size
        /* int part */  - (sizeof(niffs_sector_hdr) / pages_per_sector)
 800735e:	2304      	movs	r3, #4
 8007360:	fbb3 f3f8 	udiv	r3, r3, r8
 8007364:	1af2      	subs	r2, r6, r3
        /* frac part */ - ((sizeof(niffs_sector_hdr) % pages_per_sector) != 0 ? 1 : 0);
 8007366:	fb08 f303 	mul.w	r3, r8, r3
 800736a:	2b04      	cmp	r3, #4
 800736c:	bf0c      	ite	eq
 800736e:	4613      	moveq	r3, r2
 8007370:	1e53      	subne	r3, r2, #1
  u32_t pages_per_sector = sector_size / page_size;
  niffs_memset(descs, 0, file_desc_len * sizeof(niffs_file_desc));

  // calculate actual page size incl page header - leave room for sector header
  if (sector_size % page_size < sizeof(niffs_sector_hdr)) {
    fs->page_size = page_size
 8007372:	60e3      	str	r3, [r4, #12]
 8007374:	e000      	b.n	8007378 <NIFFS_init+0x64>
        /* int part */  - (sizeof(niffs_sector_hdr) / pages_per_sector)
        /* frac part */ - ((sizeof(niffs_sector_hdr) % pages_per_sector) != 0 ? 1 : 0);
  } else {
    fs->page_size = page_size;
 8007376:	60e6      	str	r6, [r4, #12]
  }
  fs->page_size = fs->page_size & (~(NIFFS_WORD_ALIGN-1));
 8007378:	68e3      	ldr	r3, [r4, #12]
 800737a:	4d58      	ldr	r5, [pc, #352]	; (80074dc <NIFFS_init+0x1c8>)
 800737c:	f023 0301 	bic.w	r3, r3, #1
 8007380:	60e3      	str	r3, [r4, #12]

  // check conf sanity
  if (fs->page_size == 0 || fs->page_size > fs->sector_size/2) {
 8007382:	b11b      	cbz	r3, 800738c <NIFFS_init+0x78>
 8007384:	68a1      	ldr	r1, [r4, #8]
 8007386:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800738a:	d912      	bls.n	80073b2 <NIFFS_init+0x9e>
    NIFFS_DBG("conf  : page size over/underflow\n");
 800738c:	682b      	ldr	r3, [r5, #0]
 800738e:	055e      	lsls	r6, r3, #21
 8007390:	d505      	bpl.n	800739e <NIFFS_init+0x8a>
 8007392:	4b53      	ldr	r3, [pc, #332]	; (80074e0 <NIFFS_init+0x1cc>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	b913      	cbnz	r3, 800739e <NIFFS_init+0x8a>
 8007398:	4852      	ldr	r0, [pc, #328]	; (80074e4 <NIFFS_init+0x1d0>)
 800739a:	f001 feff 	bl	800919c <arcprint>
    check(ERR_NIFFS_BAD_CONF);
 800739e:	682b      	ldr	r3, [r5, #0]
 80073a0:	055c      	lsls	r4, r3, #21
 80073a2:	d54b      	bpl.n	800743c <NIFFS_init+0x128>
 80073a4:	4b4e      	ldr	r3, [pc, #312]	; (80074e0 <NIFFS_init+0x1cc>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d147      	bne.n	800743c <NIFFS_init+0x128>
 80073ac:	f640 0318 	movw	r3, #2072	; 0x818
 80073b0:	e03d      	b.n	800742e <NIFFS_init+0x11a>
  }
  if (sizeof(niffs_page_id_raw)*8 < NIFFS_OBJ_ID_BITS + NIFFS_SPAN_IX_BITS) {
    NIFFS_DBG("conf  : niffs_page_id_raw type too small to fit defines NIFFS_OBJ_ID_BITS and NIFFS_SPAN_IX_BITS\n");
    check(ERR_NIFFS_BAD_CONF);
  }
  if ((((fs->sector_size - sizeof(niffs_sector_hdr)) / fs->page_size) * fs->sectors) > (1<<NIFFS_OBJ_ID_BITS)) {
 80073b2:	3904      	subs	r1, #4
 80073b4:	6862      	ldr	r2, [r4, #4]
 80073b6:	fbb1 f1f3 	udiv	r1, r1, r3
 80073ba:	4351      	muls	r1, r2
 80073bc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80073c0:	d911      	bls.n	80073e6 <NIFFS_init+0xd2>
    NIFFS_DBG("conf  : niffs_obj_id type too small to ensure object id uniqueness of %i pages\n",
 80073c2:	682b      	ldr	r3, [r5, #0]
 80073c4:	0558      	lsls	r0, r3, #21
 80073c6:	d505      	bpl.n	80073d4 <NIFFS_init+0xc0>
 80073c8:	4b45      	ldr	r3, [pc, #276]	; (80074e0 <NIFFS_init+0x1cc>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	b913      	cbnz	r3, 80073d4 <NIFFS_init+0xc0>
 80073ce:	4846      	ldr	r0, [pc, #280]	; (80074e8 <NIFFS_init+0x1d4>)
 80073d0:	f001 fee4 	bl	800919c <arcprint>
        (u32_t)(((fs->sector_size - sizeof(niffs_sector_hdr)) / fs->page_size) * fs->sectors));
    check(ERR_NIFFS_BAD_CONF);
 80073d4:	682b      	ldr	r3, [r5, #0]
 80073d6:	055a      	lsls	r2, r3, #21
 80073d8:	d530      	bpl.n	800743c <NIFFS_init+0x128>
 80073da:	4b41      	ldr	r3, [pc, #260]	; (80074e0 <NIFFS_init+0x1cc>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	bb6b      	cbnz	r3, 800743c <NIFFS_init+0x128>
 80073e0:	f640 0321 	movw	r3, #2081	; 0x821
 80073e4:	e023      	b.n	800742e <NIFFS_init+0x11a>
  }
  if (sizeof(niffs_obj_id)*8 < NIFFS_OBJ_ID_BITS) {
    NIFFS_DBG("conf  : niffs_obj_id type too small to fit define NIFFS_OBJ_ID_BITS\n");
    check(ERR_NIFFS_BAD_CONF);
  }
  if (buf_len < page_size || buf_len < (((sector_size * sectors) / page_size)+7) / 8) {
 80073e6:	45b2      	cmp	sl, r6
 80073e8:	d307      	bcc.n	80073fa <NIFFS_init+0xe6>
 80073ea:	fb07 f309 	mul.w	r3, r7, r9
 80073ee:	fbb3 f3f6 	udiv	r3, r3, r6
 80073f2:	3307      	adds	r3, #7
 80073f4:	ebba 0fd3 	cmp.w	sl, r3, lsr #3
 80073f8:	d222      	bcs.n	8007440 <NIFFS_init+0x12c>
    NIFFS_DBG("conf  : buffer length too small, need %i bytes\n",
 80073fa:	682b      	ldr	r3, [r5, #0]
 80073fc:	055b      	lsls	r3, r3, #21
 80073fe:	d50e      	bpl.n	800741e <NIFFS_init+0x10a>
 8007400:	4b37      	ldr	r3, [pc, #220]	; (80074e0 <NIFFS_init+0x1cc>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	b95b      	cbnz	r3, 800741e <NIFFS_init+0x10a>
 8007406:	fb07 f109 	mul.w	r1, r7, r9
 800740a:	fbb1 f1f6 	udiv	r1, r1, r6
 800740e:	3107      	adds	r1, #7
 8007410:	08c9      	lsrs	r1, r1, #3
 8007412:	4836      	ldr	r0, [pc, #216]	; (80074ec <NIFFS_init+0x1d8>)
 8007414:	42b1      	cmp	r1, r6
 8007416:	bf38      	it	cc
 8007418:	4631      	movcc	r1, r6
 800741a:	f001 febf 	bl	800919c <arcprint>
        NIFFS_MAX(page_size, (((sector_size * sectors) / page_size)+7) / 8));
    check(ERR_NIFFS_BAD_CONF);
 800741e:	682b      	ldr	r3, [r5, #0]
 8007420:	055c      	lsls	r4, r3, #21
 8007422:	d50b      	bpl.n	800743c <NIFFS_init+0x128>
 8007424:	4b2e      	ldr	r3, [pc, #184]	; (80074e0 <NIFFS_init+0x1cc>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	b943      	cbnz	r3, 800743c <NIFFS_init+0x128>
 800742a:	f640 0334 	movw	r3, #2100	; 0x834
 800742e:	9300      	str	r3, [sp, #0]
 8007430:	482f      	ldr	r0, [pc, #188]	; (80074f0 <NIFFS_init+0x1dc>)
 8007432:	4930      	ldr	r1, [pc, #192]	; (80074f4 <NIFFS_init+0x1e0>)
 8007434:	4a30      	ldr	r2, [pc, #192]	; (80074f8 <NIFFS_init+0x1e4>)
 8007436:	4b31      	ldr	r3, [pc, #196]	; (80074fc <NIFFS_init+0x1e8>)
 8007438:	f001 feb0 	bl	800919c <arcprint>
 800743c:	482d      	ldr	r0, [pc, #180]	; (80074f4 <NIFFS_init+0x1e0>)
 800743e:	e049      	b.n	80074d4 <NIFFS_init+0x1c0>
  fs->lin_sectors = lin_sectors;
#else
  (void)lin_sectors;
#endif

  NIFFS_DBG("page size req:         %i\n", page_size);
 8007440:	682b      	ldr	r3, [r5, #0]
    NIFFS_DBG("conf  : buffer length too small, need %i bytes\n",
        NIFFS_MAX(page_size, (((sector_size * sectors) / page_size)+7) / 8));
    check(ERR_NIFFS_BAD_CONF);
  }

  fs->pages_per_sector = pages_per_sector;
 8007442:	f8c4 8020 	str.w	r8, [r4, #32]
  fs->lin_sectors = lin_sectors;
#else
  (void)lin_sectors;
#endif

  NIFFS_DBG("page size req:         %i\n", page_size);
 8007446:	0558      	lsls	r0, r3, #21
 8007448:	d506      	bpl.n	8007458 <NIFFS_init+0x144>
 800744a:	4b25      	ldr	r3, [pc, #148]	; (80074e0 <NIFFS_init+0x1cc>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	b91b      	cbnz	r3, 8007458 <NIFFS_init+0x144>
 8007450:	482b      	ldr	r0, [pc, #172]	; (8007500 <NIFFS_init+0x1ec>)
 8007452:	4631      	mov	r1, r6
 8007454:	f001 fea2 	bl	800919c <arcprint>
  NIFFS_DBG("actual page size:      %i\n", fs->page_size);
 8007458:	682b      	ldr	r3, [r5, #0]
 800745a:	0559      	lsls	r1, r3, #21
 800745c:	d506      	bpl.n	800746c <NIFFS_init+0x158>
 800745e:	4b20      	ldr	r3, [pc, #128]	; (80074e0 <NIFFS_init+0x1cc>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	b91b      	cbnz	r3, 800746c <NIFFS_init+0x158>
 8007464:	4827      	ldr	r0, [pc, #156]	; (8007504 <NIFFS_init+0x1f0>)
 8007466:	68e1      	ldr	r1, [r4, #12]
 8007468:	f001 fe98 	bl	800919c <arcprint>
  NIFFS_DBG("num unique obj ids:    %i\n", (1<<NIFFS_OBJ_ID_BITS)-2);
 800746c:	682b      	ldr	r3, [r5, #0]
 800746e:	055a      	lsls	r2, r3, #21
 8007470:	d506      	bpl.n	8007480 <NIFFS_init+0x16c>
 8007472:	4b1b      	ldr	r3, [pc, #108]	; (80074e0 <NIFFS_init+0x1cc>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	b91b      	cbnz	r3, 8007480 <NIFFS_init+0x16c>
 8007478:	4823      	ldr	r0, [pc, #140]	; (8007508 <NIFFS_init+0x1f4>)
 800747a:	21fe      	movs	r1, #254	; 0xfe
 800747c:	f001 fe8e 	bl	800919c <arcprint>
  NIFFS_DBG("max span ix:           %i\n", (1<<NIFFS_SPAN_IX_BITS));
 8007480:	682b      	ldr	r3, [r5, #0]
 8007482:	055b      	lsls	r3, r3, #21
 8007484:	d507      	bpl.n	8007496 <NIFFS_init+0x182>
 8007486:	4b16      	ldr	r3, [pc, #88]	; (80074e0 <NIFFS_init+0x1cc>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	b923      	cbnz	r3, 8007496 <NIFFS_init+0x182>
 800748c:	481f      	ldr	r0, [pc, #124]	; (800750c <NIFFS_init+0x1f8>)
 800748e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007492:	f001 fe83 	bl	800919c <arcprint>
  NIFFS_DBG("max file data length:  %i\n", (u32_t)((1<<NIFFS_SPAN_IX_BITS) * (fs->page_size - sizeof(niffs_page_hdr)) - sizeof(niffs_object_hdr)));
 8007496:	682b      	ldr	r3, [r5, #0]
 8007498:	055f      	lsls	r7, r3, #21
 800749a:	d509      	bpl.n	80074b0 <NIFFS_init+0x19c>
 800749c:	4b10      	ldr	r3, [pc, #64]	; (80074e0 <NIFFS_init+0x1cc>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	b933      	cbnz	r3, 80074b0 <NIFFS_init+0x19c>
 80074a2:	68e1      	ldr	r1, [r4, #12]
 80074a4:	481a      	ldr	r0, [pc, #104]	; (8007510 <NIFFS_init+0x1fc>)
 80074a6:	0209      	lsls	r1, r1, #8
 80074a8:	f2a1 411a 	subw	r1, r1, #1050	; 0x41a
 80074ac:	f001 fe76 	bl	800919c <arcprint>
  NIFFS_DBG("max num files by size: %i\n", (u32_t)(((fs->sector_size - sizeof(niffs_sector_hdr)) / (fs->page_size)) * fs->sectors));
 80074b0:	6828      	ldr	r0, [r5, #0]
 80074b2:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 80074b6:	d00d      	beq.n	80074d4 <NIFFS_init+0x1c0>
 80074b8:	4b09      	ldr	r3, [pc, #36]	; (80074e0 <NIFFS_init+0x1cc>)
 80074ba:	681d      	ldr	r5, [r3, #0]
 80074bc:	b94d      	cbnz	r5, 80074d2 <NIFFS_init+0x1be>
 80074be:	68a3      	ldr	r3, [r4, #8]
 80074c0:	6861      	ldr	r1, [r4, #4]
 80074c2:	1f1a      	subs	r2, r3, #4
 80074c4:	68e3      	ldr	r3, [r4, #12]
 80074c6:	4813      	ldr	r0, [pc, #76]	; (8007514 <NIFFS_init+0x200>)
 80074c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074cc:	4359      	muls	r1, r3
 80074ce:	f001 fe65 	bl	800919c <arcprint>

  return NIFFS_OK;
 80074d2:	2000      	movs	r0, #0
}
 80074d4:	b002      	add	sp, #8
 80074d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074da:	bf00      	nop
 80074dc:	20004f80 	.word	0x20004f80
 80074e0:	20004f84 	.word	0x20004f84
 80074e4:	08011056 	.word	0x08011056
 80074e8:	08011078 	.word	0x08011078
 80074ec:	080110c8 	.word	0x080110c8
 80074f0:	08010535 	.word	0x08010535
 80074f4:	ffffd507 	.word	0xffffd507
 80074f8:	0800eae8 	.word	0x0800eae8
 80074fc:	0801054b 	.word	0x0801054b
 8007500:	080110f8 	.word	0x080110f8
 8007504:	08011113 	.word	0x08011113
 8007508:	0801112e 	.word	0x0801112e
 800750c:	08011149 	.word	0x08011149
 8007510:	08011164 	.word	0x08011164
 8007514:	0801117f 	.word	0x0801117f

08007518 <NIFFS_format>:

int NIFFS_format(niffs *fs) {
 8007518:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (fs->mounted) check(ERR_NIFFS_MOUNTED);
 800751c:	f890 5026 	ldrb.w	r5, [r0, #38]	; 0x26
  NIFFS_DBG("max num files by size: %i\n", (u32_t)(((fs->sector_size - sizeof(niffs_sector_hdr)) / (fs->page_size)) * fs->sectors));

  return NIFFS_OK;
}

int NIFFS_format(niffs *fs) {
 8007520:	4606      	mov	r6, r0
  if (fs->mounted) check(ERR_NIFFS_MOUNTED);
 8007522:	b91d      	cbnz	r5, 800752c <NIFFS_format+0x14>
  for (s = 0; res == NIFFS_OK && s < fs->sectors; s++) {
    res = niffs_erase_sector(fs, s);
    check(res);
    niffs_sector_hdr *shdr = (niffs_sector_hdr *)_NIFFS_SECTOR_2_ADDR(fs, s);
    if (shdr->abra != _NIFFS_SECT_MAGIC(fs)) {
      NIFFS_DBG("\nfatal: erase sector %i hdr magic, expected %08x, was %08x\n",
 8007524:	4f29      	ldr	r7, [pc, #164]	; (80075cc <NIFFS_format+0xb4>)
 8007526:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80075d0 <NIFFS_format+0xb8>
 800752a:	e025      	b.n	8007578 <NIFFS_format+0x60>

  return NIFFS_OK;
}

int NIFFS_format(niffs *fs) {
  if (fs->mounted) check(ERR_NIFFS_MOUNTED);
 800752c:	4b27      	ldr	r3, [pc, #156]	; (80075cc <NIFFS_format+0xb4>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	055c      	lsls	r4, r3, #21
 8007532:	d544      	bpl.n	80075be <NIFFS_format+0xa6>
 8007534:	4b26      	ldr	r3, [pc, #152]	; (80075d0 <NIFFS_format+0xb8>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d140      	bne.n	80075be <NIFFS_format+0xa6>
 800753c:	f640 034f 	movw	r3, #2127	; 0x84f
 8007540:	9300      	str	r3, [sp, #0]
 8007542:	4824      	ldr	r0, [pc, #144]	; (80075d4 <NIFFS_format+0xbc>)
 8007544:	4924      	ldr	r1, [pc, #144]	; (80075d8 <NIFFS_format+0xc0>)
 8007546:	4a25      	ldr	r2, [pc, #148]	; (80075dc <NIFFS_format+0xc4>)
 8007548:	4b25      	ldr	r3, [pc, #148]	; (80075e0 <NIFFS_format+0xc8>)
 800754a:	f001 fe27 	bl	800919c <arcprint>
 800754e:	e036      	b.n	80075be <NIFFS_format+0xa6>
  int res = NIFFS_OK;
  u32_t s;
  for (s = 0; res == NIFFS_OK && s < fs->sectors; s++) {
    res = niffs_erase_sector(fs, s);
 8007550:	4630      	mov	r0, r6
 8007552:	4629      	mov	r1, r5
 8007554:	f7fc fc90 	bl	8003e78 <niffs_erase_sector>
    check(res);
 8007558:	4604      	mov	r4, r0
 800755a:	b988      	cbnz	r0, 8007580 <NIFFS_format+0x68>
    niffs_sector_hdr *shdr = (niffs_sector_hdr *)_NIFFS_SECTOR_2_ADDR(fs, s);
 800755c:	68b2      	ldr	r2, [r6, #8]
    if (shdr->abra != _NIFFS_SECT_MAGIC(fs)) {
 800755e:	6833      	ldr	r3, [r6, #0]
 8007560:	fb02 3305 	mla	r3, r2, r5, r3
 8007564:	89b2      	ldrh	r2, [r6, #12]
 8007566:	885b      	ldrh	r3, [r3, #2]
 8007568:	f482 4240 	eor.w	r2, r2, #49152	; 0xc000
 800756c:	f082 0201 	eor.w	r2, r2, #1
 8007570:	4293      	cmp	r3, r2
 8007572:	d116      	bne.n	80075a2 <NIFFS_format+0x8a>

int NIFFS_format(niffs *fs) {
  if (fs->mounted) check(ERR_NIFFS_MOUNTED);
  int res = NIFFS_OK;
  u32_t s;
  for (s = 0; res == NIFFS_OK && s < fs->sectors; s++) {
 8007574:	3501      	adds	r5, #1
 8007576:	bb24      	cbnz	r4, 80075c2 <NIFFS_format+0xaa>
 8007578:	6873      	ldr	r3, [r6, #4]
 800757a:	429d      	cmp	r5, r3
 800757c:	d3e8      	bcc.n	8007550 <NIFFS_format+0x38>
 800757e:	e01c      	b.n	80075ba <NIFFS_format+0xa2>
    res = niffs_erase_sector(fs, s);
    check(res);
 8007580:	4b12      	ldr	r3, [pc, #72]	; (80075cc <NIFFS_format+0xb4>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	0558      	lsls	r0, r3, #21
 8007586:	d51c      	bpl.n	80075c2 <NIFFS_format+0xaa>
 8007588:	4b11      	ldr	r3, [pc, #68]	; (80075d0 <NIFFS_format+0xb8>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	b9cb      	cbnz	r3, 80075c2 <NIFFS_format+0xaa>
 800758e:	f640 0354 	movw	r3, #2132	; 0x854
 8007592:	9300      	str	r3, [sp, #0]
 8007594:	480f      	ldr	r0, [pc, #60]	; (80075d4 <NIFFS_format+0xbc>)
 8007596:	4621      	mov	r1, r4
 8007598:	4a10      	ldr	r2, [pc, #64]	; (80075dc <NIFFS_format+0xc4>)
 800759a:	4b11      	ldr	r3, [pc, #68]	; (80075e0 <NIFFS_format+0xc8>)
 800759c:	f001 fdfe 	bl	800919c <arcprint>
 80075a0:	e00f      	b.n	80075c2 <NIFFS_format+0xaa>
    niffs_sector_hdr *shdr = (niffs_sector_hdr *)_NIFFS_SECTOR_2_ADDR(fs, s);
    if (shdr->abra != _NIFFS_SECT_MAGIC(fs)) {
      NIFFS_DBG("\nfatal: erase sector %i hdr magic, expected %08x, was %08x\n",
 80075a2:	6839      	ldr	r1, [r7, #0]
 80075a4:	0549      	lsls	r1, r1, #21
 80075a6:	d506      	bpl.n	80075b6 <NIFFS_format+0x9e>
 80075a8:	f8d8 1000 	ldr.w	r1, [r8]
 80075ac:	b919      	cbnz	r1, 80075b6 <NIFFS_format+0x9e>
 80075ae:	480d      	ldr	r0, [pc, #52]	; (80075e4 <NIFFS_format+0xcc>)
 80075b0:	4629      	mov	r1, r5
 80075b2:	f001 fdf3 	bl	800919c <arcprint>
          s,
          _NIFFS_SECT_MAGIC(fs),
          ((niffs_sector_hdr *)_NIFFS_SECTOR_2_ADDR(fs, s))->abra);
      res = ERR_NIFFS_SECTOR_UNFORMATTABLE;
 80075b6:	4c0c      	ldr	r4, [pc, #48]	; (80075e8 <NIFFS_format+0xd0>)
 80075b8:	e7dc      	b.n	8007574 <NIFFS_format+0x5c>
 80075ba:	2000      	movs	r0, #0
 80075bc:	e002      	b.n	80075c4 <NIFFS_format+0xac>

  return NIFFS_OK;
}

int NIFFS_format(niffs *fs) {
  if (fs->mounted) check(ERR_NIFFS_MOUNTED);
 80075be:	4806      	ldr	r0, [pc, #24]	; (80075d8 <NIFFS_format+0xc0>)
 80075c0:	e000      	b.n	80075c4 <NIFFS_format+0xac>
 80075c2:	4620      	mov	r0, r4
    res = fs->hal_er(_NIFFS_SECTOR_2_ADDR(fs, s), fs->sector_size);
    check(res);
  }
#endif
  return res;
}
 80075c4:	b002      	add	sp, #8
 80075c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075ca:	bf00      	nop
 80075cc:	20004f80 	.word	0x20004f80
 80075d0:	20004f84 	.word	0x20004f84
 80075d4:	08010535 	.word	0x08010535
 80075d8:	ffffd4e9 	.word	0xffffd4e9
 80075dc:	0800eaf3 	.word	0x0800eaf3
 80075e0:	0801054b 	.word	0x0801054b
 80075e4:	0801119a 	.word	0x0801119a
 80075e8:	ffffd4fc 	.word	0xffffd4fc

080075ec <NIFFS_mount>:

int NIFFS_mount(niffs *fs) {
 80075ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (fs->mounted) check(ERR_NIFFS_MOUNTED);
 80075ee:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
  }
#endif
  return res;
}

int NIFFS_mount(niffs *fs) {
 80075f2:	4605      	mov	r5, r0
  if (fs->mounted) check(ERR_NIFFS_MOUNTED);
 80075f4:	b183      	cbz	r3, 8007618 <NIFFS_mount+0x2c>
 80075f6:	4b17      	ldr	r3, [pc, #92]	; (8007654 <NIFFS_mount+0x68>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	055b      	lsls	r3, r3, #21
 80075fc:	d525      	bpl.n	800764a <NIFFS_mount+0x5e>
 80075fe:	4b16      	ldr	r3, [pc, #88]	; (8007658 <NIFFS_mount+0x6c>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	bb13      	cbnz	r3, 800764a <NIFFS_mount+0x5e>
 8007604:	f640 0369 	movw	r3, #2153	; 0x869
 8007608:	9300      	str	r3, [sp, #0]
 800760a:	4814      	ldr	r0, [pc, #80]	; (800765c <NIFFS_mount+0x70>)
 800760c:	4914      	ldr	r1, [pc, #80]	; (8007660 <NIFFS_mount+0x74>)
 800760e:	4a15      	ldr	r2, [pc, #84]	; (8007664 <NIFFS_mount+0x78>)
 8007610:	4b15      	ldr	r3, [pc, #84]	; (8007668 <NIFFS_mount+0x7c>)
 8007612:	f001 fdc3 	bl	800919c <arcprint>
 8007616:	e018      	b.n	800764a <NIFFS_mount+0x5e>
  int res = niffs_setup(fs);
 8007618:	f7fc fdc4 	bl	80041a4 <niffs_setup>
  check(res);
 800761c:	4604      	mov	r4, r0
 800761e:	b180      	cbz	r0, 8007642 <NIFFS_mount+0x56>
 8007620:	4b0c      	ldr	r3, [pc, #48]	; (8007654 <NIFFS_mount+0x68>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	055d      	lsls	r5, r3, #21
 8007626:	d512      	bpl.n	800764e <NIFFS_mount+0x62>
 8007628:	4b0b      	ldr	r3, [pc, #44]	; (8007658 <NIFFS_mount+0x6c>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	b97b      	cbnz	r3, 800764e <NIFFS_mount+0x62>
 800762e:	f640 036b 	movw	r3, #2155	; 0x86b
 8007632:	9300      	str	r3, [sp, #0]
 8007634:	4809      	ldr	r0, [pc, #36]	; (800765c <NIFFS_mount+0x70>)
 8007636:	4621      	mov	r1, r4
 8007638:	4a0a      	ldr	r2, [pc, #40]	; (8007664 <NIFFS_mount+0x78>)
 800763a:	4b0b      	ldr	r3, [pc, #44]	; (8007668 <NIFFS_mount+0x7c>)
 800763c:	f001 fdae 	bl	800919c <arcprint>
 8007640:	e005      	b.n	800764e <NIFFS_mount+0x62>
  fs->mounted = 1;
 8007642:	2301      	movs	r3, #1
 8007644:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
 8007648:	e001      	b.n	800764e <NIFFS_mount+0x62>
#endif
  return res;
}

int NIFFS_mount(niffs *fs) {
  if (fs->mounted) check(ERR_NIFFS_MOUNTED);
 800764a:	4805      	ldr	r0, [pc, #20]	; (8007660 <NIFFS_mount+0x74>)
 800764c:	e000      	b.n	8007650 <NIFFS_mount+0x64>
 800764e:	4620      	mov	r0, r4
  int res = niffs_setup(fs);
  check(res);
  fs->mounted = 1;
  return NIFFS_OK;
}
 8007650:	b003      	add	sp, #12
 8007652:	bd30      	pop	{r4, r5, pc}
 8007654:	20004f80 	.word	0x20004f80
 8007658:	20004f84 	.word	0x20004f84
 800765c:	08010535 	.word	0x08010535
 8007660:	ffffd4e9 	.word	0xffffd4e9
 8007664:	0800eb00 	.word	0x0800eb00
 8007668:	0801054b 	.word	0x0801054b

0800766c <NIFFS_unmount>:

int NIFFS_unmount(niffs *fs) {
 800766c:	b513      	push	{r0, r1, r4, lr}
  if (!fs->mounted) check(ERR_NIFFS_NOT_MOUNTED);
 800766e:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 8007672:	b113      	cbz	r3, 800767a <NIFFS_unmount+0xe>
 8007674:	2300      	movs	r3, #0
 8007676:	4619      	mov	r1, r3
 8007678:	e010      	b.n	800769c <NIFFS_unmount+0x30>
 800767a:	4b11      	ldr	r3, [pc, #68]	; (80076c0 <NIFFS_unmount+0x54>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	055a      	lsls	r2, r3, #21
 8007680:	d51a      	bpl.n	80076b8 <NIFFS_unmount+0x4c>
 8007682:	4b10      	ldr	r3, [pc, #64]	; (80076c4 <NIFFS_unmount+0x58>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	b9bb      	cbnz	r3, 80076b8 <NIFFS_unmount+0x4c>
 8007688:	f640 0371 	movw	r3, #2161	; 0x871
 800768c:	9300      	str	r3, [sp, #0]
 800768e:	480e      	ldr	r0, [pc, #56]	; (80076c8 <NIFFS_unmount+0x5c>)
 8007690:	490e      	ldr	r1, [pc, #56]	; (80076cc <NIFFS_unmount+0x60>)
 8007692:	4a0f      	ldr	r2, [pc, #60]	; (80076d0 <NIFFS_unmount+0x64>)
 8007694:	4b0f      	ldr	r3, [pc, #60]	; (80076d4 <NIFFS_unmount+0x68>)
 8007696:	f001 fd81 	bl	800919c <arcprint>
 800769a:	e00d      	b.n	80076b8 <NIFFS_unmount+0x4c>
  u32_t i;
  for (i = 0; i < fs->descs_len; i++) {
 800769c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800769e:	4293      	cmp	r3, r2
 80076a0:	f04f 0200 	mov.w	r2, #0
 80076a4:	d204      	bcs.n	80076b0 <NIFFS_unmount+0x44>
    fs->descs[i].obj_id = 0;
 80076a6:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80076a8:	011c      	lsls	r4, r3, #4
 80076aa:	5511      	strb	r1, [r2, r4]
}

int NIFFS_unmount(niffs *fs) {
  if (!fs->mounted) check(ERR_NIFFS_NOT_MOUNTED);
  u32_t i;
  for (i = 0; i < fs->descs_len; i++) {
 80076ac:	3301      	adds	r3, #1
 80076ae:	e7f5      	b.n	800769c <NIFFS_unmount+0x30>
    fs->descs[i].obj_id = 0;
  }
  fs->mounted = 0;
 80076b0:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
  return NIFFS_OK;
 80076b4:	4610      	mov	r0, r2
 80076b6:	e000      	b.n	80076ba <NIFFS_unmount+0x4e>
  fs->mounted = 1;
  return NIFFS_OK;
}

int NIFFS_unmount(niffs *fs) {
  if (!fs->mounted) check(ERR_NIFFS_NOT_MOUNTED);
 80076b8:	4804      	ldr	r0, [pc, #16]	; (80076cc <NIFFS_unmount+0x60>)
  for (i = 0; i < fs->descs_len; i++) {
    fs->descs[i].obj_id = 0;
  }
  fs->mounted = 0;
  return NIFFS_OK;
}
 80076ba:	b002      	add	sp, #8
 80076bc:	bd10      	pop	{r4, pc}
 80076be:	bf00      	nop
 80076c0:	20004f80 	.word	0x20004f80
 80076c4:	20004f84 	.word	0x20004f84
 80076c8:	08010535 	.word	0x08010535
 80076cc:	ffffd4e8 	.word	0xffffd4e8
 80076d0:	0800eb0c 	.word	0x0800eb0c
 80076d4:	0801054b 	.word	0x0801054b

080076d8 <NIFFS_dump>:

#ifdef NIFFS_DUMP
void NIFFS_dump(niffs *fs) {
 80076d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076dc:	4604      	mov	r4, r0
  NIFFS_DUMP_OUT("NIFFS\n");
 80076de:	4878      	ldr	r0, [pc, #480]	; (80078c0 <NIFFS_dump+0x1e8>)
 80076e0:	f001 fd5c 	bl	800919c <arcprint>
  NIFFS_DUMP_OUT("sector size : %i\n", fs->sector_size);
 80076e4:	4877      	ldr	r0, [pc, #476]	; (80078c4 <NIFFS_dump+0x1ec>)
 80076e6:	68a1      	ldr	r1, [r4, #8]
 80076e8:	f001 fd58 	bl	800919c <arcprint>
  NIFFS_DUMP_OUT("sectors     : %i\n", fs->sectors);
 80076ec:	4876      	ldr	r0, [pc, #472]	; (80078c8 <NIFFS_dump+0x1f0>)
 80076ee:	6861      	ldr	r1, [r4, #4]
 80076f0:	f001 fd54 	bl	800919c <arcprint>
  NIFFS_DUMP_OUT("pages/sector: %i\n", fs->pages_per_sector);
 80076f4:	4875      	ldr	r0, [pc, #468]	; (80078cc <NIFFS_dump+0x1f4>)
 80076f6:	6a21      	ldr	r1, [r4, #32]
 80076f8:	f001 fd50 	bl	800919c <arcprint>
  NIFFS_DUMP_OUT("page size   : %i\n", fs->page_size);
 80076fc:	4874      	ldr	r0, [pc, #464]	; (80078d0 <NIFFS_dump+0x1f8>)
 80076fe:	68e1      	ldr	r1, [r4, #12]
 8007700:	f001 fd4c 	bl	800919c <arcprint>
  NIFFS_DUMP_OUT("phys addr   : %p\n", fs->phys_addr);
 8007704:	4873      	ldr	r0, [pc, #460]	; (80078d4 <NIFFS_dump+0x1fc>)
 8007706:	6821      	ldr	r1, [r4, #0]
 8007708:	f001 fd48 	bl	800919c <arcprint>
  NIFFS_DUMP_OUT("free pages  : %i\n", fs->free_pages);
 800770c:	4872      	ldr	r0, [pc, #456]	; (80078d8 <NIFFS_dump+0x200>)
 800770e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007710:	f001 fd44 	bl	800919c <arcprint>
  NIFFS_DUMP_OUT("dele pages  : %i\n", fs->dele_pages);
 8007714:	4871      	ldr	r0, [pc, #452]	; (80078dc <NIFFS_dump+0x204>)
 8007716:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007718:	f001 fd40 	bl	800919c <arcprint>
  u32_t s;
  u32_t tot_free = 0;
  u32_t tot_dele = 0;
 800771c:	2700      	movs	r7, #0
  NIFFS_DUMP_OUT("page size   : %i\n", fs->page_size);
  NIFFS_DUMP_OUT("phys addr   : %p\n", fs->phys_addr);
  NIFFS_DUMP_OUT("free pages  : %i\n", fs->free_pages);
  NIFFS_DUMP_OUT("dele pages  : %i\n", fs->dele_pages);
  u32_t s;
  u32_t tot_free = 0;
 800771e:	46b9      	mov	r9, r7
  u32_t tot_dele = 0;
  for (s = 0; s < fs->sectors; s++) {
 8007720:	46b8      	mov	r8, r7
 8007722:	6863      	ldr	r3, [r4, #4]
 8007724:	4598      	cmp	r8, r3
 8007726:	f080 80b6 	bcs.w	8007896 <NIFFS_dump+0x1be>
    niffs_sector_hdr *shdr = (niffs_sector_hdr *)_NIFFS_SECTOR_2_ADDR(fs, s);
 800772a:	68a3      	ldr	r3, [r4, #8]
 800772c:	6821      	ldr	r1, [r4, #0]
 800772e:	fb03 f308 	mul.w	r3, r3, r8
 8007732:	18ca      	adds	r2, r1, r3
    NIFFS_DUMP_OUT("sector %2i @ %p  era_cnt:%4i  magic:%s\n", s, shdr, shdr->era_cnt, shdr->abra ==  _NIFFS_SECT_MAGIC(fs) ? "OK" : "BAD");
 8007734:	5acb      	ldrh	r3, [r1, r3]
 8007736:	89a1      	ldrh	r1, [r4, #12]
 8007738:	8855      	ldrh	r5, [r2, #2]
 800773a:	4869      	ldr	r0, [pc, #420]	; (80078e0 <NIFFS_dump+0x208>)
 800773c:	f481 4140 	eor.w	r1, r1, #49152	; 0xc000
 8007740:	4e68      	ldr	r6, [pc, #416]	; (80078e4 <NIFFS_dump+0x20c>)
 8007742:	f081 0101 	eor.w	r1, r1, #1
 8007746:	428d      	cmp	r5, r1
 8007748:	bf08      	it	eq
 800774a:	4606      	moveq	r6, r0
 800774c:	9600      	str	r6, [sp, #0]
 800774e:	4866      	ldr	r0, [pc, #408]	; (80078e8 <NIFFS_dump+0x210>)
 8007750:	4641      	mov	r1, r8
 8007752:	f001 fd23 	bl	800919c <arcprint>
    niffs_page_ix ipix;
    for (ipix = 0; ipix < fs->pages_per_sector; ipix++) {
 8007756:	f04f 0a00 	mov.w	sl, #0
 800775a:	6a23      	ldr	r3, [r4, #32]
 800775c:	459a      	cmp	sl, r3
 800775e:	f080 8097 	bcs.w	8007890 <NIFFS_dump+0x1b8>
      niffs_page_ix pix = _NIFFS_PIX_AT_SECTOR(fs, s) + ipix;
 8007762:	fb08 a103 	mla	r1, r8, r3, sl
 8007766:	b289      	uxth	r1, r1
      niffs_object_hdr *ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, pix);
 8007768:	fbb1 f2f3 	udiv	r2, r1, r3
 800776c:	fb03 1312 	mls	r3, r3, r2, r1
 8007770:	68e5      	ldr	r5, [r4, #12]
 8007772:	68a0      	ldr	r0, [r4, #8]
 8007774:	435d      	muls	r5, r3
 8007776:	fb00 5202 	mla	r2, r0, r2, r5
 800777a:	6826      	ldr	r6, [r4, #0]
 800777c:	f102 0b04 	add.w	fp, r2, #4
 8007780:	eb06 050b 	add.w	r5, r6, fp
      NIFFS_DUMP_OUT("  %04x fl:%04x id:%04x ", pix, ohdr->phdr.flag, ohdr->phdr.id.raw);
 8007784:	f836 300b 	ldrh.w	r3, [r6, fp]
 8007788:	4858      	ldr	r0, [pc, #352]	; (80078ec <NIFFS_dump+0x214>)
 800778a:	886a      	ldrh	r2, [r5, #2]
 800778c:	f001 fd06 	bl	800919c <arcprint>
      if (_NIFFS_IS_FREE(&ohdr->phdr)) tot_free++;
 8007790:	f836 300b 	ldrh.w	r3, [r6, fp]
 8007794:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007798:	428b      	cmp	r3, r1
 800779a:	d103      	bne.n	80077a4 <NIFFS_dump+0xcc>
 800779c:	f109 0901 	add.w	r9, r9, #1
      if (_NIFFS_IS_DELE(&ohdr->phdr)) tot_dele++;
      NIFFS_DUMP_OUT(_NIFFS_IS_FREE(&ohdr->phdr) ? "FR " : "fr ");
 80077a0:	4853      	ldr	r0, [pc, #332]	; (80078f0 <NIFFS_dump+0x218>)
 80077a2:	e002      	b.n	80077aa <NIFFS_dump+0xd2>
    for (ipix = 0; ipix < fs->pages_per_sector; ipix++) {
      niffs_page_ix pix = _NIFFS_PIX_AT_SECTOR(fs, s) + ipix;
      niffs_object_hdr *ohdr = (niffs_object_hdr *)_NIFFS_PIX_2_ADDR(fs, pix);
      NIFFS_DUMP_OUT("  %04x fl:%04x id:%04x ", pix, ohdr->phdr.flag, ohdr->phdr.id.raw);
      if (_NIFFS_IS_FREE(&ohdr->phdr)) tot_free++;
      if (_NIFFS_IS_DELE(&ohdr->phdr)) tot_dele++;
 80077a4:	b903      	cbnz	r3, 80077a8 <NIFFS_dump+0xd0>
 80077a6:	3701      	adds	r7, #1
      NIFFS_DUMP_OUT(_NIFFS_IS_FREE(&ohdr->phdr) ? "FR " : "fr ");
 80077a8:	4852      	ldr	r0, [pc, #328]	; (80078f4 <NIFFS_dump+0x21c>)
 80077aa:	f001 fcf7 	bl	800919c <arcprint>
      NIFFS_DUMP_OUT(_NIFFS_IS_DELE(&ohdr->phdr) ? "DE " : "de ");
 80077ae:	4b52      	ldr	r3, [pc, #328]	; (80078f8 <NIFFS_dump+0x220>)
 80077b0:	4a52      	ldr	r2, [pc, #328]	; (80078fc <NIFFS_dump+0x224>)
 80077b2:	f836 000b 	ldrh.w	r0, [r6, fp]
 80077b6:	2800      	cmp	r0, #0
 80077b8:	bf14      	ite	ne
 80077ba:	4610      	movne	r0, r2
 80077bc:	4618      	moveq	r0, r3
 80077be:	f001 fced 	bl	800919c <arcprint>
      NIFFS_DUMP_OUT(_NIFFS_IS_CLEA(&ohdr->phdr) ? "CL " : "cl ");
 80077c2:	4b4f      	ldr	r3, [pc, #316]	; (8007900 <NIFFS_dump+0x228>)
 80077c4:	4a4f      	ldr	r2, [pc, #316]	; (8007904 <NIFFS_dump+0x22c>)
 80077c6:	8868      	ldrh	r0, [r5, #2]
 80077c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80077cc:	4288      	cmp	r0, r1
 80077ce:	bf14      	ite	ne
 80077d0:	4610      	movne	r0, r2
 80077d2:	4618      	moveq	r0, r3
 80077d4:	f001 fce2 	bl	800919c <arcprint>
      NIFFS_DUMP_OUT(_NIFFS_IS_WRIT(&ohdr->phdr) ? "WR " : "wr ");
 80077d8:	4b4b      	ldr	r3, [pc, #300]	; (8007908 <NIFFS_dump+0x230>)
 80077da:	4a4c      	ldr	r2, [pc, #304]	; (800790c <NIFFS_dump+0x234>)
 80077dc:	8868      	ldrh	r0, [r5, #2]
 80077de:	2801      	cmp	r0, #1
 80077e0:	bf14      	ite	ne
 80077e2:	4610      	movne	r0, r2
 80077e4:	4618      	moveq	r0, r3
 80077e6:	f001 fcd9 	bl	800919c <arcprint>
      NIFFS_DUMP_OUT(_NIFFS_IS_MOVI(&ohdr->phdr) ? "MO " : "mo ");
 80077ea:	4b49      	ldr	r3, [pc, #292]	; (8007910 <NIFFS_dump+0x238>)
 80077ec:	4a49      	ldr	r2, [pc, #292]	; (8007914 <NIFFS_dump+0x23c>)
 80077ee:	8868      	ldrh	r0, [r5, #2]
 80077f0:	2800      	cmp	r0, #0
 80077f2:	bf14      	ite	ne
 80077f4:	4610      	movne	r0, r2
 80077f6:	4618      	moveq	r0, r3
 80077f8:	f001 fcd0 	bl	800919c <arcprint>
      NIFFS_DUMP_OUT(_NIFFS_IS_FLAG_VALID(&ohdr->phdr) ? "    " : "BAD ");
 80077fc:	8868      	ldrh	r0, [r5, #2]
 80077fe:	4b46      	ldr	r3, [pc, #280]	; (8007918 <NIFFS_dump+0x240>)
 8007800:	4a46      	ldr	r2, [pc, #280]	; (800791c <NIFFS_dump+0x244>)
 8007802:	3802      	subs	r0, #2
 8007804:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 8007808:	b280      	uxth	r0, r0
 800780a:	4288      	cmp	r0, r1
 800780c:	bf94      	ite	ls
 800780e:	4610      	movls	r0, r2
 8007810:	4618      	movhi	r0, r3
 8007812:	f001 fcc3 	bl	800919c <arcprint>
      if (!_NIFFS_IS_FREE(&ohdr->phdr) && !_NIFFS_IS_DELE(&ohdr->phdr)) {
 8007816:	f836 200b 	ldrh.w	r2, [r6, fp]
 800781a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 800781e:	3a01      	subs	r2, #1
 8007820:	b292      	uxth	r2, r2
 8007822:	429a      	cmp	r2, r3
 8007824:	d82c      	bhi.n	8007880 <NIFFS_dump+0x1a8>
        NIFFS_DUMP_OUT("  obj.id:%04x  sp.ix:%02x  ", ohdr->phdr.id.obj_id, ohdr->phdr.id.spix);
 8007826:	483e      	ldr	r0, [pc, #248]	; (8007920 <NIFFS_dump+0x248>)
 8007828:	7869      	ldrb	r1, [r5, #1]
 800782a:	f816 200b 	ldrb.w	r2, [r6, fp]
 800782e:	f001 fcb5 	bl	800919c <arcprint>
        if (ohdr->phdr.id.spix == 0 && _NIFFS_IS_ID_VALID(&ohdr->phdr)) {
 8007832:	f816 300b 	ldrb.w	r3, [r6, fp]
 8007836:	bb1b      	cbnz	r3, 8007880 <NIFFS_dump+0x1a8>
 8007838:	786b      	ldrb	r3, [r5, #1]
 800783a:	3b01      	subs	r3, #1
 800783c:	b2db      	uxtb	r3, r3
 800783e:	2bfd      	cmp	r3, #253	; 0xfd
 8007840:	d81e      	bhi.n	8007880 <NIFFS_dump+0x1a8>
          NIFFS_DUMP_OUT("len:%08x  type:%02x", ohdr->len, ohdr->type);
 8007842:	4838      	ldr	r0, [pc, #224]	; (8007924 <NIFFS_dump+0x24c>)
 8007844:	6869      	ldr	r1, [r5, #4]
 8007846:	7e2a      	ldrb	r2, [r5, #24]
 8007848:	f001 fca8 	bl	800919c <arcprint>
          if (ohdr->type == _NIFFS_FTYPE_LINFILE) {
 800784c:	7e2b      	ldrb	r3, [r5, #24]
 800784e:	2b01      	cmp	r3, #1
 8007850:	d106      	bne.n	8007860 <NIFFS_dump+0x188>
            niffs_linear_file_hdr *lfhdr = (niffs_linear_file_hdr *)ohdr;
            NIFFS_DUMP_OUT("  start_sec:%d  resv_sec:%d", lfhdr->start_sector, lfhdr->resv_sectors);
 8007852:	4835      	ldr	r0, [pc, #212]	; (8007928 <NIFFS_dump+0x250>)
 8007854:	f8d5 101a 	ldr.w	r1, [r5, #26]
 8007858:	f8d5 201e 	ldr.w	r2, [r5, #30]
 800785c:	f001 fc9e 	bl	800919c <arcprint>
          }
          NIFFS_DUMP_OUT("  name:");
 8007860:	4832      	ldr	r0, [pc, #200]	; (800792c <NIFFS_dump+0x254>)
 8007862:	f001 fc9b 	bl	800919c <arcprint>
          int i;
          for (i = 0; i < NIFFS_NAME_LEN; i++) {
 8007866:	2600      	movs	r6, #0
 8007868:	19ab      	adds	r3, r5, r6
            if (ohdr->name[i] == 0) break;
 800786a:	7a19      	ldrb	r1, [r3, #8]
 800786c:	b141      	cbz	r1, 8007880 <NIFFS_dump+0x1a8>
            NIFFS_DUMP_OUT("%c", ohdr->name[i] < ' ' ? '.' : ohdr->name[i]);
 800786e:	291f      	cmp	r1, #31
 8007870:	bf98      	it	ls
 8007872:	212e      	movls	r1, #46	; 0x2e
 8007874:	482e      	ldr	r0, [pc, #184]	; (8007930 <NIFFS_dump+0x258>)
            niffs_linear_file_hdr *lfhdr = (niffs_linear_file_hdr *)ohdr;
            NIFFS_DUMP_OUT("  start_sec:%d  resv_sec:%d", lfhdr->start_sector, lfhdr->resv_sectors);
          }
          NIFFS_DUMP_OUT("  name:");
          int i;
          for (i = 0; i < NIFFS_NAME_LEN; i++) {
 8007876:	3601      	adds	r6, #1
            if (ohdr->name[i] == 0) break;
            NIFFS_DUMP_OUT("%c", ohdr->name[i] < ' ' ? '.' : ohdr->name[i]);
 8007878:	f001 fc90 	bl	800919c <arcprint>
            niffs_linear_file_hdr *lfhdr = (niffs_linear_file_hdr *)ohdr;
            NIFFS_DUMP_OUT("  start_sec:%d  resv_sec:%d", lfhdr->start_sector, lfhdr->resv_sectors);
          }
          NIFFS_DUMP_OUT("  name:");
          int i;
          for (i = 0; i < NIFFS_NAME_LEN; i++) {
 800787c:	2e10      	cmp	r6, #16
 800787e:	d1f3      	bne.n	8007868 <NIFFS_dump+0x190>
            if (ohdr->name[i] == 0) break;
            NIFFS_DUMP_OUT("%c", ohdr->name[i] < ' ' ? '.' : ohdr->name[i]);
          }
        }
      }
      NIFFS_DUMP_OUT("\n");
 8007880:	482c      	ldr	r0, [pc, #176]	; (8007934 <NIFFS_dump+0x25c>)
  u32_t tot_dele = 0;
  for (s = 0; s < fs->sectors; s++) {
    niffs_sector_hdr *shdr = (niffs_sector_hdr *)_NIFFS_SECTOR_2_ADDR(fs, s);
    NIFFS_DUMP_OUT("sector %2i @ %p  era_cnt:%4i  magic:%s\n", s, shdr, shdr->era_cnt, shdr->abra ==  _NIFFS_SECT_MAGIC(fs) ? "OK" : "BAD");
    niffs_page_ix ipix;
    for (ipix = 0; ipix < fs->pages_per_sector; ipix++) {
 8007882:	f10a 0a01 	add.w	sl, sl, #1
            if (ohdr->name[i] == 0) break;
            NIFFS_DUMP_OUT("%c", ohdr->name[i] < ' ' ? '.' : ohdr->name[i]);
          }
        }
      }
      NIFFS_DUMP_OUT("\n");
 8007886:	f001 fc89 	bl	800919c <arcprint>
  u32_t tot_dele = 0;
  for (s = 0; s < fs->sectors; s++) {
    niffs_sector_hdr *shdr = (niffs_sector_hdr *)_NIFFS_SECTOR_2_ADDR(fs, s);
    NIFFS_DUMP_OUT("sector %2i @ %p  era_cnt:%4i  magic:%s\n", s, shdr, shdr->era_cnt, shdr->abra ==  _NIFFS_SECT_MAGIC(fs) ? "OK" : "BAD");
    niffs_page_ix ipix;
    for (ipix = 0; ipix < fs->pages_per_sector; ipix++) {
 800788a:	fa1f fa8a 	uxth.w	sl, sl
 800788e:	e764      	b.n	800775a <NIFFS_dump+0x82>
  NIFFS_DUMP_OUT("free pages  : %i\n", fs->free_pages);
  NIFFS_DUMP_OUT("dele pages  : %i\n", fs->dele_pages);
  u32_t s;
  u32_t tot_free = 0;
  u32_t tot_dele = 0;
  for (s = 0; s < fs->sectors; s++) {
 8007890:	f108 0801 	add.w	r8, r8, #1
 8007894:	e745      	b.n	8007722 <NIFFS_dump+0x4a>
        }
      }
      NIFFS_DUMP_OUT("\n");
    }
  }
  if (tot_dele != fs->dele_pages) {
 8007896:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007898:	428f      	cmp	r7, r1
 800789a:	d003      	beq.n	80078a4 <NIFFS_dump+0x1cc>
    NIFFS_DUMP_OUT("FATAL! registered deleted pages:%i, but counted %i\n", fs->dele_pages, tot_dele);
 800789c:	4826      	ldr	r0, [pc, #152]	; (8007938 <NIFFS_dump+0x260>)
 800789e:	463a      	mov	r2, r7
 80078a0:	f001 fc7c 	bl	800919c <arcprint>
//    NIFFS_ASSERT(0);
  }
  if (tot_free != fs->free_pages) {
 80078a4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80078a6:	4589      	cmp	r9, r1
 80078a8:	d006      	beq.n	80078b8 <NIFFS_dump+0x1e0>
    NIFFS_DUMP_OUT("FATAL! registered free pages:%i, but counted %i\n", fs->free_pages, tot_free);
 80078aa:	4824      	ldr	r0, [pc, #144]	; (800793c <NIFFS_dump+0x264>)
 80078ac:	464a      	mov	r2, r9
//    NIFFS_ASSERT(0);
  }
}
 80078ae:	b003      	add	sp, #12
 80078b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (tot_dele != fs->dele_pages) {
    NIFFS_DUMP_OUT("FATAL! registered deleted pages:%i, but counted %i\n", fs->dele_pages, tot_dele);
//    NIFFS_ASSERT(0);
  }
  if (tot_free != fs->free_pages) {
    NIFFS_DUMP_OUT("FATAL! registered free pages:%i, but counted %i\n", fs->free_pages, tot_free);
 80078b4:	f001 bc72 	b.w	800919c <arcprint>
//    NIFFS_ASSERT(0);
  }
}
 80078b8:	b003      	add	sp, #12
 80078ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078be:	bf00      	nop
 80078c0:	0801120f 	.word	0x0801120f
 80078c4:	08011216 	.word	0x08011216
 80078c8:	08011228 	.word	0x08011228
 80078cc:	0801123a 	.word	0x0801123a
 80078d0:	0801124c 	.word	0x0801124c
 80078d4:	0801125e 	.word	0x0801125e
 80078d8:	08011270 	.word	0x08011270
 80078dc:	08011282 	.word	0x08011282
 80078e0:	080111d6 	.word	0x080111d6
 80078e4:	080111d9 	.word	0x080111d9
 80078e8:	08011294 	.word	0x08011294
 80078ec:	080112bc 	.word	0x080112bc
 80078f0:	080111dd 	.word	0x080111dd
 80078f4:	080111e1 	.word	0x080111e1
 80078f8:	080111e5 	.word	0x080111e5
 80078fc:	080111e9 	.word	0x080111e9
 8007900:	080111ed 	.word	0x080111ed
 8007904:	080111f1 	.word	0x080111f1
 8007908:	080111f5 	.word	0x080111f5
 800790c:	080111f9 	.word	0x080111f9
 8007910:	080111fd 	.word	0x080111fd
 8007914:	08011201 	.word	0x08011201
 8007918:	08011205 	.word	0x08011205
 800791c:	0801120a 	.word	0x0801120a
 8007920:	080112d4 	.word	0x080112d4
 8007924:	080112f0 	.word	0x080112f0
 8007928:	08011304 	.word	0x08011304
 800792c:	08011320 	.word	0x08011320
 8007930:	0801035f 	.word	0x0801035f
 8007934:	0801197d 	.word	0x0801197d
 8007938:	08011328 	.word	0x08011328
 800793c:	0801135c 	.word	0x0801135c

08007940 <assert_cb>:
#include "app.h"
#include "gpio.h"
#include "usb/usb_arcade.h"

static void assert_cb(void) {
  set_print_output(IOSTD);
 8007940:	2000      	movs	r0, #0
 8007942:	f001 bc1f 	b.w	8009184 <set_print_output>

08007946 <assert_failed>:

  return 0;
}

void assert_failed(uint8_t* file, uint32_t line) {
  SYS_assert((char*)file, (s32_t)line);
 8007946:	f7f8 bf4b 	b.w	80007e0 <SYS_assert>
	...

0800794c <PROC_base_init>:
  USB_Cable_Config(DISABLE);
}

// ifc

void PROC_base_init() {
 800794c:	b508      	push	{r3, lr}
#include "gpio.h"
#include "gpio_map.h"
#include "usb_hw_config.h"

static void RCC_config() {
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 800794e:	2004      	movs	r0, #4
 8007950:	2101      	movs	r1, #1
 8007952:	f005 fb05 	bl	800cf60 <RCC_APB2PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8007956:	2008      	movs	r0, #8
 8007958:	2101      	movs	r1, #1
 800795a:	f005 fb01 	bl	800cf60 <RCC_APB2PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 800795e:	2010      	movs	r0, #16
 8007960:	2101      	movs	r1, #1
 8007962:	f005 fafd 	bl	800cf60 <RCC_APB2PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 8007966:	2001      	movs	r0, #1
 8007968:	4601      	mov	r1, r0
 800796a:	f005 faf9 	bl	800cf60 <RCC_APB2PeriphClockCmd>

  #ifdef CONFIG_UART1
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
#endif
#ifdef CONFIG_UART2
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 800796e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8007972:	2101      	movs	r1, #1
 8007974:	f005 fb00 	bl	800cf78 <RCC_APB1PeriphClockCmd>
#endif
#ifdef CONFIG_UART4
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
#endif

  RCC_APB1PeriphClockCmd(RCC_APB1Periph_BKP, ENABLE);
 8007978:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800797c:	2101      	movs	r1, #1
 800797e:	f005 fafb 	bl	800cf78 <RCC_APB1PeriphClockCmd>
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE);
 8007982:	2101      	movs	r1, #1
 8007984:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8007988:	f005 faf6 	bl	800cf78 <RCC_APB1PeriphClockCmd>


  /* PCLK1 = HCLK/1 */
  RCC_PCLK1Config(RCC_HCLK_Div1);
 800798c:	2000      	movs	r0, #0
 800798e:	f005 fa43 	bl	800ce18 <RCC_PCLK1Config>

  RCC_APB1PeriphClockCmd(STM32_SYSTEM_TIMER_RCC, ENABLE);
 8007992:	2001      	movs	r0, #1
 8007994:	4601      	mov	r1, r0
 8007996:	f005 faef 	bl	800cf78 <RCC_APB1PeriphClockCmd>

  // usb
  RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);
 800799a:	2000      	movs	r0, #0
 800799c:	f005 fa5c 	bl	800ce58 <RCC_USBCLKConfig>
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
 80079a0:	2101      	movs	r1, #1
 80079a2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80079a6:	f005 fae7 	bl	800cf78 <RCC_APB1PeriphClockCmd>
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 are used          */
  
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80079aa:	4b14      	ldr	r3, [pc, #80]	; (80079fc <PROC_base_init+0xb0>)
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 80079ac:	f64f 02ff 	movw	r2, #63743	; 0xf8ff
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 are used          */
  
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80079b0:	68d9      	ldr	r1, [r3, #12]
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80079b2:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 are used          */
  
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 80079b6:	400a      	ands	r2, r1
  reg_value  =  (reg_value                       |
 80079b8:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
 80079bc:	f442 3201 	orr.w	r2, r2, #132096	; 0x20400
                (0x5FA << SCB_AIRCR_VECTKEY_Pos) | 
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80079c0:	f8c3 2c0c 	str.w	r2, [r3, #3084]	; 0xc0c
 * Note: The priority cannot be set for every core interrupt.
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
 80079c4:	2230      	movs	r2, #48	; 0x30
 80079c6:	f883 2c23 	strb.w	r2, [r3, #3107]	; 0xc23
 80079ca:	22f0      	movs	r2, #240	; 0xf0
 80079cc:	f883 2c22 	strb.w	r2, [r3, #3106]	; 0xc22
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80079d0:	2160      	movs	r1, #96	; 0x60
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 80079d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80079d6:	f883 131c 	strb.w	r1, [r3, #796]	; 0x31c
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 80079da:	601a      	str	r2, [r3, #0]
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80079dc:	2240      	movs	r2, #64	; 0x40
 80079de:	f883 2326 	strb.w	r2, [r3, #806]	; 0x326
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 80079e2:	605a      	str	r2, [r3, #4]
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80079e4:	f883 1314 	strb.w	r1, [r3, #788]	; 0x314
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 80079e8:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80079ec:	6019      	str	r1, [r3, #0]
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80079ee:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 80079f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80079f6:	605a      	str	r2, [r3, #4]
 80079f8:	bd08      	pop	{r3, pc}
 80079fa:	bf00      	nop
 80079fc:	e000ed00 	.word	0xe000ed00

08007a00 <PROC_periph_init>:
void PROC_base_init() {
  RCC_config();
  NVIC_config();
}

void PROC_periph_init() {
 8007a00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DBGMCU_Config(STM32_SYSTEM_TIMER_DBGMCU, ENABLE);
 8007a04:	f44f 6000 	mov.w	r0, #2048	; 0x800
void PROC_base_init() {
  RCC_config();
  NVIC_config();
}

void PROC_periph_init() {
 8007a08:	b089      	sub	sp, #36	; 0x24
  gpio_init();

#ifdef CONFIG_HY_TEST_BOARD
  gpio_config_out(PORTC, PIN13, CLK_50MHZ, PUSHPULL, NOPULL);
#else
  gpio_config(PORTB, PIN9, CLK_2MHZ, IN, AF0, OPENDRAIN, NOPULL);
 8007a0a:	2400      	movs	r4, #0
 8007a0c:	2501      	movs	r5, #1
  RCC_config();
  NVIC_config();
}

void PROC_periph_init() {
  DBGMCU_Config(STM32_SYSTEM_TIMER_DBGMCU, ENABLE);
 8007a0e:	2101      	movs	r1, #1
 8007a10:	f004 ffc6 	bl	800c9a0 <DBGMCU_Config>
  gpio_init();
 8007a14:	f7fb f8a4 	bl	8002b60 <gpio_init>

#ifdef CONFIG_HY_TEST_BOARD
  gpio_config_out(PORTC, PIN13, CLK_50MHZ, PUSHPULL, NOPULL);
#else
  gpio_config(PORTB, PIN9, CLK_2MHZ, IN, AF0, OPENDRAIN, NOPULL);
 8007a18:	4622      	mov	r2, r4
 8007a1a:	4623      	mov	r3, r4
 8007a1c:	4628      	mov	r0, r5
 8007a1e:	2109      	movs	r1, #9
 8007a20:	e88d 0030 	stmia.w	sp, {r4, r5}
 8007a24:	9402      	str	r4, [sp, #8]
 8007a26:	f7fa ff6f 	bl	8002908 <gpio_config>
}

static void GPIO_config() {
#ifndef CONFIG_HY_TEST_BOARD
  // disable jtag, only SWD enabled, free pin PB3
  GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);
 8007a2a:	4629      	mov	r1, r5
 8007a2c:	4830      	ldr	r0, [pc, #192]	; (8007af0 <PROC_periph_init+0xf0>)
 8007a2e:	f005 f931 	bl	800cc94 <GPIO_PinRemapConfig>
#endif

  const gpio_pin_map *led = GPIO_MAP_get_led_map();
 8007a32:	f002 fd83 	bl	800a53c <GPIO_MAP_get_led_map>
 8007a36:	4603      	mov	r3, r0
  gpio_config_out(led->port, led->pin, CLK_50MHZ, PUSHPULL, NOPULL);
 8007a38:	7859      	ldrb	r1, [r3, #1]
 8007a3a:	7800      	ldrb	r0, [r0, #0]
 8007a3c:	462a      	mov	r2, r5
 8007a3e:	4623      	mov	r3, r4
 8007a40:	9400      	str	r4, [sp, #0]
 8007a42:	f7fa ff79 	bl	8002938 <gpio_config_out>

  const gpio_pin_map *in = GPIO_MAP_get_pin_map();
 8007a46:	f002 fd75 	bl	800a534 <GPIO_MAP_get_pin_map>
 8007a4a:	4626      	mov	r6, r4
 8007a4c:	4680      	mov	r8, r0
  int i;
  for (i = 0; i < APP_CONFIG_PINS; i++) {
    gpio_config(in[i].port, in[i].pin, CLK_2MHZ, IN, AF0, OPENDRAIN, PULLUP);
 8007a4e:	46a1      	mov	r9, r4
 8007a50:	462f      	mov	r7, r5
 8007a52:	eb08 0306 	add.w	r3, r8, r6
 8007a56:	2400      	movs	r4, #0
 8007a58:	f818 0006 	ldrb.w	r0, [r8, r6]
 8007a5c:	7859      	ldrb	r1, [r3, #1]
 8007a5e:	4622      	mov	r2, r4
 8007a60:	f8cd 9000 	str.w	r9, [sp]
 8007a64:	9701      	str	r7, [sp, #4]
 8007a66:	9702      	str	r7, [sp, #8]
 8007a68:	4623      	mov	r3, r4
 8007a6a:	3602      	adds	r6, #2
 8007a6c:	f7fa ff4c 	bl	8002908 <gpio_config>
  const gpio_pin_map *led = GPIO_MAP_get_led_map();
  gpio_config_out(led->port, led->pin, CLK_50MHZ, PUSHPULL, NOPULL);

  const gpio_pin_map *in = GPIO_MAP_get_pin_map();
  int i;
  for (i = 0; i < APP_CONFIG_PINS; i++) {
 8007a70:	2e34      	cmp	r6, #52	; 0x34
    gpio_config(in[i].port, in[i].pin, CLK_2MHZ, IN, AF0, OPENDRAIN, PULLUP);
 8007a72:	f04f 0501 	mov.w	r5, #1
  const gpio_pin_map *led = GPIO_MAP_get_led_map();
  gpio_config_out(led->port, led->pin, CLK_50MHZ, PUSHPULL, NOPULL);

  const gpio_pin_map *in = GPIO_MAP_get_pin_map();
  int i;
  for (i = 0; i < APP_CONFIG_PINS; i++) {
 8007a76:	d1ec      	bne.n	8007a52 <PROC_periph_init+0x52>
    gpio_config(in[i].port, in[i].pin, CLK_2MHZ, IN, AF0, OPENDRAIN, PULLUP);
  }

  USB_Cable_Config(DISABLE);
 8007a78:	4620      	mov	r0, r4
 8007a7a:	f003 fd55 	bl	800b528 <USB_Cable_Config>
  NVIC_EnableIRQ(USBWakeUp_IRQn);
}

static void UART2_config() {
#ifdef CONFIG_UART2
  gpio_config(PORTA, PIN2, CLK_50MHZ, AF, AF0, PUSHPULL, NOPULL);
 8007a7e:	2102      	movs	r1, #2
 8007a80:	4620      	mov	r0, r4
 8007a82:	462a      	mov	r2, r5
 8007a84:	460b      	mov	r3, r1
 8007a86:	9400      	str	r4, [sp, #0]
 8007a88:	9401      	str	r4, [sp, #4]
 8007a8a:	9402      	str	r4, [sp, #8]
 8007a8c:	f7fa ff3c 	bl	8002908 <gpio_config>
  gpio_config(PORTA, PIN3, CLK_50MHZ, IN, AF0, OPENDRAIN, NOPULL);
 8007a90:	4620      	mov	r0, r4
 8007a92:	462a      	mov	r2, r5
 8007a94:	4623      	mov	r3, r4
 8007a96:	e88d 0030 	stmia.w	sp, {r4, r5}
 8007a9a:	9402      	str	r4, [sp, #8]
 8007a9c:	2103      	movs	r1, #3
 8007a9e:	f7fa ff33 	bl	8002908 <gpio_config>
  TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;

  u16_t prescaler = 0;

  /* Time base configuration */
  TIM_TimeBaseStructure.TIM_Period = SYS_CPU_FREQ/SYS_MAIN_TIMER_FREQ;
 8007aa2:	4b14      	ldr	r3, [pc, #80]	; (8007af4 <PROC_periph_init+0xf4>)
  TIM_TimeBaseStructure.TIM_Prescaler = 0;
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

  TIM_TimeBaseInit(STM32_SYSTEM_TIMER, &TIM_TimeBaseStructure);
 8007aa4:	a905      	add	r1, sp, #20
  TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;

  u16_t prescaler = 0;

  /* Time base configuration */
  TIM_TimeBaseStructure.TIM_Period = SYS_CPU_FREQ/SYS_MAIN_TIMER_FREQ;
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	f242 7310 	movw	r3, #10000	; 0x2710
 8007aac:	fbb2 f3f3 	udiv	r3, r2, r3
  TIM_TimeBaseStructure.TIM_Prescaler = 0;
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

  TIM_TimeBaseInit(STM32_SYSTEM_TIMER, &TIM_TimeBaseStructure);
 8007ab0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;

  u16_t prescaler = 0;

  /* Time base configuration */
  TIM_TimeBaseStructure.TIM_Period = SYS_CPU_FREQ/SYS_MAIN_TIMER_FREQ;
 8007ab4:	f8ad 3018 	strh.w	r3, [sp, #24]
  TIM_TimeBaseStructure.TIM_Prescaler = 0;
 8007ab8:	f8ad 4014 	strh.w	r4, [sp, #20]
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8007abc:	f8ad 401a 	strh.w	r4, [sp, #26]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8007ac0:	f8ad 4016 	strh.w	r4, [sp, #22]

  TIM_TimeBaseInit(STM32_SYSTEM_TIMER, &TIM_TimeBaseStructure);
 8007ac4:	f005 fc18 	bl	800d2f8 <TIM_TimeBaseInit>

  /* Prescaler configuration */
  TIM_PrescalerConfig(STM32_SYSTEM_TIMER, prescaler, TIM_PSCReloadMode_Immediate);
 8007ac8:	4621      	mov	r1, r4
 8007aca:	462a      	mov	r2, r5
 8007acc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8007ad0:	f005 fe10 	bl	800d6f4 <TIM_PrescalerConfig>

  /* TIM IT enable */
  TIM_ITConfig(STM32_SYSTEM_TIMER, TIM_IT_Update, ENABLE);
 8007ad4:	4629      	mov	r1, r5
 8007ad6:	462a      	mov	r2, r5
 8007ad8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8007adc:	f005 fda3 	bl	800d626 <TIM_ITConfig>

  /* TIM enable counter */
  TIM_Cmd(STM32_SYSTEM_TIMER, ENABLE);
 8007ae0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8007ae4:	4629      	mov	r1, r5
 8007ae6:	f005 fd84 	bl	800d5f2 <TIM_Cmd>
#endif

  GPIO_config();
  UART2_config();
  TIM_config();
}
 8007aea:	b009      	add	sp, #36	; 0x24
 8007aec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007af0:	00300200 	.word	0x00300200
 8007af4:	20000190 	.word	0x20000190

08007af8 <f_def_dummy>:
static int f_usb_kb(char *k1, char *k2, char *k3, char *k4);
static int f_usb_mouse(int dx, int dy, int dw, int buttons);

#endif // CONFIG_ANNOYATRON

static int f_def_dummy(void) {return 0;};
 8007af8:	2000      	movs	r0, #0
 8007afa:	4770      	bx	lr

08007afc <f_memfind>:
#endif
  return 0;
}

static int f_memfind(int hex) {
  if (_argc < 1) return -1;
 8007afc:	4b1b      	ldr	r3, [pc, #108]	; (8007b6c <f_memfind+0x70>)
  print("trace not enabled\n");
#endif
  return 0;
}

static int f_memfind(int hex) {
 8007afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (_argc < 1) return -1;
 8007b02:	681b      	ldr	r3, [r3, #0]
  print("trace not enabled\n");
#endif
  return 0;
}

static int f_memfind(int hex) {
 8007b04:	4605      	mov	r5, r0
  if (_argc < 1) return -1;
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	dd2c      	ble.n	8007b64 <f_memfind+0x68>
  u8_t *addr = (u8_t*)SRAM_BASE;
  int i;
  print("finding 0x%08x...\n", hex);
 8007b0a:	4819      	ldr	r0, [pc, #100]	; (8007b70 <f_memfind+0x74>)
 8007b0c:	4629      	mov	r1, r5
 8007b0e:	f001 fb45 	bl	800919c <arcprint>
  for (i = 0; i < 20*1024 - 4; i++) {
 8007b12:	4f18      	ldr	r7, [pc, #96]	; (8007b74 <f_memfind+0x78>)

static int f_memfind(int hex) {
  if (_argc < 1) return -1;
  u8_t *addr = (u8_t*)SRAM_BASE;
  int i;
  print("finding 0x%08x...\n", hex);
 8007b14:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  for (i = 0; i < 20*1024 - 4; i++) {
    u32_t m =
        (addr[i]) |
 8007b18:	7822      	ldrb	r2, [r4, #0]
 8007b1a:	4626      	mov	r6, r4
        (addr[i+1]<<8) |
 8007b1c:	f814 1f01 	ldrb.w	r1, [r4, #1]!
        (addr[i+2]<<16) |
        (addr[i+3]<<24);
 8007b20:	78a3      	ldrb	r3, [r4, #2]
  print("finding 0x%08x...\n", hex);
  for (i = 0; i < 20*1024 - 4; i++) {
    u32_t m =
        (addr[i]) |
        (addr[i+1]<<8) |
        (addr[i+2]<<16) |
 8007b22:	7860      	ldrb	r0, [r4, #1]
        (addr[i+3]<<24);
    u32_t rm =
        (addr[i+3]) |
 8007b24:	ea43 6802 	orr.w	r8, r3, r2, lsl #24
        (addr[i+2]<<8) |
 8007b28:	ea48 2800 	orr.w	r8, r8, r0, lsl #8
  print("finding 0x%08x...\n", hex);
  for (i = 0; i < 20*1024 - 4; i++) {
    u32_t m =
        (addr[i]) |
        (addr[i+1]<<8) |
        (addr[i+2]<<16) |
 8007b2c:	0400      	lsls	r0, r0, #16
        (addr[i+3]<<24);
    u32_t rm =
        (addr[i+3]) |
        (addr[i+2]<<8) |
        (addr[i+1]<<16) |
 8007b2e:	ea48 4801 	orr.w	r8, r8, r1, lsl #16
  u8_t *addr = (u8_t*)SRAM_BASE;
  int i;
  print("finding 0x%08x...\n", hex);
  for (i = 0; i < 20*1024 - 4; i++) {
    u32_t m =
        (addr[i]) |
 8007b32:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
        (addr[i+1]<<8) |
 8007b36:	430a      	orrs	r2, r1
        (addr[i+2]<<16) |
 8007b38:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
    u32_t rm =
        (addr[i+3]) |
        (addr[i+2]<<8) |
        (addr[i+1]<<16) |
        (addr[i]<<24);
    if (m == hex) {
 8007b3c:	42ab      	cmp	r3, r5
 8007b3e:	d103      	bne.n	8007b48 <f_memfind+0x4c>
      print("match found @ 0x%08x\n", i + addr);
 8007b40:	480d      	ldr	r0, [pc, #52]	; (8007b78 <f_memfind+0x7c>)
 8007b42:	4631      	mov	r1, r6
 8007b44:	f001 fb2a 	bl	800919c <arcprint>
    }
    if (rm == hex) {
 8007b48:	45a8      	cmp	r8, r5
 8007b4a:	d103      	bne.n	8007b54 <f_memfind+0x58>
      print("reverse match found @ 0x%08x\n", i + addr);
 8007b4c:	480b      	ldr	r0, [pc, #44]	; (8007b7c <f_memfind+0x80>)
 8007b4e:	4631      	mov	r1, r6
 8007b50:	f001 fb24 	bl	800919c <arcprint>
static int f_memfind(int hex) {
  if (_argc < 1) return -1;
  u8_t *addr = (u8_t*)SRAM_BASE;
  int i;
  print("finding 0x%08x...\n", hex);
  for (i = 0; i < 20*1024 - 4; i++) {
 8007b54:	42bc      	cmp	r4, r7
 8007b56:	d1df      	bne.n	8007b18 <f_memfind+0x1c>
    }
    if (rm == hex) {
      print("reverse match found @ 0x%08x\n", i + addr);
    }
  }
  print("finished\n");
 8007b58:	4809      	ldr	r0, [pc, #36]	; (8007b80 <f_memfind+0x84>)
 8007b5a:	f001 fb1f 	bl	800919c <arcprint>
  return 0;
 8007b5e:	2000      	movs	r0, #0
 8007b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#endif
  return 0;
}

static int f_memfind(int hex) {
  if (_argc < 1) return -1;
 8007b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      print("reverse match found @ 0x%08x\n", i + addr);
    }
  }
  print("finished\n");
  return 0;
}
 8007b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b6c:	20000568 	.word	0x20000568
 8007b70:	080113e5 	.word	0x080113e5
 8007b74:	20004ffc 	.word	0x20004ffc
 8007b78:	08011400 	.word	0x08011400
 8007b7c:	080113f8 	.word	0x080113f8
 8007b80:	08011416 	.word	0x08011416

08007b84 <f_reset>:
static int f_rand() {
  print("%08x\n", rand_next());
  return 0;
}

static int f_reset() {
 8007b84:	b508      	push	{r3, lr}
  SYS_reboot(REBOOT_USER);
 8007b86:	2002      	movs	r0, #2
 8007b88:	f7f8 fda6 	bl	80006d8 <SYS_reboot>
  return 0;
}
 8007b8c:	2000      	movs	r0, #0
 8007b8e:	bd08      	pop	{r3, pc}

08007b90 <f_rand>:
  return 0;
}



static int f_rand() {
 8007b90:	b508      	push	{r3, lr}
  print("%08x\n", rand_next());
 8007b92:	f7f9 fe16 	bl	80017c2 <rand_next>
 8007b96:	4601      	mov	r1, r0
 8007b98:	4802      	ldr	r0, [pc, #8]	; (8007ba4 <f_rand+0x14>)
 8007b9a:	f001 faff 	bl	800919c <arcprint>
  return 0;
}
 8007b9e:	2000      	movs	r0, #0
 8007ba0:	bd08      	pop	{r3, pc}
 8007ba2:	bf00      	nop
 8007ba4:	08011533 	.word	0x08011533

08007ba8 <f_assert>:
  print_debug_setting();
  return 0;
}
#endif

static int f_assert() {
 8007ba8:	b508      	push	{r3, lr}
  ASSERT(FALSE);
 8007baa:	4803      	ldr	r0, [pc, #12]	; (8007bb8 <f_assert+0x10>)
 8007bac:	f240 21c5 	movw	r1, #709	; 0x2c5
 8007bb0:	f7f8 fe16 	bl	80007e0 <SYS_assert>
  return 0;
}
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	bd08      	pop	{r3, pc}
 8007bb8:	08011420 	.word	0x08011420

08007bbc <f_memdump>:
  }
  print("finished\n");
  return 0;
}

static int f_memdump(int addr, int len) {
 8007bbc:	b538      	push	{r3, r4, r5, lr}
  if (_argc < 2) return -1;
 8007bbe:	4b0a      	ldr	r3, [pc, #40]	; (8007be8 <f_memdump+0x2c>)
  }
  print("finished\n");
  return 0;
}

static int f_memdump(int addr, int len) {
 8007bc0:	4605      	mov	r5, r0
  if (_argc < 2) return -1;
 8007bc2:	681b      	ldr	r3, [r3, #0]
  }
  print("finished\n");
  return 0;
}

static int f_memdump(int addr, int len) {
 8007bc4:	460c      	mov	r4, r1
  if (_argc < 2) return -1;
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	dd0b      	ble.n	8007be2 <f_memdump+0x26>
  print("dumping 0x%08x, %i bytes\n", addr, len);
 8007bca:	4629      	mov	r1, r5
 8007bcc:	4622      	mov	r2, r4
 8007bce:	4807      	ldr	r0, [pc, #28]	; (8007bec <f_memdump+0x30>)
 8007bd0:	f001 fae4 	bl	800919c <arcprint>
  printbuf(IOSTD, (u8_t*)addr, len);
 8007bd4:	2000      	movs	r0, #0
 8007bd6:	4629      	mov	r1, r5
 8007bd8:	b2a2      	uxth	r2, r4
 8007bda:	f7f9 fb00 	bl	80011de <printbuf>
  return 0;
 8007bde:	2000      	movs	r0, #0
 8007be0:	bd38      	pop	{r3, r4, r5, pc}
  print("finished\n");
  return 0;
}

static int f_memdump(int addr, int len) {
  if (_argc < 2) return -1;
 8007be2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  print("dumping 0x%08x, %i bytes\n", addr, len);
  printbuf(IOSTD, (u8_t*)addr, len);
  return 0;
}
 8007be6:	bd38      	pop	{r3, r4, r5, pc}
 8007be8:	20000568 	.word	0x20000568
 8007bec:	0801142a 	.word	0x0801142a

08007bf0 <print_debug_setting>:
  return 0;
}
#else
const char* DBG_BIT_NAME[] = _DBG_BIT_NAMES;

static void print_debug_setting() {
 8007bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  print("DBG level: %i\n", SYS_dbg_get_level());
 8007bf4:	f7f8 fd5c 	bl	80006b0 <SYS_dbg_get_level>
 8007bf8:	4601      	mov	r1, r0
 8007bfa:	480d      	ldr	r0, [pc, #52]	; (8007c30 <print_debug_setting+0x40>)
 8007bfc:	f001 face 	bl	800919c <arcprint>
  int d;
  for (d = 0; d < sizeof(DBG_BIT_NAME) / sizeof(const char*); d++) {
    print("DBG mask %s: %s\n", DBG_BIT_NAME[d],
 8007c00:	4f0c      	ldr	r7, [pc, #48]	; (8007c34 <print_debug_setting+0x44>)
 8007c02:	4e0d      	ldr	r6, [pc, #52]	; (8007c38 <print_debug_setting+0x48>)
 8007c04:	4d0d      	ldr	r5, [pc, #52]	; (8007c3c <print_debug_setting+0x4c>)
const char* DBG_BIT_NAME[] = _DBG_BIT_NAMES;

static void print_debug_setting() {
  print("DBG level: %i\n", SYS_dbg_get_level());
  int d;
  for (d = 0; d < sizeof(DBG_BIT_NAME) / sizeof(const char*); d++) {
 8007c06:	2400      	movs	r4, #0
    print("DBG mask %s: %s\n", DBG_BIT_NAME[d],
 8007c08:	f857 8024 	ldr.w	r8, [r7, r4, lsl #2]
 8007c0c:	f7f8 fd56 	bl	80006bc <SYS_dbg_get_mask>
 8007c10:	2301      	movs	r3, #1
 8007c12:	40a3      	lsls	r3, r4
 8007c14:	4218      	tst	r0, r3
 8007c16:	bf0c      	ite	eq
 8007c18:	4632      	moveq	r2, r6
 8007c1a:	462a      	movne	r2, r5
 8007c1c:	4808      	ldr	r0, [pc, #32]	; (8007c40 <print_debug_setting+0x50>)
 8007c1e:	4641      	mov	r1, r8
const char* DBG_BIT_NAME[] = _DBG_BIT_NAMES;

static void print_debug_setting() {
  print("DBG level: %i\n", SYS_dbg_get_level());
  int d;
  for (d = 0; d < sizeof(DBG_BIT_NAME) / sizeof(const char*); d++) {
 8007c20:	3401      	adds	r4, #1
    print("DBG mask %s: %s\n", DBG_BIT_NAME[d],
 8007c22:	f001 fabb 	bl	800919c <arcprint>
const char* DBG_BIT_NAME[] = _DBG_BIT_NAMES;

static void print_debug_setting() {
  print("DBG level: %i\n", SYS_dbg_get_level());
  int d;
  for (d = 0; d < sizeof(DBG_BIT_NAME) / sizeof(const char*); d++) {
 8007c26:	2c0f      	cmp	r4, #15
 8007c28:	d1ee      	bne.n	8007c08 <print_debug_setting+0x18>
    print("DBG mask %s: %s\n", DBG_BIT_NAME[d],
        SYS_dbg_get_mask() & (1 << d) ? "ON" : "OFF");
  }
}
 8007c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c2e:	bf00      	nop
 8007c30:	08011448 	.word	0x08011448
 8007c34:	20000014 	.word	0x20000014
 8007c38:	08011444 	.word	0x08011444
 8007c3c:	08013106 	.word	0x08013106
 8007c40:	08011457 	.word	0x08011457

08007c44 <f_dbg>:
static int f_dbg() {
  enum state {
    NONE, LEVEL, ENABLE, DISABLE
  } st = NONE;
  int a;
  if (_argc == 0) {
 8007c44:	4b3f      	ldr	r3, [pc, #252]	; (8007d44 <f_dbg+0x100>)
    print("DBG mask %s: %s\n", DBG_BIT_NAME[d],
        SYS_dbg_get_mask() & (1 << d) ? "ON" : "OFF");
  }
}

static int f_dbg() {
 8007c46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  enum state {
    NONE, LEVEL, ENABLE, DISABLE
  } st = NONE;
  int a;
  if (_argc == 0) {
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	4698      	mov	r8, r3
 8007c4e:	b352      	cbz	r2, 8007ca6 <f_dbg+0x62>
 8007c50:	2700      	movs	r7, #0
 8007c52:	463d      	mov	r5, r7
    return 0;
  }
  for (a = 0; a < _argc; a++) {
    u32_t f = 0;
    char *s = (char*) _args[a];
    if (!IS_STRING(s)) {
 8007c54:	f103 0a44 	add.w	sl, r3, #68	; 0x44
 8007c58:	f503 7ba2 	add.w	fp, r3, #324	; 0x144
 8007c5c:	e01f      	b.n	8007c9e <f_dbg+0x5a>
    print_debug_setting();
    return 0;
  }
  for (a = 0; a < _argc; a++) {
    u32_t f = 0;
    char *s = (char*) _args[a];
 8007c5e:	4b3a      	ldr	r3, [pc, #232]	; (8007d48 <f_dbg+0x104>)
 8007c60:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
    if (!IS_STRING(s)) {
 8007c64:	4554      	cmp	r4, sl
 8007c66:	d358      	bcc.n	8007d1a <f_dbg+0xd6>
 8007c68:	455c      	cmp	r4, fp
 8007c6a:	d256      	bcs.n	8007d1a <f_dbg+0xd6>
      return -1;
    }
    if (strcmp("level", s) == 0) {
 8007c6c:	4837      	ldr	r0, [pc, #220]	; (8007d4c <f_dbg+0x108>)
 8007c6e:	4621      	mov	r1, r4
 8007c70:	f7f9 fb2d 	bl	80012ce <strcmp>
 8007c74:	b390      	cbz	r0, 8007cdc <f_dbg+0x98>
      st = LEVEL;
    } else if (strcmp("enable", s) == 0) {
 8007c76:	4836      	ldr	r0, [pc, #216]	; (8007d50 <f_dbg+0x10c>)
 8007c78:	4621      	mov	r1, r4
 8007c7a:	f7f9 fb28 	bl	80012ce <strcmp>
 8007c7e:	b378      	cbz	r0, 8007ce0 <f_dbg+0x9c>
      st = ENABLE;
    } else if (strcmp("disable", s) == 0) {
 8007c80:	4834      	ldr	r0, [pc, #208]	; (8007d54 <f_dbg+0x110>)
 8007c82:	4621      	mov	r1, r4
 8007c84:	f7f9 fb23 	bl	80012ce <strcmp>
 8007c88:	b370      	cbz	r0, 8007ce8 <f_dbg+0xa4>
      st = DISABLE;
    } else {
      switch (st) {
 8007c8a:	2d01      	cmp	r5, #1
 8007c8c:	d10f      	bne.n	8007cae <f_dbg+0x6a>
      case LEVEL:
        if (strcmp("dbg", s) == 0) {
 8007c8e:	4832      	ldr	r0, [pc, #200]	; (8007d58 <f_dbg+0x114>)
 8007c90:	4621      	mov	r1, r4
 8007c92:	f7f9 fb1c 	bl	80012ce <strcmp>
 8007c96:	b960      	cbnz	r0, 8007cb2 <f_dbg+0x6e>
        } else if (strcmp("info", s) == 0) {
          SYS_dbg_level(D_INFO);
        } else if (strcmp("warn", s) == 0) {
          SYS_dbg_level(D_WARN);
        } else if (strcmp("fatal", s) == 0) {
          SYS_dbg_level(D_FATAL);
 8007c98:	f7f8 fd04 	bl	80006a4 <SYS_dbg_level>
  int a;
  if (_argc == 0) {
    print_debug_setting();
    return 0;
  }
  for (a = 0; a < _argc; a++) {
 8007c9c:	3701      	adds	r7, #1
 8007c9e:	f8d8 3000 	ldr.w	r3, [r8]
 8007ca2:	429f      	cmp	r7, r3
 8007ca4:	dbdb      	blt.n	8007c5e <f_dbg+0x1a>
  enum state {
    NONE, LEVEL, ENABLE, DISABLE
  } st = NONE;
  int a;
  if (_argc == 0) {
    print_debug_setting();
 8007ca6:	f7ff ffa3 	bl	8007bf0 <print_debug_setting>
    return 0;
 8007caa:	2000      	movs	r0, #0
 8007cac:	e047      	b.n	8007d3e <f_dbg+0xfa>
    } else if (strcmp("enable", s) == 0) {
      st = ENABLE;
    } else if (strcmp("disable", s) == 0) {
      st = DISABLE;
    } else {
      switch (st) {
 8007cae:	d237      	bcs.n	8007d20 <f_dbg+0xdc>
 8007cb0:	e033      	b.n	8007d1a <f_dbg+0xd6>
      case LEVEL:
        if (strcmp("dbg", s) == 0) {
          SYS_dbg_level(D_DEBUG);
        } else if (strcmp("info", s) == 0) {
 8007cb2:	482a      	ldr	r0, [pc, #168]	; (8007d5c <f_dbg+0x118>)
 8007cb4:	4621      	mov	r1, r4
 8007cb6:	f7f9 fb0a 	bl	80012ce <strcmp>
 8007cba:	b908      	cbnz	r0, 8007cc0 <f_dbg+0x7c>
          SYS_dbg_level(D_INFO);
 8007cbc:	4628      	mov	r0, r5
 8007cbe:	e7eb      	b.n	8007c98 <f_dbg+0x54>
        } else if (strcmp("warn", s) == 0) {
 8007cc0:	4827      	ldr	r0, [pc, #156]	; (8007d60 <f_dbg+0x11c>)
 8007cc2:	4621      	mov	r1, r4
 8007cc4:	f7f9 fb03 	bl	80012ce <strcmp>
 8007cc8:	b908      	cbnz	r0, 8007cce <f_dbg+0x8a>
          SYS_dbg_level(D_WARN);
 8007cca:	2002      	movs	r0, #2
 8007ccc:	e7e4      	b.n	8007c98 <f_dbg+0x54>
        } else if (strcmp("fatal", s) == 0) {
 8007cce:	4825      	ldr	r0, [pc, #148]	; (8007d64 <f_dbg+0x120>)
 8007cd0:	4621      	mov	r1, r4
 8007cd2:	f7f9 fafc 	bl	80012ce <strcmp>
 8007cd6:	bb00      	cbnz	r0, 8007d1a <f_dbg+0xd6>
          SYS_dbg_level(D_FATAL);
 8007cd8:	2003      	movs	r0, #3
 8007cda:	e7dd      	b.n	8007c98 <f_dbg+0x54>
    char *s = (char*) _args[a];
    if (!IS_STRING(s)) {
      return -1;
    }
    if (strcmp("level", s) == 0) {
      st = LEVEL;
 8007cdc:	2501      	movs	r5, #1
 8007cde:	e7dd      	b.n	8007c9c <f_dbg+0x58>
    } else if (strcmp("enable", s) == 0) {
      st = ENABLE;
 8007ce0:	2502      	movs	r5, #2
 8007ce2:	e7db      	b.n	8007c9c <f_dbg+0x58>
          return -1;
        }
        if (st == ENABLE) {
          SYS_dbg_mask_enable(f);
        } else {
          SYS_dbg_mask_disable(f);
 8007ce4:	f7f8 fcd6 	bl	8000694 <SYS_dbg_mask_disable>
    if (strcmp("level", s) == 0) {
      st = LEVEL;
    } else if (strcmp("enable", s) == 0) {
      st = ENABLE;
    } else if (strcmp("disable", s) == 0) {
      st = DISABLE;
 8007ce8:	2503      	movs	r5, #3
 8007cea:	e7d7      	b.n	8007c9c <f_dbg+0x58>
        }
        break;
      case ENABLE:
      case DISABLE: {
        int d;
        for (d = 0; f == 0 && d < sizeof(DBG_BIT_NAME) / sizeof(const char*);
 8007cec:	2b0f      	cmp	r3, #15
 8007cee:	d00e      	beq.n	8007d0e <f_dbg+0xca>
            d++) {
          if (strcmp(DBG_BIT_NAME[d], s) == 0) {
 8007cf0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007cf4:	4621      	mov	r1, r4
 8007cf6:	e88d 000c 	stmia.w	sp, {r2, r3}
 8007cfa:	f7f9 fae8 	bl	80012ce <strcmp>
 8007cfe:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8007d02:	b990      	cbnz	r0, 8007d2a <f_dbg+0xe6>
            f = (1 << d);
 8007d04:	fa09 f603 	lsl.w	r6, r9, r3
        break;
      case ENABLE:
      case DISABLE: {
        int d;
        for (d = 0; f == 0 && d < sizeof(DBG_BIT_NAME) / sizeof(const char*);
            d++) {
 8007d08:	3301      	adds	r3, #1
        }
        break;
      case ENABLE:
      case DISABLE: {
        int d;
        for (d = 0; f == 0 && d < sizeof(DBG_BIT_NAME) / sizeof(const char*);
 8007d0a:	2e00      	cmp	r6, #0
 8007d0c:	d0ee      	beq.n	8007cec <f_dbg+0xa8>
            d++) {
          if (strcmp(DBG_BIT_NAME[d], s) == 0) {
            f = (1 << d);
          }
        }
        if (strcmp("all", s) == 0) {
 8007d0e:	4816      	ldr	r0, [pc, #88]	; (8007d68 <f_dbg+0x124>)
 8007d10:	4621      	mov	r1, r4
 8007d12:	f7f9 fadc 	bl	80012ce <strcmp>
 8007d16:	b150      	cbz	r0, 8007d2e <f_dbg+0xea>
          f = D_ANY;
        }
        if (f == 0) {
 8007d18:	b95e      	cbnz	r6, 8007d32 <f_dbg+0xee>
  }
  for (a = 0; a < _argc; a++) {
    u32_t f = 0;
    char *s = (char*) _args[a];
    if (!IS_STRING(s)) {
      return -1;
 8007d1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d1e:	e00e      	b.n	8007d3e <f_dbg+0xfa>
    } else if (strcmp("enable", s) == 0) {
      st = ENABLE;
    } else if (strcmp("disable", s) == 0) {
      st = DISABLE;
    } else {
      switch (st) {
 8007d20:	2300      	movs	r3, #0
      case ENABLE:
      case DISABLE: {
        int d;
        for (d = 0; f == 0 && d < sizeof(DBG_BIT_NAME) / sizeof(const char*);
            d++) {
          if (strcmp(DBG_BIT_NAME[d], s) == 0) {
 8007d22:	4a12      	ldr	r2, [pc, #72]	; (8007d6c <f_dbg+0x128>)
            f = (1 << d);
 8007d24:	f04f 0901 	mov.w	r9, #1
 8007d28:	e7e2      	b.n	8007cf0 <f_dbg+0xac>
 8007d2a:	2600      	movs	r6, #0
 8007d2c:	e7ec      	b.n	8007d08 <f_dbg+0xc4>
          }
        }
        if (strcmp("all", s) == 0) {
          f = D_ANY;
 8007d2e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
        }
        if (f == 0) {
          return -1;
        }
        if (st == ENABLE) {
 8007d32:	2d02      	cmp	r5, #2
          SYS_dbg_mask_enable(f);
 8007d34:	4630      	mov	r0, r6
          f = D_ANY;
        }
        if (f == 0) {
          return -1;
        }
        if (st == ENABLE) {
 8007d36:	d1d5      	bne.n	8007ce4 <f_dbg+0xa0>
          SYS_dbg_mask_enable(f);
 8007d38:	f7f8 fca4 	bl	8000684 <SYS_dbg_mask_enable>
 8007d3c:	e7ae      	b.n	8007c9c <f_dbg+0x58>
      }
    }
  }
  print_debug_setting();
  return 0;
}
 8007d3e:	b003      	add	sp, #12
 8007d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d44:	20000568 	.word	0x20000568
 8007d48:	2000056c 	.word	0x2000056c
 8007d4c:	08011468 	.word	0x08011468
 8007d50:	08011f21 	.word	0x08011f21
 8007d54:	0801146e 	.word	0x0801146e
 8007d58:	08011476 	.word	0x08011476
 8007d5c:	0801147a 	.word	0x0801147a
 8007d60:	0801147f 	.word	0x0801147f
 8007d64:	08011484 	.word	0x08011484
 8007d68:	0801148a 	.word	0x0801148a
 8007d6c:	20000014 	.word	0x20000014

08007d70 <f_uconf>:
  }
  print("\n%i bytes read\n", l);
  return 0;
}

static int f_uconf(int uart, int speed) {
 8007d70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (_argc != 2) {
 8007d72:	4b10      	ldr	r3, [pc, #64]	; (8007db4 <f_uconf+0x44>)
  }
  print("\n%i bytes read\n", l);
  return 0;
}

static int f_uconf(int uart, int speed) {
 8007d74:	4604      	mov	r4, r0
  if (_argc != 2) {
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	2a02      	cmp	r2, #2
 8007d7a:	d117      	bne.n	8007dac <f_uconf+0x3c>
    return -1;
  }
  if (IS_STRING(uart) || IS_STRING(speed) || uart < 0 || uart >= CONFIG_UART_CNT) {
 8007d7c:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8007d80:	4290      	cmp	r0, r2
 8007d82:	d303      	bcc.n	8007d8c <f_uconf+0x1c>
 8007d84:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007d88:	4298      	cmp	r0, r3
 8007d8a:	d30f      	bcc.n	8007dac <f_uconf+0x3c>
 8007d8c:	4291      	cmp	r1, r2
 8007d8e:	d302      	bcc.n	8007d96 <f_uconf+0x26>
 8007d90:	4b09      	ldr	r3, [pc, #36]	; (8007db8 <f_uconf+0x48>)
 8007d92:	4299      	cmp	r1, r3
 8007d94:	d30a      	bcc.n	8007dac <f_uconf+0x3c>
 8007d96:	b94c      	cbnz	r4, 8007dac <f_uconf+0x3c>
    return -1;
  }
  UART_config(_UART(uart), speed,
 8007d98:	2301      	movs	r3, #1
 8007d9a:	9400      	str	r4, [sp, #0]
 8007d9c:	9401      	str	r4, [sp, #4]
 8007d9e:	9302      	str	r3, [sp, #8]
 8007da0:	4806      	ldr	r0, [pc, #24]	; (8007dbc <f_uconf+0x4c>)
 8007da2:	4622      	mov	r2, r4
 8007da4:	f7fb fa21 	bl	80031ea <UART_config>
      UART_CFG_DATABITS_8, UART_CFG_STOPBITS_1, UART_CFG_PARITY_NONE, UART_CFG_FLOWCONTROL_NONE, TRUE);

  return 0;
 8007da8:	4620      	mov	r0, r4
 8007daa:	e001      	b.n	8007db0 <f_uconf+0x40>
  return 0;
}

static int f_uconf(int uart, int speed) {
  if (_argc != 2) {
    return -1;
 8007dac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
  UART_config(_UART(uart), speed,
      UART_CFG_DATABITS_8, UART_CFG_STOPBITS_1, UART_CFG_PARITY_NONE, UART_CFG_FLOWCONTROL_NONE, TRUE);

  return 0;
}
 8007db0:	b004      	add	sp, #16
 8007db2:	bd10      	pop	{r4, pc}
 8007db4:	20000568 	.word	0x20000568
 8007db8:	200006ac 	.word	0x200006ac
 8007dbc:	20000d34 	.word	0x20000d34

08007dc0 <f_uread>:
    UART_put_char(_UART(uart), c);
  }
  return 0;
}

static int f_uread(int uart, int numchars) {
 8007dc0:	b538      	push	{r3, r4, r5, lr}
  if (_argc < 1 || _argc > 2) {
 8007dc2:	4b13      	ldr	r3, [pc, #76]	; (8007e10 <f_uread+0x50>)
    UART_put_char(_UART(uart), c);
  }
  return 0;
}

static int f_uread(int uart, int numchars) {
 8007dc4:	4604      	mov	r4, r0
  if (_argc < 1 || _argc > 2) {
 8007dc6:	681b      	ldr	r3, [r3, #0]
    UART_put_char(_UART(uart), c);
  }
  return 0;
}

static int f_uread(int uart, int numchars) {
 8007dc8:	460d      	mov	r5, r1
  if (_argc < 1 || _argc > 2) {
 8007dca:	1e5a      	subs	r2, r3, #1
 8007dcc:	2a01      	cmp	r2, #1
 8007dce:	d81b      	bhi.n	8007e08 <f_uread+0x48>
    return -1;
  }
  if (uart < 0 || uart >= CONFIG_UART_CNT) {
 8007dd0:	b9d0      	cbnz	r0, 8007e08 <f_uread+0x48>
    return -1;
  }
  if (_argc == 1) {
    numchars = 0x7fffffff;
 8007dd2:	2b01      	cmp	r3, #1
  }
  int l = UART_rx_available(_UART(uart));
 8007dd4:	480f      	ldr	r0, [pc, #60]	; (8007e14 <f_uread+0x54>)
  }
  if (uart < 0 || uart >= CONFIG_UART_CNT) {
    return -1;
  }
  if (_argc == 1) {
    numchars = 0x7fffffff;
 8007dd6:	bf08      	it	eq
 8007dd8:	f06f 4500 	mvneq.w	r5, #2147483648	; 0x80000000
  }
  int l = UART_rx_available(_UART(uart));
 8007ddc:	f7fb f858 	bl	8002e90 <UART_rx_available>
  l = MIN(l, numchars);
 8007de0:	42a8      	cmp	r0, r5
 8007de2:	bfb8      	it	lt
 8007de4:	4605      	movlt	r5, r0
  int ix = 0;
  while (ix++ < l) {
 8007de6:	42ac      	cmp	r4, r5
 8007de8:	da08      	bge.n	8007dfc <f_uread+0x3c>
    print("%c", UART_get_char(_UART(uart)));
 8007dea:	480a      	ldr	r0, [pc, #40]	; (8007e14 <f_uread+0x54>)
 8007dec:	f7fb f896 	bl	8002f1c <UART_get_char>
 8007df0:	4601      	mov	r1, r0
 8007df2:	4809      	ldr	r0, [pc, #36]	; (8007e18 <f_uread+0x58>)
 8007df4:	f001 f9d2 	bl	800919c <arcprint>
 8007df8:	3401      	adds	r4, #1
 8007dfa:	e7f4      	b.n	8007de6 <f_uread+0x26>
  }
  print("\n%i bytes read\n", l);
 8007dfc:	4807      	ldr	r0, [pc, #28]	; (8007e1c <f_uread+0x5c>)
 8007dfe:	4629      	mov	r1, r5
 8007e00:	f001 f9cc 	bl	800919c <arcprint>
  return 0;
 8007e04:	2000      	movs	r0, #0
 8007e06:	bd38      	pop	{r3, r4, r5, pc}
  return 0;
}

static int f_uread(int uart, int numchars) {
  if (_argc < 1 || _argc > 2) {
    return -1;
 8007e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  while (ix++ < l) {
    print("%c", UART_get_char(_UART(uart)));
  }
  print("\n%i bytes read\n", l);
  return 0;
}
 8007e0c:	bd38      	pop	{r3, r4, r5, pc}
 8007e0e:	bf00      	nop
 8007e10:	20000568 	.word	0x20000568
 8007e14:	20000d34 	.word	0x20000d34
 8007e18:	0801035f 	.word	0x0801035f
 8007e1c:	0801148e 	.word	0x0801148e

08007e20 <f_uwrite>:

  return 0;
}

static int f_uwrite(int uart, char* data) {
  if (_argc != 2 || !IS_STRING(data)) {
 8007e20:	4b0d      	ldr	r3, [pc, #52]	; (8007e58 <f_uwrite+0x38>)
  print("USB_KB_REPORT_KEYMAP_SIZE %i\n", USB_KB_REPORT_KEYMAP_SIZE);

  return 0;
}

static int f_uwrite(int uart, char* data) {
 8007e22:	b510      	push	{r4, lr}
  if (_argc != 2 || !IS_STRING(data)) {
 8007e24:	681a      	ldr	r2, [r3, #0]
  print("USB_KB_REPORT_KEYMAP_SIZE %i\n", USB_KB_REPORT_KEYMAP_SIZE);

  return 0;
}

static int f_uwrite(int uart, char* data) {
 8007e26:	460c      	mov	r4, r1
  if (_argc != 2 || !IS_STRING(data)) {
 8007e28:	2a02      	cmp	r2, #2
 8007e2a:	d111      	bne.n	8007e50 <f_uwrite+0x30>
 8007e2c:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8007e30:	4291      	cmp	r1, r2
 8007e32:	d30d      	bcc.n	8007e50 <f_uwrite+0x30>
 8007e34:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007e38:	4299      	cmp	r1, r3
 8007e3a:	d209      	bcs.n	8007e50 <f_uwrite+0x30>
    return -1;
  }
  if (uart < 0 || uart >= CONFIG_UART_CNT) {
 8007e3c:	b940      	cbnz	r0, 8007e50 <f_uwrite+0x30>
    return -1;
  }
  char c;
  while ((c = *data++) != 0) {
 8007e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e42:	b119      	cbz	r1, 8007e4c <f_uwrite+0x2c>
    UART_put_char(_UART(uart), c);
 8007e44:	4805      	ldr	r0, [pc, #20]	; (8007e5c <f_uwrite+0x3c>)
 8007e46:	f7fb f912 	bl	800306e <UART_put_char>
 8007e4a:	e7f8      	b.n	8007e3e <f_uwrite+0x1e>
  }
  return 0;
 8007e4c:	4608      	mov	r0, r1
 8007e4e:	bd10      	pop	{r4, pc}
  return 0;
}

static int f_uwrite(int uart, char* data) {
  if (_argc != 2 || !IS_STRING(data)) {
    return -1;
 8007e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  char c;
  while ((c = *data++) != 0) {
    UART_put_char(_UART(uart), c);
  }
  return 0;
}
 8007e54:	bd10      	pop	{r4, pc}
 8007e56:	bf00      	nop
 8007e58:	20000568 	.word	0x20000568
 8007e5c:	20000d34 	.word	0x20000d34

08007e60 <f_dump_trace>:
  TASK_dump(IOSTD);
  TASK_dump_pool(IOSTD);
  return 0;
}

static int f_dump_trace() {
 8007e60:	b508      	push	{r3, lr}
#ifdef DBG_TRACE_MON
  SYS_dump_trace(get_print_output());
 8007e62:	f001 f995 	bl	8009190 <get_print_output>
 8007e66:	f7f8 fc55 	bl	8000714 <SYS_dump_trace>
#else
  print("trace not enabled\n");
#endif
  return 0;
}
 8007e6a:	2000      	movs	r0, #0
 8007e6c:	bd08      	pop	{r3, pc}

08007e6e <f_dump>:
    }
  }
  return 0;
}

static int f_dump() {
 8007e6e:	b510      	push	{r4, lr}
 8007e70:	b086      	sub	sp, #24
  RCC_ClocksTypeDef clocks;
  RCC_GetClocksFreq(&clocks);
 8007e72:	a801      	add	r0, sp, #4
 8007e74:	f005 f824 	bl	800cec0 <RCC_GetClocksFreq>

  print("\nCLOCKS\n------\n");
 8007e78:	4824      	ldr	r0, [pc, #144]	; (8007f0c <f_dump+0x9e>)
 8007e7a:	f001 f98f 	bl	800919c <arcprint>
  print("HCLK:        %i\n", clocks.HCLK_Frequency);
 8007e7e:	9902      	ldr	r1, [sp, #8]
 8007e80:	4823      	ldr	r0, [pc, #140]	; (8007f10 <f_dump+0xa2>)
 8007e82:	f001 f98b 	bl	800919c <arcprint>
  print("PCLK1:       %i\n", clocks.PCLK1_Frequency);
 8007e86:	9903      	ldr	r1, [sp, #12]
 8007e88:	4822      	ldr	r0, [pc, #136]	; (8007f14 <f_dump+0xa6>)
 8007e8a:	f001 f987 	bl	800919c <arcprint>
  print("PCKL2:       %i\n", clocks.PCLK2_Frequency);
 8007e8e:	9904      	ldr	r1, [sp, #16]
 8007e90:	4821      	ldr	r0, [pc, #132]	; (8007f18 <f_dump+0xaa>)
 8007e92:	f001 f983 	bl	800919c <arcprint>
  print("SYSCLK:      %i\n", clocks.SYSCLK_Frequency);
 8007e96:	9901      	ldr	r1, [sp, #4]
 8007e98:	4820      	ldr	r0, [pc, #128]	; (8007f1c <f_dump+0xae>)
 8007e9a:	f001 f97f 	bl	800919c <arcprint>
  print("ADCCLK:      %i\n", clocks.ADCCLK_Frequency);

  print("\nMEMORY\n------\n");
  print("ram begin:   %08x\n", RAM_BEGIN);
 8007e9e:	4c20      	ldr	r4, [pc, #128]	; (8007f20 <f_dump+0xb2>)
  print("\nCLOCKS\n------\n");
  print("HCLK:        %i\n", clocks.HCLK_Frequency);
  print("PCLK1:       %i\n", clocks.PCLK1_Frequency);
  print("PCKL2:       %i\n", clocks.PCLK2_Frequency);
  print("SYSCLK:      %i\n", clocks.SYSCLK_Frequency);
  print("ADCCLK:      %i\n", clocks.ADCCLK_Frequency);
 8007ea0:	9905      	ldr	r1, [sp, #20]
 8007ea2:	4820      	ldr	r0, [pc, #128]	; (8007f24 <f_dump+0xb6>)
 8007ea4:	f001 f97a 	bl	800919c <arcprint>

  print("\nMEMORY\n------\n");
 8007ea8:	481f      	ldr	r0, [pc, #124]	; (8007f28 <f_dump+0xba>)
 8007eaa:	f001 f977 	bl	800919c <arcprint>
  print("ram begin:   %08x\n", RAM_BEGIN);
 8007eae:	4621      	mov	r1, r4
 8007eb0:	481e      	ldr	r0, [pc, #120]	; (8007f2c <f_dump+0xbe>)
 8007eb2:	f001 f973 	bl	800919c <arcprint>
  print("ram end:     %08x\n", RAM_END);
 8007eb6:	491e      	ldr	r1, [pc, #120]	; (8007f30 <f_dump+0xc2>)
 8007eb8:	481e      	ldr	r0, [pc, #120]	; (8007f34 <f_dump+0xc6>)
 8007eba:	4421      	add	r1, r4
 8007ebc:	f001 f96e 	bl	800919c <arcprint>
  print("flash begin: %08x\n", FLASH_BEGIN);
 8007ec0:	481d      	ldr	r0, [pc, #116]	; (8007f38 <f_dump+0xca>)
 8007ec2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8007ec6:	f001 f969 	bl	800919c <arcprint>
  print("flash end:   %08x\n", FLASH_END);
 8007eca:	481c      	ldr	r0, [pc, #112]	; (8007f3c <f_dump+0xce>)
 8007ecc:	491c      	ldr	r1, [pc, #112]	; (8007f40 <f_dump+0xd2>)
 8007ece:	f001 f965 	bl	800919c <arcprint>
  print("shmem begin: %08x\n", SHARED_MEMORY_ADDRESS);
 8007ed2:	481c      	ldr	r0, [pc, #112]	; (8007f44 <f_dump+0xd6>)
 8007ed4:	491c      	ldr	r1, [pc, #112]	; (8007f48 <f_dump+0xda>)
 8007ed6:	f001 f961 	bl	800919c <arcprint>
  print("shmem end:   %08x\n", SHARED_MEMORY_END);
 8007eda:	481c      	ldr	r0, [pc, #112]	; (8007f4c <f_dump+0xde>)
 8007edc:	491c      	ldr	r1, [pc, #112]	; (8007f50 <f_dump+0xe2>)
 8007ede:	f001 f95d 	bl	800919c <arcprint>
  print("stack begin: %08x\n", STACK_START);
 8007ee2:	481c      	ldr	r0, [pc, #112]	; (8007f54 <f_dump+0xe6>)
 8007ee4:	491c      	ldr	r1, [pc, #112]	; (8007f58 <f_dump+0xea>)
 8007ee6:	f001 f959 	bl	800919c <arcprint>
  print("stack end:   %08x\n", STACK_END);
 8007eea:	491c      	ldr	r1, [pc, #112]	; (8007f5c <f_dump+0xee>)
 8007eec:	481c      	ldr	r0, [pc, #112]	; (8007f60 <f_dump+0xf2>)
 8007eee:	f001 f955 	bl	800919c <arcprint>
  print("\n");
 8007ef2:	481c      	ldr	r0, [pc, #112]	; (8007f64 <f_dump+0xf6>)
 8007ef4:	f001 f952 	bl	800919c <arcprint>

  TASK_dump(IOSTD);
 8007ef8:	2000      	movs	r0, #0
 8007efa:	f7f9 fddb 	bl	8001ab4 <TASK_dump>
  TASK_dump_pool(IOSTD);
 8007efe:	2000      	movs	r0, #0
 8007f00:	f7f9 fdb4 	bl	8001a6c <TASK_dump_pool>
  return 0;
}
 8007f04:	2000      	movs	r0, #0
 8007f06:	b006      	add	sp, #24
 8007f08:	bd10      	pop	{r4, pc}
 8007f0a:	bf00      	nop
 8007f0c:	0801149e 	.word	0x0801149e
 8007f10:	080114ae 	.word	0x080114ae
 8007f14:	080114bf 	.word	0x080114bf
 8007f18:	080114d0 	.word	0x080114d0
 8007f1c:	080114e1 	.word	0x080114e1
 8007f20:	20000000 	.word	0x20000000
 8007f24:	080114f2 	.word	0x080114f2
 8007f28:	08011503 	.word	0x08011503
 8007f2c:	08011513 	.word	0x08011513
 8007f30:	00005000 	.word	0x00005000
 8007f34:	08011526 	.word	0x08011526
 8007f38:	08011539 	.word	0x08011539
 8007f3c:	0801154c 	.word	0x0801154c
 8007f40:	08018000 	.word	0x08018000
 8007f44:	0801155f 	.word	0x0801155f
 8007f48:	20004f80 	.word	0x20004f80
 8007f4c:	08011572 	.word	0x08011572
 8007f50:	20004f8c 	.word	0x20004f8c
 8007f54:	08011585 	.word	0x08011585
 8007f58:	20001818 	.word	0x20001818
 8007f5c:	20004f80 	.word	0x20004f80
 8007f60:	08011598 	.word	0x08011598
 8007f64:	0801197d 	.word	0x0801197d

08007f68 <f_fs_less>:
  int res = FS_append(name, line);
  if (res != 0) print("err: %i\n", res);
  return 0;
}

static int f_fs_less(char *name) {
 8007f68:	b508      	push	{r3, lr}
  int res = FS_less(name);
 8007f6a:	f002 fdd7 	bl	800ab1c <FS_less>
  if (res != 0) print("err: %i\n", res);
 8007f6e:	4601      	mov	r1, r0
 8007f70:	b110      	cbz	r0, 8007f78 <f_fs_less+0x10>
 8007f72:	4802      	ldr	r0, [pc, #8]	; (8007f7c <f_fs_less+0x14>)
 8007f74:	f001 f912 	bl	800919c <arcprint>
  return 0;
}
 8007f78:	2000      	movs	r0, #0
 8007f7a:	bd08      	pop	{r3, pc}
 8007f7c:	080115ab 	.word	0x080115ab

08007f80 <f_fs_rename>:
  int res = FS_create(name);
  if (res != 0) print("err: %i\n", res);
  return 0;
}

static int f_fs_rename(char *oldname, char *newname){
 8007f80:	b508      	push	{r3, lr}
  int res = FS_rename(oldname, newname);
 8007f82:	f002 fe01 	bl	800ab88 <FS_rename>
  if (res != 0) print("err: %i\n", res);
 8007f86:	4601      	mov	r1, r0
 8007f88:	b110      	cbz	r0, 8007f90 <f_fs_rename+0x10>
 8007f8a:	4802      	ldr	r0, [pc, #8]	; (8007f94 <f_fs_rename+0x14>)
 8007f8c:	f001 f906 	bl	800919c <arcprint>
  return 0;
}
 8007f90:	2000      	movs	r0, #0
 8007f92:	bd08      	pop	{r3, pc}
 8007f94:	080115ab 	.word	0x080115ab

08007f98 <f_fs_append>:

static int f_fs_append(char *name, char *line) {
 8007f98:	b508      	push	{r3, lr}
  int res = FS_append(name, line);
 8007f9a:	f002 fd93 	bl	800aac4 <FS_append>
  if (res != 0) print("err: %i\n", res);
 8007f9e:	4601      	mov	r1, r0
 8007fa0:	b110      	cbz	r0, 8007fa8 <f_fs_append+0x10>
 8007fa2:	4802      	ldr	r0, [pc, #8]	; (8007fac <f_fs_append+0x14>)
 8007fa4:	f001 f8fa 	bl	800919c <arcprint>
  return 0;
}
 8007fa8:	2000      	movs	r0, #0
 8007faa:	bd08      	pop	{r3, pc}
 8007fac:	080115ab 	.word	0x080115ab

08007fb0 <f_fs_create>:
  int res = FS_chk();
  if (res != 0) print("err: %i\n", res);
  return 0;
}

static int f_fs_create(char *name) {
 8007fb0:	b508      	push	{r3, lr}
  int res = FS_create(name);
 8007fb2:	f002 fd7f 	bl	800aab4 <FS_create>
  if (res != 0) print("err: %i\n", res);
 8007fb6:	4601      	mov	r1, r0
 8007fb8:	b110      	cbz	r0, 8007fc0 <f_fs_create+0x10>
 8007fba:	4802      	ldr	r0, [pc, #8]	; (8007fc4 <f_fs_create+0x14>)
 8007fbc:	f001 f8ee 	bl	800919c <arcprint>
  return 0;
}
 8007fc0:	2000      	movs	r0, #0
 8007fc2:	bd08      	pop	{r3, pc}
 8007fc4:	080115ab 	.word	0x080115ab

08007fc8 <f_fs_format>:
  int res = FS_rm_config(name);
  if (res != 0) print("err: %i\n", res);
  return 0;
}

static int f_fs_format(void) {
 8007fc8:	b508      	push	{r3, lr}
  int res = FS_format();
 8007fca:	f002 fd61 	bl	800aa90 <FS_format>
  if (res != 0) print("err: %i\n", res);
 8007fce:	4601      	mov	r1, r0
 8007fd0:	b110      	cbz	r0, 8007fd8 <f_fs_format+0x10>
 8007fd2:	4802      	ldr	r0, [pc, #8]	; (8007fdc <f_fs_format+0x14>)
 8007fd4:	f001 f8e2 	bl	800919c <arcprint>
  return 0;
}
 8007fd8:	2000      	movs	r0, #0
 8007fda:	bd08      	pop	{r3, pc}
 8007fdc:	080115ab 	.word	0x080115ab

08007fe0 <f_fs_chk>:

static int f_fs_chk(void) {
 8007fe0:	b508      	push	{r3, lr}
  int res = FS_chk();
 8007fe2:	f002 fd43 	bl	800aa6c <FS_chk>
  if (res != 0) print("err: %i\n", res);
 8007fe6:	4601      	mov	r1, r0
 8007fe8:	b110      	cbz	r0, 8007ff0 <f_fs_chk+0x10>
 8007fea:	4802      	ldr	r0, [pc, #8]	; (8007ff4 <f_fs_chk+0x14>)
 8007fec:	f001 f8d6 	bl	800919c <arcprint>
  return 0;
}
 8007ff0:	2000      	movs	r0, #0
 8007ff2:	bd08      	pop	{r3, pc}
 8007ff4:	080115ab 	.word	0x080115ab

08007ff8 <f_fs_rm>:
  int res = FS_load_config(name);
  if (res != 0) print("err: %i\n", res);
  return 0;
}

static int f_fs_rm(char *name) {
 8007ff8:	b508      	push	{r3, lr}
  if (_argc != 1) return -1;
 8007ffa:	4b08      	ldr	r3, [pc, #32]	; (800801c <f_fs_rm+0x24>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d108      	bne.n	8008014 <f_fs_rm+0x1c>
  int res = FS_rm_config(name);
 8008002:	f002 fd2d 	bl	800aa60 <FS_rm_config>
  if (res != 0) print("err: %i\n", res);
 8008006:	4601      	mov	r1, r0
 8008008:	b110      	cbz	r0, 8008010 <f_fs_rm+0x18>
 800800a:	4805      	ldr	r0, [pc, #20]	; (8008020 <f_fs_rm+0x28>)
 800800c:	f001 f8c6 	bl	800919c <arcprint>
  return 0;
 8008010:	2000      	movs	r0, #0
 8008012:	bd08      	pop	{r3, pc}
  if (res != 0) print("err: %i\n", res);
  return 0;
}

static int f_fs_rm(char *name) {
  if (_argc != 1) return -1;
 8008014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008018:	bd08      	pop	{r3, pc}
 800801a:	bf00      	nop
 800801c:	20000568 	.word	0x20000568
 8008020:	080115ab 	.word	0x080115ab

08008024 <f_fs_load>:
  int res = FS_save_config(name);
  if (res != 0) print("err: %i\n", res);
  return 0;
}

static int f_fs_load(char *name) {
 8008024:	b508      	push	{r3, lr}
  if (_argc != 1) return -1;
 8008026:	4b08      	ldr	r3, [pc, #32]	; (8008048 <f_fs_load+0x24>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	2b01      	cmp	r3, #1
 800802c:	d108      	bne.n	8008040 <f_fs_load+0x1c>
  int res = FS_load_config(name);
 800802e:	f002 fc79 	bl	800a924 <FS_load_config>
  if (res != 0) print("err: %i\n", res);
 8008032:	4601      	mov	r1, r0
 8008034:	b110      	cbz	r0, 800803c <f_fs_load+0x18>
 8008036:	4805      	ldr	r0, [pc, #20]	; (800804c <f_fs_load+0x28>)
 8008038:	f001 f8b0 	bl	800919c <arcprint>
  return 0;
 800803c:	2000      	movs	r0, #0
 800803e:	bd08      	pop	{r3, pc}
  if (res != 0) print("err: %i\n", res);
  return 0;
}

static int f_fs_load(char *name) {
  if (_argc != 1) return -1;
 8008040:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008044:	bd08      	pop	{r3, pc}
 8008046:	bf00      	nop
 8008048:	20000568 	.word	0x20000568
 800804c:	080115ab 	.word	0x080115ab

08008050 <f_fs_save>:
static int f_fs_ls(void) {
  FS_ls();
  return 0;
}

static int f_fs_save(char *name) {
 8008050:	b508      	push	{r3, lr}
  if (_argc != 1) return -1;
 8008052:	4b08      	ldr	r3, [pc, #32]	; (8008074 <f_fs_save+0x24>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	2b01      	cmp	r3, #1
 8008058:	d108      	bne.n	800806c <f_fs_save+0x1c>
  int res = FS_save_config(name);
 800805a:	f002 fbe1 	bl	800a820 <FS_save_config>
  if (res != 0) print("err: %i\n", res);
 800805e:	4601      	mov	r1, r0
 8008060:	b110      	cbz	r0, 8008068 <f_fs_save+0x18>
 8008062:	4805      	ldr	r0, [pc, #20]	; (8008078 <f_fs_save+0x28>)
 8008064:	f001 f89a 	bl	800919c <arcprint>
  return 0;
 8008068:	2000      	movs	r0, #0
 800806a:	bd08      	pop	{r3, pc}
  FS_ls();
  return 0;
}

static int f_fs_save(char *name) {
  if (_argc != 1) return -1;
 800806c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008070:	bd08      	pop	{r3, pc}
 8008072:	bf00      	nop
 8008074:	20000568 	.word	0x20000568
 8008078:	080115ab 	.word	0x080115ab

0800807c <f_fs_ls>:
static int f_fs_dump(void) {
  FS_dump();
  return 0;
}

static int f_fs_ls(void) {
 800807c:	b508      	push	{r3, lr}
  FS_ls();
 800807e:	f002 fb93 	bl	800a7a8 <FS_ls>
  return 0;
}
 8008082:	2000      	movs	r0, #0
 8008084:	bd08      	pop	{r3, pc}

08008086 <f_fs_dump>:
static int f_fs_mount(void) {
  FS_mount();
  return 0;
}

static int f_fs_dump(void) {
 8008086:	b508      	push	{r3, lr}
  FS_dump();
 8008088:	f002 fb88 	bl	800a79c <FS_dump>
  return 0;
}
 800808c:	2000      	movs	r0, #0
 800808e:	bd08      	pop	{r3, pc}

08008090 <f_fs_mount>:
  usb_kb_type_char('K');
  usb_kb_type(KB_MOD_NONE, KC_ENTER);
  return 0;
}

static int f_fs_mount(void) {
 8008090:	b508      	push	{r3, lr}
  FS_mount();
 8008092:	f002 fb39 	bl	800a708 <FS_mount>
  return 0;
}
 8008096:	2000      	movs	r0, #0
 8008098:	bd08      	pop	{r3, pc}

0800809a <usb_kb_type>:

    // menu end marker
    { .name = NULL, .fn = (func) 0, .help = NULL },
  };

static int usb_kb_type(int mod, int code) {
 800809a:	b530      	push	{r4, r5, lr}
 800809c:	b08b      	sub	sp, #44	; 0x2c
  usb_kb_report r;
  memset(&r, 0, sizeof(r));
 800809e:	2222      	movs	r2, #34	; 0x22

    // menu end marker
    { .name = NULL, .fn = (func) 0, .help = NULL },
  };

static int usb_kb_type(int mod, int code) {
 80080a0:	4605      	mov	r5, r0
 80080a2:	460c      	mov	r4, r1
  usb_kb_report r;
  memset(&r, 0, sizeof(r));
 80080a4:	a801      	add	r0, sp, #4
 80080a6:	2100      	movs	r1, #0
 80080a8:	f006 f972 	bl	800e390 <memset>
  r.modifiers = mod;
  r.keymap[0] = code;
  USB_ARC_KB_tx(&r);
 80080ac:	a801      	add	r0, sp, #4

static int usb_kb_type(int mod, int code) {
  usb_kb_report r;
  memset(&r, 0, sizeof(r));
  r.modifiers = mod;
  r.keymap[0] = code;
 80080ae:	f88d 4006 	strb.w	r4, [sp, #6]
  };

static int usb_kb_type(int mod, int code) {
  usb_kb_report r;
  memset(&r, 0, sizeof(r));
  r.modifiers = mod;
 80080b2:	f88d 5004 	strb.w	r5, [sp, #4]
  r.keymap[0] = code;
  USB_ARC_KB_tx(&r);
  r.modifiers = 0;
 80080b6:	2400      	movs	r4, #0
static int usb_kb_type(int mod, int code) {
  usb_kb_report r;
  memset(&r, 0, sizeof(r));
  r.modifiers = mod;
  r.keymap[0] = code;
  USB_ARC_KB_tx(&r);
 80080b8:	f003 fa80 	bl	800b5bc <USB_ARC_KB_tx>
  r.modifiers = 0;
  r.keymap[0] = 0;
  USB_ARC_KB_tx(&r);
 80080bc:	a801      	add	r0, sp, #4
  usb_kb_report r;
  memset(&r, 0, sizeof(r));
  r.modifiers = mod;
  r.keymap[0] = code;
  USB_ARC_KB_tx(&r);
  r.modifiers = 0;
 80080be:	f88d 4004 	strb.w	r4, [sp, #4]
  r.keymap[0] = 0;
 80080c2:	f88d 4006 	strb.w	r4, [sp, #6]
  USB_ARC_KB_tx(&r);
 80080c6:	f003 fa79 	bl	800b5bc <USB_ARC_KB_tx>
  return 0;
}
 80080ca:	4620      	mov	r0, r4
 80080cc:	b00b      	add	sp, #44	; 0x2c
 80080ce:	bd30      	pop	{r4, r5, pc}

080080d0 <usb_kb_type_char>:

static int usb_kb_type_char(char c) {
 80080d0:	b538      	push	{r3, r4, r5, lr}
 80080d2:	4605      	mov	r5, r0
  enum kb_hid_code code = 0;
  for (code = 0; code <= 0xbc; code++) {
 80080d4:	2400      	movs	r4, #0
    const keymap *km = USB_ARC_get_keymap(code);
 80080d6:	4620      	mov	r0, r4
 80080d8:	f004 fc3c 	bl	800c954 <USB_ARC_get_keymap>
    if (km != NULL && km->keys != NULL) {
 80080dc:	b180      	cbz	r0, 8008100 <usb_kb_type_char+0x30>
 80080de:	6840      	ldr	r0, [r0, #4]
 80080e0:	b170      	cbz	r0, 8008100 <usb_kb_type_char+0x30>
      if (strchr(km->keys, c)) {
 80080e2:	4629      	mov	r1, r5
 80080e4:	f7f9 f93f 	bl	8001366 <strchr>
 80080e8:	b150      	cbz	r0, 8008100 <usb_kb_type_char+0x30>
        if (c >= 'A' && c <= 'Z') {
 80080ea:	3d41      	subs	r5, #65	; 0x41
 80080ec:	b2ed      	uxtb	r5, r5
 80080ee:	2d19      	cmp	r5, #25
          usb_kb_type(KB_MOD_LEFT_SHIFT, code);
 80080f0:	bf94      	ite	ls
 80080f2:	2002      	movls	r0, #2
        } else {
          usb_kb_type(KB_MOD_NONE, code);
 80080f4:	2000      	movhi	r0, #0
 80080f6:	4621      	mov	r1, r4
 80080f8:	f7ff ffcf 	bl	800809a <usb_kb_type>
        }
        return 1;
 80080fc:	2001      	movs	r0, #1
 80080fe:	bd38      	pop	{r3, r4, r5, pc}
  return 0;
}

static int usb_kb_type_char(char c) {
  enum kb_hid_code code = 0;
  for (code = 0; code <= 0xbc; code++) {
 8008100:	3401      	adds	r4, #1
 8008102:	b2e4      	uxtb	r4, r4
 8008104:	2cbd      	cmp	r4, #189	; 0xbd
 8008106:	d1e6      	bne.n	80080d6 <usb_kb_type_char+0x6>
        return 1;
      }
    }
  }

  return 0;
 8008108:	2000      	movs	r0, #0
}
 800810a:	bd38      	pop	{r3, r4, r5, pc}

0800810c <f_usb_keyboard_test>:
    USB_Cable_Config(DISABLE);
  }
  return 0;
}

static int f_usb_keyboard_test(void) {
 800810c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  print("This will generate a lot of keypresses.\n");
 800810e:	482c      	ldr	r0, [pc, #176]	; (80081c0 <f_usb_keyboard_test+0xb4>)
 8008110:	f001 f844 	bl	800919c <arcprint>
  print("Please focus some window safe for garbled input.\n");
 8008114:	482b      	ldr	r0, [pc, #172]	; (80081c4 <f_usb_keyboard_test+0xb8>)
 8008116:	f001 f841 	bl	800919c <arcprint>
  print("Pressing keys in...\n");
 800811a:	482b      	ldr	r0, [pc, #172]	; (80081c8 <f_usb_keyboard_test+0xbc>)
 800811c:	f001 f83e 	bl	800919c <arcprint>
  int i;
  for (i = 7; i > 0; i--) {
 8008120:	2407      	movs	r4, #7
    print("  %i", i);
 8008122:	4621      	mov	r1, r4
 8008124:	4829      	ldr	r0, [pc, #164]	; (80081cc <f_usb_keyboard_test+0xc0>)
 8008126:	f001 f839 	bl	800919c <arcprint>
    SYS_hardsleep_ms(1000);
 800812a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800812e:	f7f8 fa97 	bl	8000660 <SYS_hardsleep_ms>
static int f_usb_keyboard_test(void) {
  print("This will generate a lot of keypresses.\n");
  print("Please focus some window safe for garbled input.\n");
  print("Pressing keys in...\n");
  int i;
  for (i = 7; i > 0; i--) {
 8008132:	3c01      	subs	r4, #1
 8008134:	d1f5      	bne.n	8008122 <f_usb_keyboard_test+0x16>
    print("  %i", i);
    SYS_hardsleep_ms(1000);
  }
  print("\n");
 8008136:	4826      	ldr	r0, [pc, #152]	; (80081d0 <f_usb_keyboard_test+0xc4>)
 8008138:	f001 f830 	bl	800919c <arcprint>
  enum kb_hid_code code = 0;
  for (code = 0; code <= 0xbc; code++) {
    const keymap *km = USB_ARC_get_keymap(code);
 800813c:	b2e0      	uxtb	r0, r4
 800813e:	f004 fc09 	bl	800c954 <USB_ARC_get_keymap>
    if (km != NULL && km->keys != NULL) {
 8008142:	4606      	mov	r6, r0
 8008144:	b358      	cbz	r0, 800819e <f_usb_keyboard_test+0x92>
 8008146:	6843      	ldr	r3, [r0, #4]
 8008148:	b34b      	cbz	r3, 800819e <f_usb_keyboard_test+0x92>

      char hex_num[3];
      sprint(hex_num, "%02x", code);
 800814a:	4922      	ldr	r1, [pc, #136]	; (80081d4 <f_usb_keyboard_test+0xc8>)
 800814c:	4622      	mov	r2, r4
 800814e:	a801      	add	r0, sp, #4
 8008150:	f7f9 f894 	bl	800127c <sprint>
      usb_kb_type_char(hex_num[0]);
 8008154:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8008158:	f7ff ffba 	bl	80080d0 <usb_kb_type_char>
      usb_kb_type_char(hex_num[1]);
 800815c:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8008160:	f7ff ffb6 	bl	80080d0 <usb_kb_type_char>
      usb_kb_type_char(' ');
 8008164:	2020      	movs	r0, #32
 8008166:	f7ff ffb3 	bl	80080d0 <usb_kb_type_char>
      for (i = 0; i < strlen(km->name); i++) {
 800816a:	2500      	movs	r5, #0
 800816c:	6837      	ldr	r7, [r6, #0]
 800816e:	4638      	mov	r0, r7
 8008170:	f7f8 fe74 	bl	8000e5c <strlen>
 8008174:	4285      	cmp	r5, r0
 8008176:	da04      	bge.n	8008182 <f_usb_keyboard_test+0x76>
        usb_kb_type_char(km->name[i]);
 8008178:	5d78      	ldrb	r0, [r7, r5]
 800817a:	f7ff ffa9 	bl	80080d0 <usb_kb_type_char>
      char hex_num[3];
      sprint(hex_num, "%02x", code);
      usb_kb_type_char(hex_num[0]);
      usb_kb_type_char(hex_num[1]);
      usb_kb_type_char(' ');
      for (i = 0; i < strlen(km->name); i++) {
 800817e:	3501      	adds	r5, #1
 8008180:	e7f4      	b.n	800816c <f_usb_keyboard_test+0x60>
        usb_kb_type_char(km->name[i]);
      }
      usb_kb_type_char(' ');
 8008182:	2020      	movs	r0, #32
 8008184:	f7ff ffa4 	bl	80080d0 <usb_kb_type_char>
      usb_kb_type(KB_MOD_NONE, code);
 8008188:	4621      	mov	r1, r4
 800818a:	2000      	movs	r0, #0
 800818c:	f7ff ff85 	bl	800809a <usb_kb_type>
      usb_kb_type_char(' ');
 8008190:	2020      	movs	r0, #32
 8008192:	f7ff ff9d 	bl	80080d0 <usb_kb_type_char>
      usb_kb_type(KB_MOD_NONE, KC_ENTER);
 8008196:	2000      	movs	r0, #0
 8008198:	2128      	movs	r1, #40	; 0x28
 800819a:	f7ff ff7e 	bl	800809a <usb_kb_type>
 800819e:	3401      	adds	r4, #1
    print("  %i", i);
    SYS_hardsleep_ms(1000);
  }
  print("\n");
  enum kb_hid_code code = 0;
  for (code = 0; code <= 0xbc; code++) {
 80081a0:	2cbd      	cmp	r4, #189	; 0xbd
 80081a2:	d1cb      	bne.n	800813c <f_usb_keyboard_test+0x30>
      usb_kb_type_char(' ');
      usb_kb_type(KB_MOD_NONE, KC_ENTER);
    }

  }
  usb_kb_type_char('O');
 80081a4:	204f      	movs	r0, #79	; 0x4f
 80081a6:	f7ff ff93 	bl	80080d0 <usb_kb_type_char>
  usb_kb_type_char('K');
 80081aa:	204b      	movs	r0, #75	; 0x4b
 80081ac:	f7ff ff90 	bl	80080d0 <usb_kb_type_char>
  usb_kb_type(KB_MOD_NONE, KC_ENTER);
 80081b0:	2128      	movs	r1, #40	; 0x28
 80081b2:	2000      	movs	r0, #0
 80081b4:	f7ff ff71 	bl	800809a <usb_kb_type>
  return 0;
}
 80081b8:	2000      	movs	r0, #0
 80081ba:	b003      	add	sp, #12
 80081bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081be:	bf00      	nop
 80081c0:	080115b4 	.word	0x080115b4
 80081c4:	080115dd 	.word	0x080115dd
 80081c8:	0801160f 	.word	0x0801160f
 80081cc:	08011624 	.word	0x08011624
 80081d0:	0801197d 	.word	0x0801197d
 80081d4:	080112ff 	.word	0x080112ff

080081d8 <f_cfg_joy_acc_speed>:
    return -1;
  }
  APP_cfg_set_joystick_delta_ms(ms);
  return 0;
}
static int f_cfg_joy_acc_speed(u16_t speed) {
 80081d8:	b508      	push	{r3, lr}
  if (_argc != 1) {
 80081da:	4b05      	ldr	r3, [pc, #20]	; (80081f0 <f_cfg_joy_acc_speed+0x18>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d103      	bne.n	80081ea <f_cfg_joy_acc_speed+0x12>
    return -1;
  }
  APP_cfg_set_joystick_acc_speed(speed);
 80081e2:	f000 ff45 	bl	8009070 <APP_cfg_set_joystick_acc_speed>
  return 0;
 80081e6:	2000      	movs	r0, #0
 80081e8:	bd08      	pop	{r3, pc}
  APP_cfg_set_joystick_delta_ms(ms);
  return 0;
}
static int f_cfg_joy_acc_speed(u16_t speed) {
  if (_argc != 1) {
    return -1;
 80081ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
  APP_cfg_set_joystick_acc_speed(speed);
  return 0;
}
 80081ee:	bd08      	pop	{r3, pc}
 80081f0:	20000568 	.word	0x20000568

080081f4 <f_cfg_joy_delta>:
  }
  APP_cfg_set_acc_wheel_speed(speed);
  return 0;
}

static int f_cfg_joy_delta(u8_t ms) {
 80081f4:	b508      	push	{r3, lr}
  if (_argc != 1) {
 80081f6:	4b05      	ldr	r3, [pc, #20]	; (800820c <f_cfg_joy_delta+0x18>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d103      	bne.n	8008206 <f_cfg_joy_delta+0x12>
    return -1;
  }
  APP_cfg_set_joystick_delta_ms(ms);
 80081fe:	f000 ff2b 	bl	8009058 <APP_cfg_set_joystick_delta_ms>
  return 0;
 8008202:	2000      	movs	r0, #0
 8008204:	bd08      	pop	{r3, pc}
  return 0;
}

static int f_cfg_joy_delta(u8_t ms) {
  if (_argc != 1) {
    return -1;
 8008206:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
  APP_cfg_set_joystick_delta_ms(ms);
  return 0;
}
 800820a:	bd08      	pop	{r3, pc}
 800820c:	20000568 	.word	0x20000568

08008210 <f_cfg_acc_whe_speed>:
    return -1;
  }
  APP_cfg_set_acc_pos_speed(speed);
  return 0;
}
static int f_cfg_acc_whe_speed(u16_t speed) {
 8008210:	b508      	push	{r3, lr}
  if (_argc != 1) {
 8008212:	4b05      	ldr	r3, [pc, #20]	; (8008228 <f_cfg_acc_whe_speed+0x18>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2b01      	cmp	r3, #1
 8008218:	d103      	bne.n	8008222 <f_cfg_acc_whe_speed+0x12>
    return -1;
  }
  APP_cfg_set_acc_wheel_speed(speed);
 800821a:	f000 ff11 	bl	8009040 <APP_cfg_set_acc_wheel_speed>
  return 0;
 800821e:	2000      	movs	r0, #0
 8008220:	bd08      	pop	{r3, pc}
  APP_cfg_set_acc_pos_speed(speed);
  return 0;
}
static int f_cfg_acc_whe_speed(u16_t speed) {
  if (_argc != 1) {
    return -1;
 8008222:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
  APP_cfg_set_acc_wheel_speed(speed);
  return 0;
}
 8008226:	bd08      	pop	{r3, pc}
 8008228:	20000568 	.word	0x20000568

0800822c <f_cfg_acc_pos_speed>:
    return -1;
  }
  APP_cfg_set_mouse_delta_ms(ms);
  return 0;
}
static int f_cfg_acc_pos_speed(u16_t speed) {
 800822c:	b508      	push	{r3, lr}
  if (_argc != 1) {
 800822e:	4b05      	ldr	r3, [pc, #20]	; (8008244 <f_cfg_acc_pos_speed+0x18>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	2b01      	cmp	r3, #1
 8008234:	d103      	bne.n	800823e <f_cfg_acc_pos_speed+0x12>
    return -1;
  }
  APP_cfg_set_acc_pos_speed(speed);
 8008236:	f000 fef7 	bl	8009028 <APP_cfg_set_acc_pos_speed>
  return 0;
 800823a:	2000      	movs	r0, #0
 800823c:	bd08      	pop	{r3, pc}
  APP_cfg_set_mouse_delta_ms(ms);
  return 0;
}
static int f_cfg_acc_pos_speed(u16_t speed) {
  if (_argc != 1) {
    return -1;
 800823e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
  APP_cfg_set_acc_pos_speed(speed);
  return 0;
}
 8008242:	bd08      	pop	{r3, pc}
 8008244:	20000568 	.word	0x20000568

08008248 <f_cfg_mouse_delta>:
    return -1;
  }
  APP_cfg_set_debounce_cycles(cycles);
  return 0;
}
static int f_cfg_mouse_delta(u8_t ms) {
 8008248:	b508      	push	{r3, lr}
  if (_argc != 1) {
 800824a:	4b05      	ldr	r3, [pc, #20]	; (8008260 <f_cfg_mouse_delta+0x18>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2b01      	cmp	r3, #1
 8008250:	d103      	bne.n	800825a <f_cfg_mouse_delta+0x12>
    return -1;
  }
  APP_cfg_set_mouse_delta_ms(ms);
 8008252:	f000 fedd 	bl	8009010 <APP_cfg_set_mouse_delta_ms>
  return 0;
 8008256:	2000      	movs	r0, #0
 8008258:	bd08      	pop	{r3, pc}
  APP_cfg_set_debounce_cycles(cycles);
  return 0;
}
static int f_cfg_mouse_delta(u8_t ms) {
  if (_argc != 1) {
    return -1;
 800825a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
  APP_cfg_set_mouse_delta_ms(ms);
  return 0;
}
 800825e:	bd08      	pop	{r3, pc}
 8008260:	20000568 	.word	0x20000568

08008264 <f_cfg_pin_debounce>:
#endif

  return 0;
}

static int f_cfg_pin_debounce(u8_t cycles) {
 8008264:	b508      	push	{r3, lr}
  if (_argc != 1) {
 8008266:	4b05      	ldr	r3, [pc, #20]	; (800827c <f_cfg_pin_debounce+0x18>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2b01      	cmp	r3, #1
 800826c:	d103      	bne.n	8008276 <f_cfg_pin_debounce+0x12>
    return -1;
  }
  APP_cfg_set_debounce_cycles(cycles);
 800826e:	f000 fec3 	bl	8008ff8 <APP_cfg_set_debounce_cycles>
  return 0;
 8008272:	2000      	movs	r0, #0
 8008274:	bd08      	pop	{r3, pc}
  return 0;
}

static int f_cfg_pin_debounce(u8_t cycles) {
  if (_argc != 1) {
    return -1;
 8008276:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
  APP_cfg_set_debounce_cycles(cycles);
  return 0;
}
 800827a:	bd08      	pop	{r3, pc}
 800827c:	20000568 	.word	0x20000568

08008280 <f_cfg>:
  print("ex. to move mouse accelerating from 1 to 10 steps left on x axis, use MOUSE_X(ACC-10).\n");
  print("\n");
  return 0;
}

static int f_cfg(void) {
 8008280:	b510      	push	{r4, lr}
  print("pin debounce cycles:                  %i\n", APP_cfg_get_debounce_cycles());
 8008282:	f000 febf 	bl	8009004 <APP_cfg_get_debounce_cycles>
 8008286:	4601      	mov	r1, r0
 8008288:	4816      	ldr	r0, [pc, #88]	; (80082e4 <f_cfg+0x64>)
 800828a:	f000 ff87 	bl	800919c <arcprint>
  print("mouse report delta:                   %i ms\n", APP_cfg_get_mouse_delta_ms());
 800828e:	f000 fec5 	bl	800901c <APP_cfg_get_mouse_delta_ms>
 8008292:	4601      	mov	r1, r0
 8008294:	4814      	ldr	r0, [pc, #80]	; (80082e8 <f_cfg+0x68>)
 8008296:	f000 ff81 	bl	800919c <arcprint>
  print("mouse position accelerator speed:     %i\n", APP_cfg_get_acc_pos_speed());
 800829a:	f000 fecb 	bl	8009034 <APP_cfg_get_acc_pos_speed>
 800829e:	4601      	mov	r1, r0
 80082a0:	4812      	ldr	r0, [pc, #72]	; (80082ec <f_cfg+0x6c>)
 80082a2:	f000 ff7b 	bl	800919c <arcprint>
  print("mouse wheel accelerator speed:        %i\n", APP_cfg_get_acc_wheel_speed());
 80082a6:	f000 fed1 	bl	800904c <APP_cfg_get_acc_wheel_speed>
 80082aa:	4601      	mov	r1, r0
 80082ac:	4810      	ldr	r0, [pc, #64]	; (80082f0 <f_cfg+0x70>)
 80082ae:	f000 ff75 	bl	800919c <arcprint>
  print("joystick report delta:                %i ms\n", APP_cfg_get_joystick_delta_ms());
 80082b2:	f000 fed7 	bl	8009064 <APP_cfg_get_joystick_delta_ms>
 80082b6:	4601      	mov	r1, r0
 80082b8:	480e      	ldr	r0, [pc, #56]	; (80082f4 <f_cfg+0x74>)
 80082ba:	f000 ff6f 	bl	800919c <arcprint>
  print("joystick direction accelerator speed: %i\n", APP_cfg_get_joystick_acc_speed());
 80082be:	f000 fedd 	bl	800907c <APP_cfg_get_joystick_acc_speed>
 80082c2:	4601      	mov	r1, r0
 80082c4:	480c      	ldr	r0, [pc, #48]	; (80082f8 <f_cfg+0x78>)
 80082c6:	f000 ff69 	bl	800919c <arcprint>

#ifndef CONFIG_ANNOYATRON
  int pin;
  for (pin = 0; pin < APP_CONFIG_PINS; pin++) {
 80082ca:	2400      	movs	r4, #0
    def_config *c = APP_cfg_get_pin(pin);
 80082cc:	b2e0      	uxtb	r0, r4
 80082ce:	f000 fe8b 	bl	8008fe8 <APP_cfg_get_pin>
    if (c->pin) def_config_print(c);
 80082d2:	7803      	ldrb	r3, [r0, #0]
 80082d4:	b10b      	cbz	r3, 80082da <f_cfg+0x5a>
 80082d6:	f002 f8a5 	bl	800a424 <def_config_print>
  print("joystick report delta:                %i ms\n", APP_cfg_get_joystick_delta_ms());
  print("joystick direction accelerator speed: %i\n", APP_cfg_get_joystick_acc_speed());

#ifndef CONFIG_ANNOYATRON
  int pin;
  for (pin = 0; pin < APP_CONFIG_PINS; pin++) {
 80082da:	3401      	adds	r4, #1
 80082dc:	2c1a      	cmp	r4, #26
 80082de:	d1f5      	bne.n	80082cc <f_cfg+0x4c>
    if (c->pin) def_config_print(c);
  }
#endif

  return 0;
}
 80082e0:	2000      	movs	r0, #0
 80082e2:	bd10      	pop	{r4, pc}
 80082e4:	08011629 	.word	0x08011629
 80082e8:	08011653 	.word	0x08011653
 80082ec:	08011680 	.word	0x08011680
 80082f0:	080116aa 	.word	0x080116aa
 80082f4:	080116d4 	.word	0x080116d4
 80082f8:	08011701 	.word	0x08011701

080082fc <f_sym>:
  return 0;
}

/////////////////////////////////////////////////////////////////////////////////////////////

static int f_sym(void) {
 80082fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  print("KEYBOARD SYMBOLS:\n  ");
 8008300:	485c      	ldr	r0, [pc, #368]	; (8008474 <f_sym+0x178>)
 8008302:	f000 ff4b 	bl	800919c <arcprint>
  int cx = 0;
  enum kb_hid_code kb;
  for (kb = 0; kb < _KB_HID_CODE_MAX; kb++) {
 8008306:	2400      	movs	r4, #0
    const keymap *kmap = USB_ARC_get_keymap(kb);
    if (kmap->name) {
      print("%s%s", kmap->name, kmap->numerator ? "(<num>)" : "");
 8008308:	4f5b      	ldr	r7, [pc, #364]	; (8008478 <f_sym+0x17c>)
 800830a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80084ac <f_sym+0x1b0>

/////////////////////////////////////////////////////////////////////////////////////////////

static int f_sym(void) {
  print("KEYBOARD SYMBOLS:\n  ");
  int cx = 0;
 800830e:	4626      	mov	r6, r4
  enum kb_hid_code kb;
  for (kb = 0; kb < _KB_HID_CODE_MAX; kb++) {
    const keymap *kmap = USB_ARC_get_keymap(kb);
 8008310:	4620      	mov	r0, r4
 8008312:	f004 fb1f 	bl	800c954 <USB_ARC_get_keymap>
    if (kmap->name) {
 8008316:	6801      	ldr	r1, [r0, #0]
static int f_sym(void) {
  print("KEYBOARD SYMBOLS:\n  ");
  int cx = 0;
  enum kb_hid_code kb;
  for (kb = 0; kb < _KB_HID_CODE_MAX; kb++) {
    const keymap *kmap = USB_ARC_get_keymap(kb);
 8008318:	4605      	mov	r5, r0
    if (kmap->name) {
 800831a:	b319      	cbz	r1, 8008364 <f_sym+0x68>
      print("%s%s", kmap->name, kmap->numerator ? "(<num>)" : "");
 800831c:	7a02      	ldrb	r2, [r0, #8]
 800831e:	4857      	ldr	r0, [pc, #348]	; (800847c <f_sym+0x180>)
 8008320:	2a00      	cmp	r2, #0
 8008322:	bf0c      	ite	eq
 8008324:	463a      	moveq	r2, r7
 8008326:	4642      	movne	r2, r8
 8008328:	f000 ff38 	bl	800919c <arcprint>
      cx += strlen(kmap->name) + (kmap->numerator ? 7 : 0);
 800832c:	6828      	ldr	r0, [r5, #0]
 800832e:	f7f8 fd95 	bl	8000e5c <strlen>
 8008332:	7a2b      	ldrb	r3, [r5, #8]
 8008334:	2b00      	cmp	r3, #0
 8008336:	bf14      	ite	ne
 8008338:	2307      	movne	r3, #7
 800833a:	2300      	moveq	r3, #0
 800833c:	4418      	add	r0, r3
 800833e:	4406      	add	r6, r0
      int delta = 20 - (cx % 20);
 8008340:	2314      	movs	r3, #20
 8008342:	fb96 f5f3 	sdiv	r5, r6, r3
 8008346:	fb03 6515 	mls	r5, r3, r5, r6
 800834a:	1b5d      	subs	r5, r3, r5
      cx += delta;
 800834c:	442e      	add	r6, r5
      while (delta > 0) {
        print(" ");
 800834e:	484c      	ldr	r0, [pc, #304]	; (8008480 <f_sym+0x184>)
 8008350:	f000 ff24 	bl	800919c <arcprint>
    if (kmap->name) {
      print("%s%s", kmap->name, kmap->numerator ? "(<num>)" : "");
      cx += strlen(kmap->name) + (kmap->numerator ? 7 : 0);
      int delta = 20 - (cx % 20);
      cx += delta;
      while (delta > 0) {
 8008354:	3d01      	subs	r5, #1
 8008356:	d1fa      	bne.n	800834e <f_sym+0x52>
        print(" ");
        delta--;
      }
      if (cx > 70) {
 8008358:	2e46      	cmp	r6, #70	; 0x46
 800835a:	dd03      	ble.n	8008364 <f_sym+0x68>
        print("\n  ");
 800835c:	4849      	ldr	r0, [pc, #292]	; (8008484 <f_sym+0x188>)
 800835e:	f000 ff1d 	bl	800919c <arcprint>
        cx = 0;
 8008362:	462e      	mov	r6, r5

static int f_sym(void) {
  print("KEYBOARD SYMBOLS:\n  ");
  int cx = 0;
  enum kb_hid_code kb;
  for (kb = 0; kb < _KB_HID_CODE_MAX; kb++) {
 8008364:	3401      	adds	r4, #1
 8008366:	b2e4      	uxtb	r4, r4
 8008368:	2cc5      	cmp	r4, #197	; 0xc5
 800836a:	d1d1      	bne.n	8008310 <f_sym+0x14>
        print("\n  ");
        cx = 0;
      }
    }
  }
  print("\n\nMOUSE SYMBOLS:\n  ");
 800836c:	4846      	ldr	r0, [pc, #280]	; (8008488 <f_sym+0x18c>)
 800836e:	f000 ff15 	bl	800919c <arcprint>
  cx = 0;
  enum mouse_code m;
  for (m = 0; m < _MOUSE_CODE_MAX; m++) {
 8008372:	2400      	movs	r4, #0
    const keymap *kmap = USB_ARC_get_mousemap(m);
    if (kmap->name) {
      print("%s%s", kmap->name, kmap->numerator ? "(<num>)" : "");
 8008374:	4f40      	ldr	r7, [pc, #256]	; (8008478 <f_sym+0x17c>)
 8008376:	f8df 8134 	ldr.w	r8, [pc, #308]	; 80084ac <f_sym+0x1b0>
        cx = 0;
      }
    }
  }
  print("\n\nMOUSE SYMBOLS:\n  ");
  cx = 0;
 800837a:	4626      	mov	r6, r4
  enum mouse_code m;
  for (m = 0; m < _MOUSE_CODE_MAX; m++) {
    const keymap *kmap = USB_ARC_get_mousemap(m);
 800837c:	4620      	mov	r0, r4
 800837e:	f004 faf1 	bl	800c964 <USB_ARC_get_mousemap>
    if (kmap->name) {
 8008382:	6801      	ldr	r1, [r0, #0]
  }
  print("\n\nMOUSE SYMBOLS:\n  ");
  cx = 0;
  enum mouse_code m;
  for (m = 0; m < _MOUSE_CODE_MAX; m++) {
    const keymap *kmap = USB_ARC_get_mousemap(m);
 8008384:	4605      	mov	r5, r0
    if (kmap->name) {
 8008386:	b319      	cbz	r1, 80083d0 <f_sym+0xd4>
      print("%s%s", kmap->name, kmap->numerator ? "(<num>)" : "");
 8008388:	7a02      	ldrb	r2, [r0, #8]
 800838a:	483c      	ldr	r0, [pc, #240]	; (800847c <f_sym+0x180>)
 800838c:	2a00      	cmp	r2, #0
 800838e:	bf0c      	ite	eq
 8008390:	463a      	moveq	r2, r7
 8008392:	4642      	movne	r2, r8
 8008394:	f000 ff02 	bl	800919c <arcprint>
      cx += strlen(kmap->name) + (kmap->numerator ? 7 : 0);
 8008398:	6828      	ldr	r0, [r5, #0]
 800839a:	f7f8 fd5f 	bl	8000e5c <strlen>
 800839e:	7a2b      	ldrb	r3, [r5, #8]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	bf14      	ite	ne
 80083a4:	2307      	movne	r3, #7
 80083a6:	2300      	moveq	r3, #0
 80083a8:	4418      	add	r0, r3
 80083aa:	4406      	add	r6, r0
      int delta = 20 - (cx % 20);
 80083ac:	2314      	movs	r3, #20
 80083ae:	fb96 f5f3 	sdiv	r5, r6, r3
 80083b2:	fb03 6515 	mls	r5, r3, r5, r6
 80083b6:	1b5d      	subs	r5, r3, r5
      cx += delta;
 80083b8:	442e      	add	r6, r5
      while (delta > 0) {
        print(" ");
 80083ba:	4831      	ldr	r0, [pc, #196]	; (8008480 <f_sym+0x184>)
 80083bc:	f000 feee 	bl	800919c <arcprint>
    if (kmap->name) {
      print("%s%s", kmap->name, kmap->numerator ? "(<num>)" : "");
      cx += strlen(kmap->name) + (kmap->numerator ? 7 : 0);
      int delta = 20 - (cx % 20);
      cx += delta;
      while (delta > 0) {
 80083c0:	3d01      	subs	r5, #1
 80083c2:	d1fa      	bne.n	80083ba <f_sym+0xbe>
        print(" ");
        delta--;
      }
      if (cx > 70) {
 80083c4:	2e46      	cmp	r6, #70	; 0x46
 80083c6:	dd03      	ble.n	80083d0 <f_sym+0xd4>
        print("\n  ");
 80083c8:	482e      	ldr	r0, [pc, #184]	; (8008484 <f_sym+0x188>)
 80083ca:	f000 fee7 	bl	800919c <arcprint>
        cx = 0;
 80083ce:	462e      	mov	r6, r5
    }
  }
  print("\n\nMOUSE SYMBOLS:\n  ");
  cx = 0;
  enum mouse_code m;
  for (m = 0; m < _MOUSE_CODE_MAX; m++) {
 80083d0:	3401      	adds	r4, #1
 80083d2:	b2e4      	uxtb	r4, r4
 80083d4:	2c06      	cmp	r4, #6
 80083d6:	d1d1      	bne.n	800837c <f_sym+0x80>
        print("\n  ");
        cx = 0;
      }
    }
  }
  print("\n\nJOYSTICK SYMBOLS:\n  ");
 80083d8:	482c      	ldr	r0, [pc, #176]	; (800848c <f_sym+0x190>)
 80083da:	f000 fedf 	bl	800919c <arcprint>
  cx = 0;
  enum joystick_code j;
  for (j = 0; j < _JOYSTICK_CODE_MAX; j++) {
 80083de:	2400      	movs	r4, #0
    const keymap *kmap = USB_ARC_get_joystickmap(j);
    if (kmap->name) {
      print("%s%s", kmap->name, kmap->numerator ? "(<num>)" : "");
 80083e0:	4f25      	ldr	r7, [pc, #148]	; (8008478 <f_sym+0x17c>)
 80083e2:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80084ac <f_sym+0x1b0>
        cx = 0;
      }
    }
  }
  print("\n\nJOYSTICK SYMBOLS:\n  ");
  cx = 0;
 80083e6:	4626      	mov	r6, r4
  enum joystick_code j;
  for (j = 0; j < _JOYSTICK_CODE_MAX; j++) {
    const keymap *kmap = USB_ARC_get_joystickmap(j);
 80083e8:	4620      	mov	r0, r4
 80083ea:	f004 fac3 	bl	800c974 <USB_ARC_get_joystickmap>
    if (kmap->name) {
 80083ee:	6801      	ldr	r1, [r0, #0]
  }
  print("\n\nJOYSTICK SYMBOLS:\n  ");
  cx = 0;
  enum joystick_code j;
  for (j = 0; j < _JOYSTICK_CODE_MAX; j++) {
    const keymap *kmap = USB_ARC_get_joystickmap(j);
 80083f0:	4605      	mov	r5, r0
    if (kmap->name) {
 80083f2:	b319      	cbz	r1, 800843c <f_sym+0x140>
      print("%s%s", kmap->name, kmap->numerator ? "(<num>)" : "");
 80083f4:	7a02      	ldrb	r2, [r0, #8]
 80083f6:	4821      	ldr	r0, [pc, #132]	; (800847c <f_sym+0x180>)
 80083f8:	2a00      	cmp	r2, #0
 80083fa:	bf0c      	ite	eq
 80083fc:	463a      	moveq	r2, r7
 80083fe:	4642      	movne	r2, r8
 8008400:	f000 fecc 	bl	800919c <arcprint>
      cx += strlen(kmap->name) + (kmap->numerator ? 7 : 0);
 8008404:	6828      	ldr	r0, [r5, #0]
 8008406:	f7f8 fd29 	bl	8000e5c <strlen>
 800840a:	7a2b      	ldrb	r3, [r5, #8]
 800840c:	2b00      	cmp	r3, #0
 800840e:	bf14      	ite	ne
 8008410:	2307      	movne	r3, #7
 8008412:	2300      	moveq	r3, #0
 8008414:	4418      	add	r0, r3
 8008416:	4406      	add	r6, r0
      int delta = 20 - (cx % 20);
 8008418:	2314      	movs	r3, #20
 800841a:	fb96 f5f3 	sdiv	r5, r6, r3
 800841e:	fb03 6515 	mls	r5, r3, r5, r6
 8008422:	1b5d      	subs	r5, r3, r5
      cx += delta;
 8008424:	442e      	add	r6, r5
      while (delta > 0) {
        print(" ");
 8008426:	4816      	ldr	r0, [pc, #88]	; (8008480 <f_sym+0x184>)
 8008428:	f000 feb8 	bl	800919c <arcprint>
    if (kmap->name) {
      print("%s%s", kmap->name, kmap->numerator ? "(<num>)" : "");
      cx += strlen(kmap->name) + (kmap->numerator ? 7 : 0);
      int delta = 20 - (cx % 20);
      cx += delta;
      while (delta > 0) {
 800842c:	3d01      	subs	r5, #1
 800842e:	d1fa      	bne.n	8008426 <f_sym+0x12a>
        print(" ");
        delta--;
      }
      if (cx > 70) {
 8008430:	2e46      	cmp	r6, #70	; 0x46
 8008432:	dd03      	ble.n	800843c <f_sym+0x140>
        print("\n  ");
 8008434:	4813      	ldr	r0, [pc, #76]	; (8008484 <f_sym+0x188>)
 8008436:	f000 feb1 	bl	800919c <arcprint>
        cx = 0;
 800843a:	462e      	mov	r6, r5
    }
  }
  print("\n\nJOYSTICK SYMBOLS:\n  ");
  cx = 0;
  enum joystick_code j;
  for (j = 0; j < _JOYSTICK_CODE_MAX; j++) {
 800843c:	3401      	adds	r4, #1
 800843e:	b2e4      	uxtb	r4, r4
 8008440:	2c20      	cmp	r4, #32
 8008442:	d1d1      	bne.n	80083e8 <f_sym+0xec>
        cx = 0;
      }
    }
  }

  print("\n\nNUMERATORS:\n<num> is defined as (ACC)[(+)|-][1..127].\n");
 8008444:	4812      	ldr	r0, [pc, #72]	; (8008490 <f_sym+0x194>)
 8008446:	f000 fea9 	bl	800919c <arcprint>
  print("Valid number are -127 to 127, excluding 0.\n");
 800844a:	4812      	ldr	r0, [pc, #72]	; (8008494 <f_sym+0x198>)
 800844c:	f000 fea6 	bl	800919c <arcprint>
  print("ex. to move mouse 10 steps right on x axis, use MOUSE_X(10).\n");
 8008450:	4811      	ldr	r0, [pc, #68]	; (8008498 <f_sym+0x19c>)
 8008452:	f000 fea3 	bl	800919c <arcprint>
  print("ex. to move mouse 10 steps left on x axis, use MOUSE_X(-10).\n");
 8008456:	4811      	ldr	r0, [pc, #68]	; (800849c <f_sym+0x1a0>)
 8008458:	f000 fea0 	bl	800919c <arcprint>
  print("ex. to move mouse accelerating from 1 to 10 steps right on x axis, use MOUSE_X(ACC10).\n");
 800845c:	4810      	ldr	r0, [pc, #64]	; (80084a0 <f_sym+0x1a4>)
 800845e:	f000 fe9d 	bl	800919c <arcprint>
  print("ex. to move mouse accelerating from 1 to 10 steps left on x axis, use MOUSE_X(ACC-10).\n");
 8008462:	4810      	ldr	r0, [pc, #64]	; (80084a4 <f_sym+0x1a8>)
 8008464:	f000 fe9a 	bl	800919c <arcprint>
  print("\n");
 8008468:	480f      	ldr	r0, [pc, #60]	; (80084a8 <f_sym+0x1ac>)
 800846a:	f000 fe97 	bl	800919c <arcprint>
  return 0;
}
 800846e:	2000      	movs	r0, #0
 8008470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008474:	08011733 	.word	0x08011733
 8008478:	08012faf 	.word	0x08012faf
 800847c:	0801192c 	.word	0x0801192c
 8008480:	08011746 	.word	0x08011746
 8008484:	08011744 	.word	0x08011744
 8008488:	08011748 	.word	0x08011748
 800848c:	0801175c 	.word	0x0801175c
 8008490:	08011773 	.word	0x08011773
 8008494:	080117ac 	.word	0x080117ac
 8008498:	080117d8 	.word	0x080117d8
 800849c:	08011816 	.word	0x08011816
 80084a0:	08011854 	.word	0x08011854
 80084a4:	080118ac 	.word	0x080118ac
 80084a8:	0801197d 	.word	0x0801197d
 80084ac:	0801172b 	.word	0x0801172b

080084b0 <usb_rx_cb>:
    TASK_run(t, IO_rx_available(IOSTD), NULL);
  }
}

#ifdef CONFIG_ARCHID_VCD
static void usb_rx_cb(u16_t avail, void *arg) {
 80084b0:	b570      	push	{r4, r5, r6, lr}
  int in_ix = 0;
  while ((avail = IO_rx_available(IOUSB)) > 0) {
    int len = MIN(avail, sizeof(in) - in_ix);
    IO_get_buf(IOUSB, &in[in_ix], len);
 80084b2:	4e14      	ldr	r6, [pc, #80]	; (8008504 <usb_rx_cb+0x54>)
  }
}

#ifdef CONFIG_ARCHID_VCD
static void usb_rx_cb(u16_t avail, void *arg) {
  int in_ix = 0;
 80084b4:	2400      	movs	r4, #0
  while ((avail = IO_rx_available(IOUSB)) > 0) {
 80084b6:	2001      	movs	r0, #1
 80084b8:	f7f8 fba2 	bl	8000c00 <IO_rx_available>
 80084bc:	b280      	uxth	r0, r0
 80084be:	b160      	cbz	r0, 80084da <usb_rx_cb+0x2a>
    int len = MIN(avail, sizeof(in) - in_ix);
 80084c0:	f5c4 7580 	rsb	r5, r4, #256	; 0x100
 80084c4:	42a8      	cmp	r0, r5
 80084c6:	bf38      	it	cc
 80084c8:	4605      	movcc	r5, r0
    IO_get_buf(IOUSB, &in[in_ix], len);
 80084ca:	1931      	adds	r1, r6, r4
 80084cc:	2001      	movs	r0, #1
 80084ce:	b2aa      	uxth	r2, r5
    in_ix += len;
 80084d0:	442c      	add	r4, r5
#ifdef CONFIG_ARCHID_VCD
static void usb_rx_cb(u16_t avail, void *arg) {
  int in_ix = 0;
  while ((avail = IO_rx_available(IOUSB)) > 0) {
    int len = MIN(avail, sizeof(in) - in_ix);
    IO_get_buf(IOUSB, &in[in_ix], len);
 80084d2:	f7f8 fa93 	bl	80009fc <IO_get_buf>
    in_ix += len;
    if (in_ix >= sizeof(in)) break;
 80084d6:	2cff      	cmp	r4, #255	; 0xff
 80084d8:	d9ed      	bls.n	80084b6 <usb_rx_cb+0x6>
  }
  int i;
  for (i = 0; i < in_ix; i++) {
    if (in[i] == '\r' || in[i] == '\n') {
 80084da:	4e0a      	ldr	r6, [pc, #40]	; (8008504 <usb_rx_cb+0x54>)
    IO_get_buf(IOUSB, &in[in_ix], len);
    in_ix += len;
    if (in_ix >= sizeof(in)) break;
  }
  int i;
  for (i = 0; i < in_ix; i++) {
 80084dc:	2500      	movs	r5, #0
 80084de:	42a5      	cmp	r5, r4
 80084e0:	da0e      	bge.n	8008500 <usb_rx_cb+0x50>
    if (in[i] == '\r' || in[i] == '\n') {
 80084e2:	5dab      	ldrb	r3, [r5, r6]
 80084e4:	2b0d      	cmp	r3, #13
 80084e6:	d001      	beq.n	80084ec <usb_rx_cb+0x3c>
 80084e8:	2b0a      	cmp	r3, #10
 80084ea:	d107      	bne.n	80084fc <usb_rx_cb+0x4c>
      task *t = TASK_create(CLI_TASK_on_usb_input, 0);
 80084ec:	2100      	movs	r1, #0
 80084ee:	4806      	ldr	r0, [pc, #24]	; (8008508 <usb_rx_cb+0x58>)
 80084f0:	f7f9 fbd8 	bl	8001ca4 <TASK_create>
      TASK_run(t, i, NULL);
 80084f4:	4629      	mov	r1, r5
 80084f6:	2200      	movs	r2, #0
 80084f8:	f7f9 fc30 	bl	8001d5c <TASK_run>
    IO_get_buf(IOUSB, &in[in_ix], len);
    in_ix += len;
    if (in_ix >= sizeof(in)) break;
  }
  int i;
  for (i = 0; i < in_ix; i++) {
 80084fc:	3501      	adds	r5, #1
 80084fe:	e7ee      	b.n	80084de <usb_rx_cb+0x2e>
    if (in[i] == '\r' || in[i] == '\n') {
      task *t = TASK_create(CLI_TASK_on_usb_input, 0);
      TASK_run(t, i, NULL);
    }
  }
}
 8008500:	bd70      	pop	{r4, r5, r6, pc}
 8008502:	bf00      	nop
 8008504:	200005ac 	.word	0x200005ac
 8008508:	08008935 	.word	0x08008935

0800850c <f_help>:
      UART_CFG_DATABITS_8, UART_CFG_STOPBITS_1, UART_CFG_PARITY_NONE, UART_CFG_FLOWCONTROL_NONE, TRUE);

  return 0;
}

static int f_help(char *s) {
 800850c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (IS_STRING(s)) {
 8008510:	4b31      	ldr	r3, [pc, #196]	; (80085d8 <f_help+0xcc>)
      UART_CFG_DATABITS_8, UART_CFG_STOPBITS_1, UART_CFG_PARITY_NONE, UART_CFG_FLOWCONTROL_NONE, TRUE);

  return 0;
}

static int f_help(char *s) {
 8008512:	b096      	sub	sp, #88	; 0x58
  if (IS_STRING(s)) {
 8008514:	4298      	cmp	r0, r3
      UART_CFG_DATABITS_8, UART_CFG_STOPBITS_1, UART_CFG_PARITY_NONE, UART_CFG_FLOWCONTROL_NONE, TRUE);

  return 0;
}

static int f_help(char *s) {
 8008516:	4604      	mov	r4, r0
 8008518:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80085dc <f_help+0xd0>
  if (IS_STRING(s)) {
 800851c:	d31c      	bcc.n	8008558 <f_help+0x4c>
 800851e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008522:	4298      	cmp	r0, r3
 8008524:	d218      	bcs.n	8008558 <f_help+0x4c>
 8008526:	2600      	movs	r6, #0
 8008528:	0137      	lsls	r7, r6, #4
    int i = 0;
    while (c_tbl[i].name != NULL ) {
 800852a:	f857 5008 	ldr.w	r5, [r7, r8]
 800852e:	b175      	cbz	r5, 800854e <f_help+0x42>
      if (strcmp(s, c_tbl[i].name) == 0) {
 8008530:	4620      	mov	r0, r4
 8008532:	4629      	mov	r1, r5
 8008534:	f7f8 fecb 	bl	80012ce <strcmp>
 8008538:	b938      	cbnz	r0, 800854a <f_help+0x3e>
        print("%s\t%s", c_tbl[i].name, c_tbl[i].help);
 800853a:	4b28      	ldr	r3, [pc, #160]	; (80085dc <f_help+0xd0>)
 800853c:	4828      	ldr	r0, [pc, #160]	; (80085e0 <f_help+0xd4>)
 800853e:	441f      	add	r7, r3
 8008540:	4629      	mov	r1, r5
 8008542:	68fa      	ldr	r2, [r7, #12]
 8008544:	f000 fe2a 	bl	800919c <arcprint>
        return 0;
 8008548:	e041      	b.n	80085ce <f_help+0xc2>
      }
      i++;
 800854a:	3601      	adds	r6, #1
 800854c:	e7ec      	b.n	8008528 <f_help+0x1c>
    }
    print("%s\tno such command\n", s);
 800854e:	4825      	ldr	r0, [pc, #148]	; (80085e4 <f_help+0xd8>)
 8008550:	4621      	mov	r1, r4
 8008552:	f000 fe23 	bl	800919c <arcprint>

  return 0;
}

static int f_help(char *s) {
  if (IS_STRING(s)) {
 8008556:	e03a      	b.n	80085ce <f_help+0xc2>
      }
      i++;
    }
    print("%s\tno such command\n", s);
  } else {
    print ("  ");
 8008558:	4823      	ldr	r0, [pc, #140]	; (80085e8 <f_help+0xdc>)
 800855a:	f000 fe1f 	bl	800919c <arcprint>
  print("\ntype '?' or 'help' for list of commands\n\n");
  print(CLI_PROMPT);
}

static void cli_print_app_name(void) {
  print (APP_NAME);
 800855e:	4823      	ldr	r0, [pc, #140]	; (80085ec <f_help+0xe0>)
 8008560:	f000 fe1c 	bl	800919c <arcprint>
    }
    print("%s\tno such command\n", s);
  } else {
    print ("  ");
    cli_print_app_name();
    print("\n");
 8008564:	4822      	ldr	r0, [pc, #136]	; (80085f0 <f_help+0xe4>)
 8008566:	f000 fe19 	bl	800919c <arcprint>
 800856a:	4c1c      	ldr	r4, [pc, #112]	; (80085dc <f_help+0xd0>)
    int i = 0;
    while (c_tbl[i].name != NULL ) {
      if ((c_tbl[i].dbg && __dbg_level < 1) || (!c_tbl[i].dbg)) {
 800856c:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80085f8 <f_help+0xec>
  } else {
    print ("  ");
    cli_print_app_name();
    print("\n");
    int i = 0;
    while (c_tbl[i].name != NULL ) {
 8008570:	6825      	ldr	r5, [r4, #0]
 8008572:	b365      	cbz	r5, 80085ce <f_help+0xc2>
      if ((c_tbl[i].dbg && __dbg_level < 1) || (!c_tbl[i].dbg)) {
 8008574:	7a23      	ldrb	r3, [r4, #8]
 8008576:	b113      	cbz	r3, 800857e <f_help+0x72>
 8008578:	f8d8 3000 	ldr.w	r3, [r8]
 800857c:	bb2b      	cbnz	r3, 80085ca <f_help+0xbe>
        int len = strpbrk(c_tbl[i].help, "\n") - c_tbl[i].help;
 800857e:	68e6      	ldr	r6, [r4, #12]
 8008580:	210a      	movs	r1, #10
 8008582:	4630      	mov	r0, r6
 8008584:	f7f8 feef 	bl	8001366 <strchr>
 8008588:	1b80      	subs	r0, r0, r6
        char tmp[64];
        strncpy(tmp, c_tbl[i].help, len + 1);
 800858a:	1c47      	adds	r7, r0, #1
 800858c:	4631      	mov	r1, r6
 800858e:	463a      	mov	r2, r7
 8008590:	a806      	add	r0, sp, #24
 8008592:	f7f8 fecb 	bl	800132c <strncpy>
        tmp[len + 1] = 0;
 8008596:	ab16      	add	r3, sp, #88	; 0x58
 8008598:	441f      	add	r7, r3
 800859a:	2600      	movs	r6, #0
        char fill[24];
        int fill_len = sizeof(fill) - strlen(c_tbl[i].name);
 800859c:	4628      	mov	r0, r5
    while (c_tbl[i].name != NULL ) {
      if ((c_tbl[i].dbg && __dbg_level < 1) || (!c_tbl[i].dbg)) {
        int len = strpbrk(c_tbl[i].help, "\n") - c_tbl[i].help;
        char tmp[64];
        strncpy(tmp, c_tbl[i].help, len + 1);
        tmp[len + 1] = 0;
 800859e:	f807 6c40 	strb.w	r6, [r7, #-64]
        char fill[24];
        int fill_len = sizeof(fill) - strlen(c_tbl[i].name);
 80085a2:	f7f8 fc5b 	bl	8000e5c <strlen>
        memset(fill, ' ', sizeof(fill));
 80085a6:	2120      	movs	r1, #32
        int len = strpbrk(c_tbl[i].help, "\n") - c_tbl[i].help;
        char tmp[64];
        strncpy(tmp, c_tbl[i].help, len + 1);
        tmp[len + 1] = 0;
        char fill[24];
        int fill_len = sizeof(fill) - strlen(c_tbl[i].name);
 80085a8:	4607      	mov	r7, r0
        memset(fill, ' ', sizeof(fill));
 80085aa:	2218      	movs	r2, #24
 80085ac:	4668      	mov	r0, sp
 80085ae:	f005 feef 	bl	800e390 <memset>
        fill[fill_len] = 0;
 80085b2:	ab16      	add	r3, sp, #88	; 0x58
        int len = strpbrk(c_tbl[i].help, "\n") - c_tbl[i].help;
        char tmp[64];
        strncpy(tmp, c_tbl[i].help, len + 1);
        tmp[len + 1] = 0;
        char fill[24];
        int fill_len = sizeof(fill) - strlen(c_tbl[i].name);
 80085b4:	f1c7 0018 	rsb	r0, r7, #24
        memset(fill, ' ', sizeof(fill));
        fill[fill_len] = 0;
 80085b8:	4418      	add	r0, r3
 80085ba:	f800 6c58 	strb.w	r6, [r0, #-88]
        print("  %s%s%s", c_tbl[i].name, fill, tmp);
 80085be:	4629      	mov	r1, r5
 80085c0:	480c      	ldr	r0, [pc, #48]	; (80085f4 <f_help+0xe8>)
 80085c2:	466a      	mov	r2, sp
 80085c4:	ab06      	add	r3, sp, #24
 80085c6:	f000 fde9 	bl	800919c <arcprint>
 80085ca:	3410      	adds	r4, #16
 80085cc:	e7d0      	b.n	8008570 <f_help+0x64>
      }
      i++;
    }
  }
  return 0;
}
 80085ce:	2000      	movs	r0, #0
 80085d0:	b016      	add	sp, #88	; 0x58
 80085d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085d6:	bf00      	nop
 80085d8:	200005ac 	.word	0x200005ac
 80085dc:	0800eb1c 	.word	0x0800eb1c
 80085e0:	08011904 	.word	0x08011904
 80085e4:	0801190a 	.word	0x0801190a
 80085e8:	08011745 	.word	0x08011745
 80085ec:	0801191e 	.word	0x0801191e
 80085f0:	0801197d 	.word	0x0801197d
 80085f4:	08011928 	.word	0x08011928
 80085f8:	20004f84 	.word	0x20004f84

080085fc <f_time>:
static int f_reset() {
  SYS_reboot(REBOOT_USER);
  return 0;
}

static int f_time(int ad, int ah, int am, int as, int ams) {
 80085fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (_argc == 0) {
 80085fe:	4c18      	ldr	r4, [pc, #96]	; (8008660 <f_time+0x64>)
 8008600:	6824      	ldr	r4, [r4, #0]
 8008602:	b9dc      	cbnz	r4, 800863c <f_time+0x40>
    u16_t d, ms;
    u8_t h, m, s;
    SYS_get_time(&d, &h, &m, &s, &ms);
 8008604:	f10d 030e 	add.w	r3, sp, #14
 8008608:	9300      	str	r3, [sp, #0]
 800860a:	a803      	add	r0, sp, #12
 800860c:	f10d 0109 	add.w	r1, sp, #9
 8008610:	f10d 020a 	add.w	r2, sp, #10
 8008614:	f10d 030b 	add.w	r3, sp, #11
 8008618:	f7f7 ffde 	bl	80005d8 <SYS_get_time>
    print("day:%i time:%02i:%02i:%02i.%03i\n", d, h, m, s, ms);
 800861c:	f89d 000b 	ldrb.w	r0, [sp, #11]
 8008620:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8008624:	9000      	str	r0, [sp, #0]
 8008626:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800862a:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800862e:	9001      	str	r0, [sp, #4]
 8008630:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8008634:	480b      	ldr	r0, [pc, #44]	; (8008664 <f_time+0x68>)
 8008636:	f000 fdb1 	bl	800919c <arcprint>
 800863a:	e00a      	b.n	8008652 <f_time+0x56>
  } else if (_argc == 5) {
 800863c:	2c05      	cmp	r4, #5
 800863e:	d10a      	bne.n	8008656 <f_time+0x5a>
    SYS_set_time(ad, ah, am, as, ams);
 8008640:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8008644:	b280      	uxth	r0, r0
 8008646:	9400      	str	r4, [sp, #0]
 8008648:	b2c9      	uxtb	r1, r1
 800864a:	b2d2      	uxtb	r2, r2
 800864c:	b2db      	uxtb	r3, r3
 800864e:	f7f7 ffdd 	bl	800060c <SYS_set_time>
  } else {
    return -1;
  }
  return 0;
 8008652:	2000      	movs	r0, #0
 8008654:	e001      	b.n	800865a <f_time+0x5e>
    SYS_get_time(&d, &h, &m, &s, &ms);
    print("day:%i time:%02i:%02i:%02i.%03i\n", d, h, m, s, ms);
  } else if (_argc == 5) {
    SYS_set_time(ad, ah, am, as, ams);
  } else {
    return -1;
 8008656:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
  return 0;
}
 800865a:	b004      	add	sp, #16
 800865c:	bd10      	pop	{r4, pc}
 800865e:	bf00      	nop
 8008660:	20000568 	.word	0x20000568
 8008664:	08011931 	.word	0x08011931

08008668 <f_usb_enable>:
  }
  APP_cfg_set_joystick_acc_speed(speed);
  return 0;
}

static int f_usb_enable(int ena) {
 8008668:	b538      	push	{r3, r4, r5, lr}
  if (_argc != 1) {
 800866a:	4b0d      	ldr	r3, [pc, #52]	; (80086a0 <f_usb_enable+0x38>)
  }
  APP_cfg_set_joystick_acc_speed(speed);
  return 0;
}

static int f_usb_enable(int ena) {
 800866c:	4604      	mov	r4, r0
  if (_argc != 1) {
 800866e:	681d      	ldr	r5, [r3, #0]
 8008670:	2d01      	cmp	r5, #1
 8008672:	d111      	bne.n	8008698 <f_usb_enable+0x30>
    return -1;
  }
  if (ena) {
 8008674:	b148      	cbz	r0, 800868a <f_usb_enable+0x22>
    print("Enable usb\n");
 8008676:	480b      	ldr	r0, [pc, #44]	; (80086a4 <f_usb_enable+0x3c>)
 8008678:	f000 fd90 	bl	800919c <arcprint>
    USB_Cable_Config(ENABLE);
 800867c:	4628      	mov	r0, r5
 800867e:	f002 ff53 	bl	800b528 <USB_Cable_Config>
    USB_ARC_init();
 8008682:	f003 f829 	bl	800b6d8 <USB_ARC_init>
 8008686:	2000      	movs	r0, #0
 8008688:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    print("Disable usb\n");
 800868a:	4807      	ldr	r0, [pc, #28]	; (80086a8 <f_usb_enable+0x40>)
 800868c:	f000 fd86 	bl	800919c <arcprint>
    USB_Cable_Config(DISABLE);
 8008690:	4620      	mov	r0, r4
 8008692:	f002 ff49 	bl	800b528 <USB_Cable_Config>
 8008696:	e7f6      	b.n	8008686 <f_usb_enable+0x1e>
  return 0;
}

static int f_usb_enable(int ena) {
  if (_argc != 1) {
    return -1;
 8008698:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  } else {
    print("Disable usb\n");
    USB_Cable_Config(DISABLE);
  }
  return 0;
}
 800869c:	bd38      	pop	{r3, r4, r5, pc}
 800869e:	bf00      	nop
 80086a0:	20000568 	.word	0x20000568
 80086a4:	08011952 	.word	0x08011952
 80086a8:	0801195e 	.word	0x0801195e

080086ac <CLI_uart_check_char>:

void CLI_timer() {
}

void CLI_uart_check_char(void *a, u8_t c) {
  if (c == '\n' || c == '\r') {
 80086ac:	290a      	cmp	r1, #10
#endif

void CLI_timer() {
}

void CLI_uart_check_char(void *a, u8_t c) {
 80086ae:	b510      	push	{r4, lr}
  if (c == '\n' || c == '\r') {
 80086b0:	d001      	beq.n	80086b6 <CLI_uart_check_char+0xa>
 80086b2:	290d      	cmp	r1, #13
 80086b4:	d10e      	bne.n	80086d4 <CLI_uart_check_char+0x28>
    task *t = TASK_create(CLI_TASK_on_uart_input, 0);
 80086b6:	2100      	movs	r1, #0
 80086b8:	4807      	ldr	r0, [pc, #28]	; (80086d8 <CLI_uart_check_char+0x2c>)
 80086ba:	f7f9 faf3 	bl	8001ca4 <TASK_create>
 80086be:	4604      	mov	r4, r0
    TASK_run(t, IO_rx_available(IOSTD), NULL);
 80086c0:	2000      	movs	r0, #0
 80086c2:	f7f8 fa9d 	bl	8000c00 <IO_rx_available>
 80086c6:	2200      	movs	r2, #0
 80086c8:	4601      	mov	r1, r0
 80086ca:	4620      	mov	r0, r4
  }
}
 80086cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void CLI_uart_check_char(void *a, u8_t c) {
  if (c == '\n' || c == '\r') {
    task *t = TASK_create(CLI_TASK_on_uart_input, 0);
    TASK_run(t, IO_rx_available(IOSTD), NULL);
 80086d0:	f7f9 bb44 	b.w	8001d5c <TASK_run>
 80086d4:	bd10      	pop	{r4, pc}
 80086d6:	bf00      	nop
 80086d8:	080088b5 	.word	0x080088b5

080086dc <f_build>:
static int f_assert() {
  ASSERT(FALSE);
  return 0;
}

static int f_build(void) {
 80086dc:	b510      	push	{r4, lr}
  print("\ntype '?' or 'help' for list of commands\n\n");
  print(CLI_PROMPT);
}

static void cli_print_app_name(void) {
  print (APP_NAME);
 80086de:	4817      	ldr	r0, [pc, #92]	; (800873c <f_build+0x60>)
 80086e0:	f000 fd5c 	bl	800919c <arcprint>
  return 0;
}

static int f_build(void) {
  cli_print_app_name();
  print("\ndate:%i build:%i\n\n", SYS_build_date(), SYS_build_number());
 80086e4:	f7f7 fff4 	bl	80006d0 <SYS_build_date>
 80086e8:	4604      	mov	r4, r0
 80086ea:	f7f7 ffed 	bl	80006c8 <SYS_build_number>
 80086ee:	4621      	mov	r1, r4
 80086f0:	4602      	mov	r2, r0
 80086f2:	4813      	ldr	r0, [pc, #76]	; (8008740 <f_build+0x64>)
 80086f4:	f000 fd52 	bl	800919c <arcprint>

  print("SYS_MAIN_TIMER_FREQ %i\n", SYS_MAIN_TIMER_FREQ);
 80086f8:	4812      	ldr	r0, [pc, #72]	; (8008744 <f_build+0x68>)
 80086fa:	f242 7110 	movw	r1, #10000	; 0x2710
 80086fe:	f000 fd4d 	bl	800919c <arcprint>
  print("SYS_TIMER_TICK_FREQ %i\n", SYS_TIMER_TICK_FREQ);
 8008702:	4811      	ldr	r0, [pc, #68]	; (8008748 <f_build+0x6c>)
 8008704:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008708:	f000 fd48 	bl	800919c <arcprint>
  print("UART2_SPEED %i\n", UART2_SPEED);
 800870c:	480f      	ldr	r0, [pc, #60]	; (800874c <f_build+0x70>)
 800870e:	f44f 21e1 	mov.w	r1, #460800	; 0x70800
 8008712:	f000 fd43 	bl	800919c <arcprint>
  print("CONFIG_TASK_POOL %i\n", CONFIG_TASK_POOL);
 8008716:	480e      	ldr	r0, [pc, #56]	; (8008750 <f_build+0x74>)
 8008718:	2120      	movs	r1, #32
 800871a:	f000 fd3f 	bl	800919c <arcprint>
  print("APP_CONFIG_PINS %i\n", APP_CONFIG_PINS);
 800871e:	480d      	ldr	r0, [pc, #52]	; (8008754 <f_build+0x78>)
 8008720:	211a      	movs	r1, #26
 8008722:	f000 fd3b 	bl	800919c <arcprint>
  print("APP_CONFIG_DEFS_PER_PIN %i\n", APP_CONFIG_DEFS_PER_PIN);
 8008726:	480c      	ldr	r0, [pc, #48]	; (8008758 <f_build+0x7c>)
 8008728:	2108      	movs	r1, #8
 800872a:	f000 fd37 	bl	800919c <arcprint>
  print("USB_KB_REPORT_KEYMAP_SIZE %i\n", USB_KB_REPORT_KEYMAP_SIZE);
 800872e:	480b      	ldr	r0, [pc, #44]	; (800875c <f_build+0x80>)
 8008730:	2120      	movs	r1, #32
 8008732:	f000 fd33 	bl	800919c <arcprint>

  return 0;
}
 8008736:	2000      	movs	r0, #0
 8008738:	bd10      	pop	{r4, pc}
 800873a:	bf00      	nop
 800873c:	0801191e 	.word	0x0801191e
 8008740:	0801196b 	.word	0x0801196b
 8008744:	0801197f 	.word	0x0801197f
 8008748:	08011997 	.word	0x08011997
 800874c:	080119af 	.word	0x080119af
 8008750:	080119bf 	.word	0x080119bf
 8008754:	080119d4 	.word	0x080119d4
 8008758:	080119e8 	.word	0x080119e8
 800875c:	08011a04 	.word	0x08011a04

08008760 <CLI_parse>:
#endif // CONFIG_ANNOYATRON


/////////////////////////////////////////////////////////////////////////////////////////////

void CLI_parse(u32_t len, u8_t *buf) {
 8008760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008764:	4606      	mov	r6, r0
 8008766:	b08b      	sub	sp, #44	; 0x2c
#ifndef CONFIG_ANNOYATRON
  if (strcmpbegin("def", (char*)buf)==0) {
 8008768:	4846      	ldr	r0, [pc, #280]	; (8008884 <CLI_parse+0x124>)
#endif // CONFIG_ANNOYATRON


/////////////////////////////////////////////////////////////////////////////////////////////

void CLI_parse(u32_t len, u8_t *buf) {
 800876a:	460d      	mov	r5, r1
#ifndef CONFIG_ANNOYATRON
  if (strcmpbegin("def", (char*)buf)==0) {
 800876c:	f7f8 fdbe 	bl	80012ec <strcmpbegin>
 8008770:	b9f0      	cbnz	r0, 80087b0 <CLI_parse+0x50>
    if (buf[len-1] == '\r' || buf[len-1] == '\n') {
 8008772:	1e74      	subs	r4, r6, #1
 8008774:	5d2b      	ldrb	r3, [r5, r4]
 8008776:	2b0d      	cmp	r3, #13
 8008778:	d002      	beq.n	8008780 <CLI_parse+0x20>
 800877a:	2b0a      	cmp	r3, #10
 800877c:	bf18      	it	ne
 800877e:	4634      	movne	r4, r6
      len--;
    }
    memset(&buf[len], 0, sizeof(in)-len);
 8008780:	2100      	movs	r1, #0
 8008782:	f5c4 7280 	rsb	r2, r4, #256	; 0x100
 8008786:	1928      	adds	r0, r5, r4
 8008788:	f005 fe02 	bl	800e390 <memset>
    def_config pindef;
    bool ok = def_config_parse(&pindef, (char*)&buf[4], len-4);
 800878c:	1f22      	subs	r2, r4, #4
 800878e:	a805      	add	r0, sp, #20
 8008790:	1d29      	adds	r1, r5, #4
 8008792:	b292      	uxth	r2, r2
 8008794:	f001 fa2a 	bl	8009bec <def_config_parse>
    if (ok) {
 8008798:	2800      	cmp	r0, #0
 800879a:	d06d      	beq.n	8008878 <CLI_parse+0x118>
      def_config_print(&pindef);
 800879c:	a805      	add	r0, sp, #20
 800879e:	f001 fe41 	bl	800a424 <def_config_print>
      print("OK\n");
 80087a2:	4839      	ldr	r0, [pc, #228]	; (8008888 <CLI_parse+0x128>)
 80087a4:	f000 fcfa 	bl	800919c <arcprint>
      APP_cfg_set_pin(&pindef);
 80087a8:	a805      	add	r0, sp, #20
 80087aa:	f000 fbcd 	bl	8008f48 <APP_cfg_set_pin>
 80087ae:	e063      	b.n	8008878 <CLI_parse+0x118>
#endif // CONFIG_ANNOYATRON

  cursor cursor;
  strarg_init(&cursor, (char*) buf, len);
  strarg arg;
  _argc = 0;
 80087b0:	4c36      	ldr	r4, [pc, #216]	; (800888c <CLI_parse+0x12c>)
    if (_argc == 0) {
      // first argument, look for command function
      if (arg.type != STR) {
        break;
      } else {
        while (c_tbl[ix].name != NULL ) {
 80087b2:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 80088a4 <CLI_parse+0x144>
    return;
  }
#endif // CONFIG_ANNOYATRON

  cursor cursor;
  strarg_init(&cursor, (char*) buf, len);
 80087b6:	4629      	mov	r1, r5
 80087b8:	4632      	mov	r2, r6
  strarg arg;
  _argc = 0;
 80087ba:	2500      	movs	r5, #0
    return;
  }
#endif // CONFIG_ANNOYATRON

  cursor cursor;
  strarg_init(&cursor, (char*) buf, len);
 80087bc:	a802      	add	r0, sp, #8
 80087be:	f7f9 f8a7 	bl	8001910 <strarg_init>
  strarg arg;
  _argc = 0;
  func fn = NULL;
 80087c2:	462e      	mov	r6, r5
#endif // CONFIG_ANNOYATRON

  cursor cursor;
  strarg_init(&cursor, (char*) buf, len);
  strarg arg;
  _argc = 0;
 80087c4:	6025      	str	r5, [r4, #0]
    if (arg.type == INT) {
      //DBG(D_CLI, D_DEBUG, "CONS arg %i:\tlen:%i\tint:%i\n",arg_c, arg.len, arg.val);
    } else if (arg.type == STR) {
      //DBG(D_CLI, D_DEBUG, "CONS arg %i:\tlen:%i\tstr:\"%s\"\n", arg_c, arg.len, arg.str);
    }
    if (_argc == 0) {
 80087c6:	46a2      	mov	sl, r4
      // first argument, look for command function
      if (arg.type != STR) {
        break;
      } else {
        while (c_tbl[ix].name != NULL ) {
 80087c8:	46c3      	mov	fp, r8
  _argc = 0;
  func fn = NULL;
  int ix = 0;

  // parse command and args
  while (strarg_next(&cursor, &arg)) {
 80087ca:	a802      	add	r0, sp, #8
 80087cc:	a905      	add	r1, sp, #20
 80087ce:	f7f9 f891 	bl	80018f4 <strarg_next>
 80087d2:	b138      	cbz	r0, 80087e4 <CLI_parse+0x84>
    if (arg.type == INT) {
      //DBG(D_CLI, D_DEBUG, "CONS arg %i:\tlen:%i\tint:%i\n",arg_c, arg.len, arg.val);
    } else if (arg.type == STR) {
      //DBG(D_CLI, D_DEBUG, "CONS arg %i:\tlen:%i\tstr:\"%s\"\n", arg_c, arg.len, arg.str);
    }
    if (_argc == 0) {
 80087d4:	6827      	ldr	r7, [r4, #0]
 80087d6:	b9cf      	cbnz	r7, 800880c <CLI_parse+0xac>
      // first argument, look for command function
      if (arg.type != STR) {
 80087d8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d101      	bne.n	80087e4 <CLI_parse+0x84>
        break;
      } else {
        while (c_tbl[ix].name != NULL ) {
          if (strcmp(arg.str, c_tbl[ix].name) == 0) {
 80087e0:	9b06      	ldr	r3, [sp, #24]
 80087e2:	e002      	b.n	80087ea <CLI_parse+0x8a>
    }
    _argc++;
  }

  // execute command
  if (fn) {
 80087e4:	bb36      	cbnz	r6, 8008834 <CLI_parse+0xd4>
 80087e6:	e044      	b.n	8008872 <CLI_parse+0x112>
        while (c_tbl[ix].name != NULL ) {
          if (strcmp(arg.str, c_tbl[ix].name) == 0) {
            fn = c_tbl[ix].fn;
            break;
          }
          ix++;
 80087e8:	3501      	adds	r5, #1
 80087ea:	ea4f 1905 	mov.w	r9, r5, lsl #4
    if (_argc == 0) {
      // first argument, look for command function
      if (arg.type != STR) {
        break;
      } else {
        while (c_tbl[ix].name != NULL ) {
 80087ee:	f859 1008 	ldr.w	r1, [r9, r8]
 80087f2:	b149      	cbz	r1, 8008808 <CLI_parse+0xa8>
          if (strcmp(arg.str, c_tbl[ix].name) == 0) {
 80087f4:	4618      	mov	r0, r3
 80087f6:	9301      	str	r3, [sp, #4]
 80087f8:	f7f8 fd69 	bl	80012ce <strcmp>
 80087fc:	9b01      	ldr	r3, [sp, #4]
 80087fe:	2800      	cmp	r0, #0
 8008800:	d1f2      	bne.n	80087e8 <CLI_parse+0x88>
            fn = c_tbl[ix].fn;
 8008802:	eb0b 0309 	add.w	r3, fp, r9
 8008806:	685e      	ldr	r6, [r3, #4]
            break;
          }
          ix++;
        }
        if (fn == NULL ) {
 8008808:	b98e      	cbnz	r6, 800882e <CLI_parse+0xce>
 800880a:	e032      	b.n	8008872 <CLI_parse+0x112>
          break;
        }
      }
    } else {
      // succeeding arguments¸ store them in global vector
      if (_argc - 1 >= 16) {
 800880c:	2f10      	cmp	r7, #16
 800880e:	dd0b      	ble.n	8008828 <CLI_parse+0xc8>
        DBG(D_CLI, D_WARN, "CONS too many args\n");
 8008810:	4b1f      	ldr	r3, [pc, #124]	; (8008890 <CLI_parse+0x130>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	065a      	lsls	r2, r3, #25
 8008816:	d52c      	bpl.n	8008872 <CLI_parse+0x112>
 8008818:	4b1e      	ldr	r3, [pc, #120]	; (8008894 <CLI_parse+0x134>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2b02      	cmp	r3, #2
 800881e:	d828      	bhi.n	8008872 <CLI_parse+0x112>
 8008820:	481d      	ldr	r0, [pc, #116]	; (8008898 <CLI_parse+0x138>)
 8008822:	f000 fcbb 	bl	800919c <arcprint>
 8008826:	e024      	b.n	8008872 <CLI_parse+0x112>
        fn = NULL;
        break;
      }
      _args[_argc - 1] = (void*) arg.val;
 8008828:	9b06      	ldr	r3, [sp, #24]
 800882a:	f84a 3027 	str.w	r3, [sl, r7, lsl #2]
    }
    _argc++;
 800882e:	3701      	adds	r7, #1
 8008830:	6027      	str	r7, [r4, #0]
 8008832:	e7ca      	b.n	80087ca <CLI_parse+0x6a>
  }

  // execute command
  if (fn) {
    _argc--;
    DBG(D_CLI, D_DEBUG, "CONS calling [%p] with %i args\n", fn, _argc);
 8008834:	4b16      	ldr	r3, [pc, #88]	; (8008890 <CLI_parse+0x130>)
    _argc++;
  }

  // execute command
  if (fn) {
    _argc--;
 8008836:	6822      	ldr	r2, [r4, #0]
    DBG(D_CLI, D_DEBUG, "CONS calling [%p] with %i args\n", fn, _argc);
 8008838:	681b      	ldr	r3, [r3, #0]
    _argc++;
  }

  // execute command
  if (fn) {
    _argc--;
 800883a:	3a01      	subs	r2, #1
    DBG(D_CLI, D_DEBUG, "CONS calling [%p] with %i args\n", fn, _argc);
 800883c:	065b      	lsls	r3, r3, #25
    _argc++;
  }

  // execute command
  if (fn) {
    _argc--;
 800883e:	6022      	str	r2, [r4, #0]
    DBG(D_CLI, D_DEBUG, "CONS calling [%p] with %i args\n", fn, _argc);
 8008840:	d506      	bpl.n	8008850 <CLI_parse+0xf0>
 8008842:	4b14      	ldr	r3, [pc, #80]	; (8008894 <CLI_parse+0x134>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	b91b      	cbnz	r3, 8008850 <CLI_parse+0xf0>
 8008848:	4814      	ldr	r0, [pc, #80]	; (800889c <CLI_parse+0x13c>)
 800884a:	4631      	mov	r1, r6
 800884c:	f000 fca6 	bl	800919c <arcprint>
    int res = (int) _variadic_call(fn, _argc, _args);
 8008850:	4630      	mov	r0, r6
 8008852:	6821      	ldr	r1, [r4, #0]
 8008854:	4a12      	ldr	r2, [pc, #72]	; (80088a0 <CLI_parse+0x140>)
 8008856:	f005 fdbd 	bl	800e3d4 <_variadic_call>
    if (res == -1) {
 800885a:	3001      	adds	r0, #1
 800885c:	d107      	bne.n	800886e <CLI_parse+0x10e>
      print("%s", c_tbl[ix].help);
 800885e:	4b11      	ldr	r3, [pc, #68]	; (80088a4 <CLI_parse+0x144>)
 8008860:	4811      	ldr	r0, [pc, #68]	; (80088a8 <CLI_parse+0x148>)
 8008862:	eb03 1505 	add.w	r5, r3, r5, lsl #4
 8008866:	68e9      	ldr	r1, [r5, #12]
 8008868:	f000 fc98 	bl	800919c <arcprint>
 800886c:	e004      	b.n	8008878 <CLI_parse+0x118>
    } else {
      print("OK\n");
 800886e:	4806      	ldr	r0, [pc, #24]	; (8008888 <CLI_parse+0x128>)
 8008870:	e000      	b.n	8008874 <CLI_parse+0x114>
    }
  } else {
    print("unknown command - try help\n");
 8008872:	480e      	ldr	r0, [pc, #56]	; (80088ac <CLI_parse+0x14c>)
 8008874:	f000 fc92 	bl	800919c <arcprint>
  }
  print(CLI_PROMPT);
 8008878:	480d      	ldr	r0, [pc, #52]	; (80088b0 <CLI_parse+0x150>)
 800887a:	f000 fc8f 	bl	800919c <arcprint>
}
 800887e:	b00b      	add	sp, #44	; 0x2c
 8008880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008884:	08011a22 	.word	0x08011a22
 8008888:	08011a26 	.word	0x08011a26
 800888c:	20000568 	.word	0x20000568
 8008890:	20004f80 	.word	0x20004f80
 8008894:	20004f84 	.word	0x20004f84
 8008898:	08011a2d 	.word	0x08011a2d
 800889c:	08011a41 	.word	0x08011a41
 80088a0:	2000056c 	.word	0x2000056c
 80088a4:	0800eb1c 	.word	0x0800eb1c
 80088a8:	08011907 	.word	0x08011907
 80088ac:	08011a61 	.word	0x08011a61
 80088b0:	08011a2a 	.word	0x08011a2a

080088b4 <CLI_TASK_on_uart_input>:

void CLI_TASK_on_uart_input(u32_t len, void *p) {
 80088b4:	b510      	push	{r4, lr}
 80088b6:	4604      	mov	r4, r0
  set_print_output(IOSTD);
 80088b8:	2000      	movs	r0, #0
 80088ba:	f000 fc63 	bl	8009184 <set_print_output>
  if (len > sizeof(in)) {
 80088be:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 80088c2:	d90f      	bls.n	80088e4 <CLI_TASK_on_uart_input+0x30>
    DBG(D_CLI, D_WARN, "CONS input overflow\n");
 80088c4:	4b15      	ldr	r3, [pc, #84]	; (800891c <CLI_TASK_on_uart_input+0x68>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	0658      	lsls	r0, r3, #25
 80088ca:	d506      	bpl.n	80088da <CLI_TASK_on_uart_input+0x26>
 80088cc:	4b14      	ldr	r3, [pc, #80]	; (8008920 <CLI_TASK_on_uart_input+0x6c>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2b02      	cmp	r3, #2
 80088d2:	d802      	bhi.n	80088da <CLI_TASK_on_uart_input+0x26>
 80088d4:	4813      	ldr	r0, [pc, #76]	; (8008924 <CLI_TASK_on_uart_input+0x70>)
 80088d6:	f000 fc61 	bl	800919c <arcprint>
    DBG(D_CLI, D_WARN, "CONS length mismatch\n");
    print(CLI_PROMPT);
    return;
  }
  CLI_parse(rlen, in);
}
 80088da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void CLI_TASK_on_uart_input(u32_t len, void *p) {
  set_print_output(IOSTD);
  if (len > sizeof(in)) {
    DBG(D_CLI, D_WARN, "CONS input overflow\n");
    print(CLI_PROMPT);
 80088de:	4812      	ldr	r0, [pc, #72]	; (8008928 <CLI_TASK_on_uart_input+0x74>)
 80088e0:	f000 bc5c 	b.w	800919c <arcprint>
    return;
  }
  u32_t rlen = IO_get_buf(IOSTD, in, MIN(len, sizeof(in)));
 80088e4:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 80088e8:	bf34      	ite	cc
 80088ea:	4622      	movcc	r2, r4
 80088ec:	f44f 7280 	movcs.w	r2, #256	; 0x100
 80088f0:	2000      	movs	r0, #0
 80088f2:	490e      	ldr	r1, [pc, #56]	; (800892c <CLI_TASK_on_uart_input+0x78>)
 80088f4:	b292      	uxth	r2, r2
 80088f6:	f7f8 f881 	bl	80009fc <IO_get_buf>
  if (rlen != len) {
 80088fa:	42a0      	cmp	r0, r4
 80088fc:	d009      	beq.n	8008912 <CLI_TASK_on_uart_input+0x5e>
    DBG(D_CLI, D_WARN, "CONS length mismatch\n");
 80088fe:	4b07      	ldr	r3, [pc, #28]	; (800891c <CLI_TASK_on_uart_input+0x68>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	0659      	lsls	r1, r3, #25
 8008904:	d5e9      	bpl.n	80088da <CLI_TASK_on_uart_input+0x26>
 8008906:	4b06      	ldr	r3, [pc, #24]	; (8008920 <CLI_TASK_on_uart_input+0x6c>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2b02      	cmp	r3, #2
 800890c:	d8e5      	bhi.n	80088da <CLI_TASK_on_uart_input+0x26>
 800890e:	4808      	ldr	r0, [pc, #32]	; (8008930 <CLI_TASK_on_uart_input+0x7c>)
 8008910:	e7e1      	b.n	80088d6 <CLI_TASK_on_uart_input+0x22>
    print(CLI_PROMPT);
    return;
  }
  CLI_parse(rlen, in);
 8008912:	4906      	ldr	r1, [pc, #24]	; (800892c <CLI_TASK_on_uart_input+0x78>)
}
 8008914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (rlen != len) {
    DBG(D_CLI, D_WARN, "CONS length mismatch\n");
    print(CLI_PROMPT);
    return;
  }
  CLI_parse(rlen, in);
 8008918:	f7ff bf22 	b.w	8008760 <CLI_parse>
 800891c:	20004f80 	.word	0x20004f80
 8008920:	20004f84 	.word	0x20004f84
 8008924:	08011a7d 	.word	0x08011a7d
 8008928:	08011a2a 	.word	0x08011a2a
 800892c:	200005ac 	.word	0x200005ac
 8008930:	08011a92 	.word	0x08011a92

08008934 <CLI_TASK_on_usb_input>:
}

#ifdef CONFIG_ARCHID_VCD
void CLI_TASK_on_usb_input(u32_t len, void *p) {
 8008934:	b510      	push	{r4, lr}
 8008936:	4604      	mov	r4, r0
  set_print_output(IOUSB);
 8008938:	2001      	movs	r0, #1
 800893a:	f000 fc23 	bl	8009184 <set_print_output>
  if (len > sizeof(in)) {
 800893e:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8008942:	d90f      	bls.n	8008964 <CLI_TASK_on_usb_input+0x30>
    DBG(D_CLI, D_WARN, "CONS input overflow\n");
 8008944:	4b0c      	ldr	r3, [pc, #48]	; (8008978 <CLI_TASK_on_usb_input+0x44>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	065c      	lsls	r4, r3, #25
 800894a:	d506      	bpl.n	800895a <CLI_TASK_on_usb_input+0x26>
 800894c:	4b0b      	ldr	r3, [pc, #44]	; (800897c <CLI_TASK_on_usb_input+0x48>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2b02      	cmp	r3, #2
 8008952:	d802      	bhi.n	800895a <CLI_TASK_on_usb_input+0x26>
 8008954:	480a      	ldr	r0, [pc, #40]	; (8008980 <CLI_TASK_on_usb_input+0x4c>)
 8008956:	f000 fc21 	bl	800919c <arcprint>
    print(CLI_PROMPT);
    return;
  }
  CLI_parse(len, in);
  set_print_output(IOSTD);
}
 800895a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#ifdef CONFIG_ARCHID_VCD
void CLI_TASK_on_usb_input(u32_t len, void *p) {
  set_print_output(IOUSB);
  if (len > sizeof(in)) {
    DBG(D_CLI, D_WARN, "CONS input overflow\n");
    print(CLI_PROMPT);
 800895e:	4809      	ldr	r0, [pc, #36]	; (8008984 <CLI_TASK_on_usb_input+0x50>)
 8008960:	f000 bc1c 	b.w	800919c <arcprint>
    return;
  }
  CLI_parse(len, in);
 8008964:	4620      	mov	r0, r4
 8008966:	4908      	ldr	r1, [pc, #32]	; (8008988 <CLI_TASK_on_usb_input+0x54>)
 8008968:	f7ff fefa 	bl	8008760 <CLI_parse>
  set_print_output(IOSTD);
}
 800896c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    DBG(D_CLI, D_WARN, "CONS input overflow\n");
    print(CLI_PROMPT);
    return;
  }
  CLI_parse(len, in);
  set_print_output(IOSTD);
 8008970:	2000      	movs	r0, #0
 8008972:	f000 bc07 	b.w	8009184 <set_print_output>
 8008976:	bf00      	nop
 8008978:	20004f80 	.word	0x20004f80
 800897c:	20004f84 	.word	0x20004f84
 8008980:	08011a7d 	.word	0x08011a7d
 8008984:	08011a2a 	.word	0x08011a2a
 8008988:	200005ac 	.word	0x200005ac

0800898c <CLI_timer>:
}
#endif

void CLI_timer() {
 800898c:	4770      	bx	lr

0800898e <CLI_init>:
}
#endif

DBG_ATTRIBUTE static u32_t __dbg_magic;

void CLI_init() {
 800898e:	b508      	push	{r3, lr}
  if (__dbg_magic != 0x43215678) {
 8008990:	4b1f      	ldr	r3, [pc, #124]	; (8008a10 <CLI_init+0x82>)
 8008992:	4a20      	ldr	r2, [pc, #128]	; (8008a14 <CLI_init+0x86>)
 8008994:	6819      	ldr	r1, [r3, #0]
 8008996:	4291      	cmp	r1, r2
 8008998:	d006      	beq.n	80089a8 <CLI_init+0x1a>
    __dbg_magic = 0x43215678;
    SYS_dbg_level(D_WARN);
 800899a:	2002      	movs	r0, #2

DBG_ATTRIBUTE static u32_t __dbg_magic;

void CLI_init() {
  if (__dbg_magic != 0x43215678) {
    __dbg_magic = 0x43215678;
 800899c:	601a      	str	r2, [r3, #0]
    SYS_dbg_level(D_WARN);
 800899e:	f7f7 fe81 	bl	80006a4 <SYS_dbg_level>
    SYS_dbg_mask_set(0);
 80089a2:	2000      	movs	r0, #0
 80089a4:	f7f7 fe68 	bl	8000678 <SYS_dbg_mask_set>
  }
  memset(&cli_state, 0, sizeof(cli_state));
 80089a8:	4b1b      	ldr	r3, [pc, #108]	; (8008a18 <CLI_init+0x8a>)
 80089aa:	2200      	movs	r2, #0
 80089ac:	601a      	str	r2, [r3, #0]
 80089ae:	605a      	str	r2, [r3, #4]
  DBG(D_CLI, D_DEBUG, "CLI init\n");
 80089b0:	4b1a      	ldr	r3, [pc, #104]	; (8008a1c <CLI_init+0x8e>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	065b      	lsls	r3, r3, #25
 80089b6:	d505      	bpl.n	80089c4 <CLI_init+0x36>
 80089b8:	4b19      	ldr	r3, [pc, #100]	; (8008a20 <CLI_init+0x92>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	b913      	cbnz	r3, 80089c4 <CLI_init+0x36>
 80089be:	4819      	ldr	r0, [pc, #100]	; (8008a24 <CLI_init+0x96>)
 80089c0:	f000 fbec 	bl	800919c <arcprint>
  UART_set_callback(_UART(UARTSTDIN), CLI_uart_check_char, NULL);
 80089c4:	2200      	movs	r2, #0
 80089c6:	4818      	ldr	r0, [pc, #96]	; (8008a28 <CLI_init+0x9a>)
 80089c8:	4918      	ldr	r1, [pc, #96]	; (8008a2c <CLI_init+0x9e>)
 80089ca:	f7fa fbf6 	bl	80031ba <UART_set_callback>
#ifdef CONFIG_ARCHID_VCD
  USB_SER_set_rx_callback(usb_rx_cb, NULL);
 80089ce:	2100      	movs	r1, #0
 80089d0:	4817      	ldr	r0, [pc, #92]	; (8008a30 <CLI_init+0xa2>)
 80089d2:	f002 febf 	bl	800b754 <USB_SER_set_rx_callback>
#endif

  print ("\n");
 80089d6:	4817      	ldr	r0, [pc, #92]	; (8008a34 <CLI_init+0xa6>)
 80089d8:	f000 fbe0 	bl	800919c <arcprint>
  print("\ntype '?' or 'help' for list of commands\n\n");
  print(CLI_PROMPT);
}

static void cli_print_app_name(void) {
  print (APP_NAME);
 80089dc:	4816      	ldr	r0, [pc, #88]	; (8008a38 <CLI_init+0xaa>)
 80089de:	f000 fbdd 	bl	800919c <arcprint>
  USB_SER_set_rx_callback(usb_rx_cb, NULL);
#endif

  print ("\n");
  cli_print_app_name();
  print("\n\n");
 80089e2:	4816      	ldr	r0, [pc, #88]	; (8008a3c <CLI_init+0xae>)
 80089e4:	f000 fbda 	bl	800919c <arcprint>
  print("build     : %i\n", SYS_build_number());
 80089e8:	f7f7 fe6e 	bl	80006c8 <SYS_build_number>
 80089ec:	4601      	mov	r1, r0
 80089ee:	4814      	ldr	r0, [pc, #80]	; (8008a40 <CLI_init+0xb2>)
 80089f0:	f000 fbd4 	bl	800919c <arcprint>
  print("build date: %i\n", SYS_build_date());
 80089f4:	f7f7 fe6c 	bl	80006d0 <SYS_build_date>
 80089f8:	4601      	mov	r1, r0
 80089fa:	4812      	ldr	r0, [pc, #72]	; (8008a44 <CLI_init+0xb6>)
 80089fc:	f000 fbce 	bl	800919c <arcprint>
  print("\ntype '?' or 'help' for list of commands\n\n");
 8008a00:	4811      	ldr	r0, [pc, #68]	; (8008a48 <CLI_init+0xba>)
 8008a02:	f000 fbcb 	bl	800919c <arcprint>
  print(CLI_PROMPT);
}
 8008a06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  cli_print_app_name();
  print("\n\n");
  print("build     : %i\n", SYS_build_number());
  print("build date: %i\n", SYS_build_date());
  print("\ntype '?' or 'help' for list of commands\n\n");
  print(CLI_PROMPT);
 8008a0a:	4810      	ldr	r0, [pc, #64]	; (8008a4c <CLI_init+0xbe>)
 8008a0c:	f000 bbc6 	b.w	800919c <arcprint>
 8008a10:	20004f88 	.word	0x20004f88
 8008a14:	43215678 	.word	0x43215678
 8008a18:	2000114c 	.word	0x2000114c
 8008a1c:	20004f80 	.word	0x20004f80
 8008a20:	20004f84 	.word	0x20004f84
 8008a24:	08011aa8 	.word	0x08011aa8
 8008a28:	20000d34 	.word	0x20000d34
 8008a2c:	080086ad 	.word	0x080086ad
 8008a30:	080084b1 	.word	0x080084b1
 8008a34:	0801197d 	.word	0x0801197d
 8008a38:	0801191e 	.word	0x0801191e
 8008a3c:	0801197c 	.word	0x0801197c
 8008a40:	08011ab2 	.word	0x08011ab2
 8008a44:	08011ac2 	.word	0x08011ac2
 8008a48:	08011ad2 	.word	0x08011ad2
 8008a4c:	08011a2a 	.word	0x08011a2a

08008a50 <TIMER_irq>:
#include "system.h"
#include "taskq.h"
#include "cli.h"
#include "app.h"

void TIMER_irq() {
 8008a50:	b508      	push	{r3, lr}
  if (TIM_GetITStatus(STM32_SYSTEM_TIMER, TIM_IT_Update) != RESET) {
 8008a52:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8008a56:	2101      	movs	r1, #1
 8008a58:	f005 f93c 	bl	800dcd4 <TIM_GetITStatus>
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	d038      	beq.n	8008ad2 <TIMER_irq+0x82>
    TIM_ClearITPendingBit(STM32_SYSTEM_TIMER, TIM_IT_Update);
 8008a60:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8008a64:	2101      	movs	r1, #1
 8008a66:	f005 f940 	bl	800dcea <TIM_ClearITPendingBit>

    bool ms_update = SYS_timer();
 8008a6a:	f7f7 fd5f 	bl	800052c <SYS_timer>
    if (ms_update) {
 8008a6e:	b340      	cbz	r0, 8008ac2 <TIMER_irq+0x72>
      TRACE_MS_TICK(SYS_get_time_ms() & 0xff);
 8008a70:	4b18      	ldr	r3, [pc, #96]	; (8008ad4 <TIMER_irq+0x84>)
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	b32b      	cbz	r3, 8008ac2 <TIMER_irq+0x72>
 8008a76:	4818      	ldr	r0, [pc, #96]	; (8008ad8 <TIMER_irq+0x88>)
 8008a78:	4a18      	ldr	r2, [pc, #96]	; (8008adc <TIMER_irq+0x8c>)
 8008a7a:	6803      	ldr	r3, [r0, #0]
 8008a7c:	3b01      	subs	r3, #1
 8008a7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a82:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8008a86:	0a0b      	lsrs	r3, r1, #8
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	d00c      	beq.n	8008aa8 <TIMER_irq+0x58>
 8008a8e:	6801      	ldr	r1, [r0, #0]
 8008a90:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008a94:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	2a3e      	cmp	r2, #62	; 0x3e
 8008a9c:	bf96      	itet	ls
 8008a9e:	681a      	ldrls	r2, [r3, #0]
 8008aa0:	2200      	movhi	r2, #0
 8008aa2:	3201      	addls	r2, #1
 8008aa4:	601a      	str	r2, [r3, #0]
 8008aa6:	e00c      	b.n	8008ac2 <TIMER_irq+0x72>
 8008aa8:	b2cb      	uxtb	r3, r1
 8008aaa:	2bff      	cmp	r3, #255	; 0xff
 8008aac:	d009      	beq.n	8008ac2 <TIMER_irq+0x72>
 8008aae:	6803      	ldr	r3, [r0, #0]
 8008ab0:	3101      	adds	r1, #1
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	b2c9      	uxtb	r1, r1
 8008ab6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008aba:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008abe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    }
    TASK_timer();
 8008ac2:	f7f9 fcff 	bl	80024c4 <TASK_timer>
    APP_timer();
 8008ac6:	f000 fadf 	bl	8009088 <APP_timer>
    CLI_timer();
  }
}
 8008aca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (ms_update) {
      TRACE_MS_TICK(SYS_get_time_ms() & 0xff);
    }
    TASK_timer();
    APP_timer();
    CLI_timer();
 8008ace:	f7ff bf5d 	b.w	800898c <CLI_timer>
 8008ad2:	bd08      	pop	{r3, pc}
 8008ad4:	20000000 	.word	0x20000000
 8008ad8:	200001c0 	.word	0x200001c0
 8008adc:	20000c74 	.word	0x20000c74

08008ae0 <app_joystick_usb_cts_irq>:
  task *t = TASK_create(app_mouse_usb_cts_msg, 0);
  ASSERT(t);
  TASK_run(t, 0, NULL);
}

static void app_joystick_usb_cts_irq(usb_joystick j_ix) {
 8008ae0:	b538      	push	{r3, r4, r5, lr}
  task *t = TASK_create(app_joystick_usb_cts_msg, 0);
 8008ae2:	2100      	movs	r1, #0
  task *t = TASK_create(app_mouse_usb_cts_msg, 0);
  ASSERT(t);
  TASK_run(t, 0, NULL);
}

static void app_joystick_usb_cts_irq(usb_joystick j_ix) {
 8008ae4:	4605      	mov	r5, r0
  task *t = TASK_create(app_joystick_usb_cts_msg, 0);
 8008ae6:	4808      	ldr	r0, [pc, #32]	; (8008b08 <app_joystick_usb_cts_irq+0x28>)
 8008ae8:	f7f9 f8dc 	bl	8001ca4 <TASK_create>
  ASSERT(t);
 8008aec:	4604      	mov	r4, r0
 8008aee:	b920      	cbnz	r0, 8008afa <app_joystick_usb_cts_irq+0x1a>
 8008af0:	4806      	ldr	r0, [pc, #24]	; (8008b0c <app_joystick_usb_cts_irq+0x2c>)
 8008af2:	f240 214d 	movw	r1, #589	; 0x24d
 8008af6:	f7f7 fe73 	bl	80007e0 <SYS_assert>
  TASK_run(t, j_ix, NULL);
 8008afa:	4620      	mov	r0, r4
 8008afc:	4629      	mov	r1, r5
 8008afe:	2200      	movs	r2, #0
}
 8008b00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

static void app_joystick_usb_cts_irq(usb_joystick j_ix) {
  task *t = TASK_create(app_joystick_usb_cts_msg, 0);
  ASSERT(t);
  TASK_run(t, j_ix, NULL);
 8008b04:	f7f9 b92a 	b.w	8001d5c <TASK_run>
 8008b08:	080097c1 	.word	0x080097c1
 8008b0c:	08012459 	.word	0x08012459

08008b10 <app_mouse_usb_cts_irq>:
  task *t = TASK_create(app_kb_usb_cts_msg, 0);
  ASSERT(t);
  TASK_run(t, 0, NULL);
}

static void app_mouse_usb_cts_irq() {
 8008b10:	b510      	push	{r4, lr}
  task *t = TASK_create(app_mouse_usb_cts_msg, 0);
 8008b12:	4809      	ldr	r0, [pc, #36]	; (8008b38 <app_mouse_usb_cts_irq+0x28>)
 8008b14:	2100      	movs	r1, #0
 8008b16:	f7f9 f8c5 	bl	8001ca4 <TASK_create>
  ASSERT(t);
 8008b1a:	4604      	mov	r4, r0
 8008b1c:	b920      	cbnz	r0, 8008b28 <app_mouse_usb_cts_irq+0x18>
 8008b1e:	4807      	ldr	r0, [pc, #28]	; (8008b3c <app_mouse_usb_cts_irq+0x2c>)
 8008b20:	f240 2147 	movw	r1, #583	; 0x247
 8008b24:	f7f7 fe5c 	bl	80007e0 <SYS_assert>
  TASK_run(t, 0, NULL);
 8008b28:	2100      	movs	r1, #0
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	460a      	mov	r2, r1
}
 8008b2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void app_mouse_usb_cts_irq() {
  task *t = TASK_create(app_mouse_usb_cts_msg, 0);
  ASSERT(t);
  TASK_run(t, 0, NULL);
 8008b32:	f7f9 b913 	b.w	8001d5c <TASK_run>
 8008b36:	bf00      	nop
 8008b38:	0800980d 	.word	0x0800980d
 8008b3c:	08012459 	.word	0x08012459

08008b40 <app_kb_usb_cts_irq>:

static void app_pins_dirty_msg(u32_t ignore, void *ignore_p) {
  app_pins_update();
}

static void app_kb_usb_cts_irq() {
 8008b40:	b510      	push	{r4, lr}
  task *t = TASK_create(app_kb_usb_cts_msg, 0);
 8008b42:	4809      	ldr	r0, [pc, #36]	; (8008b68 <app_kb_usb_cts_irq+0x28>)
 8008b44:	2100      	movs	r1, #0
 8008b46:	f7f9 f8ad 	bl	8001ca4 <TASK_create>
  ASSERT(t);
 8008b4a:	4604      	mov	r4, r0
 8008b4c:	b920      	cbnz	r0, 8008b58 <app_kb_usb_cts_irq+0x18>
 8008b4e:	4807      	ldr	r0, [pc, #28]	; (8008b6c <app_kb_usb_cts_irq+0x2c>)
 8008b50:	f240 2141 	movw	r1, #577	; 0x241
 8008b54:	f7f7 fe44 	bl	80007e0 <SYS_assert>
  TASK_run(t, 0, NULL);
 8008b58:	2100      	movs	r1, #0
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	460a      	mov	r2, r1
}
 8008b5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void app_kb_usb_cts_irq() {
  task *t = TASK_create(app_kb_usb_cts_msg, 0);
  ASSERT(t);
  TASK_run(t, 0, NULL);
 8008b62:	f7f9 b8fb 	b.w	8001d5c <TASK_run>
 8008b66:	bf00      	nop
 8008b68:	08009851 	.word	0x08009851
 8008b6c:	08012459 	.word	0x08012459

08008b70 <app_get_def_boundary>:
  return 0;
}

///////////////////////////////// USB HID REPORT CONSTRUCTS

static void app_get_def_boundary(int pin, int *def_start, int *def_end) {
 8008b70:	b530      	push	{r4, r5, lr}
  if (app.pin_config[pin].tern_pin) {
 8008b72:	4d0b      	ldr	r5, [pc, #44]	; (8008ba0 <app_get_def_boundary+0x30>)
 8008b74:	2313      	movs	r3, #19
 8008b76:	fb03 5300 	mla	r3, r3, r0, r5
 8008b7a:	785c      	ldrb	r4, [r3, #1]
 8008b7c:	b15c      	cbz	r4, 8008b96 <app_get_def_boundary+0x26>
    if (app.pin_state[pin] == PIN_ACTIVE_TERN) {
 8008b7e:	4428      	add	r0, r5
 8008b80:	f890 0234 	ldrb.w	r0, [r0, #564]	; 0x234
 8008b84:	2802      	cmp	r0, #2
 8008b86:	d102      	bne.n	8008b8e <app_get_def_boundary+0x1e>
      *def_start = app.pin_config[pin].tern_splice;
 8008b88:	789b      	ldrb	r3, [r3, #2]
 8008b8a:	600b      	str	r3, [r1, #0]
 8008b8c:	e004      	b.n	8008b98 <app_get_def_boundary+0x28>
      *def_end = APP_CONFIG_DEFS_PER_PIN;
    } else {
      *def_start = 0;
 8008b8e:	2000      	movs	r0, #0
 8008b90:	6008      	str	r0, [r1, #0]
      *def_end = app.pin_config[pin].tern_splice;
 8008b92:	789b      	ldrb	r3, [r3, #2]
 8008b94:	e001      	b.n	8008b9a <app_get_def_boundary+0x2a>
    }
  } else {
    *def_start = 0;
 8008b96:	600c      	str	r4, [r1, #0]
    *def_end = APP_CONFIG_DEFS_PER_PIN;
 8008b98:	2308      	movs	r3, #8
 8008b9a:	6013      	str	r3, [r2, #0]
 8008b9c:	bd30      	pop	{r4, r5, pc}
 8008b9e:	bf00      	nop
 8008ba0:	200006ac 	.word	0x200006ac

08008ba4 <joystick_construct_report>:
  r->modifiers = butt_mask;

  return active;
}

static bool joystick_construct_report(void *d_v, void *r_v) {
 8008ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool active = FALSE;
  s32_t dx = 0;
  s32_t dy = 0;
  u16_t butt_mask = 0;

  memset(r, 0, sizeof(usb_joystick_report));
 8008ba8:	2204      	movs	r2, #4
  r->modifiers = butt_mask;

  return active;
}

static bool joystick_construct_report(void *d_v, void *r_v) {
 8008baa:	b087      	sub	sp, #28
 8008bac:	4682      	mov	sl, r0
 8008bae:	4688      	mov	r8, r1
  bool active = FALSE;
  s32_t dx = 0;
  s32_t dy = 0;
  u16_t butt_mask = 0;

  memset(r, 0, sizeof(usb_joystick_report));
 8008bb0:	4608      	mov	r0, r1
 8008bb2:	2100      	movs	r1, #0
 8008bb4:	f005 fbec 	bl	800e390 <memset>

  int pin;
  u8_t mark = d->index == JOYSTICK1 ? PIN_MARK_JOY1 : PIN_MARK_JOY2;
 8008bb8:	f89a 3001 	ldrb.w	r3, [sl, #1]

  for (pin = 0; pin < APP_CONFIG_PINS; pin++) {
 8008bbc:	2400      	movs	r4, #0
  u16_t butt_mask = 0;

  memset(r, 0, sizeof(usb_joystick_report));

  int pin;
  u8_t mark = d->index == JOYSTICK1 ? PIN_MARK_JOY1 : PIN_MARK_JOY2;
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	bf14      	ite	ne
 8008bc2:	2308      	movne	r3, #8
 8008bc4:	2304      	moveq	r3, #4
 8008bc6:	9300      	str	r3, [sp, #0]
  usb_joystick_report *r = (usb_joystick_report *)r_v;
  device_info *d = (device_info *)d_v;
  bool active = FALSE;
  s32_t dx = 0;
  s32_t dy = 0;
  u16_t butt_mask = 0;
 8008bc8:	46a1      	mov	r9, r4
static bool joystick_construct_report(void *d_v, void *r_v) {
  usb_joystick_report *r = (usb_joystick_report *)r_v;
  device_info *d = (device_info *)d_v;
  bool active = FALSE;
  s32_t dx = 0;
  s32_t dy = 0;
 8008bca:	4626      	mov	r6, r4

static bool joystick_construct_report(void *d_v, void *r_v) {
  usb_joystick_report *r = (usb_joystick_report *)r_v;
  device_info *d = (device_info *)d_v;
  bool active = FALSE;
  s32_t dx = 0;
 8008bcc:	4627      	mov	r7, r4
}

static bool joystick_construct_report(void *d_v, void *r_v) {
  usb_joystick_report *r = (usb_joystick_report *)r_v;
  device_info *d = (device_info *)d_v;
  bool active = FALSE;
 8008bce:	4625      	mov	r5, r4
 8008bd0:	4b4e      	ldr	r3, [pc, #312]	; (8008d0c <joystick_construct_report+0x168>)

  int pin;
  u8_t mark = d->index == JOYSTICK1 ? PIN_MARK_JOY1 : PIN_MARK_JOY2;

  for (pin = 0; pin < APP_CONFIG_PINS; pin++) {
    if ((app.pin_mark[pin] & mark)==0 || app.pin_state[pin] == PIN_INACTIVE)
 8008bd2:	f8dd b000 	ldr.w	fp, [sp]
 8008bd6:	4423      	add	r3, r4
 8008bd8:	f893 2268 	ldrb.w	r2, [r3, #616]	; 0x268
 8008bdc:	ea1b 0f02 	tst.w	fp, r2
 8008be0:	d06b      	beq.n	8008cba <joystick_construct_report+0x116>
 8008be2:	f893 3234 	ldrb.w	r3, [r3, #564]	; 0x234
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d067      	beq.n	8008cba <joystick_construct_report+0x116>
      continue;
    int def_start, def_end;
    app_get_def_boundary(pin, &def_start, &def_end);
 8008bea:	a904      	add	r1, sp, #16
 8008bec:	aa05      	add	r2, sp, #20
 8008bee:	4620      	mov	r0, r4
 8008bf0:	f7ff ffbe 	bl	8008b70 <app_get_def_boundary>

    int def;
    for (def = def_start; def < def_end; def++) {
      if (app.pin_config[pin].id[def].type == HID_ID_TYPE_JOYSTICK) {
 8008bf4:	2213      	movs	r2, #19
 8008bf6:	4362      	muls	r2, r4
      continue;
    int def_start, def_end;
    app_get_def_boundary(pin, &def_start, &def_end);

    int def;
    for (def = def_start; def < def_end; def++) {
 8008bf8:	9905      	ldr	r1, [sp, #20]
 8008bfa:	9b04      	ldr	r3, [sp, #16]
 8008bfc:	9101      	str	r1, [sp, #4]
      if (app.pin_config[pin].id[def].type == HID_ID_TYPE_JOYSTICK) {
 8008bfe:	9203      	str	r2, [sp, #12]
      continue;
    int def_start, def_end;
    app_get_def_boundary(pin, &def_start, &def_end);

    int def;
    for (def = def_start; def < def_end; def++) {
 8008c00:	9901      	ldr	r1, [sp, #4]
 8008c02:	428b      	cmp	r3, r1
 8008c04:	da59      	bge.n	8008cba <joystick_construct_report+0x116>
      if (app.pin_config[pin].id[def].type == HID_ID_TYPE_JOYSTICK) {
 8008c06:	9a03      	ldr	r2, [sp, #12]
 8008c08:	f8df b100 	ldr.w	fp, [pc, #256]	; 8008d0c <joystick_construct_report+0x168>
 8008c0c:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8008c10:	4459      	add	r1, fp
 8008c12:	78ca      	ldrb	r2, [r1, #3]
 8008c14:	f002 0003 	and.w	r0, r2, #3
 8008c18:	2803      	cmp	r0, #3
 8008c1a:	d14c      	bne.n	8008cb6 <joystick_construct_report+0x112>
        u8_t j_def_ix = app.pin_config[pin].id[def].joy.joystick_code >= _JOYSTICK_IX_2 ? JOYSTICK2 : JOYSTICK1;
 8008c1c:	f3c2 0084 	ubfx	r0, r2, #2, #5
 8008c20:	280f      	cmp	r0, #15
 8008c22:	bfd4      	ite	le
 8008c24:	f04f 0c00 	movle.w	ip, #0
 8008c28:	f04f 0c01 	movgt.w	ip, #1
 8008c2c:	f8cd c008 	str.w	ip, [sp, #8]
        if (j_def_ix != d->index) continue;
 8008c30:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008c34:	f89a c001 	ldrb.w	ip, [sl, #1]
 8008c38:	45dc      	cmp	ip, fp
 8008c3a:	d13c      	bne.n	8008cb6 <joystick_construct_report+0x112>

        active = TRUE;
        enum joystick_code mod_jcode =  app.pin_config[pin].id[def].joy.joystick_code -
 8008c3c:	f1bc 0f01 	cmp.w	ip, #1
 8008c40:	bf0c      	ite	eq
 8008c42:	f04f 0c10 	moveq.w	ip, #16
 8008c46:	f04f 0c00 	movne.w	ip, #0
 8008c4a:	ebcc 0500 	rsb	r5, ip, r0
            (j_def_ix == JOYSTICK2 ? _JOYSTICK_IX_2 : _JOYSTICK_IX_1);

        bool sign = app.pin_config[pin].id[def].joy.joystick_sign;
        u8_t data = app.pin_config[pin].id[def].joy.joystick_data;
 8008c4e:	7908      	ldrb	r0, [r1, #4]
      if (app.pin_config[pin].id[def].type == HID_ID_TYPE_JOYSTICK) {
        u8_t j_def_ix = app.pin_config[pin].id[def].joy.joystick_code >= _JOYSTICK_IX_2 ? JOYSTICK2 : JOYSTICK1;
        if (j_def_ix != d->index) continue;

        active = TRUE;
        enum joystick_code mod_jcode =  app.pin_config[pin].id[def].joy.joystick_code -
 8008c50:	b2ed      	uxtb	r5, r5
            (j_def_ix == JOYSTICK2 ? _JOYSTICK_IX_2 : _JOYSTICK_IX_1);

        bool sign = app.pin_config[pin].id[def].joy.joystick_sign;
        u8_t data = app.pin_config[pin].id[def].joy.joystick_data;
 8008c52:	0841      	lsrs	r1, r0, #1

        u8_t displacement;
        if (app.pin_config[pin].id[def].joy.joystick_acc) {
 8008c54:	07c0      	lsls	r0, r0, #31

        active = TRUE;
        enum joystick_code mod_jcode =  app.pin_config[pin].id[def].joy.joystick_code -
            (j_def_ix == JOYSTICK2 ? _JOYSTICK_IX_2 : _JOYSTICK_IX_1);

        bool sign = app.pin_config[pin].id[def].joy.joystick_sign;
 8008c56:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        u8_t data = app.pin_config[pin].id[def].joy.joystick_data;

        u8_t displacement;
        if (app.pin_config[pin].id[def].joy.joystick_acc) {
 8008c5a:	d50e      	bpl.n	8008c7a <joystick_construct_report+0xd6>
          u16_t acc = d->accelerator_1;
 8008c5c:	f8ba 002c 	ldrh.w	r0, [sl, #44]	; 0x2c
          if (acc + data < 0xfff) {
 8008c60:	f640 7bfe 	movw	fp, #4094	; 0xffe
 8008c64:	eb00 0c01 	add.w	ip, r0, r1
 8008c68:	45dc      	cmp	ip, fp
 8008c6a:	dc06      	bgt.n	8008c7a <joystick_construct_report+0xd6>
            displacement = 1+(u8_t)(((u32_t)data * (u32_t)acc) >> 12);
 8008c6c:	4348      	muls	r0, r1
 8008c6e:	0b00      	lsrs	r0, r0, #12
 8008c70:	3001      	adds	r0, #1
 8008c72:	b2c0      	uxtb	r0, r0
            displacement = MIN(displacement, data);
 8008c74:	4288      	cmp	r0, r1
 8008c76:	bf38      	it	cc
 8008c78:	4601      	movcc	r1, r0
            displacement = data;
          }
        } else {
          displacement = data;
        }
        if (displacement == 0) displacement = 1;
 8008c7a:	2900      	cmp	r1, #0
 8008c7c:	bf08      	it	eq
 8008c7e:	2101      	moveq	r1, #1

        switch (mod_jcode) {
 8008c80:	2d01      	cmp	r5, #1
 8008c82:	d012      	beq.n	8008caa <joystick_construct_report+0x106>
 8008c84:	d30b      	bcc.n	8008c9e <joystick_construct_report+0xfa>
 8008c86:	2d0f      	cmp	r5, #15
 8008c88:	d814      	bhi.n	8008cb4 <joystick_construct_report+0x110>
        case JOYSTICK1_BUTTON10:
        case JOYSTICK1_BUTTON11:
        case JOYSTICK1_BUTTON12:
        case JOYSTICK1_BUTTON13:
        case JOYSTICK1_BUTTON14:
          butt_mask |= (1<<(mod_jcode - JOYSTICK1_BUTTON1));
 8008c8a:	3d02      	subs	r5, #2
 8008c8c:	f04f 0c01 	mov.w	ip, #1
 8008c90:	fa0c f505 	lsl.w	r5, ip, r5
 8008c94:	ea45 0909 	orr.w	r9, r5, r9
 8008c98:	fa1f f989 	uxth.w	r9, r9
 8008c9c:	e00a      	b.n	8008cb4 <joystick_construct_report+0x110>
        }
        if (displacement == 0) displacement = 1;

        switch (mod_jcode) {
        case JOYSTICK1_X:
          if (dx == 0) dx += sign ? -displacement : displacement;
 8008c9e:	b94f      	cbnz	r7, 8008cb4 <joystick_construct_report+0x110>
 8008ca0:	b10a      	cbz	r2, 8008ca6 <joystick_construct_report+0x102>
 8008ca2:	424f      	negs	r7, r1
 8008ca4:	e006      	b.n	8008cb4 <joystick_construct_report+0x110>
 8008ca6:	460f      	mov	r7, r1
 8008ca8:	e004      	b.n	8008cb4 <joystick_construct_report+0x110>
          break;
        case JOYSTICK1_Y:
          if (dy == 0) dy += sign ? -displacement : displacement;
 8008caa:	b926      	cbnz	r6, 8008cb6 <joystick_construct_report+0x112>
 8008cac:	b10a      	cbz	r2, 8008cb2 <joystick_construct_report+0x10e>
 8008cae:	424e      	negs	r6, r1
 8008cb0:	e000      	b.n	8008cb4 <joystick_construct_report+0x110>
 8008cb2:	460e      	mov	r6, r1
    for (def = def_start; def < def_end; def++) {
      if (app.pin_config[pin].id[def].type == HID_ID_TYPE_JOYSTICK) {
        u8_t j_def_ix = app.pin_config[pin].id[def].joy.joystick_code >= _JOYSTICK_IX_2 ? JOYSTICK2 : JOYSTICK1;
        if (j_def_ix != d->index) continue;

        active = TRUE;
 8008cb4:	2501      	movs	r5, #1
      continue;
    int def_start, def_end;
    app_get_def_boundary(pin, &def_start, &def_end);

    int def;
    for (def = def_start; def < def_end; def++) {
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	e7a2      	b.n	8008c00 <joystick_construct_report+0x5c>
  memset(r, 0, sizeof(usb_joystick_report));

  int pin;
  u8_t mark = d->index == JOYSTICK1 ? PIN_MARK_JOY1 : PIN_MARK_JOY2;

  for (pin = 0; pin < APP_CONFIG_PINS; pin++) {
 8008cba:	3401      	adds	r4, #1
 8008cbc:	2c1a      	cmp	r4, #26
 8008cbe:	d187      	bne.n	8008bd0 <joystick_construct_report+0x2c>
        }
      }
    }
  }

  r->dx = dx < 0 ? MAX(-127, dx) : MIN(127, dx);
 8008cc0:	2f00      	cmp	r7, #0
 8008cc2:	da05      	bge.n	8008cd0 <joystick_construct_report+0x12c>
 8008cc4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8008cc8:	429f      	cmp	r7, r3
 8008cca:	bfb8      	it	lt
 8008ccc:	461f      	movlt	r7, r3
 8008cce:	e002      	b.n	8008cd6 <joystick_construct_report+0x132>
 8008cd0:	2f7f      	cmp	r7, #127	; 0x7f
 8008cd2:	bfa8      	it	ge
 8008cd4:	277f      	movge	r7, #127	; 0x7f
 8008cd6:	b2ff      	uxtb	r7, r7
  r->dy = dy < 0 ? MAX(-127, dy) : MIN(127, dy);
 8008cd8:	2e00      	cmp	r6, #0
        }
      }
    }
  }

  r->dx = dx < 0 ? MAX(-127, dx) : MIN(127, dx);
 8008cda:	f888 7000 	strb.w	r7, [r8]
  r->dy = dy < 0 ? MAX(-127, dy) : MIN(127, dy);
 8008cde:	da05      	bge.n	8008cec <joystick_construct_report+0x148>
 8008ce0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8008ce4:	429e      	cmp	r6, r3
 8008ce6:	bfb8      	it	lt
 8008ce8:	461e      	movlt	r6, r3
 8008cea:	e002      	b.n	8008cf2 <joystick_construct_report+0x14e>
 8008cec:	2e7f      	cmp	r6, #127	; 0x7f
 8008cee:	bfa8      	it	ge
 8008cf0:	267f      	movge	r6, #127	; 0x7f
 8008cf2:	b2f6      	uxtb	r6, r6

  r->buttons1 = (butt_mask) & 0xff;
 8008cf4:	f888 9002 	strb.w	r9, [r8, #2]
  r->buttons2 = (butt_mask>>8) & 0xff;

  return active;
}
 8008cf8:	4628      	mov	r0, r5

  r->dx = dx < 0 ? MAX(-127, dx) : MIN(127, dx);
  r->dy = dy < 0 ? MAX(-127, dy) : MIN(127, dy);

  r->buttons1 = (butt_mask) & 0xff;
  r->buttons2 = (butt_mask>>8) & 0xff;
 8008cfa:	ea4f 2919 	mov.w	r9, r9, lsr #8
      }
    }
  }

  r->dx = dx < 0 ? MAX(-127, dx) : MIN(127, dx);
  r->dy = dy < 0 ? MAX(-127, dy) : MIN(127, dy);
 8008cfe:	f888 6001 	strb.w	r6, [r8, #1]

  r->buttons1 = (butt_mask) & 0xff;
  r->buttons2 = (butt_mask>>8) & 0xff;
 8008d02:	f888 9003 	strb.w	r9, [r8, #3]

  return active;
}
 8008d06:	b007      	add	sp, #28
 8008d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d0c:	200006ac 	.word	0x200006ac

08008d10 <mouse_construct_report>:
    } // for each definition in pin
  } // for each pin
  return active;
}

static bool mouse_construct_report(void *d_v, void *r_v) {
 8008d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d14:	b087      	sub	sp, #28
 8008d16:	9001      	str	r0, [sp, #4]
 8008d18:	468a      	mov	sl, r1
  s32_t mdy = 0;
  s32_t mdw = 0;
  u8_t butt_mask = 0;
  int pin;

  memset(r, 0, sizeof(usb_mouse_report));
 8008d1a:	4608      	mov	r0, r1
 8008d1c:	2204      	movs	r2, #4
 8008d1e:	2100      	movs	r1, #0
 8008d20:	f005 fb36 	bl	800e390 <memset>

  for (pin = 0; pin < APP_CONFIG_PINS; pin++) {
 8008d24:	2500      	movs	r5, #0
 8008d26:	f8df b170 	ldr.w	fp, [pc, #368]	; 8008e98 <mouse_construct_report+0x188>
  device_info *d = (device_info *)d_v;
  bool active = FALSE;
  s32_t mdx = 0;
  s32_t mdy = 0;
  s32_t mdw = 0;
  u8_t butt_mask = 0;
 8008d2a:	462e      	mov	r6, r5
  usb_mouse_report *r = (usb_mouse_report *)r_v;
  device_info *d = (device_info *)d_v;
  bool active = FALSE;
  s32_t mdx = 0;
  s32_t mdy = 0;
  s32_t mdw = 0;
 8008d2c:	462f      	mov	r7, r5
static bool mouse_construct_report(void *d_v, void *r_v) {
  usb_mouse_report *r = (usb_mouse_report *)r_v;
  device_info *d = (device_info *)d_v;
  bool active = FALSE;
  s32_t mdx = 0;
  s32_t mdy = 0;
 8008d2e:	46a8      	mov	r8, r5

static bool mouse_construct_report(void *d_v, void *r_v) {
  usb_mouse_report *r = (usb_mouse_report *)r_v;
  device_info *d = (device_info *)d_v;
  bool active = FALSE;
  s32_t mdx = 0;
 8008d30:	46a9      	mov	r9, r5
}

static bool mouse_construct_report(void *d_v, void *r_v) {
  usb_mouse_report *r = (usb_mouse_report *)r_v;
  device_info *d = (device_info *)d_v;
  bool active = FALSE;
 8008d32:	462c      	mov	r4, r5
 8008d34:	eb0b 0305 	add.w	r3, fp, r5
  int pin;

  memset(r, 0, sizeof(usb_mouse_report));

  for (pin = 0; pin < APP_CONFIG_PINS; pin++) {
    if ((app.pin_mark[pin] & PIN_MARK_MOUSE)==0 || app.pin_state[pin] == PIN_INACTIVE)
 8008d38:	f893 2268 	ldrb.w	r2, [r3, #616]	; 0x268
 8008d3c:	0792      	lsls	r2, r2, #30
 8008d3e:	d570      	bpl.n	8008e22 <mouse_construct_report+0x112>
 8008d40:	f893 3234 	ldrb.w	r3, [r3, #564]	; 0x234
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d06c      	beq.n	8008e22 <mouse_construct_report+0x112>
      continue;
    int def_start, def_end;
    app_get_def_boundary(pin, &def_start, &def_end);
 8008d48:	4628      	mov	r0, r5
 8008d4a:	aa05      	add	r2, sp, #20
 8008d4c:	a904      	add	r1, sp, #16
 8008d4e:	f7ff ff0f 	bl	8008b70 <app_get_def_boundary>

    int def;
    for (def = def_start; def < def_end; def++) {
      if (app.pin_config[pin].id[def].type == HID_ID_TYPE_MOUSE) {
 8008d52:	2313      	movs	r3, #19
 8008d54:	436b      	muls	r3, r5
      continue;
    int def_start, def_end;
    app_get_def_boundary(pin, &def_start, &def_end);

    int def;
    for (def = def_start; def < def_end; def++) {
 8008d56:	9805      	ldr	r0, [sp, #20]
 8008d58:	9a04      	ldr	r2, [sp, #16]
 8008d5a:	9003      	str	r0, [sp, #12]
      if (app.pin_config[pin].id[def].type == HID_ID_TYPE_MOUSE) {
 8008d5c:	9302      	str	r3, [sp, #8]
      continue;
    int def_start, def_end;
    app_get_def_boundary(pin, &def_start, &def_end);

    int def;
    for (def = def_start; def < def_end; def++) {
 8008d5e:	9b03      	ldr	r3, [sp, #12]
 8008d60:	429a      	cmp	r2, r3
 8008d62:	da5e      	bge.n	8008e22 <mouse_construct_report+0x112>
      if (app.pin_config[pin].id[def].type == HID_ID_TYPE_MOUSE) {
 8008d64:	9902      	ldr	r1, [sp, #8]
 8008d66:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8008d6a:	445b      	add	r3, fp
 8008d6c:	f893 c003 	ldrb.w	ip, [r3, #3]
 8008d70:	f00c 0103 	and.w	r1, ip, #3
 8008d74:	2902      	cmp	r1, #2
 8008d76:	d152      	bne.n	8008e1e <mouse_construct_report+0x10e>
        active = TRUE;
        bool sign = app.pin_config[pin].id[def].mouse.mouse_sign;
 8008d78:	ea4f 10dc 	mov.w	r0, ip, lsr #7
 8008d7c:	9000      	str	r0, [sp, #0]
        u8_t data = app.pin_config[pin].id[def].mouse.mouse_data;
 8008d7e:	791c      	ldrb	r4, [r3, #4]
 8008d80:	0861      	lsrs	r1, r4, #1

        u8_t displacement;
        if (app.pin_config[pin].id[def].mouse.mouse_acc) {
 8008d82:	07e4      	lsls	r4, r4, #31
    int def;
    for (def = def_start; def < def_end; def++) {
      if (app.pin_config[pin].id[def].type == HID_ID_TYPE_MOUSE) {
        active = TRUE;
        bool sign = app.pin_config[pin].id[def].mouse.mouse_sign;
        u8_t data = app.pin_config[pin].id[def].mouse.mouse_data;
 8008d84:	460b      	mov	r3, r1

        u8_t displacement;
        if (app.pin_config[pin].id[def].mouse.mouse_acc) {
 8008d86:	d515      	bpl.n	8008db4 <mouse_construct_report+0xa4>
          u16_t acc = app.pin_config[pin].id[def].mouse.mouse_code == MOUSE_WHEEL ?
 8008d88:	9801      	ldr	r0, [sp, #4]
 8008d8a:	f3cc 0c83 	ubfx	ip, ip, #2, #4
 8008d8e:	f1bc 0f05 	cmp.w	ip, #5
 8008d92:	bf0c      	ite	eq
 8008d94:	8dc4      	ldrheq	r4, [r0, #46]	; 0x2e
 8008d96:	8d84      	ldrhne	r4, [r0, #44]	; 0x2c
              d->accelerator_2 : d->accelerator_1;
          if (acc + data < 0xfff) {
 8008d98:	f640 70fe 	movw	r0, #4094	; 0xffe
 8008d9c:	eb04 0c01 	add.w	ip, r4, r1
 8008da0:	4584      	cmp	ip, r0
 8008da2:	dc07      	bgt.n	8008db4 <mouse_construct_report+0xa4>
            displacement = 1+(u8_t)(((u32_t)data * (u32_t)acc) >> 12);
 8008da4:	fb01 f304 	mul.w	r3, r1, r4
 8008da8:	0b1b      	lsrs	r3, r3, #12
 8008daa:	3301      	adds	r3, #1
 8008dac:	b2db      	uxtb	r3, r3
            displacement = MIN(displacement, data);
 8008dae:	428b      	cmp	r3, r1
 8008db0:	bf28      	it	cs
 8008db2:	460b      	movcs	r3, r1
        } else {
          displacement = data;
        }
        if (displacement == 0) displacement = 1;

        switch (app.pin_config[pin].id[def].mouse.mouse_code) {
 8008db4:	9802      	ldr	r0, [sp, #8]
            displacement = data;
          }
        } else {
          displacement = data;
        }
        if (displacement == 0) displacement = 1;
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	bf08      	it	eq
 8008dba:	2301      	moveq	r3, #1

        switch (app.pin_config[pin].id[def].mouse.mouse_code) {
 8008dbc:	eb00 0142 	add.w	r1, r0, r2, lsl #1
 8008dc0:	4459      	add	r1, fp
 8008dc2:	78c9      	ldrb	r1, [r1, #3]
 8008dc4:	f3c1 0183 	ubfx	r1, r1, #2, #4
 8008dc8:	2905      	cmp	r1, #5
 8008dca:	d827      	bhi.n	8008e1c <mouse_construct_report+0x10c>
 8008dcc:	e8df f001 	tbb	[pc, r1]
 8008dd0:	211e0d03 	.word	0x211e0d03
 8008dd4:	1724      	.short	0x1724
        case MOUSE_X:
          if (mdx == 0) mdx += sign ? -displacement : displacement;
 8008dd6:	f1b9 0f00 	cmp.w	r9, #0
 8008dda:	d11f      	bne.n	8008e1c <mouse_construct_report+0x10c>
 8008ddc:	9900      	ldr	r1, [sp, #0]
 8008dde:	b111      	cbz	r1, 8008de6 <mouse_construct_report+0xd6>
 8008de0:	f1c3 0900 	rsb	r9, r3, #0
 8008de4:	e01a      	b.n	8008e1c <mouse_construct_report+0x10c>
 8008de6:	4699      	mov	r9, r3
 8008de8:	e018      	b.n	8008e1c <mouse_construct_report+0x10c>
          break;
        case MOUSE_Y:
          if (mdy == 0) mdy += sign ? -displacement : displacement;
 8008dea:	f1b8 0f00 	cmp.w	r8, #0
 8008dee:	d115      	bne.n	8008e1c <mouse_construct_report+0x10c>
 8008df0:	9800      	ldr	r0, [sp, #0]
 8008df2:	b110      	cbz	r0, 8008dfa <mouse_construct_report+0xea>
 8008df4:	f1c3 0800 	rsb	r8, r3, #0
 8008df8:	e010      	b.n	8008e1c <mouse_construct_report+0x10c>
 8008dfa:	4698      	mov	r8, r3
 8008dfc:	e00e      	b.n	8008e1c <mouse_construct_report+0x10c>
          break;
        case MOUSE_WHEEL:
          if (mdw == 0) mdw += sign ? -displacement : displacement;
 8008dfe:	b96f      	cbnz	r7, 8008e1c <mouse_construct_report+0x10c>
 8008e00:	9900      	ldr	r1, [sp, #0]
 8008e02:	b109      	cbz	r1, 8008e08 <mouse_construct_report+0xf8>
 8008e04:	425f      	negs	r7, r3
 8008e06:	e009      	b.n	8008e1c <mouse_construct_report+0x10c>
 8008e08:	461f      	mov	r7, r3
 8008e0a:	e007      	b.n	8008e1c <mouse_construct_report+0x10c>
          break;
        case MOUSE_BUTTON1:
          butt_mask |= (1<<2);
 8008e0c:	f046 0604 	orr.w	r6, r6, #4
 8008e10:	e004      	b.n	8008e1c <mouse_construct_report+0x10c>
          break;
        case MOUSE_BUTTON2:
          butt_mask |= (1<<1);
 8008e12:	f046 0602 	orr.w	r6, r6, #2
 8008e16:	e001      	b.n	8008e1c <mouse_construct_report+0x10c>
          break;
        case MOUSE_BUTTON3:
          butt_mask |= (1<<0);
 8008e18:	f046 0601 	orr.w	r6, r6, #1
    app_get_def_boundary(pin, &def_start, &def_end);

    int def;
    for (def = def_start; def < def_end; def++) {
      if (app.pin_config[pin].id[def].type == HID_ID_TYPE_MOUSE) {
        active = TRUE;
 8008e1c:	2401      	movs	r4, #1
      continue;
    int def_start, def_end;
    app_get_def_boundary(pin, &def_start, &def_end);

    int def;
    for (def = def_start; def < def_end; def++) {
 8008e1e:	3201      	adds	r2, #1
 8008e20:	e79d      	b.n	8008d5e <mouse_construct_report+0x4e>
  u8_t butt_mask = 0;
  int pin;

  memset(r, 0, sizeof(usb_mouse_report));

  for (pin = 0; pin < APP_CONFIG_PINS; pin++) {
 8008e22:	3501      	adds	r5, #1
 8008e24:	2d1a      	cmp	r5, #26
 8008e26:	d185      	bne.n	8008d34 <mouse_construct_report+0x24>
        }
      }
    }
  }

  r->dx = mdx < 0 ? MAX(-127, mdx) : MIN(127, mdx);
 8008e28:	f1b9 0f00 	cmp.w	r9, #0
 8008e2c:	da05      	bge.n	8008e3a <mouse_construct_report+0x12a>
 8008e2e:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8008e32:	4599      	cmp	r9, r3
 8008e34:	bfb8      	it	lt
 8008e36:	4699      	movlt	r9, r3
 8008e38:	e004      	b.n	8008e44 <mouse_construct_report+0x134>
 8008e3a:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
 8008e3e:	bfa8      	it	ge
 8008e40:	f04f 097f 	movge.w	r9, #127	; 0x7f
 8008e44:	fa5f f989 	uxtb.w	r9, r9
  r->dy = mdy < 0 ? MAX(-127, mdy) : MIN(127, mdy);
 8008e48:	f1b8 0f00 	cmp.w	r8, #0
        }
      }
    }
  }

  r->dx = mdx < 0 ? MAX(-127, mdx) : MIN(127, mdx);
 8008e4c:	f88a 9001 	strb.w	r9, [sl, #1]
  r->dy = mdy < 0 ? MAX(-127, mdy) : MIN(127, mdy);
 8008e50:	da05      	bge.n	8008e5e <mouse_construct_report+0x14e>
 8008e52:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8008e56:	4598      	cmp	r8, r3
 8008e58:	bfb8      	it	lt
 8008e5a:	4698      	movlt	r8, r3
 8008e5c:	e004      	b.n	8008e68 <mouse_construct_report+0x158>
 8008e5e:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
 8008e62:	bfa8      	it	ge
 8008e64:	f04f 087f 	movge.w	r8, #127	; 0x7f
 8008e68:	fa5f f888 	uxtb.w	r8, r8
  r->wheel = mdw < 0 ? MAX(-127, mdw) : MIN(127, mdw);
 8008e6c:	2f00      	cmp	r7, #0
      }
    }
  }

  r->dx = mdx < 0 ? MAX(-127, mdx) : MIN(127, mdx);
  r->dy = mdy < 0 ? MAX(-127, mdy) : MIN(127, mdy);
 8008e6e:	f88a 8002 	strb.w	r8, [sl, #2]
  r->wheel = mdw < 0 ? MAX(-127, mdw) : MIN(127, mdw);
 8008e72:	da05      	bge.n	8008e80 <mouse_construct_report+0x170>
 8008e74:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8008e78:	429f      	cmp	r7, r3
 8008e7a:	bfb8      	it	lt
 8008e7c:	461f      	movlt	r7, r3
 8008e7e:	e002      	b.n	8008e86 <mouse_construct_report+0x176>
 8008e80:	2f7f      	cmp	r7, #127	; 0x7f
 8008e82:	bfa8      	it	ge
 8008e84:	277f      	movge	r7, #127	; 0x7f
 8008e86:	b2ff      	uxtb	r7, r7
  r->modifiers = butt_mask;

  return active;
}
 8008e88:	4620      	mov	r0, r4
    }
  }

  r->dx = mdx < 0 ? MAX(-127, mdx) : MIN(127, mdx);
  r->dy = mdy < 0 ? MAX(-127, mdy) : MIN(127, mdy);
  r->wheel = mdw < 0 ? MAX(-127, mdw) : MIN(127, mdw);
 8008e8a:	f88a 7003 	strb.w	r7, [sl, #3]
  r->modifiers = butt_mask;
 8008e8e:	f88a 6000 	strb.w	r6, [sl]

  return active;
}
 8008e92:	b007      	add	sp, #28
 8008e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e98:	200006ac 	.word	0x200006ac

08008e9c <kb_construct_report>:
    *def_start = 0;
    *def_end = APP_CONFIG_DEFS_PER_PIN;
  }
}

static bool kb_construct_report(void *d_v, void *r_v) {
 8008e9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  (void)d_v;
  usb_kb_report *r = (usb_kb_report *)r_v;
  int pin;
  int report_ix = 0;

  memset(r, 0, sizeof(usb_kb_report));
 8008ea0:	4608      	mov	r0, r1
    *def_start = 0;
    *def_end = APP_CONFIG_DEFS_PER_PIN;
  }
}

static bool kb_construct_report(void *d_v, void *r_v) {
 8008ea2:	460e      	mov	r6, r1
  (void)d_v;
  usb_kb_report *r = (usb_kb_report *)r_v;
  int pin;
  int report_ix = 0;

  memset(r, 0, sizeof(usb_kb_report));
 8008ea4:	2222      	movs	r2, #34	; 0x22
 8008ea6:	2100      	movs	r1, #0
 8008ea8:	f005 fa72 	bl	800e390 <memset>
 8008eac:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8008f44 <kb_construct_report+0xa8>
  bool active = FALSE;

  // for each pin..
  for (pin = 0; pin < APP_CONFIG_PINS && report_ix < USB_KB_REPORT_KEYMAP_SIZE; pin++) {
 8008eb0:	2400      	movs	r4, #0

static bool kb_construct_report(void *d_v, void *r_v) {
  (void)d_v;
  usb_kb_report *r = (usb_kb_report *)r_v;
  int pin;
  int report_ix = 0;
 8008eb2:	4625      	mov	r5, r4

  memset(r, 0, sizeof(usb_kb_report));
  bool active = FALSE;
 8008eb4:	4627      	mov	r7, r4
 8008eb6:	46c1      	mov	r9, r8
 8008eb8:	eb08 0304 	add.w	r3, r8, r4

  // for each pin..
  for (pin = 0; pin < APP_CONFIG_PINS && report_ix < USB_KB_REPORT_KEYMAP_SIZE; pin++) {
    // .. which has keyboard tag and is not inactive ..
    if ((app.pin_mark[pin] & PIN_MARK_KB)==0 || app.pin_state[pin] == PIN_INACTIVE) continue;
 8008ebc:	f893 2268 	ldrb.w	r2, [r3, #616]	; 0x268
 8008ec0:	07d1      	lsls	r1, r2, #31
 8008ec2:	d536      	bpl.n	8008f32 <kb_construct_report+0x96>
 8008ec4:	f893 3234 	ldrb.w	r3, [r3, #564]	; 0x234
 8008ec8:	b39b      	cbz	r3, 8008f32 <kb_construct_report+0x96>

    // .. find out definitions group depending on ternary or not ..
    int def_start, def_end;
    app_get_def_boundary(pin, &def_start, &def_end);
 8008eca:	4620      	mov	r0, r4
 8008ecc:	aa01      	add	r2, sp, #4
 8008ece:	4669      	mov	r1, sp
 8008ed0:	f7ff fe4e 	bl	8008b70 <app_get_def_boundary>
    // .. and for each definition group ..
    int def;
    for (def = def_start; def < def_end; def++) {
      // .. find keyboard definitions ..
      if (report_ix >= USB_KB_REPORT_KEYMAP_SIZE) break;
      if (app.pin_config[pin].id[def].type == HID_ID_TYPE_KEYBOARD) {
 8008ed4:	f04f 0c13 	mov.w	ip, #19
 8008ed8:	fb0c fc04 	mul.w	ip, ip, r4
    app_get_def_boundary(pin, &def_start, &def_end);
    //DBG(D_APP, D_DEBUG, "pin %i, check defs %i--%i\n", pin+1, def_start, def_end);

    // .. and for each definition group ..
    int def;
    for (def = def_start; def < def_end; def++) {
 8008edc:	9a00      	ldr	r2, [sp, #0]
 8008ede:	9801      	ldr	r0, [sp, #4]
 8008ee0:	4282      	cmp	r2, r0
 8008ee2:	da26      	bge.n	8008f32 <kb_construct_report+0x96>
      // .. find keyboard definitions ..
      if (report_ix >= USB_KB_REPORT_KEYMAP_SIZE) break;
 8008ee4:	2d1f      	cmp	r5, #31
 8008ee6:	dc24      	bgt.n	8008f32 <kb_construct_report+0x96>
      if (app.pin_config[pin].id[def].type == HID_ID_TYPE_KEYBOARD) {
 8008ee8:	eb0c 0142 	add.w	r1, ip, r2, lsl #1
 8008eec:	4449      	add	r1, r9
 8008eee:	78cb      	ldrb	r3, [r1, #3]
 8008ef0:	f003 0303 	and.w	r3, r3, #3
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d11a      	bne.n	8008f2e <kb_construct_report+0x92>
        active = TRUE;
        enum kb_hid_code kb_code = app.pin_config[pin].id[def].kb.kb_code;
 8008ef8:	7909      	ldrb	r1, [r1, #4]
        if (kb_code >= MOD_LCTRL) {
 8008efa:	29bc      	cmp	r1, #188	; 0xbc
 8008efc:	d801      	bhi.n	8008f02 <kb_construct_report+0x66>
 8008efe:	2300      	movs	r3, #0
 8008f00:	e00a      	b.n	8008f18 <kb_construct_report+0x7c>
          // shift, ctrl, alt or gui
          r->modifiers |= MOD_BIT(kb_code);
 8008f02:	39bd      	subs	r1, #189	; 0xbd
 8008f04:	f001 0107 	and.w	r1, r1, #7
 8008f08:	fa03 f101 	lsl.w	r1, r3, r1
 8008f0c:	7837      	ldrb	r7, [r6, #0]
 8008f0e:	4339      	orrs	r1, r7
 8008f10:	7031      	strb	r1, [r6, #0]
 8008f12:	e00b      	b.n	8008f2c <kb_construct_report+0x90>
        } else {
          int i = 0;
          // .. and add all definitions that are not already in the report
          while (i <= report_ix && r->keymap[i++] != kb_code);
 8008f14:	42ab      	cmp	r3, r5
 8008f16:	dc06      	bgt.n	8008f26 <kb_construct_report+0x8a>
 8008f18:	3301      	adds	r3, #1
 8008f1a:	18f7      	adds	r7, r6, r3
 8008f1c:	787f      	ldrb	r7, [r7, #1]
 8008f1e:	428f      	cmp	r7, r1
 8008f20:	d1f8      	bne.n	8008f14 <kb_construct_report+0x78>
          if (i > report_ix) {
 8008f22:	42ab      	cmp	r3, r5
 8008f24:	dd02      	ble.n	8008f2c <kb_construct_report+0x90>
            r->keymap[report_ix] = kb_code;
 8008f26:	1973      	adds	r3, r6, r5
 8008f28:	7099      	strb	r1, [r3, #2]
            //DBG(D_APP, D_DEBUG, "add kb_code %02x to report ix %i\n", kb_code, report_ix);
            report_ix++;
 8008f2a:	3501      	adds	r5, #1
    int def;
    for (def = def_start; def < def_end; def++) {
      // .. find keyboard definitions ..
      if (report_ix >= USB_KB_REPORT_KEYMAP_SIZE) break;
      if (app.pin_config[pin].id[def].type == HID_ID_TYPE_KEYBOARD) {
        active = TRUE;
 8008f2c:	2701      	movs	r7, #1
    app_get_def_boundary(pin, &def_start, &def_end);
    //DBG(D_APP, D_DEBUG, "pin %i, check defs %i--%i\n", pin+1, def_start, def_end);

    // .. and for each definition group ..
    int def;
    for (def = def_start; def < def_end; def++) {
 8008f2e:	3201      	adds	r2, #1
 8008f30:	e7d6      	b.n	8008ee0 <kb_construct_report+0x44>

  memset(r, 0, sizeof(usb_kb_report));
  bool active = FALSE;

  // for each pin..
  for (pin = 0; pin < APP_CONFIG_PINS && report_ix < USB_KB_REPORT_KEYMAP_SIZE; pin++) {
 8008f32:	3401      	adds	r4, #1
 8008f34:	2c1a      	cmp	r4, #26
 8008f36:	d001      	beq.n	8008f3c <kb_construct_report+0xa0>
 8008f38:	2d1f      	cmp	r5, #31
 8008f3a:	ddbd      	ble.n	8008eb8 <kb_construct_report+0x1c>
        }
      }
    } // for each definition in pin
  } // for each pin
  return active;
}
 8008f3c:	4638      	mov	r0, r7
 8008f3e:	b003      	add	sp, #12
 8008f40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f44:	200006ac 	.word	0x200006ac

08008f48 <APP_cfg_set_pin>:

  app_init = TRUE;
}

void APP_cfg_set_pin(def_config *cfg) {
  memcpy(&app.pin_config[cfg->pin - 1], cfg, sizeof(def_config));
 8008f48:	7801      	ldrb	r1, [r0, #0]
 8008f4a:	4b26      	ldr	r3, [pc, #152]	; (8008fe4 <APP_cfg_set_pin+0x9c>)
#endif // CONFIG_ANNOYATRON

  app_init = TRUE;
}

void APP_cfg_set_pin(def_config *cfg) {
 8008f4c:	b530      	push	{r4, r5, lr}
  memcpy(&app.pin_config[cfg->pin - 1], cfg, sizeof(def_config));
 8008f4e:	3901      	subs	r1, #1
 8008f50:	2413      	movs	r4, #19
 8008f52:	fb04 3101 	mla	r1, r4, r1, r3
 8008f56:	4602      	mov	r2, r0
 8008f58:	f100 0410 	add.w	r4, r0, #16
 8008f5c:	f852 5b04 	ldr.w	r5, [r2], #4
 8008f60:	42a2      	cmp	r2, r4
 8008f62:	f841 5b04 	str.w	r5, [r1], #4
 8008f66:	d1f9      	bne.n	8008f5c <APP_cfg_set_pin+0x14>
 8008f68:	8814      	ldrh	r4, [r2, #0]
 8008f6a:	800c      	strh	r4, [r1, #0]
 8008f6c:	7892      	ldrb	r2, [r2, #2]
 8008f6e:	708a      	strb	r2, [r1, #2]
  app.pin_state[cfg->pin - 1] = PIN_INACTIVE;
 8008f70:	7801      	ldrb	r1, [r0, #0]
 8008f72:	2200      	movs	r2, #0
 8008f74:	3901      	subs	r1, #1
 8008f76:	4419      	add	r1, r3
 8008f78:	f881 2234 	strb.w	r2, [r1, #564]	; 0x234
  app.pin_state_prev[cfg->pin - 1] = PIN_INACTIVE;
 8008f7c:	f881 224e 	strb.w	r2, [r1, #590]	; 0x24e
  app.irq_cur_pin_active[cfg->pin - 1] = FALSE;
 8008f80:	f881 221a 	strb.w	r2, [r1, #538]	; 0x21a

  int def;
  app.pin_mark[cfg->pin - 1] = 0;
 8008f84:	f881 2268 	strb.w	r2, [r1, #616]	; 0x268
  for (def = 0; def < APP_CONFIG_DEFS_PER_PIN; def++) {
    if (cfg->id[def].type == HID_ID_TYPE_KEYBOARD) {
 8008f88:	eb00 0142 	add.w	r1, r0, r2, lsl #1
 8008f8c:	78cc      	ldrb	r4, [r1, #3]
 8008f8e:	f004 0103 	and.w	r1, r4, #3
 8008f92:	2901      	cmp	r1, #1
 8008f94:	d107      	bne.n	8008fa6 <APP_cfg_set_pin+0x5e>
      app.pin_mark[cfg->pin - 1] |= PIN_MARK_KB;
 8008f96:	7801      	ldrb	r1, [r0, #0]
 8008f98:	3901      	subs	r1, #1
 8008f9a:	4419      	add	r1, r3
 8008f9c:	f891 4268 	ldrb.w	r4, [r1, #616]	; 0x268
 8008fa0:	f044 0401 	orr.w	r4, r4, #1
 8008fa4:	e018      	b.n	8008fd8 <APP_cfg_set_pin+0x90>
    } else if (cfg->id[def].type == HID_ID_TYPE_MOUSE) {
 8008fa6:	2902      	cmp	r1, #2
 8008fa8:	d107      	bne.n	8008fba <APP_cfg_set_pin+0x72>
      app.pin_mark[cfg->pin - 1] |= PIN_MARK_MOUSE;
 8008faa:	7801      	ldrb	r1, [r0, #0]
 8008fac:	3901      	subs	r1, #1
 8008fae:	4419      	add	r1, r3
 8008fb0:	f891 4268 	ldrb.w	r4, [r1, #616]	; 0x268
 8008fb4:	f044 0402 	orr.w	r4, r4, #2
 8008fb8:	e00e      	b.n	8008fd8 <APP_cfg_set_pin+0x90>
    } else if (cfg->id[def].type == HID_ID_TYPE_JOYSTICK) {
 8008fba:	2903      	cmp	r1, #3
 8008fbc:	d10e      	bne.n	8008fdc <APP_cfg_set_pin+0x94>
 8008fbe:	7801      	ldrb	r1, [r0, #0]
      if (cfg->id[def].joy.joystick_code < _JOYSTICK_IX_2) {
 8008fc0:	f3c4 0484 	ubfx	r4, r4, #2, #5
        app.pin_mark[cfg->pin - 1] |= PIN_MARK_JOY1;
 8008fc4:	3901      	subs	r1, #1
 8008fc6:	4419      	add	r1, r3
    if (cfg->id[def].type == HID_ID_TYPE_KEYBOARD) {
      app.pin_mark[cfg->pin - 1] |= PIN_MARK_KB;
    } else if (cfg->id[def].type == HID_ID_TYPE_MOUSE) {
      app.pin_mark[cfg->pin - 1] |= PIN_MARK_MOUSE;
    } else if (cfg->id[def].type == HID_ID_TYPE_JOYSTICK) {
      if (cfg->id[def].joy.joystick_code < _JOYSTICK_IX_2) {
 8008fc8:	2c0f      	cmp	r4, #15
        app.pin_mark[cfg->pin - 1] |= PIN_MARK_JOY1;
 8008fca:	f891 4268 	ldrb.w	r4, [r1, #616]	; 0x268
 8008fce:	bfd4      	ite	le
 8008fd0:	f044 0404 	orrle.w	r4, r4, #4
      } else {
        app.pin_mark[cfg->pin - 1] |= PIN_MARK_JOY2;
 8008fd4:	f044 0408 	orrgt.w	r4, r4, #8
 8008fd8:	f881 4268 	strb.w	r4, [r1, #616]	; 0x268
  app.pin_state_prev[cfg->pin - 1] = PIN_INACTIVE;
  app.irq_cur_pin_active[cfg->pin - 1] = FALSE;

  int def;
  app.pin_mark[cfg->pin - 1] = 0;
  for (def = 0; def < APP_CONFIG_DEFS_PER_PIN; def++) {
 8008fdc:	3201      	adds	r2, #1
 8008fde:	2a08      	cmp	r2, #8
 8008fe0:	d1d2      	bne.n	8008f88 <APP_cfg_set_pin+0x40>
      } else {
        app.pin_mark[cfg->pin - 1] |= PIN_MARK_JOY2;
      }
    }
  }
}
 8008fe2:	bd30      	pop	{r4, r5, pc}
 8008fe4:	200006ac 	.word	0x200006ac

08008fe8 <APP_cfg_get_pin>:
def_config *APP_cfg_get_pin(u8_t pin) {
  return &app.pin_config[pin];
}
 8008fe8:	4b02      	ldr	r3, [pc, #8]	; (8008ff4 <APP_cfg_get_pin+0xc>)
 8008fea:	2213      	movs	r2, #19
 8008fec:	fb02 3000 	mla	r0, r2, r0, r3
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	200006ac 	.word	0x200006ac

08008ff8 <APP_cfg_set_debounce_cycles>:
void APP_cfg_set_debounce_cycles(u8_t cycles) {
  app.debounce_valid_cycles = cycles;
 8008ff8:	4b01      	ldr	r3, [pc, #4]	; (8009000 <APP_cfg_set_debounce_cycles+0x8>)
 8008ffa:	f883 01ee 	strb.w	r0, [r3, #494]	; 0x1ee
 8008ffe:	4770      	bx	lr
 8009000:	200006ac 	.word	0x200006ac

08009004 <APP_cfg_get_debounce_cycles>:
}
u8_t APP_cfg_get_debounce_cycles(void) {
  return app.debounce_valid_cycles;
}
 8009004:	4b01      	ldr	r3, [pc, #4]	; (800900c <APP_cfg_get_debounce_cycles+0x8>)
 8009006:	f893 01ee 	ldrb.w	r0, [r3, #494]	; 0x1ee
 800900a:	4770      	bx	lr
 800900c:	200006ac 	.word	0x200006ac

08009010 <APP_cfg_set_mouse_delta_ms>:
void APP_cfg_set_mouse_delta_ms(time ms) {
  app.mouse_delta = ms;
 8009010:	4b01      	ldr	r3, [pc, #4]	; (8009018 <APP_cfg_set_mouse_delta_ms+0x8>)
 8009012:	f8c3 01f0 	str.w	r0, [r3, #496]	; 0x1f0
 8009016:	4770      	bx	lr
 8009018:	200006ac 	.word	0x200006ac

0800901c <APP_cfg_get_mouse_delta_ms>:
}
time APP_cfg_get_mouse_delta_ms(void) {
  return app.mouse_delta;
}
 800901c:	4b01      	ldr	r3, [pc, #4]	; (8009024 <APP_cfg_get_mouse_delta_ms+0x8>)
 800901e:	f8d3 01f0 	ldr.w	r0, [r3, #496]	; 0x1f0
 8009022:	4770      	bx	lr
 8009024:	200006ac 	.word	0x200006ac

08009028 <APP_cfg_set_acc_pos_speed>:
void APP_cfg_set_acc_pos_speed(u16_t speed) {
  app.acc_pos_speed = speed;
 8009028:	4b01      	ldr	r3, [pc, #4]	; (8009030 <APP_cfg_set_acc_pos_speed+0x8>)
 800902a:	f8a3 01f8 	strh.w	r0, [r3, #504]	; 0x1f8
 800902e:	4770      	bx	lr
 8009030:	200006ac 	.word	0x200006ac

08009034 <APP_cfg_get_acc_pos_speed>:
}
u16_t APP_cfg_get_acc_pos_speed(void) {
  return app.acc_pos_speed;
}
 8009034:	4b01      	ldr	r3, [pc, #4]	; (800903c <APP_cfg_get_acc_pos_speed+0x8>)
 8009036:	f8b3 01f8 	ldrh.w	r0, [r3, #504]	; 0x1f8
 800903a:	4770      	bx	lr
 800903c:	200006ac 	.word	0x200006ac

08009040 <APP_cfg_set_acc_wheel_speed>:
void APP_cfg_set_acc_wheel_speed(u16_t speed) {
  app.acc_wheel_speed = speed;
 8009040:	4b01      	ldr	r3, [pc, #4]	; (8009048 <APP_cfg_set_acc_wheel_speed+0x8>)
 8009042:	f8a3 01fa 	strh.w	r0, [r3, #506]	; 0x1fa
 8009046:	4770      	bx	lr
 8009048:	200006ac 	.word	0x200006ac

0800904c <APP_cfg_get_acc_wheel_speed>:
}
u16_t APP_cfg_get_acc_wheel_speed(void) {
  return app.acc_wheel_speed;
}
 800904c:	4b01      	ldr	r3, [pc, #4]	; (8009054 <APP_cfg_get_acc_wheel_speed+0x8>)
 800904e:	f8b3 01fa 	ldrh.w	r0, [r3, #506]	; 0x1fa
 8009052:	4770      	bx	lr
 8009054:	200006ac 	.word	0x200006ac

08009058 <APP_cfg_set_joystick_delta_ms>:
void APP_cfg_set_joystick_delta_ms(time ms) {
  app.joystick_delta = ms;
 8009058:	4b01      	ldr	r3, [pc, #4]	; (8009060 <APP_cfg_set_joystick_delta_ms+0x8>)
 800905a:	f8c3 01f4 	str.w	r0, [r3, #500]	; 0x1f4
 800905e:	4770      	bx	lr
 8009060:	200006ac 	.word	0x200006ac

08009064 <APP_cfg_get_joystick_delta_ms>:
}
time APP_cfg_get_joystick_delta_ms(void) {
  return app.joystick_delta;
}
 8009064:	4b01      	ldr	r3, [pc, #4]	; (800906c <APP_cfg_get_joystick_delta_ms+0x8>)
 8009066:	f8d3 01f4 	ldr.w	r0, [r3, #500]	; 0x1f4
 800906a:	4770      	bx	lr
 800906c:	200006ac 	.word	0x200006ac

08009070 <APP_cfg_set_joystick_acc_speed>:
void APP_cfg_set_joystick_acc_speed(u16_t speed) {
  app.acc_joystick_speed = speed;
 8009070:	4b01      	ldr	r3, [pc, #4]	; (8009078 <APP_cfg_set_joystick_acc_speed+0x8>)
 8009072:	f8a3 01fc 	strh.w	r0, [r3, #508]	; 0x1fc
 8009076:	4770      	bx	lr
 8009078:	200006ac 	.word	0x200006ac

0800907c <APP_cfg_get_joystick_acc_speed>:
}
u16_t APP_cfg_get_joystick_acc_speed(void) {
  return app.acc_joystick_speed;
}
 800907c:	4b01      	ldr	r3, [pc, #4]	; (8009084 <APP_cfg_get_joystick_acc_speed+0x8>)
 800907e:	f8b3 01fc 	ldrh.w	r0, [r3, #508]	; 0x1fc
 8009082:	4770      	bx	lr
 8009084:	200006ac 	.word	0x200006ac

08009088 <APP_timer>:

void APP_timer(void) {
 8009088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (app_init) {
 800908c:	4d3a      	ldr	r5, [pc, #232]	; (8009178 <APP_timer+0xf0>)
 800908e:	f895 33f0 	ldrb.w	r3, [r5, #1008]	; 0x3f0
 8009092:	2b00      	cmp	r3, #0
 8009094:	d059      	beq.n	800914a <APP_timer+0xc2>
#ifndef CONFIG_ANNOYATRON
    // input read
    if (!app.lock_gpio_sampling) {
 8009096:	f895 31ff 	ldrb.w	r3, [r5, #511]	; 0x1ff
 800909a:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d153      	bne.n	800914a <APP_timer+0xc2>
      int pin;
      const gpio_pin_map *map = GPIO_MAP_get_pin_map();
 80090a2:	f001 fa47 	bl	800a534 <GPIO_MAP_get_pin_map>

      // debouncer
      bool any_changes = FALSE;
      for (pin = 0; pin < APP_CONFIG_PINS; pin++) {
 80090a6:	4634      	mov	r4, r6
  if (app_init) {
#ifndef CONFIG_ANNOYATRON
    // input read
    if (!app.lock_gpio_sampling) {
      int pin;
      const gpio_pin_map *map = GPIO_MAP_get_pin_map();
 80090a8:	4607      	mov	r7, r0
      // debouncer
      bool any_changes = FALSE;
      for (pin = 0; pin < APP_CONFIG_PINS; pin++) {
        bool pin_active = gpio_get(map[pin].port, map[pin].pin) == 0;

        if (pin_active == app.irq_debounce_map[pin].pin_active) {
 80090aa:	46a8      	mov	r8, r5
 80090ac:	eb07 0344 	add.w	r3, r7, r4, lsl #1
      const gpio_pin_map *map = GPIO_MAP_get_pin_map();

      // debouncer
      bool any_changes = FALSE;
      for (pin = 0; pin < APP_CONFIG_PINS; pin++) {
        bool pin_active = gpio_get(map[pin].port, map[pin].pin) == 0;
 80090b0:	7859      	ldrb	r1, [r3, #1]
 80090b2:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
 80090b6:	f7f9 fcb7 	bl	8002a28 <gpio_get>

        if (pin_active == app.irq_debounce_map[pin].pin_active) {
 80090ba:	192b      	adds	r3, r5, r4
 80090bc:	f893 2200 	ldrb.w	r2, [r3, #512]	; 0x200
      const gpio_pin_map *map = GPIO_MAP_get_pin_map();

      // debouncer
      bool any_changes = FALSE;
      for (pin = 0; pin < APP_CONFIG_PINS; pin++) {
        bool pin_active = gpio_get(map[pin].port, map[pin].pin) == 0;
 80090c0:	f1d0 0001 	rsbs	r0, r0, #1

        if (pin_active == app.irq_debounce_map[pin].pin_active) {
 80090c4:	f3c2 0100 	ubfx	r1, r2, #0, #1
      const gpio_pin_map *map = GPIO_MAP_get_pin_map();

      // debouncer
      bool any_changes = FALSE;
      for (pin = 0; pin < APP_CONFIG_PINS; pin++) {
        bool pin_active = gpio_get(map[pin].port, map[pin].pin) == 0;
 80090c8:	bf38      	it	cc
 80090ca:	2000      	movcc	r0, #0

        if (pin_active == app.irq_debounce_map[pin].pin_active) {
 80090cc:	fa5f fe81 	uxtb.w	lr, r1
 80090d0:	4586      	cmp	lr, r0
 80090d2:	d111      	bne.n	80090f8 <APP_timer+0x70>
          if (app.irq_debounce_map[pin].same_state < app.debounce_valid_cycles) {
 80090d4:	f898 c1ee 	ldrb.w	ip, [r8, #494]	; 0x1ee
 80090d8:	0850      	lsrs	r0, r2, #1
 80090da:	4560      	cmp	r0, ip
 80090dc:	da05      	bge.n	80090ea <APP_timer+0x62>
            app.irq_debounce_map[pin].same_state++;
 80090de:	3001      	adds	r0, #1
 80090e0:	f360 0247 	bfi	r2, r0, #1, #7
 80090e4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 80090e8:	e008      	b.n	80090fc <APP_timer+0x74>
          } else {
            if (app.irq_cur_pin_active[pin] != pin_active) {
 80090ea:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 80090ee:	4572      	cmp	r2, lr
 80090f0:	d004      	beq.n	80090fc <APP_timer+0x74>
              // pin same state given nbr of cycles, now triggered
              app.irq_cur_pin_active[pin] = pin_active;
 80090f2:	f883 121a 	strb.w	r1, [r3, #538]	; 0x21a
 80090f6:	e001      	b.n	80090fc <APP_timer+0x74>
            }
          }
        } else {
          app.irq_debounce_map[pin].pin_active = pin_active;
          app.irq_debounce_map[pin].same_state = 0;
 80090f8:	f883 0200 	strb.w	r0, [r3, #512]	; 0x200
        }

        if (app.irq_cur_pin_active[pin] != (app.pin_state[pin] != PIN_INACTIVE)) {
 80090fc:	192b      	adds	r3, r5, r4
 80090fe:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 8009102:	f893 3234 	ldrb.w	r3, [r3, #564]	; 0x234
      int pin;
      const gpio_pin_map *map = GPIO_MAP_get_pin_map();

      // debouncer
      bool any_changes = FALSE;
      for (pin = 0; pin < APP_CONFIG_PINS; pin++) {
 8009106:	3401      	adds	r4, #1
        } else {
          app.irq_debounce_map[pin].pin_active = pin_active;
          app.irq_debounce_map[pin].same_state = 0;
        }

        if (app.irq_cur_pin_active[pin] != (app.pin_state[pin] != PIN_INACTIVE)) {
 8009108:	3300      	adds	r3, #0
 800910a:	bf18      	it	ne
 800910c:	2301      	movne	r3, #1
          any_changes = TRUE;
 800910e:	429a      	cmp	r2, r3
 8009110:	bf18      	it	ne
 8009112:	2601      	movne	r6, #1
      int pin;
      const gpio_pin_map *map = GPIO_MAP_get_pin_map();

      // debouncer
      bool any_changes = FALSE;
      for (pin = 0; pin < APP_CONFIG_PINS; pin++) {
 8009114:	2c1a      	cmp	r4, #26
 8009116:	d1c9      	bne.n	80090ac <APP_timer+0x24>
          //print("pin %i trig\n", pin);
        }
      }

      // post change
      if (!app.dirty_gpio && any_changes) {
 8009118:	f895 31fe 	ldrb.w	r3, [r5, #510]	; 0x1fe
 800911c:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8009120:	b99b      	cbnz	r3, 800914a <APP_timer+0xc2>
 8009122:	b196      	cbz	r6, 800914a <APP_timer+0xc2>
        app.dirty_gpio = TRUE;
 8009124:	4b14      	ldr	r3, [pc, #80]	; (8009178 <APP_timer+0xf0>)
 8009126:	2201      	movs	r2, #1
        task *t = TASK_create(app_pins_dirty_msg, 0);
 8009128:	4814      	ldr	r0, [pc, #80]	; (800917c <APP_timer+0xf4>)
        }
      }

      // post change
      if (!app.dirty_gpio && any_changes) {
        app.dirty_gpio = TRUE;
 800912a:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
        task *t = TASK_create(app_pins_dirty_msg, 0);
 800912e:	f7f8 fdb9 	bl	8001ca4 <TASK_create>
        ASSERT(t);
 8009132:	4604      	mov	r4, r0
 8009134:	b920      	cbnz	r0, 8009140 <APP_timer+0xb8>
 8009136:	4812      	ldr	r0, [pc, #72]	; (8009180 <APP_timer+0xf8>)
 8009138:	f44f 715a 	mov.w	r1, #872	; 0x368
 800913c:	f7f7 fb50 	bl	80007e0 <SYS_assert>
        TASK_run(t, 0, NULL);
 8009140:	2100      	movs	r1, #0
 8009142:	4620      	mov	r0, r4
 8009144:	460a      	mov	r2, r1
 8009146:	f7f8 fe09 	bl	8001d5c <TASK_run>
      }
    }
#endif // CONFIG_ANNOYATRON
  }
  // led blink
  const gpio_pin_map *led = GPIO_MAP_get_led_map();
 800914a:	f001 f9f7 	bl	800a53c <GPIO_MAP_get_led_map>
 800914e:	4604      	mov	r4, r0
  if (SYS_get_time_ms() % 1000 > 0) {
 8009150:	f7f7 fa3c 	bl	80005cc <SYS_get_time_ms>
 8009154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009158:	fbb0 f2f3 	udiv	r2, r0, r3
 800915c:	fb02 0313 	mls	r3, r2, r3, r0
 8009160:	7861      	ldrb	r1, [r4, #1]
 8009162:	7820      	ldrb	r0, [r4, #0]
 8009164:	b11b      	cbz	r3, 800916e <APP_timer+0xe6>
    gpio_enable(led->port, led->pin);
#else
    gpio_disable(led->port, led->pin);
#endif
  }
}
 8009166:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  const gpio_pin_map *led = GPIO_MAP_get_led_map();
  if (SYS_get_time_ms() % 1000 > 0) {
#ifdef CONFIG_HY_TEST_BOARD
    gpio_disable(led->port, led->pin);
#else
    gpio_enable(led->port, led->pin);
 800916a:	f7f9 bc2d 	b.w	80029c8 <gpio_enable>
    gpio_enable(led->port, led->pin);
#else
    gpio_disable(led->port, led->pin);
#endif
  }
}
 800916e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
#endif
  } else {
#ifdef CONFIG_HY_TEST_BOARD
    gpio_enable(led->port, led->pin);
#else
    gpio_disable(led->port, led->pin);
 8009172:	f7f9 bc37 	b.w	80029e4 <gpio_disable>
 8009176:	bf00      	nop
 8009178:	200006ac 	.word	0x200006ac
 800917c:	08009895 	.word	0x08009895
 8009180:	08012459 	.word	0x08012459

08009184 <set_print_output>:
}

// redirected printing

void set_print_output(u8_t io) {
  print_io = io;
 8009184:	4b01      	ldr	r3, [pc, #4]	; (800918c <set_print_output+0x8>)
 8009186:	f883 03f1 	strb.w	r0, [r3, #1009]	; 0x3f1
 800918a:	4770      	bx	lr
 800918c:	200006ac 	.word	0x200006ac

08009190 <get_print_output>:
}

u8_t get_print_output(void) {
  return print_io;
 8009190:	4b01      	ldr	r3, [pc, #4]	; (8009198 <get_print_output+0x8>)
 8009192:	f893 03f1 	ldrb.w	r0, [r3, #1009]	; 0x3f1
}
 8009196:	4770      	bx	lr
 8009198:	200006ac 	.word	0x200006ac

0800919c <arcprint>:

void arcprint(const char* f, ...) {
 800919c:	b40f      	push	{r0, r1, r2, r3}
 800919e:	b507      	push	{r0, r1, r2, lr}
  va_list arg_p;
  va_start(arg_p, f);
  v_printf(print_io, f, arg_p);
 80091a0:	4b06      	ldr	r3, [pc, #24]	; (80091bc <arcprint+0x20>)

u8_t get_print_output(void) {
  return print_io;
}

void arcprint(const char* f, ...) {
 80091a2:	aa04      	add	r2, sp, #16
 80091a4:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list arg_p;
  va_start(arg_p, f);
  v_printf(print_io, f, arg_p);
 80091a8:	f893 03f1 	ldrb.w	r0, [r3, #1009]	; 0x3f1
  return print_io;
}

void arcprint(const char* f, ...) {
  va_list arg_p;
  va_start(arg_p, f);
 80091ac:	9201      	str	r2, [sp, #4]
  v_printf(print_io, f, arg_p);
 80091ae:	f7f7 fe5d 	bl	8000e6c <v_printf>
  va_end(arg_p);
}
 80091b2:	b003      	add	sp, #12
 80091b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80091b8:	b004      	add	sp, #16
 80091ba:	4770      	bx	lr
 80091bc:	200006ac 	.word	0x200006ac

080091c0 <APP_init>:
#endif // CONFIG_ANNOYATRON

/////////////////////////////////// IFC

volatile static bool app_init = FALSE;
void APP_init(void) {
 80091c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  memset(&app, 0, sizeof(app));
 80091c4:	4c07      	ldr	r4, [pc, #28]	; (80091e4 <APP_init+0x24>)
 80091c6:	2100      	movs	r1, #0
#endif // CONFIG_ANNOYATRON

/////////////////////////////////// IFC

volatile static bool app_init = FALSE;
void APP_init(void) {
 80091c8:	b087      	sub	sp, #28
  memset(&app, 0, sizeof(app));
 80091ca:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 80091ce:	4620      	mov	r0, r4
 80091d0:	f005 f8de 	bl	800e390 <memset>

  int res = FS_mount();
 80091d4:	f001 fa98 	bl	800a708 <FS_mount>
  if (res == NIFFS_OK) {
 80091d8:	4601      	mov	r1, r0
 80091da:	b928      	cbnz	r0, 80091e8 <APP_init+0x28>
    app.fs_mounted = TRUE;
 80091dc:	2301      	movs	r3, #1
 80091de:	f884 3282 	strb.w	r3, [r4, #642]	; 0x282
 80091e2:	e00c      	b.n	80091fe <APP_init+0x3e>
 80091e4:	200006ac 	.word	0x200006ac
  } else {
    DBG(D_APP, D_WARN, "could not mount fs - error %i\n", res);
 80091e8:	4bdb      	ldr	r3, [pc, #876]	; (8009558 <APP_init+0x398>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	079e      	lsls	r6, r3, #30
 80091ee:	d506      	bpl.n	80091fe <APP_init+0x3e>
 80091f0:	4bda      	ldr	r3, [pc, #872]	; (800955c <APP_init+0x39c>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2b02      	cmp	r3, #2
 80091f6:	d802      	bhi.n	80091fe <APP_init+0x3e>
 80091f8:	48d9      	ldr	r0, [pc, #868]	; (8009560 <APP_init+0x3a0>)
 80091fa:	f7ff ffcf 	bl	800919c <arcprint>
  }

#ifndef CONFIG_ANNOYATRON
  if (app.fs_mounted) {
 80091fe:	f894 3282 	ldrb.w	r3, [r4, #642]	; 0x282
 8009202:	4dd8      	ldr	r5, [pc, #864]	; (8009564 <APP_init+0x3a4>)
 8009204:	2b00      	cmp	r3, #0
 8009206:	f000 812c 	beq.w	8009462 <APP_init+0x2a2>
    res = FS_load_config("default");
 800920a:	48d7      	ldr	r0, [pc, #860]	; (8009568 <APP_init+0x3a8>)
 800920c:	f001 fb8a 	bl	800a924 <FS_load_config>
    if (res == ERR_NIFFS_FILE_NOT_FOUND) {
 8009210:	4bd6      	ldr	r3, [pc, #856]	; (800956c <APP_init+0x3ac>)
    DBG(D_APP, D_WARN, "could not mount fs - error %i\n", res);
  }

#ifndef CONFIG_ANNOYATRON
  if (app.fs_mounted) {
    res = FS_load_config("default");
 8009212:	4601      	mov	r1, r0
    if (res == ERR_NIFFS_FILE_NOT_FOUND) {
 8009214:	4298      	cmp	r0, r3
 8009216:	f040 8118 	bne.w	800944a <APP_init+0x28a>

static void app_config_default(void) {
  // default config
  app.debounce_valid_cycles = 8;
  app.mouse_delta = 7;
  app.acc_pos_speed = 4;
 800921a:	2604      	movs	r6, #4
/////////////////////////////////// DEF CFG

static void app_config_default(void) {
  // default config
  app.debounce_valid_cycles = 8;
  app.mouse_delta = 7;
 800921c:	2707      	movs	r7, #7

/////////////////////////////////// DEF CFG

static void app_config_default(void) {
  // default config
  app.debounce_valid_cycles = 8;
 800921e:	f04f 0808 	mov.w	r8, #8
  app.mouse_delta = 7;
  app.acc_pos_speed = 4;
 8009222:	f8a5 61f8 	strh.w	r6, [r5, #504]	; 0x1f8
  app.acc_wheel_speed = 4;
 8009226:	f8a5 61fa 	strh.w	r6, [r5, #506]	; 0x1fa
  app.joystick_delta = 7;
  app.acc_joystick_speed = 4;
 800922a:	f8a5 61fc 	strh.w	r6, [r5, #508]	; 0x1fc

/////////////////////////////////// DEF CFG

static void app_config_default(void) {
  // default config
  app.debounce_valid_cycles = 8;
 800922e:	f885 81ee 	strb.w	r8, [r5, #494]	; 0x1ee
  app.mouse_delta = 7;
 8009232:	f8c5 71f0 	str.w	r7, [r5, #496]	; 0x1f0
  app.acc_pos_speed = 4;
  app.acc_wheel_speed = 4;
  app.joystick_delta = 7;
 8009236:	f8c5 71f4 	str.w	r7, [r5, #500]	; 0x1f4
  app.acc_joystick_speed = 4;
  memset(&app.pin_config, 0x00, sizeof(app.pin_config));
 800923a:	4628      	mov	r0, r5
 800923c:	2100      	movs	r1, #0

  def_config cfg;
  memset(&cfg, 0x00, sizeof(def_config));
 800923e:	2513      	movs	r5, #19
  app.mouse_delta = 7;
  app.acc_pos_speed = 4;
  app.acc_wheel_speed = 4;
  app.joystick_delta = 7;
  app.acc_joystick_speed = 4;
  memset(&app.pin_config, 0x00, sizeof(app.pin_config));
 8009240:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
 8009244:	f005 f8a4 	bl	800e390 <memset>

  def_config cfg;
  memset(&cfg, 0x00, sizeof(def_config));
 8009248:	2100      	movs	r1, #0
 800924a:	462a      	mov	r2, r5
 800924c:	eb0d 0006 	add.w	r0, sp, r6
 8009250:	f005 f89e 	bl	800e390 <memset>

  // pin1 = JOYSTICK1_Y(-127) UP
  cfg.pin = 1;
 8009254:	2301      	movs	r3, #1
  cfg.id[0].type = HID_ID_TYPE_JOYSTICK;
  cfg.id[0].joy.joystick_code = JOYSTICK1_Y;
 8009256:	f04f 0203 	mov.w	r2, #3
 800925a:	f363 0286 	bfi	r2, r3, #2, #5
  cfg.id[0].joy.joystick_sign = 1;
 800925e:	f062 027f 	orn	r2, r2, #127	; 0x7f
  cfg.id[0].joy.joystick_data = 127;
  cfg.id[1].type = HID_ID_TYPE_KEYBOARD;
  cfg.id[1].kb.kb_code  = KC_UP;
  APP_cfg_set_pin(&cfg);
 8009262:	eb0d 0006 	add.w	r0, sp, r6

  def_config cfg;
  memset(&cfg, 0x00, sizeof(def_config));

  // pin1 = JOYSTICK1_Y(-127) UP
  cfg.pin = 1;
 8009266:	f88d 3004 	strb.w	r3, [sp, #4]
  cfg.id[0].type = HID_ID_TYPE_JOYSTICK;
  cfg.id[0].joy.joystick_code = JOYSTICK1_Y;
  cfg.id[0].joy.joystick_sign = 1;
 800926a:	f88d 2007 	strb.w	r2, [sp, #7]
  cfg.id[0].joy.joystick_data = 127;
  cfg.id[1].type = HID_ID_TYPE_KEYBOARD;
 800926e:	f88d 3009 	strb.w	r3, [sp, #9]
  // pin1 = JOYSTICK1_Y(-127) UP
  cfg.pin = 1;
  cfg.id[0].type = HID_ID_TYPE_JOYSTICK;
  cfg.id[0].joy.joystick_code = JOYSTICK1_Y;
  cfg.id[0].joy.joystick_sign = 1;
  cfg.id[0].joy.joystick_data = 127;
 8009272:	22fe      	movs	r2, #254	; 0xfe
  cfg.id[1].type = HID_ID_TYPE_KEYBOARD;
  cfg.id[1].kb.kb_code  = KC_UP;
 8009274:	2352      	movs	r3, #82	; 0x52
  // pin1 = JOYSTICK1_Y(-127) UP
  cfg.pin = 1;
  cfg.id[0].type = HID_ID_TYPE_JOYSTICK;
  cfg.id[0].joy.joystick_code = JOYSTICK1_Y;
  cfg.id[0].joy.joystick_sign = 1;
  cfg.id[0].joy.joystick_data = 127;
 8009276:	f88d 2008 	strb.w	r2, [sp, #8]
  cfg.id[1].type = HID_ID_TYPE_KEYBOARD;
  cfg.id[1].kb.kb_code  = KC_UP;
 800927a:	f88d 300a 	strb.w	r3, [sp, #10]
  APP_cfg_set_pin(&cfg);
 800927e:	f7ff fe63 	bl	8008f48 <APP_cfg_set_pin>
  // pin2 = JOYSTICK1_Y(127) DOWN
  cfg.pin = 2;
  cfg.id[0].joy.joystick_sign = 0;
 8009282:	f89d 3007 	ldrb.w	r3, [sp, #7]
  cfg.id[1].kb.kb_code  = KC_DOWN;
  APP_cfg_set_pin(&cfg);
 8009286:	eb0d 0006 	add.w	r0, sp, r6
  cfg.id[1].type = HID_ID_TYPE_KEYBOARD;
  cfg.id[1].kb.kb_code  = KC_UP;
  APP_cfg_set_pin(&cfg);
  // pin2 = JOYSTICK1_Y(127) DOWN
  cfg.pin = 2;
  cfg.id[0].joy.joystick_sign = 0;
 800928a:	f36f 13c7 	bfc	r3, #7, #1
  cfg.id[0].joy.joystick_data = 127;
  cfg.id[1].type = HID_ID_TYPE_KEYBOARD;
  cfg.id[1].kb.kb_code  = KC_UP;
  APP_cfg_set_pin(&cfg);
  // pin2 = JOYSTICK1_Y(127) DOWN
  cfg.pin = 2;
 800928e:	f04f 0b02 	mov.w	fp, #2
  cfg.id[0].joy.joystick_sign = 0;
 8009292:	f88d 3007 	strb.w	r3, [sp, #7]
  cfg.id[1].kb.kb_code  = KC_DOWN;
 8009296:	2351      	movs	r3, #81	; 0x51
 8009298:	f88d 300a 	strb.w	r3, [sp, #10]
  cfg.id[0].joy.joystick_data = 127;
  cfg.id[1].type = HID_ID_TYPE_KEYBOARD;
  cfg.id[1].kb.kb_code  = KC_UP;
  APP_cfg_set_pin(&cfg);
  // pin2 = JOYSTICK1_Y(127) DOWN
  cfg.pin = 2;
 800929c:	f88d b004 	strb.w	fp, [sp, #4]
  cfg.id[0].joy.joystick_sign = 0;
  cfg.id[1].kb.kb_code  = KC_DOWN;
  APP_cfg_set_pin(&cfg);
 80092a0:	f7ff fe52 	bl	8008f48 <APP_cfg_set_pin>
  // pin3 = JOYSTICK1_X(-127) LEFT
  cfg.pin = 3;
  cfg.id[0].joy.joystick_code = JOYSTICK1_X;
 80092a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
  cfg.id[0].joy.joystick_sign = 1;
  cfg.id[1].kb.kb_code  = KC_LEFT;
  APP_cfg_set_pin(&cfg);
 80092a8:	eb0d 0006 	add.w	r0, sp, r6
  cfg.id[1].kb.kb_code  = KC_DOWN;
  APP_cfg_set_pin(&cfg);
  // pin3 = JOYSTICK1_X(-127) LEFT
  cfg.pin = 3;
  cfg.id[0].joy.joystick_code = JOYSTICK1_X;
  cfg.id[0].joy.joystick_sign = 1;
 80092ac:	f003 0383 	and.w	r3, r3, #131	; 0x83
 80092b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  cfg.pin = 2;
  cfg.id[0].joy.joystick_sign = 0;
  cfg.id[1].kb.kb_code  = KC_DOWN;
  APP_cfg_set_pin(&cfg);
  // pin3 = JOYSTICK1_X(-127) LEFT
  cfg.pin = 3;
 80092b4:	f04f 0a03 	mov.w	sl, #3
  cfg.id[0].joy.joystick_code = JOYSTICK1_X;
  cfg.id[0].joy.joystick_sign = 1;
 80092b8:	f88d 3007 	strb.w	r3, [sp, #7]
  cfg.id[1].kb.kb_code  = KC_LEFT;
 80092bc:	2350      	movs	r3, #80	; 0x50
 80092be:	f88d 300a 	strb.w	r3, [sp, #10]
  cfg.pin = 2;
  cfg.id[0].joy.joystick_sign = 0;
  cfg.id[1].kb.kb_code  = KC_DOWN;
  APP_cfg_set_pin(&cfg);
  // pin3 = JOYSTICK1_X(-127) LEFT
  cfg.pin = 3;
 80092c2:	f88d a004 	strb.w	sl, [sp, #4]
  cfg.id[0].joy.joystick_code = JOYSTICK1_X;
  cfg.id[0].joy.joystick_sign = 1;
  cfg.id[1].kb.kb_code  = KC_LEFT;
  APP_cfg_set_pin(&cfg);
 80092c6:	f7ff fe3f 	bl	8008f48 <APP_cfg_set_pin>
  // pin4 = JOYSTICK1_X(127) RIGHT
  cfg.pin = 4;
  cfg.id[0].joy.joystick_sign = 0;
 80092ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
  cfg.id[1].kb.kb_code  = KC_RIGHT;
  APP_cfg_set_pin(&cfg);
 80092ce:	eb0d 0006 	add.w	r0, sp, r6
  cfg.id[0].joy.joystick_sign = 1;
  cfg.id[1].kb.kb_code  = KC_LEFT;
  APP_cfg_set_pin(&cfg);
  // pin4 = JOYSTICK1_X(127) RIGHT
  cfg.pin = 4;
  cfg.id[0].joy.joystick_sign = 0;
 80092d2:	f36f 13c7 	bfc	r3, #7, #1
 80092d6:	f88d 3007 	strb.w	r3, [sp, #7]
  cfg.id[1].kb.kb_code  = KC_RIGHT;
 80092da:	234f      	movs	r3, #79	; 0x4f
  cfg.id[0].joy.joystick_code = JOYSTICK1_X;
  cfg.id[0].joy.joystick_sign = 1;
  cfg.id[1].kb.kb_code  = KC_LEFT;
  APP_cfg_set_pin(&cfg);
  // pin4 = JOYSTICK1_X(127) RIGHT
  cfg.pin = 4;
 80092dc:	f88d 6004 	strb.w	r6, [sp, #4]
  cfg.id[0].joy.joystick_sign = 0;
  cfg.id[1].kb.kb_code  = KC_RIGHT;
 80092e0:	f88d 300a 	strb.w	r3, [sp, #10]
  APP_cfg_set_pin(&cfg);
 80092e4:	f7ff fe30 	bl	8008f48 <APP_cfg_set_pin>
  cfg.id[1].type = HID_ID_TYPE_NONE;
 80092e8:	f89d 3009 	ldrb.w	r3, [sp, #9]
  // pin4 = JOYSTICK1_BUTTON1
  cfg.pin = 5;
  cfg.id[0].joy.joystick_code = JOYSTICK1_BUTTON1;
  APP_cfg_set_pin(&cfg);
 80092ec:	eb0d 0006 	add.w	r0, sp, r6
  // pin4 = JOYSTICK1_X(127) RIGHT
  cfg.pin = 4;
  cfg.id[0].joy.joystick_sign = 0;
  cfg.id[1].kb.kb_code  = KC_RIGHT;
  APP_cfg_set_pin(&cfg);
  cfg.id[1].type = HID_ID_TYPE_NONE;
 80092f0:	f36f 0301 	bfc	r3, #0, #2
 80092f4:	f88d 3009 	strb.w	r3, [sp, #9]
  // pin4 = JOYSTICK1_BUTTON1
  cfg.pin = 5;
  cfg.id[0].joy.joystick_code = JOYSTICK1_BUTTON1;
 80092f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
  cfg.id[0].joy.joystick_sign = 0;
  cfg.id[1].kb.kb_code  = KC_RIGHT;
  APP_cfg_set_pin(&cfg);
  cfg.id[1].type = HID_ID_TYPE_NONE;
  // pin4 = JOYSTICK1_BUTTON1
  cfg.pin = 5;
 80092fc:	f04f 0905 	mov.w	r9, #5
  cfg.id[0].joy.joystick_code = JOYSTICK1_BUTTON1;
 8009300:	f36b 0386 	bfi	r3, fp, #2, #5
 8009304:	f88d 3007 	strb.w	r3, [sp, #7]
  cfg.id[0].joy.joystick_sign = 0;
  cfg.id[1].kb.kb_code  = KC_RIGHT;
  APP_cfg_set_pin(&cfg);
  cfg.id[1].type = HID_ID_TYPE_NONE;
  // pin4 = JOYSTICK1_BUTTON1
  cfg.pin = 5;
 8009308:	f88d 9004 	strb.w	r9, [sp, #4]
  cfg.id[0].joy.joystick_code = JOYSTICK1_BUTTON1;
  APP_cfg_set_pin(&cfg);
 800930c:	f7ff fe1c 	bl	8008f48 <APP_cfg_set_pin>
  // pin5 = JOYSTICK1_BUTTON2
  cfg.pin = 6;
 8009310:	2306      	movs	r3, #6
 8009312:	f88d 3004 	strb.w	r3, [sp, #4]
  cfg.id[0].joy.joystick_code = JOYSTICK1_BUTTON2;
 8009316:	f89d 3007 	ldrb.w	r3, [sp, #7]
  APP_cfg_set_pin(&cfg);
 800931a:	eb0d 0006 	add.w	r0, sp, r6
  cfg.pin = 5;
  cfg.id[0].joy.joystick_code = JOYSTICK1_BUTTON1;
  APP_cfg_set_pin(&cfg);
  // pin5 = JOYSTICK1_BUTTON2
  cfg.pin = 6;
  cfg.id[0].joy.joystick_code = JOYSTICK1_BUTTON2;
 800931e:	f36a 0386 	bfi	r3, sl, #2, #5
 8009322:	f88d 3007 	strb.w	r3, [sp, #7]
  APP_cfg_set_pin(&cfg);
 8009326:	f7ff fe0f 	bl	8008f48 <APP_cfg_set_pin>
  // pin6 = JOYSTICK1_BUTTON3
  cfg.pin = 7;
  cfg.id[0].joy.joystick_code = JOYSTICK1_BUTTON3;
 800932a:	f89d 3007 	ldrb.w	r3, [sp, #7]
  APP_cfg_set_pin(&cfg);
 800932e:	eb0d 0006 	add.w	r0, sp, r6
  cfg.pin = 6;
  cfg.id[0].joy.joystick_code = JOYSTICK1_BUTTON2;
  APP_cfg_set_pin(&cfg);
  // pin6 = JOYSTICK1_BUTTON3
  cfg.pin = 7;
  cfg.id[0].joy.joystick_code = JOYSTICK1_BUTTON3;
 8009332:	f366 0386 	bfi	r3, r6, #2, #5
 8009336:	f88d 3007 	strb.w	r3, [sp, #7]
  // pin5 = JOYSTICK1_BUTTON2
  cfg.pin = 6;
  cfg.id[0].joy.joystick_code = JOYSTICK1_BUTTON2;
  APP_cfg_set_pin(&cfg);
  // pin6 = JOYSTICK1_BUTTON3
  cfg.pin = 7;
 800933a:	f88d 7004 	strb.w	r7, [sp, #4]
  cfg.id[0].joy.joystick_code = JOYSTICK1_BUTTON3;
  APP_cfg_set_pin(&cfg);
 800933e:	f7ff fe03 	bl	8008f48 <APP_cfg_set_pin>
  // pin7 = JOYSTICK1_BUTTON4
  cfg.pin = 8;
  cfg.id[0].joy.joystick_code = JOYSTICK1_BUTTON4;
 8009342:	f89d 3007 	ldrb.w	r3, [sp, #7]
  APP_cfg_set_pin(&cfg);
 8009346:	eb0d 0006 	add.w	r0, sp, r6
  cfg.pin = 7;
  cfg.id[0].joy.joystick_code = JOYSTICK1_BUTTON3;
  APP_cfg_set_pin(&cfg);
  // pin7 = JOYSTICK1_BUTTON4
  cfg.pin = 8;
  cfg.id[0].joy.joystick_code = JOYSTICK1_BUTTON4;
 800934a:	f369 0386 	bfi	r3, r9, #2, #5
 800934e:	f88d 3007 	strb.w	r3, [sp, #7]
  // pin6 = JOYSTICK1_BUTTON3
  cfg.pin = 7;
  cfg.id[0].joy.joystick_code = JOYSTICK1_BUTTON3;
  APP_cfg_set_pin(&cfg);
  // pin7 = JOYSTICK1_BUTTON4
  cfg.pin = 8;
 8009352:	f88d 8004 	strb.w	r8, [sp, #4]
  cfg.id[0].joy.joystick_code = JOYSTICK1_BUTTON4;
  APP_cfg_set_pin(&cfg);
 8009356:	f7ff fdf7 	bl	8008f48 <APP_cfg_set_pin>

  cfg.id[0].joy.joystick_code = JOYSTICK2_Y;
 800935a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800935e:	2611      	movs	r6, #17
 8009360:	f366 0386 	bfi	r3, r6, #2, #5
  cfg.id[0].joy.joystick_sign = 1;
 8009364:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009368:	f88d 3007 	strb.w	r3, [sp, #7]
  cfg.id[0].joy.joystick_data = 127;
 800936c:	f89d 3008 	ldrb.w	r3, [sp, #8]
  // pin14 = JOYSTICK2_Y(-127)
  cfg.pin = 14;
  APP_cfg_set_pin(&cfg);
 8009370:	a801      	add	r0, sp, #4
  cfg.id[0].joy.joystick_code = JOYSTICK1_BUTTON4;
  APP_cfg_set_pin(&cfg);

  cfg.id[0].joy.joystick_code = JOYSTICK2_Y;
  cfg.id[0].joy.joystick_sign = 1;
  cfg.id[0].joy.joystick_data = 127;
 8009372:	f043 03fe 	orr.w	r3, r3, #254	; 0xfe
 8009376:	f88d 3008 	strb.w	r3, [sp, #8]
  // pin14 = JOYSTICK2_Y(-127)
  cfg.pin = 14;
 800937a:	230e      	movs	r3, #14
 800937c:	f88d 3004 	strb.w	r3, [sp, #4]
  APP_cfg_set_pin(&cfg);
 8009380:	f7ff fde2 	bl	8008f48 <APP_cfg_set_pin>
  // pin15 = JOYSTICK2_Y(127)
  cfg.pin = 15;
 8009384:	230f      	movs	r3, #15
 8009386:	f88d 3004 	strb.w	r3, [sp, #4]
  cfg.id[0].joy.joystick_sign = 0;
 800938a:	f89d 3007 	ldrb.w	r3, [sp, #7]
  APP_cfg_set_pin(&cfg);
 800938e:	a801      	add	r0, sp, #4
  // pin14 = JOYSTICK2_Y(-127)
  cfg.pin = 14;
  APP_cfg_set_pin(&cfg);
  // pin15 = JOYSTICK2_Y(127)
  cfg.pin = 15;
  cfg.id[0].joy.joystick_sign = 0;
 8009390:	f36f 13c7 	bfc	r3, #7, #1
 8009394:	f88d 3007 	strb.w	r3, [sp, #7]
  APP_cfg_set_pin(&cfg);
 8009398:	f7ff fdd6 	bl	8008f48 <APP_cfg_set_pin>
  // pin16 = JOYSTICK2_X(-127)
  cfg.pin = 16;
  cfg.id[0].joy.joystick_code = JOYSTICK2_X;
 800939c:	f89d 3007 	ldrb.w	r3, [sp, #7]
  // pin15 = JOYSTICK2_Y(127)
  cfg.pin = 15;
  cfg.id[0].joy.joystick_sign = 0;
  APP_cfg_set_pin(&cfg);
  // pin16 = JOYSTICK2_X(-127)
  cfg.pin = 16;
 80093a0:	2210      	movs	r2, #16
  cfg.id[0].joy.joystick_code = JOYSTICK2_X;
 80093a2:	f362 0386 	bfi	r3, r2, #2, #5
  cfg.id[0].joy.joystick_sign = 1;
 80093a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
  APP_cfg_set_pin(&cfg);
 80093aa:	a801      	add	r0, sp, #4
  // pin15 = JOYSTICK2_Y(127)
  cfg.pin = 15;
  cfg.id[0].joy.joystick_sign = 0;
  APP_cfg_set_pin(&cfg);
  // pin16 = JOYSTICK2_X(-127)
  cfg.pin = 16;
 80093ac:	f88d 2004 	strb.w	r2, [sp, #4]
  cfg.id[0].joy.joystick_code = JOYSTICK2_X;
  cfg.id[0].joy.joystick_sign = 1;
 80093b0:	f88d 3007 	strb.w	r3, [sp, #7]
  APP_cfg_set_pin(&cfg);
 80093b4:	f7ff fdc8 	bl	8008f48 <APP_cfg_set_pin>
  // pin17 = JOYSTICK2_X(127)
  cfg.pin = 17;
  cfg.id[0].joy.joystick_sign = 0;
 80093b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
  APP_cfg_set_pin(&cfg);
 80093bc:	a801      	add	r0, sp, #4
  cfg.id[0].joy.joystick_code = JOYSTICK2_X;
  cfg.id[0].joy.joystick_sign = 1;
  APP_cfg_set_pin(&cfg);
  // pin17 = JOYSTICK2_X(127)
  cfg.pin = 17;
  cfg.id[0].joy.joystick_sign = 0;
 80093be:	f36f 13c7 	bfc	r3, #7, #1
 80093c2:	f88d 3007 	strb.w	r3, [sp, #7]
  cfg.pin = 16;
  cfg.id[0].joy.joystick_code = JOYSTICK2_X;
  cfg.id[0].joy.joystick_sign = 1;
  APP_cfg_set_pin(&cfg);
  // pin17 = JOYSTICK2_X(127)
  cfg.pin = 17;
 80093c6:	f88d 6004 	strb.w	r6, [sp, #4]
  cfg.id[0].joy.joystick_sign = 0;
  APP_cfg_set_pin(&cfg);
 80093ca:	f7ff fdbd 	bl	8008f48 <APP_cfg_set_pin>
  // pin18 = JOYSTICK2_BUTTON1
  cfg.pin = 18;
  cfg.id[0].joy.joystick_code = JOYSTICK2_BUTTON1;
 80093ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
  // pin17 = JOYSTICK2_X(127)
  cfg.pin = 17;
  cfg.id[0].joy.joystick_sign = 0;
  APP_cfg_set_pin(&cfg);
  // pin18 = JOYSTICK2_BUTTON1
  cfg.pin = 18;
 80093d2:	2212      	movs	r2, #18
  cfg.id[0].joy.joystick_code = JOYSTICK2_BUTTON1;
 80093d4:	f362 0386 	bfi	r3, r2, #2, #5
  APP_cfg_set_pin(&cfg);
 80093d8:	a801      	add	r0, sp, #4
  // pin17 = JOYSTICK2_X(127)
  cfg.pin = 17;
  cfg.id[0].joy.joystick_sign = 0;
  APP_cfg_set_pin(&cfg);
  // pin18 = JOYSTICK2_BUTTON1
  cfg.pin = 18;
 80093da:	f88d 2004 	strb.w	r2, [sp, #4]
  cfg.id[0].joy.joystick_code = JOYSTICK2_BUTTON1;
 80093de:	f88d 3007 	strb.w	r3, [sp, #7]
  APP_cfg_set_pin(&cfg);
 80093e2:	f7ff fdb1 	bl	8008f48 <APP_cfg_set_pin>
  // pin19 = JOYSTICK2_BUTTON2
  cfg.pin = 19;
  cfg.id[0].joy.joystick_code = JOYSTICK2_BUTTON2;
 80093e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
  APP_cfg_set_pin(&cfg);
 80093ea:	a801      	add	r0, sp, #4
  cfg.pin = 18;
  cfg.id[0].joy.joystick_code = JOYSTICK2_BUTTON1;
  APP_cfg_set_pin(&cfg);
  // pin19 = JOYSTICK2_BUTTON2
  cfg.pin = 19;
  cfg.id[0].joy.joystick_code = JOYSTICK2_BUTTON2;
 80093ec:	f365 0386 	bfi	r3, r5, #2, #5
  // pin18 = JOYSTICK2_BUTTON1
  cfg.pin = 18;
  cfg.id[0].joy.joystick_code = JOYSTICK2_BUTTON1;
  APP_cfg_set_pin(&cfg);
  // pin19 = JOYSTICK2_BUTTON2
  cfg.pin = 19;
 80093f0:	f88d 5004 	strb.w	r5, [sp, #4]
  cfg.id[0].joy.joystick_code = JOYSTICK2_BUTTON2;
 80093f4:	f88d 3007 	strb.w	r3, [sp, #7]
  APP_cfg_set_pin(&cfg);
 80093f8:	f7ff fda6 	bl	8008f48 <APP_cfg_set_pin>
  // pin20 = JOYSTICK2_BUTTON3
  cfg.pin = 20;
  cfg.id[0].joy.joystick_code = JOYSTICK2_BUTTON3;
 80093fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
  // pin19 = JOYSTICK2_BUTTON2
  cfg.pin = 19;
  cfg.id[0].joy.joystick_code = JOYSTICK2_BUTTON2;
  APP_cfg_set_pin(&cfg);
  // pin20 = JOYSTICK2_BUTTON3
  cfg.pin = 20;
 8009400:	2214      	movs	r2, #20
  cfg.id[0].joy.joystick_code = JOYSTICK2_BUTTON3;
 8009402:	f362 0386 	bfi	r3, r2, #2, #5
  APP_cfg_set_pin(&cfg);
 8009406:	a801      	add	r0, sp, #4
  // pin19 = JOYSTICK2_BUTTON2
  cfg.pin = 19;
  cfg.id[0].joy.joystick_code = JOYSTICK2_BUTTON2;
  APP_cfg_set_pin(&cfg);
  // pin20 = JOYSTICK2_BUTTON3
  cfg.pin = 20;
 8009408:	f88d 2004 	strb.w	r2, [sp, #4]
  cfg.id[0].joy.joystick_code = JOYSTICK2_BUTTON3;
 800940c:	f88d 3007 	strb.w	r3, [sp, #7]
  APP_cfg_set_pin(&cfg);
 8009410:	f7ff fd9a 	bl	8008f48 <APP_cfg_set_pin>
  // pin21 = JOYSTICK2_BUTTON4
  cfg.pin = 21;
  cfg.id[0].joy.joystick_code = JOYSTICK2_BUTTON4;
 8009414:	f89d 3007 	ldrb.w	r3, [sp, #7]
  // pin20 = JOYSTICK2_BUTTON3
  cfg.pin = 20;
  cfg.id[0].joy.joystick_code = JOYSTICK2_BUTTON3;
  APP_cfg_set_pin(&cfg);
  // pin21 = JOYSTICK2_BUTTON4
  cfg.pin = 21;
 8009418:	2215      	movs	r2, #21
  cfg.id[0].joy.joystick_code = JOYSTICK2_BUTTON4;
 800941a:	f362 0386 	bfi	r3, r2, #2, #5
  APP_cfg_set_pin(&cfg);
 800941e:	a801      	add	r0, sp, #4
  cfg.pin = 20;
  cfg.id[0].joy.joystick_code = JOYSTICK2_BUTTON3;
  APP_cfg_set_pin(&cfg);
  // pin21 = JOYSTICK2_BUTTON4
  cfg.pin = 21;
  cfg.id[0].joy.joystick_code = JOYSTICK2_BUTTON4;
 8009420:	f88d 3007 	strb.w	r3, [sp, #7]
  // pin20 = JOYSTICK2_BUTTON3
  cfg.pin = 20;
  cfg.id[0].joy.joystick_code = JOYSTICK2_BUTTON3;
  APP_cfg_set_pin(&cfg);
  // pin21 = JOYSTICK2_BUTTON4
  cfg.pin = 21;
 8009424:	f88d 2004 	strb.w	r2, [sp, #4]
  cfg.id[0].joy.joystick_code = JOYSTICK2_BUTTON4;
  APP_cfg_set_pin(&cfg);
 8009428:	f7ff fd8e 	bl	8008f48 <APP_cfg_set_pin>
#ifndef CONFIG_ANNOYATRON
  if (app.fs_mounted) {
    res = FS_load_config("default");
    if (res == ERR_NIFFS_FILE_NOT_FOUND) {
      app_config_default();
      DBG(D_APP, D_INFO, "no default config found, saving factory default");
 800942c:	4b4a      	ldr	r3, [pc, #296]	; (8009558 <APP_init+0x398>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	079d      	lsls	r5, r3, #30
 8009432:	d506      	bpl.n	8009442 <APP_init+0x282>
 8009434:	4b49      	ldr	r3, [pc, #292]	; (800955c <APP_init+0x39c>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2b01      	cmp	r3, #1
 800943a:	d802      	bhi.n	8009442 <APP_init+0x282>
 800943c:	484c      	ldr	r0, [pc, #304]	; (8009570 <APP_init+0x3b0>)
 800943e:	f7ff fead 	bl	800919c <arcprint>
      res = FS_save_config("default");
 8009442:	4849      	ldr	r0, [pc, #292]	; (8009568 <APP_init+0x3a8>)
 8009444:	f001 f9ec 	bl	800a820 <FS_save_config>
 8009448:	4601      	mov	r1, r0
    }

    if (res != NIFFS_OK) {
 800944a:	b151      	cbz	r1, 8009462 <APP_init+0x2a2>
      DBG(D_APP, D_WARN, "fs error %i\n", res);
 800944c:	4b42      	ldr	r3, [pc, #264]	; (8009558 <APP_init+0x398>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	0798      	lsls	r0, r3, #30
 8009452:	d506      	bpl.n	8009462 <APP_init+0x2a2>
 8009454:	4b41      	ldr	r3, [pc, #260]	; (800955c <APP_init+0x39c>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	2b02      	cmp	r3, #2
 800945a:	d802      	bhi.n	8009462 <APP_init+0x2a2>
 800945c:	4845      	ldr	r0, [pc, #276]	; (8009574 <APP_init+0x3b4>)
 800945e:	f7ff fe9d 	bl	800919c <arcprint>
    }
  }

  USB_ARC_set_kb_callback(app_kb_usb_cts_irq);
 8009462:	4845      	ldr	r0, [pc, #276]	; (8009578 <APP_init+0x3b8>)
 8009464:	f002 f87e 	bl	800b564 <USB_ARC_set_kb_callback>
  USB_ARC_set_mouse_callback(app_mouse_usb_cts_irq);
 8009468:	4844      	ldr	r0, [pc, #272]	; (800957c <APP_init+0x3bc>)
 800946a:	f002 f881 	bl	800b570 <USB_ARC_set_mouse_callback>
  USB_ARC_set_joystick_callback(app_joystick_usb_cts_irq);
 800946e:	4844      	ldr	r0, [pc, #272]	; (8009580 <APP_init+0x3c0>)
  // keyboard device
#ifndef CONFIG_ANNOYATRON
  app.devs[DEV_KB].type = HID_ID_TYPE_KEYBOARD;
  app.devs[DEV_KB].index = 0;
  app.devs[DEV_KB].construct_report = kb_construct_report;
  app.devs[DEV_KB].report = &app.kb_report;
 8009470:	4d44      	ldr	r5, [pc, #272]	; (8009584 <APP_init+0x3c4>)
    }
  }

  USB_ARC_set_kb_callback(app_kb_usb_cts_irq);
  USB_ARC_set_mouse_callback(app_mouse_usb_cts_irq);
  USB_ARC_set_joystick_callback(app_joystick_usb_cts_irq);
 8009472:	f002 f883 	bl	800b57c <USB_ARC_set_joystick_callback>
#endif // CONFIG_ANNOYATRON

  USB_ARC_start();
 8009476:	f002 f947 	bl	800b708 <USB_ARC_start>

  // keyboard device
#ifndef CONFIG_ANNOYATRON
  app.devs[DEV_KB].type = HID_ID_TYPE_KEYBOARD;
  app.devs[DEV_KB].index = 0;
  app.devs[DEV_KB].construct_report = kb_construct_report;
 800947a:	4b43      	ldr	r3, [pc, #268]	; (8009588 <APP_init+0x3c8>)

  // setup devices

  // keyboard device
#ifndef CONFIG_ANNOYATRON
  app.devs[DEV_KB].type = HID_ID_TYPE_KEYBOARD;
 800947c:	2601      	movs	r6, #1
  app.devs[DEV_KB].index = 0;
  app.devs[DEV_KB].construct_report = kb_construct_report;
 800947e:	f8c4 32c4 	str.w	r3, [r4, #708]	; 0x2c4
  app.devs[DEV_KB].report = &app.kb_report;
  app.devs[DEV_KB].report_prev = &app.kb_report_prev;
 8009482:	f105 0322 	add.w	r3, r5, #34	; 0x22
  // setup devices

  // keyboard device
#ifndef CONFIG_ANNOYATRON
  app.devs[DEV_KB].type = HID_ID_TYPE_KEYBOARD;
  app.devs[DEV_KB].index = 0;
 8009486:	f04f 0800 	mov.w	r8, #0
  app.devs[DEV_KB].construct_report = kb_construct_report;
  app.devs[DEV_KB].report = &app.kb_report;
  app.devs[DEV_KB].report_prev = &app.kb_report_prev;
 800948a:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
  app.devs[DEV_KB].report_len = sizeof(app.kb_report);
  app.devs[DEV_KB].report_filter = TRUE;
  app.devs[DEV_KB].timer_task = TASK_create(app_device_timer_task, TASK_STATIC);
 800948e:	2104      	movs	r1, #4
  app.devs[DEV_KB].type = HID_ID_TYPE_KEYBOARD;
  app.devs[DEV_KB].index = 0;
  app.devs[DEV_KB].construct_report = kb_construct_report;
  app.devs[DEV_KB].report = &app.kb_report;
  app.devs[DEV_KB].report_prev = &app.kb_report_prev;
  app.devs[DEV_KB].report_len = sizeof(app.kb_report);
 8009490:	2322      	movs	r3, #34	; 0x22
  app.devs[DEV_KB].report_filter = TRUE;
  app.devs[DEV_KB].timer_task = TASK_create(app_device_timer_task, TASK_STATIC);
 8009492:	483e      	ldr	r0, [pc, #248]	; (800958c <APP_init+0x3cc>)
  // setup devices

  // keyboard device
#ifndef CONFIG_ANNOYATRON
  app.devs[DEV_KB].type = HID_ID_TYPE_KEYBOARD;
  app.devs[DEV_KB].index = 0;
 8009494:	f884 8285 	strb.w	r8, [r4, #645]	; 0x285
  app.devs[DEV_KB].construct_report = kb_construct_report;
  app.devs[DEV_KB].report = &app.kb_report;
 8009498:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
  app.devs[DEV_KB].report_prev = &app.kb_report_prev;
  app.devs[DEV_KB].report_len = sizeof(app.kb_report);
 800949c:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0

  // setup devices

  // keyboard device
#ifndef CONFIG_ANNOYATRON
  app.devs[DEV_KB].type = HID_ID_TYPE_KEYBOARD;
 80094a0:	f884 6284 	strb.w	r6, [r4, #644]	; 0x284
  app.devs[DEV_KB].index = 0;
  app.devs[DEV_KB].construct_report = kb_construct_report;
  app.devs[DEV_KB].report = &app.kb_report;
  app.devs[DEV_KB].report_prev = &app.kb_report_prev;
  app.devs[DEV_KB].report_len = sizeof(app.kb_report);
  app.devs[DEV_KB].report_filter = TRUE;
 80094a4:	f884 62b4 	strb.w	r6, [r4, #692]	; 0x2b4
  app.devs[DEV_KB].timer_task = TASK_create(app_device_timer_task, TASK_STATIC);
 80094a8:	f7f8 fbfc 	bl	8001ca4 <TASK_create>
  // mouse device
  app.devs[DEV_MOUSE].type = HID_ID_TYPE_MOUSE;
 80094ac:	2302      	movs	r3, #2
 80094ae:	f884 32c8 	strb.w	r3, [r4, #712]	; 0x2c8
  app.devs[DEV_MOUSE].index = 0;
  app.devs[DEV_MOUSE].construct_report = mouse_construct_report;
 80094b2:	4b37      	ldr	r3, [pc, #220]	; (8009590 <APP_init+0x3d0>)
  app.devs[DEV_MOUSE].report = &app.mouse_report;
  app.devs[DEV_MOUSE].report_prev = &app.mouse_report_prev;
  app.devs[DEV_MOUSE].report_len = sizeof(app.mouse_report);
 80094b4:	2704      	movs	r7, #4
  app.devs[DEV_KB].report_filter = TRUE;
  app.devs[DEV_KB].timer_task = TASK_create(app_device_timer_task, TASK_STATIC);
  // mouse device
  app.devs[DEV_MOUSE].type = HID_ID_TYPE_MOUSE;
  app.devs[DEV_MOUSE].index = 0;
  app.devs[DEV_MOUSE].construct_report = mouse_construct_report;
 80094b6:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
  app.devs[DEV_MOUSE].report = &app.mouse_report;
 80094ba:	f105 0344 	add.w	r3, r5, #68	; 0x44
  app.devs[DEV_KB].construct_report = kb_construct_report;
  app.devs[DEV_KB].report = &app.kb_report;
  app.devs[DEV_KB].report_prev = &app.kb_report_prev;
  app.devs[DEV_KB].report_len = sizeof(app.kb_report);
  app.devs[DEV_KB].report_filter = TRUE;
  app.devs[DEV_KB].timer_task = TASK_create(app_device_timer_task, TASK_STATIC);
 80094be:	f8c4 02ac 	str.w	r0, [r4, #684]	; 0x2ac
  // mouse device
  app.devs[DEV_MOUSE].type = HID_ID_TYPE_MOUSE;
  app.devs[DEV_MOUSE].index = 0;
  app.devs[DEV_MOUSE].construct_report = mouse_construct_report;
  app.devs[DEV_MOUSE].report = &app.mouse_report;
 80094c2:	f8c4 32fc 	str.w	r3, [r4, #764]	; 0x2fc
  app.devs[DEV_MOUSE].report_prev = &app.mouse_report_prev;
  app.devs[DEV_MOUSE].report_len = sizeof(app.mouse_report);
  app.devs[DEV_MOUSE].report_filter = FALSE;
  app.devs[DEV_MOUSE].timer_task = TASK_create(app_device_timer_task, TASK_STATIC);
 80094c6:	4639      	mov	r1, r7
  // mouse device
  app.devs[DEV_MOUSE].type = HID_ID_TYPE_MOUSE;
  app.devs[DEV_MOUSE].index = 0;
  app.devs[DEV_MOUSE].construct_report = mouse_construct_report;
  app.devs[DEV_MOUSE].report = &app.mouse_report;
  app.devs[DEV_MOUSE].report_prev = &app.mouse_report_prev;
 80094c8:	f105 0348 	add.w	r3, r5, #72	; 0x48
  app.devs[DEV_MOUSE].report_len = sizeof(app.mouse_report);
  app.devs[DEV_MOUSE].report_filter = FALSE;
  app.devs[DEV_MOUSE].timer_task = TASK_create(app_device_timer_task, TASK_STATIC);
 80094cc:	482f      	ldr	r0, [pc, #188]	; (800958c <APP_init+0x3cc>)
  app.devs[DEV_KB].report_len = sizeof(app.kb_report);
  app.devs[DEV_KB].report_filter = TRUE;
  app.devs[DEV_KB].timer_task = TASK_create(app_device_timer_task, TASK_STATIC);
  // mouse device
  app.devs[DEV_MOUSE].type = HID_ID_TYPE_MOUSE;
  app.devs[DEV_MOUSE].index = 0;
 80094ce:	f884 82c9 	strb.w	r8, [r4, #713]	; 0x2c9
  app.devs[DEV_MOUSE].construct_report = mouse_construct_report;
  app.devs[DEV_MOUSE].report = &app.mouse_report;
  app.devs[DEV_MOUSE].report_prev = &app.mouse_report_prev;
 80094d2:	f8c4 3300 	str.w	r3, [r4, #768]	; 0x300
  app.devs[DEV_MOUSE].report_len = sizeof(app.mouse_report);
  app.devs[DEV_MOUSE].report_filter = FALSE;
 80094d6:	f884 82f8 	strb.w	r8, [r4, #760]	; 0x2f8
  app.devs[DEV_MOUSE].type = HID_ID_TYPE_MOUSE;
  app.devs[DEV_MOUSE].index = 0;
  app.devs[DEV_MOUSE].construct_report = mouse_construct_report;
  app.devs[DEV_MOUSE].report = &app.mouse_report;
  app.devs[DEV_MOUSE].report_prev = &app.mouse_report_prev;
  app.devs[DEV_MOUSE].report_len = sizeof(app.mouse_report);
 80094da:	f8c4 7304 	str.w	r7, [r4, #772]	; 0x304
  app.devs[DEV_MOUSE].report_filter = FALSE;
  app.devs[DEV_MOUSE].timer_task = TASK_create(app_device_timer_task, TASK_STATIC);
 80094de:	f7f8 fbe1 	bl	8001ca4 <TASK_create>
  // joystick1 device
  app.devs[DEV_JOY1].type = HID_ID_TYPE_JOYSTICK;
  app.devs[DEV_JOY1].index = (u8_t)JOYSTICK1;
 80094e2:	f884 830d 	strb.w	r8, [r4, #781]	; 0x30d
  app.devs[DEV_JOY1].construct_report = joystick_construct_report;
  app.devs[DEV_JOY1].report = &app.joystick_report1;
 80094e6:	f105 034c 	add.w	r3, r5, #76	; 0x4c
  app.devs[DEV_MOUSE].report_filter = FALSE;
  app.devs[DEV_MOUSE].timer_task = TASK_create(app_device_timer_task, TASK_STATIC);
  // joystick1 device
  app.devs[DEV_JOY1].type = HID_ID_TYPE_JOYSTICK;
  app.devs[DEV_JOY1].index = (u8_t)JOYSTICK1;
  app.devs[DEV_JOY1].construct_report = joystick_construct_report;
 80094ea:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8009594 <APP_init+0x3d4>
  app.devs[DEV_MOUSE].construct_report = mouse_construct_report;
  app.devs[DEV_MOUSE].report = &app.mouse_report;
  app.devs[DEV_MOUSE].report_prev = &app.mouse_report_prev;
  app.devs[DEV_MOUSE].report_len = sizeof(app.mouse_report);
  app.devs[DEV_MOUSE].report_filter = FALSE;
  app.devs[DEV_MOUSE].timer_task = TASK_create(app_device_timer_task, TASK_STATIC);
 80094ee:	f8c4 02f0 	str.w	r0, [r4, #752]	; 0x2f0
  // joystick1 device
  app.devs[DEV_JOY1].type = HID_ID_TYPE_JOYSTICK;
 80094f2:	f04f 0903 	mov.w	r9, #3
  app.devs[DEV_JOY1].index = (u8_t)JOYSTICK1;
  app.devs[DEV_JOY1].construct_report = joystick_construct_report;
  app.devs[DEV_JOY1].report = &app.joystick_report1;
 80094f6:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
  app.devs[DEV_JOY1].report_prev = &app.joystick_report1_prev;
  app.devs[DEV_JOY1].report_len = sizeof(app.joystick_report1);
  app.devs[DEV_JOY1].report_filter = TRUE;
  app.devs[DEV_JOY1].timer_task = TASK_create(app_device_timer_task, TASK_STATIC);
 80094fa:	4639      	mov	r1, r7
  // joystick1 device
  app.devs[DEV_JOY1].type = HID_ID_TYPE_JOYSTICK;
  app.devs[DEV_JOY1].index = (u8_t)JOYSTICK1;
  app.devs[DEV_JOY1].construct_report = joystick_construct_report;
  app.devs[DEV_JOY1].report = &app.joystick_report1;
  app.devs[DEV_JOY1].report_prev = &app.joystick_report1_prev;
 80094fc:	f105 0350 	add.w	r3, r5, #80	; 0x50
  app.devs[DEV_JOY1].report_len = sizeof(app.joystick_report1);
  app.devs[DEV_JOY1].report_filter = TRUE;
  app.devs[DEV_JOY1].timer_task = TASK_create(app_device_timer_task, TASK_STATIC);
 8009500:	4822      	ldr	r0, [pc, #136]	; (800958c <APP_init+0x3cc>)
  // joystick1 device
  app.devs[DEV_JOY1].type = HID_ID_TYPE_JOYSTICK;
  app.devs[DEV_JOY1].index = (u8_t)JOYSTICK1;
  app.devs[DEV_JOY1].construct_report = joystick_construct_report;
  app.devs[DEV_JOY1].report = &app.joystick_report1;
  app.devs[DEV_JOY1].report_prev = &app.joystick_report1_prev;
 8009502:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
  app.devs[DEV_MOUSE].report_prev = &app.mouse_report_prev;
  app.devs[DEV_MOUSE].report_len = sizeof(app.mouse_report);
  app.devs[DEV_MOUSE].report_filter = FALSE;
  app.devs[DEV_MOUSE].timer_task = TASK_create(app_device_timer_task, TASK_STATIC);
  // joystick1 device
  app.devs[DEV_JOY1].type = HID_ID_TYPE_JOYSTICK;
 8009506:	f884 930c 	strb.w	r9, [r4, #780]	; 0x30c
  app.devs[DEV_JOY1].index = (u8_t)JOYSTICK1;
  app.devs[DEV_JOY1].construct_report = joystick_construct_report;
 800950a:	f8c4 834c 	str.w	r8, [r4, #844]	; 0x34c
  app.devs[DEV_JOY1].report = &app.joystick_report1;
  app.devs[DEV_JOY1].report_prev = &app.joystick_report1_prev;
  app.devs[DEV_JOY1].report_len = sizeof(app.joystick_report1);
 800950e:	f8c4 7348 	str.w	r7, [r4, #840]	; 0x348
  app.devs[DEV_JOY1].report_filter = TRUE;
 8009512:	f884 633c 	strb.w	r6, [r4, #828]	; 0x33c
  app.devs[DEV_JOY1].timer_task = TASK_create(app_device_timer_task, TASK_STATIC);
 8009516:	f7f8 fbc5 	bl	8001ca4 <TASK_create>
  // joystick2 device
  app.devs[DEV_JOY2].type = HID_ID_TYPE_JOYSTICK;
  app.devs[DEV_JOY2].index = (u8_t)JOYSTICK2;
  app.devs[DEV_JOY2].construct_report = joystick_construct_report;
  app.devs[DEV_JOY2].report = &app.joystick_report2;
 800951a:	f105 0354 	add.w	r3, r5, #84	; 0x54
  app.devs[DEV_JOY1].construct_report = joystick_construct_report;
  app.devs[DEV_JOY1].report = &app.joystick_report1;
  app.devs[DEV_JOY1].report_prev = &app.joystick_report1_prev;
  app.devs[DEV_JOY1].report_len = sizeof(app.joystick_report1);
  app.devs[DEV_JOY1].report_filter = TRUE;
  app.devs[DEV_JOY1].timer_task = TASK_create(app_device_timer_task, TASK_STATIC);
 800951e:	f8c4 0334 	str.w	r0, [r4, #820]	; 0x334
  // joystick2 device
  app.devs[DEV_JOY2].type = HID_ID_TYPE_JOYSTICK;
  app.devs[DEV_JOY2].index = (u8_t)JOYSTICK2;
  app.devs[DEV_JOY2].construct_report = joystick_construct_report;
  app.devs[DEV_JOY2].report = &app.joystick_report2;
  app.devs[DEV_JOY2].report_prev = &app.joystick_report2_prev;
 8009522:	3558      	adds	r5, #88	; 0x58
  app.devs[DEV_JOY2].report_len = sizeof(app.joystick_report2);
  app.devs[DEV_JOY2].report_filter = TRUE;
  app.devs[DEV_JOY2].timer_task = TASK_create(app_device_timer_task, TASK_STATIC);
 8009524:	4639      	mov	r1, r7
 8009526:	4819      	ldr	r0, [pc, #100]	; (800958c <APP_init+0x3cc>)
  app.devs[DEV_JOY1].report_prev = &app.joystick_report1_prev;
  app.devs[DEV_JOY1].report_len = sizeof(app.joystick_report1);
  app.devs[DEV_JOY1].report_filter = TRUE;
  app.devs[DEV_JOY1].timer_task = TASK_create(app_device_timer_task, TASK_STATIC);
  // joystick2 device
  app.devs[DEV_JOY2].type = HID_ID_TYPE_JOYSTICK;
 8009528:	f884 9350 	strb.w	r9, [r4, #848]	; 0x350
  app.devs[DEV_JOY2].index = (u8_t)JOYSTICK2;
 800952c:	f884 6351 	strb.w	r6, [r4, #849]	; 0x351
  app.devs[DEV_JOY2].construct_report = joystick_construct_report;
 8009530:	f8c4 8390 	str.w	r8, [r4, #912]	; 0x390
  app.devs[DEV_JOY2].report = &app.joystick_report2;
 8009534:	f8c4 3384 	str.w	r3, [r4, #900]	; 0x384
  app.devs[DEV_JOY2].report_prev = &app.joystick_report2_prev;
 8009538:	f8c4 5388 	str.w	r5, [r4, #904]	; 0x388
  app.devs[DEV_JOY2].report_len = sizeof(app.joystick_report2);
 800953c:	f8c4 738c 	str.w	r7, [r4, #908]	; 0x38c
  app.devs[DEV_JOY2].report_filter = TRUE;
 8009540:	f884 6380 	strb.w	r6, [r4, #896]	; 0x380
  app.devs[DEV_JOY2].timer_task = TASK_create(app_device_timer_task, TASK_STATIC);
 8009544:	f7f8 fbae 	bl	8001ca4 <TASK_create>
#endif // CONFIG_ANNOYATRON

  app_init = TRUE;
 8009548:	f884 63f0 	strb.w	r6, [r4, #1008]	; 0x3f0
  app.devs[DEV_JOY2].construct_report = joystick_construct_report;
  app.devs[DEV_JOY2].report = &app.joystick_report2;
  app.devs[DEV_JOY2].report_prev = &app.joystick_report2_prev;
  app.devs[DEV_JOY2].report_len = sizeof(app.joystick_report2);
  app.devs[DEV_JOY2].report_filter = TRUE;
  app.devs[DEV_JOY2].timer_task = TASK_create(app_device_timer_task, TASK_STATIC);
 800954c:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
#endif // CONFIG_ANNOYATRON

  app_init = TRUE;
}
 8009550:	b007      	add	sp, #28
 8009552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009556:	bf00      	nop
 8009558:	20004f80 	.word	0x20004f80
 800955c:	20004f84 	.word	0x20004f84
 8009560:	08012463 	.word	0x08012463
 8009564:	200006ac 	.word	0x200006ac
 8009568:	080124aa 	.word	0x080124aa
 800956c:	ffffd4f4 	.word	0xffffd4f4
 8009570:	08012482 	.word	0x08012482
 8009574:	080124b2 	.word	0x080124b2
 8009578:	08008b41 	.word	0x08008b41
 800957c:	08008b11 	.word	0x08008b11
 8009580:	08008ae1 	.word	0x08008ae1
 8009584:	20000a40 	.word	0x20000a40
 8009588:	08008e9d 	.word	0x08008e9d
 800958c:	080096f9 	.word	0x080096f9
 8009590:	08008d11 	.word	0x08008d11
 8009594:	08008ba5 	.word	0x08008ba5

08009598 <device_send_report>:
  }
  return can_send;
}

static void device_send_report(device_info *d) {
  switch (d->type) {
 8009598:	7803      	ldrb	r3, [r0, #0]
    break;
  }
  return can_send;
}

static void device_send_report(device_info *d) {
 800959a:	b513      	push	{r0, r1, r4, lr}
  switch (d->type) {
 800959c:	2b02      	cmp	r3, #2
    break;
  }
  return can_send;
}

static void device_send_report(device_info *d) {
 800959e:	4604      	mov	r4, r0
  switch (d->type) {
 80095a0:	d011      	beq.n	80095c6 <device_send_report+0x2e>
 80095a2:	2b03      	cmp	r3, #3
 80095a4:	d026      	beq.n	80095f4 <device_send_report+0x5c>
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d137      	bne.n	800961a <device_send_report+0x82>
  case HID_ID_TYPE_KEYBOARD:
    DBG(D_APP, D_DEBUG, "kb report\n");
 80095aa:	4b23      	ldr	r3, [pc, #140]	; (8009638 <device_send_report+0xa0>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	0799      	lsls	r1, r3, #30
 80095b0:	d505      	bpl.n	80095be <device_send_report+0x26>
 80095b2:	4b22      	ldr	r3, [pc, #136]	; (800963c <device_send_report+0xa4>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	b913      	cbnz	r3, 80095be <device_send_report+0x26>
 80095b8:	4821      	ldr	r0, [pc, #132]	; (8009640 <device_send_report+0xa8>)
 80095ba:	f7ff fdef 	bl	800919c <arcprint>
    USB_ARC_KB_tx((usb_kb_report *)d->report);
 80095be:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80095c0:	f001 fffc 	bl	800b5bc <USB_ARC_KB_tx>
    break;
 80095c4:	e02e      	b.n	8009624 <device_send_report+0x8c>
  case HID_ID_TYPE_MOUSE:
    DBG(D_APP, D_DEBUG, "mouse report dx:%i dy:%i dw:%i mod:%08b\n",
 80095c6:	4b1c      	ldr	r3, [pc, #112]	; (8009638 <device_send_report+0xa0>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	079a      	lsls	r2, r3, #30
 80095cc:	d50e      	bpl.n	80095ec <device_send_report+0x54>
 80095ce:	4b1b      	ldr	r3, [pc, #108]	; (800963c <device_send_report+0xa4>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	b95b      	cbnz	r3, 80095ec <device_send_report+0x54>
 80095d4:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80095d6:	f990 1001 	ldrsb.w	r1, [r0, #1]
 80095da:	f990 2002 	ldrsb.w	r2, [r0, #2]
 80095de:	f990 3003 	ldrsb.w	r3, [r0, #3]
 80095e2:	7800      	ldrb	r0, [r0, #0]
 80095e4:	9000      	str	r0, [sp, #0]
 80095e6:	4817      	ldr	r0, [pc, #92]	; (8009644 <device_send_report+0xac>)
 80095e8:	f7ff fdd8 	bl	800919c <arcprint>
        ((usb_mouse_report *)d->report)->dx,
        ((usb_mouse_report *)d->report)->dy,
        ((usb_mouse_report *)d->report)->wheel,
        ((usb_mouse_report *)d->report)->modifiers);
    USB_ARC_MOUSE_tx((usb_mouse_report *)d->report);
 80095ec:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80095ee:	f002 f809 	bl	800b604 <USB_ARC_MOUSE_tx>
    break;
 80095f2:	e017      	b.n	8009624 <device_send_report+0x8c>
  case HID_ID_TYPE_JOYSTICK:
    DBG(D_APP, D_DEBUG, "joy report %i\n", d->index);
 80095f4:	4b10      	ldr	r3, [pc, #64]	; (8009638 <device_send_report+0xa0>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	079b      	lsls	r3, r3, #30
 80095fa:	d506      	bpl.n	800960a <device_send_report+0x72>
 80095fc:	4b0f      	ldr	r3, [pc, #60]	; (800963c <device_send_report+0xa4>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	b91b      	cbnz	r3, 800960a <device_send_report+0x72>
 8009602:	4811      	ldr	r0, [pc, #68]	; (8009648 <device_send_report+0xb0>)
 8009604:	7861      	ldrb	r1, [r4, #1]
 8009606:	f7ff fdc9 	bl	800919c <arcprint>
    USB_ARC_JOYSTICK_tx(d->index ? JOYSTICK2 : JOYSTICK1, (usb_joystick_report *)d->report);
 800960a:	7860      	ldrb	r0, [r4, #1]
 800960c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800960e:	3000      	adds	r0, #0
 8009610:	bf18      	it	ne
 8009612:	2001      	movne	r0, #1
 8009614:	f002 f818 	bl	800b648 <USB_ARC_JOYSTICK_tx>
    break;
 8009618:	e004      	b.n	8009624 <device_send_report+0x8c>
  default:
    ASSERT(FALSE);
 800961a:	480c      	ldr	r0, [pc, #48]	; (800964c <device_send_report+0xb4>)
 800961c:	f240 118b 	movw	r1, #395	; 0x18b
 8009620:	f7f7 f8de 	bl	80007e0 <SYS_assert>
    break;
  }
  d->pending_change = FALSE;
  memcpy(d->report_prev, d->report, d->report_len);
 8009624:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009626:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009628:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    break;
  default:
    ASSERT(FALSE);
    break;
  }
  d->pending_change = FALSE;
 800962a:	2300      	movs	r3, #0
 800962c:	70a3      	strb	r3, [r4, #2]
  memcpy(d->report_prev, d->report, d->report_len);
}
 800962e:	b002      	add	sp, #8
 8009630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  default:
    ASSERT(FALSE);
    break;
  }
  d->pending_change = FALSE;
  memcpy(d->report_prev, d->report, d->report_len);
 8009634:	f004 be58 	b.w	800e2e8 <memcpy>
 8009638:	20004f80 	.word	0x20004f80
 800963c:	20004f84 	.word	0x20004f84
 8009640:	080124bf 	.word	0x080124bf
 8009644:	080124ca 	.word	0x080124ca
 8009648:	080124f3 	.word	0x080124f3
 800964c:	08012459 	.word	0x08012459

08009650 <device_check_report_dispatch>:
}

static void device_check_report_dispatch(device_info *d, bool active) {
 8009650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  d->timer_started = TRUE;
}

static bool device_can_send(device_info *d) {
  bool can_send = FALSE;
  switch (d->type) {
 8009652:	7803      	ldrb	r3, [r0, #0]
  }
  d->pending_change = FALSE;
  memcpy(d->report_prev, d->report, d->report_len);
}

static void device_check_report_dispatch(device_info *d, bool active) {
 8009654:	4604      	mov	r4, r0
  d->timer_started = TRUE;
}

static bool device_can_send(device_info *d) {
  bool can_send = FALSE;
  switch (d->type) {
 8009656:	2b02      	cmp	r3, #2
  }
  d->pending_change = FALSE;
  memcpy(d->report_prev, d->report, d->report_len);
}

static void device_check_report_dispatch(device_info *d, bool active) {
 8009658:	460d      	mov	r5, r1
  d->timer_started = TRUE;
}

static bool device_can_send(device_info *d) {
  bool can_send = FALSE;
  switch (d->type) {
 800965a:	d006      	beq.n	800966a <device_check_report_dispatch+0x1a>
 800965c:	2b03      	cmp	r3, #3
 800965e:	d007      	beq.n	8009670 <device_check_report_dispatch+0x20>
 8009660:	2b01      	cmp	r3, #1
 8009662:	d10c      	bne.n	800967e <device_check_report_dispatch+0x2e>
  case HID_ID_TYPE_KEYBOARD:
    can_send = USB_ARC_KB_can_tx();
 8009664:	f001 ff90 	bl	800b588 <USB_ARC_KB_can_tx>
 8009668:	e00f      	b.n	800968a <device_check_report_dispatch+0x3a>
    break;
  case HID_ID_TYPE_MOUSE:
    can_send = USB_ARC_MOUSE_can_tx();
 800966a:	f001 ff95 	bl	800b598 <USB_ARC_MOUSE_can_tx>
 800966e:	e00c      	b.n	800968a <device_check_report_dispatch+0x3a>
    break;
  case HID_ID_TYPE_JOYSTICK:
    can_send = USB_ARC_JOYSTICK_can_tx(d->index ? JOYSTICK2 : JOYSTICK1);
 8009670:	7840      	ldrb	r0, [r0, #1]
 8009672:	3000      	adds	r0, #0
 8009674:	bf18      	it	ne
 8009676:	2001      	movne	r0, #1
 8009678:	f001 ff96 	bl	800b5a8 <USB_ARC_JOYSTICK_can_tx>
 800967c:	e005      	b.n	800968a <device_check_report_dispatch+0x3a>
    break;
  default:
    ASSERT(FALSE);
 800967e:	481a      	ldr	r0, [pc, #104]	; (80096e8 <device_check_report_dispatch+0x98>)
 8009680:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8009684:	f7f7 f8ac 	bl	80007e0 <SYS_assert>
  TASK_start_timer(d->timer_task, &d->timer, 0, d, tim_delta, tim_delta, "tim");
  d->timer_started = TRUE;
}

static bool device_can_send(device_info *d) {
  bool can_send = FALSE;
 8009688:	2000      	movs	r0, #0
  memcpy(d->report_prev, d->report, d->report_len);
}

static void device_check_report_dispatch(device_info *d, bool active) {
  bool can_send = device_can_send(d);
  if (d->report_filter) {
 800968a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800968e:	b16b      	cbz	r3, 80096ac <device_check_report_dispatch+0x5c>
    // relative reporting, do not send same report twice
    if (arc_memcmp(d->report, d->report_prev, d->report_len) == 0) {
 8009690:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009692:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8009694:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009696:	2300      	movs	r3, #0
#ifndef CONFIG_ANNOYATRON

static int arc_memcmp(void *a, void *b, u32_t len) {
  u8_t *pa = (u8_t *)a;
  u8_t *pb = (u8_t *)b;
  while (len--) {
 8009698:	4293      	cmp	r3, r2
 800969a:	d016      	beq.n	80096ca <device_check_report_dispatch+0x7a>
    if (*pa++ != *pb++) {
 800969c:	5cce      	ldrb	r6, [r1, r3]
 800969e:	3301      	adds	r3, #1
 80096a0:	18ef      	adds	r7, r5, r3
 80096a2:	f817 7c01 	ldrb.w	r7, [r7, #-1]
 80096a6:	42b7      	cmp	r7, r6
 80096a8:	d0f6      	beq.n	8009698 <device_check_report_dispatch+0x48>
 80096aa:	e006      	b.n	80096ba <device_check_report_dispatch+0x6a>
        DBG(D_APP, D_DEBUG, "device %i:%i pending report\n", d->type, d->index);
        d->pending_change = TRUE;
      }
    }
  } else {
    if (active) {
 80096ac:	b1d5      	cbz	r5, 80096e4 <device_check_report_dispatch+0x94>
      // absolute reporting, keep sending while any related pin is active
      if (can_send) {
 80096ae:	b150      	cbz	r0, 80096c6 <device_check_report_dispatch+0x76>
      // report same as previous, do not send
      d->pending_change = FALSE;
    } else {
      // report changed, send
      if (can_send) {
        device_send_report(d);
 80096b0:	4620      	mov	r0, r4
      } else {
        d->pending_change = TRUE;
      }
    }
  }
}
 80096b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      // report same as previous, do not send
      d->pending_change = FALSE;
    } else {
      // report changed, send
      if (can_send) {
        device_send_report(d);
 80096b6:	f7ff bf6f 	b.w	8009598 <device_send_report>
    if (arc_memcmp(d->report, d->report_prev, d->report_len) == 0) {
      // report same as previous, do not send
      d->pending_change = FALSE;
    } else {
      // report changed, send
      if (can_send) {
 80096ba:	2800      	cmp	r0, #0
 80096bc:	d1f8      	bne.n	80096b0 <device_check_report_dispatch+0x60>
        device_send_report(d);
      } else {
        DBG(D_APP, D_DEBUG, "device %i:%i pending report\n", d->type, d->index);
 80096be:	4b0b      	ldr	r3, [pc, #44]	; (80096ec <device_check_report_dispatch+0x9c>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	0798      	lsls	r0, r3, #30
 80096c4:	d404      	bmi.n	80096d0 <device_check_report_dispatch+0x80>
    if (active) {
      // absolute reporting, keep sending while any related pin is active
      if (can_send) {
        device_send_report(d);
      } else {
        d->pending_change = TRUE;
 80096c6:	2301      	movs	r3, #1
 80096c8:	e000      	b.n	80096cc <device_check_report_dispatch+0x7c>
  bool can_send = device_can_send(d);
  if (d->report_filter) {
    // relative reporting, do not send same report twice
    if (arc_memcmp(d->report, d->report_prev, d->report_len) == 0) {
      // report same as previous, do not send
      d->pending_change = FALSE;
 80096ca:	2300      	movs	r3, #0
 80096cc:	70a3      	strb	r3, [r4, #2]
 80096ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else {
      // report changed, send
      if (can_send) {
        device_send_report(d);
      } else {
        DBG(D_APP, D_DEBUG, "device %i:%i pending report\n", d->type, d->index);
 80096d0:	4b07      	ldr	r3, [pc, #28]	; (80096f0 <device_check_report_dispatch+0xa0>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d1f6      	bne.n	80096c6 <device_check_report_dispatch+0x76>
 80096d8:	4806      	ldr	r0, [pc, #24]	; (80096f4 <device_check_report_dispatch+0xa4>)
 80096da:	7821      	ldrb	r1, [r4, #0]
 80096dc:	7862      	ldrb	r2, [r4, #1]
 80096de:	f7ff fd5d 	bl	800919c <arcprint>
 80096e2:	e7f0      	b.n	80096c6 <device_check_report_dispatch+0x76>
 80096e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096e6:	bf00      	nop
 80096e8:	08012459 	.word	0x08012459
 80096ec:	20004f80 	.word	0x20004f80
 80096f0:	20004f84 	.word	0x20004f84
 80096f4:	08012502 	.word	0x08012502

080096f8 <app_device_timer_task>:
  app.dirty_gpio = FALSE;
}

///////////////////////////////// IRQ & EVENTS

static void app_device_timer_task(u32_t ignore, void *d_v) {
 80096f8:	b538      	push	{r3, r4, r5, lr}
  device_info *d = (device_info *)d_v;
  // construct report
  bool active = d->construct_report(d, d->report);
 80096fa:	4608      	mov	r0, r1
 80096fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  app.dirty_gpio = FALSE;
}

///////////////////////////////// IRQ & EVENTS

static void app_device_timer_task(u32_t ignore, void *d_v) {
 80096fe:	460c      	mov	r4, r1
  device_info *d = (device_info *)d_v;
  // construct report
  bool active = d->construct_report(d, d->report);
 8009700:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009702:	4798      	blx	r3

  // update accelerators
  if (!active) {
 8009704:	4605      	mov	r5, r0
 8009706:	b910      	cbnz	r0, 800970e <app_device_timer_task+0x16>
    d->accelerator_1 = 0;
 8009708:	85a0      	strh	r0, [r4, #44]	; 0x2c
    d->accelerator_2 = 0;
 800970a:	85e0      	strh	r0, [r4, #46]	; 0x2e
 800970c:	e038      	b.n	8009780 <app_device_timer_task+0x88>
  } else {
    switch (d->type) {
 800970e:	7823      	ldrb	r3, [r4, #0]
 8009710:	2b02      	cmp	r3, #2
 8009712:	d002      	beq.n	800971a <app_device_timer_task+0x22>
 8009714:	2b03      	cmp	r3, #3
 8009716:	d021      	beq.n	800975c <app_device_timer_task+0x64>
 8009718:	e032      	b.n	8009780 <app_device_timer_task+0x88>
    case HID_ID_TYPE_MOUSE: {
      usb_mouse_report *r = (usb_mouse_report *)d->report;
 800971a:	6b63      	ldr	r3, [r4, #52]	; 0x34
      if (r->dx != 0 || r->dy != 0) {
 800971c:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8009720:	b912      	cbnz	r2, 8009728 <app_device_timer_task+0x30>
 8009722:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8009726:	b14a      	cbz	r2, 800973c <app_device_timer_task+0x44>
        d->accelerator_1 = MIN(d->accelerator_1 + app.acc_pos_speed, 0xfff);
 8009728:	4a21      	ldr	r2, [pc, #132]	; (80097b0 <app_device_timer_task+0xb8>)
 800972a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800972c:	f8b2 21f8 	ldrh.w	r2, [r2, #504]	; 0x1f8
 8009730:	440a      	add	r2, r1
 8009732:	f640 71ff 	movw	r1, #4095	; 0xfff
 8009736:	428a      	cmp	r2, r1
 8009738:	bfa8      	it	ge
 800973a:	460a      	movge	r2, r1
      } else {
        d->accelerator_1 = 0;
 800973c:	85a2      	strh	r2, [r4, #44]	; 0x2c
      }
      if (r->wheel != 0) {
 800973e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8009742:	b14b      	cbz	r3, 8009758 <app_device_timer_task+0x60>
        d->accelerator_2 = MIN(d->accelerator_2 + app.acc_wheel_speed, 0xfff);
 8009744:	4b1a      	ldr	r3, [pc, #104]	; (80097b0 <app_device_timer_task+0xb8>)
 8009746:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8009748:	f8b3 31fa 	ldrh.w	r3, [r3, #506]	; 0x1fa
 800974c:	4413      	add	r3, r2
 800974e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8009752:	4293      	cmp	r3, r2
 8009754:	bfa8      	it	ge
 8009756:	4613      	movge	r3, r2
      } else {
        d->accelerator_2 = 0;
 8009758:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800975a:	e011      	b.n	8009780 <app_device_timer_task+0x88>
      }
      break;
    }
    case HID_ID_TYPE_JOYSTICK: {
      usb_joystick_report *r = (usb_joystick_report *)d->report;
 800975c:	6b63      	ldr	r3, [r4, #52]	; 0x34
      if (r->dx != 0 || r->dy != 0) {
 800975e:	f993 2000 	ldrsb.w	r2, [r3]
 8009762:	b912      	cbnz	r2, 800976a <app_device_timer_task+0x72>
 8009764:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8009768:	b14b      	cbz	r3, 800977e <app_device_timer_task+0x86>
        d->accelerator_1 = MIN(d->accelerator_1 + app.acc_joystick_speed, 0xfff);
 800976a:	4b11      	ldr	r3, [pc, #68]	; (80097b0 <app_device_timer_task+0xb8>)
 800976c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800976e:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8009772:	4413      	add	r3, r2
 8009774:	f640 72ff 	movw	r2, #4095	; 0xfff
 8009778:	4293      	cmp	r3, r2
 800977a:	bfa8      	it	ge
 800977c:	4613      	movge	r3, r2
      } else {
        d->accelerator_1 = 0;
 800977e:	85a3      	strh	r3, [r4, #44]	; 0x2c
    }
    default: break;
    }
  }

  device_check_report_dispatch(d, active);
 8009780:	4620      	mov	r0, r4
 8009782:	4629      	mov	r1, r5
 8009784:	f7ff ff64 	bl	8009650 <device_check_report_dispatch>

  if (!active) {
 8009788:	b985      	cbnz	r5, 80097ac <app_device_timer_task+0xb4>
    // no pins pressed, so stop polling this device
    TASK_stop_timer(&d->timer);
 800978a:	1d20      	adds	r0, r4, #4
 800978c:	f7f8 fb9c 	bl	8001ec8 <TASK_stop_timer>
    DBG(D_APP, D_DEBUG, "stop timer for device %i:%i\n", d->type, d->index);
 8009790:	4b08      	ldr	r3, [pc, #32]	; (80097b4 <app_device_timer_task+0xbc>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	079d      	lsls	r5, r3, #30
 8009796:	d507      	bpl.n	80097a8 <app_device_timer_task+0xb0>
 8009798:	4b07      	ldr	r3, [pc, #28]	; (80097b8 <app_device_timer_task+0xc0>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	b923      	cbnz	r3, 80097a8 <app_device_timer_task+0xb0>
 800979e:	4807      	ldr	r0, [pc, #28]	; (80097bc <app_device_timer_task+0xc4>)
 80097a0:	7821      	ldrb	r1, [r4, #0]
 80097a2:	7862      	ldrb	r2, [r4, #1]
 80097a4:	f7ff fcfa 	bl	800919c <arcprint>
    d->timer_started = FALSE;
 80097a8:	2300      	movs	r3, #0
 80097aa:	70e3      	strb	r3, [r4, #3]
 80097ac:	bd38      	pop	{r3, r4, r5, pc}
 80097ae:	bf00      	nop
 80097b0:	200006ac 	.word	0x200006ac
 80097b4:	20004f80 	.word	0x20004f80
 80097b8:	20004f84 	.word	0x20004f84
 80097bc:	0801251f 	.word	0x0801251f

080097c0 <app_joystick_usb_cts_msg>:
    device_send_report(d);
  }
  DBG(D_APP, D_DEBUG, "device %i:%i cts\n", d->type, d->index);
}

static void app_joystick_usb_cts_msg(u32_t j, void *ignore_p) {
 80097c0:	b538      	push	{r3, r4, r5, lr}
  usb_joystick j_ix = j ? JOYSTICK2 : JOYSTICK1;
  device_info *d = &app.devs[j_ix == JOYSTICK1 ? DEV_JOY1 : DEV_JOY2];
 80097c2:	4d0e      	ldr	r5, [pc, #56]	; (80097fc <app_joystick_usb_cts_msg+0x3c>)
 80097c4:	2800      	cmp	r0, #0
 80097c6:	bf14      	ite	ne
 80097c8:	f44f 7053 	movne.w	r0, #844	; 0x34c
 80097cc:	f44f 7042 	moveq.w	r0, #776	; 0x308
 80097d0:	4405      	add	r5, r0
 80097d2:	1d2c      	adds	r4, r5, #4
  if (d->pending_change) {
 80097d4:	78a3      	ldrb	r3, [r4, #2]
 80097d6:	b113      	cbz	r3, 80097de <app_joystick_usb_cts_msg+0x1e>
    device_send_report(d);
 80097d8:	4620      	mov	r0, r4
 80097da:	f7ff fedd 	bl	8009598 <device_send_report>
  }
  DBG(D_APP, D_DEBUG, "device %i:%i cts\n", d->type, d->index);
 80097de:	4b08      	ldr	r3, [pc, #32]	; (8009800 <app_joystick_usb_cts_msg+0x40>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	079b      	lsls	r3, r3, #30
 80097e4:	d509      	bpl.n	80097fa <app_joystick_usb_cts_msg+0x3a>
 80097e6:	4b07      	ldr	r3, [pc, #28]	; (8009804 <app_joystick_usb_cts_msg+0x44>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	b933      	cbnz	r3, 80097fa <app_joystick_usb_cts_msg+0x3a>
 80097ec:	7929      	ldrb	r1, [r5, #4]
 80097ee:	7862      	ldrb	r2, [r4, #1]
 80097f0:	4805      	ldr	r0, [pc, #20]	; (8009808 <app_joystick_usb_cts_msg+0x48>)
}
 80097f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  usb_joystick j_ix = j ? JOYSTICK2 : JOYSTICK1;
  device_info *d = &app.devs[j_ix == JOYSTICK1 ? DEV_JOY1 : DEV_JOY2];
  if (d->pending_change) {
    device_send_report(d);
  }
  DBG(D_APP, D_DEBUG, "device %i:%i cts\n", d->type, d->index);
 80097f6:	f7ff bcd1 	b.w	800919c <arcprint>
 80097fa:	bd38      	pop	{r3, r4, r5, pc}
 80097fc:	200006ac 	.word	0x200006ac
 8009800:	20004f80 	.word	0x20004f80
 8009804:	20004f84 	.word	0x20004f84
 8009808:	0801253c 	.word	0x0801253c

0800980c <app_mouse_usb_cts_msg>:
    device_send_report(d);
  }
  DBG(D_APP, D_DEBUG, "device %i:%i cts\n", d->type, d->index);
}

static void app_mouse_usb_cts_msg(u32_t ignore, void *ignore_p) {
 800980c:	b510      	push	{r4, lr}
  device_info *d = &app.devs[DEV_MOUSE];
  if (d->pending_change) {
 800980e:	4c0c      	ldr	r4, [pc, #48]	; (8009840 <app_mouse_usb_cts_msg+0x34>)
 8009810:	f894 32ca 	ldrb.w	r3, [r4, #714]	; 0x2ca
 8009814:	b11b      	cbz	r3, 800981e <app_mouse_usb_cts_msg+0x12>
    device_send_report(d);
 8009816:	f504 7032 	add.w	r0, r4, #712	; 0x2c8
 800981a:	f7ff febd 	bl	8009598 <device_send_report>
  }
  DBG(D_APP, D_DEBUG, "device %i:%i cts\n", d->type, d->index);
 800981e:	4b09      	ldr	r3, [pc, #36]	; (8009844 <app_mouse_usb_cts_msg+0x38>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	079a      	lsls	r2, r3, #30
 8009824:	d50b      	bpl.n	800983e <app_mouse_usb_cts_msg+0x32>
 8009826:	4b08      	ldr	r3, [pc, #32]	; (8009848 <app_mouse_usb_cts_msg+0x3c>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	b943      	cbnz	r3, 800983e <app_mouse_usb_cts_msg+0x32>
 800982c:	f894 12c8 	ldrb.w	r1, [r4, #712]	; 0x2c8
 8009830:	f894 22c9 	ldrb.w	r2, [r4, #713]	; 0x2c9
 8009834:	4805      	ldr	r0, [pc, #20]	; (800984c <app_mouse_usb_cts_msg+0x40>)
}
 8009836:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void app_mouse_usb_cts_msg(u32_t ignore, void *ignore_p) {
  device_info *d = &app.devs[DEV_MOUSE];
  if (d->pending_change) {
    device_send_report(d);
  }
  DBG(D_APP, D_DEBUG, "device %i:%i cts\n", d->type, d->index);
 800983a:	f7ff bcaf 	b.w	800919c <arcprint>
 800983e:	bd10      	pop	{r4, pc}
 8009840:	200006ac 	.word	0x200006ac
 8009844:	20004f80 	.word	0x20004f80
 8009848:	20004f84 	.word	0x20004f84
 800984c:	0801253c 	.word	0x0801253c

08009850 <app_kb_usb_cts_msg>:
    DBG(D_APP, D_DEBUG, "stop timer for device %i:%i\n", d->type, d->index);
    d->timer_started = FALSE;
  }
}

static void app_kb_usb_cts_msg(u32_t ignore, void *ignore_p) {
 8009850:	b510      	push	{r4, lr}
  device_info *d = &app.devs[DEV_KB];
  if (d->pending_change) {
 8009852:	4c0c      	ldr	r4, [pc, #48]	; (8009884 <app_kb_usb_cts_msg+0x34>)
 8009854:	f894 3286 	ldrb.w	r3, [r4, #646]	; 0x286
 8009858:	b11b      	cbz	r3, 8009862 <app_kb_usb_cts_msg+0x12>
    device_send_report(d);
 800985a:	f504 7021 	add.w	r0, r4, #644	; 0x284
 800985e:	f7ff fe9b 	bl	8009598 <device_send_report>
  }
  DBG(D_APP, D_DEBUG, "device %i:%i cts\n", d->type, d->index);
 8009862:	4b09      	ldr	r3, [pc, #36]	; (8009888 <app_kb_usb_cts_msg+0x38>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	0799      	lsls	r1, r3, #30
 8009868:	d50b      	bpl.n	8009882 <app_kb_usb_cts_msg+0x32>
 800986a:	4b08      	ldr	r3, [pc, #32]	; (800988c <app_kb_usb_cts_msg+0x3c>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	b943      	cbnz	r3, 8009882 <app_kb_usb_cts_msg+0x32>
 8009870:	f894 1284 	ldrb.w	r1, [r4, #644]	; 0x284
 8009874:	f894 2285 	ldrb.w	r2, [r4, #645]	; 0x285
 8009878:	4805      	ldr	r0, [pc, #20]	; (8009890 <app_kb_usb_cts_msg+0x40>)
}
 800987a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void app_kb_usb_cts_msg(u32_t ignore, void *ignore_p) {
  device_info *d = &app.devs[DEV_KB];
  if (d->pending_change) {
    device_send_report(d);
  }
  DBG(D_APP, D_DEBUG, "device %i:%i cts\n", d->type, d->index);
 800987e:	f7ff bc8d 	b.w	800919c <arcprint>
 8009882:	bd10      	pop	{r4, pc}
 8009884:	200006ac 	.word	0x200006ac
 8009888:	20004f80 	.word	0x20004f80
 800988c:	20004f84 	.word	0x20004f84
 8009890:	0801253c 	.word	0x0801253c

08009894 <app_pins_dirty_msg>:
    device_send_report(d);
  }
  DBG(D_APP, D_DEBUG, "device %i:%i cts\n", d->type, d->index);
}

static void app_pins_dirty_msg(u32_t ignore, void *ignore_p) {
 8009894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

// app pins have changed
static void app_pins_update(void) {
  int pin;

  app.lock_gpio_sampling = TRUE;
 8009898:	4b5d      	ldr	r3, [pc, #372]	; (8009a10 <app_pins_dirty_msg+0x17c>)
 800989a:	2201      	movs	r2, #1
    device_send_report(d);
  }
  DBG(D_APP, D_DEBUG, "device %i:%i cts\n", d->type, d->index);
}

static void app_pins_dirty_msg(u32_t ignore, void *ignore_p) {
 800989c:	b085      	sub	sp, #20

// app pins have changed
static void app_pins_update(void) {
  int pin;

  app.lock_gpio_sampling = TRUE;
 800989e:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
 80098a2:	f3bf 8f5f 	dmb	sy
 80098a6:	f503 760d 	add.w	r6, r3, #564	; 0x234
 80098aa:	f5a6 750d 	sub.w	r5, r6, #564	; 0x234
}

///////////////////////////////// PIN HANDLING

static void app_trigger_pin(u8_t pin, bool active) {
  DBG(D_APP, D_DEBUG, "pin %i %s\n", (pin+1), active ? "!":"-");
 80098ae:	4f59      	ldr	r7, [pc, #356]	; (8009a14 <app_pins_dirty_msg+0x180>)
 80098b0:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8009a38 <app_pins_dirty_msg+0x1a4>
 80098b4:	2400      	movs	r4, #0
 80098b6:	46a9      	mov	r9, r5
 80098b8:	4623      	mov	r3, r4
  app.lock_gpio_sampling = TRUE;
  __DMB();

  // trigger changed pins
  for (pin = 0; pin < APP_CONFIG_PINS; pin++) {
    if (app.pin_state[pin] == PIN_INACTIVE && app.irq_cur_pin_active[pin]) {
 80098ba:	f816 2b01 	ldrb.w	r2, [r6], #1
 80098be:	442b      	add	r3, r5
 80098c0:	3401      	adds	r4, #1
 80098c2:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 80098c6:	b9d2      	cbnz	r2, 80098fe <app_pins_dirty_msg+0x6a>
 80098c8:	b343      	cbz	r3, 800991c <app_pins_dirty_msg+0x88>
}

///////////////////////////////// PIN HANDLING

static void app_trigger_pin(u8_t pin, bool active) {
  DBG(D_APP, D_DEBUG, "pin %i %s\n", (pin+1), active ? "!":"-");
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	0798      	lsls	r0, r3, #30
 80098ce:	d507      	bpl.n	80098e0 <app_pins_dirty_msg+0x4c>
 80098d0:	f8d8 3000 	ldr.w	r3, [r8]
 80098d4:	b923      	cbnz	r3, 80098e0 <app_pins_dirty_msg+0x4c>
 80098d6:	4850      	ldr	r0, [pc, #320]	; (8009a18 <app_pins_dirty_msg+0x184>)
 80098d8:	4621      	mov	r1, r4
 80098da:	4a50      	ldr	r2, [pc, #320]	; (8009a1c <app_pins_dirty_msg+0x188>)
 80098dc:	f7ff fc5e 	bl	800919c <arcprint>
 80098e0:	2313      	movs	r3, #19
 80098e2:	fb03 5304 	mla	r3, r3, r4, r5
  if (active) {
    if (app.pin_config[pin].tern_pin > 0) {
 80098e6:	f813 3c12 	ldrb.w	r3, [r3, #-18]
 80098ea:	b133      	cbz	r3, 80098fa <app_pins_dirty_msg+0x66>
      if (app.irq_cur_pin_active[app.pin_config[pin].tern_pin-1]) {
 80098ec:	3b01      	subs	r3, #1
 80098ee:	444b      	add	r3, r9
 80098f0:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 80098f4:	b10b      	cbz	r3, 80098fa <app_pins_dirty_msg+0x66>
        app.pin_state[pin] = PIN_ACTIVE_TERN;
 80098f6:	2302      	movs	r3, #2
 80098f8:	e00e      	b.n	8009918 <app_pins_dirty_msg+0x84>
      } else {
        app.pin_state[pin] = PIN_ACTIVE;
      }
    } else {
      app.pin_state[pin] = PIN_ACTIVE;
 80098fa:	2301      	movs	r3, #1
 80098fc:	e00c      	b.n	8009918 <app_pins_dirty_msg+0x84>

  // trigger changed pins
  for (pin = 0; pin < APP_CONFIG_PINS; pin++) {
    if (app.pin_state[pin] == PIN_INACTIVE && app.irq_cur_pin_active[pin]) {
      app_trigger_pin(pin, TRUE);
    } else if (app.pin_state[pin] != PIN_INACTIVE && !app.irq_cur_pin_active[pin]) {
 80098fe:	b96b      	cbnz	r3, 800991c <app_pins_dirty_msg+0x88>
}

///////////////////////////////// PIN HANDLING

static void app_trigger_pin(u8_t pin, bool active) {
  DBG(D_APP, D_DEBUG, "pin %i %s\n", (pin+1), active ? "!":"-");
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	0799      	lsls	r1, r3, #30
 8009904:	d507      	bpl.n	8009916 <app_pins_dirty_msg+0x82>
 8009906:	f8d8 3000 	ldr.w	r3, [r8]
 800990a:	b923      	cbnz	r3, 8009916 <app_pins_dirty_msg+0x82>
 800990c:	4842      	ldr	r0, [pc, #264]	; (8009a18 <app_pins_dirty_msg+0x184>)
 800990e:	4621      	mov	r1, r4
 8009910:	4a43      	ldr	r2, [pc, #268]	; (8009a20 <app_pins_dirty_msg+0x18c>)
 8009912:	f7ff fc43 	bl	800919c <arcprint>
      }
    } else {
      app.pin_state[pin] = PIN_ACTIVE;
    }
  } else {
    app.pin_state[pin] = PIN_INACTIVE;
 8009916:	2300      	movs	r3, #0
 8009918:	f806 3c01 	strb.w	r3, [r6, #-1]

  app.lock_gpio_sampling = TRUE;
  __DMB();

  // trigger changed pins
  for (pin = 0; pin < APP_CONFIG_PINS; pin++) {
 800991c:	2c1a      	cmp	r4, #26
 800991e:	d1cb      	bne.n	80098b8 <app_pins_dirty_msg+0x24>
    } else if (app.pin_state[pin] != PIN_INACTIVE && !app.irq_cur_pin_active[pin]) {
      app_trigger_pin(pin, FALSE);
    }
  }

  app.lock_gpio_sampling = FALSE;
 8009920:	2300      	movs	r3, #0
 8009922:	f885 31ff 	strb.w	r3, [r5, #511]	; 0x1ff
 8009926:	f3bf 8f5f 	dmb	sy
 800992a:	4c3e      	ldr	r4, [pc, #248]	; (8009a24 <app_pins_dirty_msg+0x190>)
 800992c:	4f39      	ldr	r7, [pc, #228]	; (8009a14 <app_pins_dirty_msg+0x180>)
  case HID_ID_TYPE_MOUSE: tim_delta = app.mouse_delta; break;
  case HID_ID_TYPE_JOYSTICK: tim_delta = app.joystick_delta; break;
  default: tim_delta = 10; break;
  }
  TASK_stop_timer(&d->timer);
  TASK_start_timer(d->timer_task, &d->timer, 0, d, tim_delta, tim_delta, "tim");
 800992e:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8009a3c <app_pins_dirty_msg+0x1a8>

    device_check_report_dispatch(d, active);

    if (active && !d->timer_started) {
      // device pin pressed, start polling timer
      DBG(D_APP, D_DEBUG, "start timer for device %i:%i\n", d->type, d->index);
 8009932:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8009a38 <app_pins_dirty_msg+0x1a4>
 8009936:	f504 7a88 	add.w	sl, r4, #272	; 0x110

  int i;
  for (i = 0; i < DEVICES; i++) {
    device_info *d = &app.devs[i];
    // already have pending data needing to be sent, no update so far
    if (d->pending_change) continue;
 800993a:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 800993e:	f1a4 0904 	sub.w	r9, r4, #4
 8009942:	2b00      	cmp	r3, #0
 8009944:	d14b      	bne.n	80099de <app_pins_dirty_msg+0x14a>

    bool active = d->construct_report(d, d->report);
 8009946:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009948:	4648      	mov	r0, r9
 800994a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800994c:	4798      	blx	r3
    if (active) {
      DBG(D_APP, D_DEBUG, "device %i:%i active\n", d->type, d->index);
 800994e:	683b      	ldr	r3, [r7, #0]
    device_info *d = &app.devs[i];
    // already have pending data needing to be sent, no update so far
    if (d->pending_change) continue;

    bool active = d->construct_report(d, d->report);
    if (active) {
 8009950:	4606      	mov	r6, r0
 8009952:	b130      	cbz	r0, 8009962 <app_pins_dirty_msg+0xce>
      DBG(D_APP, D_DEBUG, "device %i:%i active\n", d->type, d->index);
 8009954:	079a      	lsls	r2, r3, #30
 8009956:	d510      	bpl.n	800997a <app_pins_dirty_msg+0xe6>
 8009958:	f8d8 3000 	ldr.w	r3, [r8]
 800995c:	b96b      	cbnz	r3, 800997a <app_pins_dirty_msg+0xe6>
 800995e:	4832      	ldr	r0, [pc, #200]	; (8009a28 <app_pins_dirty_msg+0x194>)
 8009960:	e005      	b.n	800996e <app_pins_dirty_msg+0xda>
    } else {
      DBG(D_APP, D_DEBUG, "device %i:%i inactive\n", d->type, d->index);
 8009962:	079b      	lsls	r3, r3, #30
 8009964:	d509      	bpl.n	800997a <app_pins_dirty_msg+0xe6>
 8009966:	f8d8 3000 	ldr.w	r3, [r8]
 800996a:	b933      	cbnz	r3, 800997a <app_pins_dirty_msg+0xe6>
 800996c:	482f      	ldr	r0, [pc, #188]	; (8009a2c <app_pins_dirty_msg+0x198>)
 800996e:	f814 1c04 	ldrb.w	r1, [r4, #-4]
 8009972:	f814 2c03 	ldrb.w	r2, [r4, #-3]
 8009976:	f7ff fc11 	bl	800919c <arcprint>
    }

    device_check_report_dispatch(d, active);
 800997a:	4648      	mov	r0, r9
 800997c:	4631      	mov	r1, r6
 800997e:	f7ff fe67 	bl	8009650 <device_check_report_dispatch>

    if (active && !d->timer_started) {
 8009982:	b366      	cbz	r6, 80099de <app_pins_dirty_msg+0x14a>
 8009984:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8009988:	bb4b      	cbnz	r3, 80099de <app_pins_dirty_msg+0x14a>
      // device pin pressed, start polling timer
      DBG(D_APP, D_DEBUG, "start timer for device %i:%i\n", d->type, d->index);
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	0798      	lsls	r0, r3, #30
 800998e:	d509      	bpl.n	80099a4 <app_pins_dirty_msg+0x110>
 8009990:	f8d8 3000 	ldr.w	r3, [r8]
 8009994:	b933      	cbnz	r3, 80099a4 <app_pins_dirty_msg+0x110>
 8009996:	4826      	ldr	r0, [pc, #152]	; (8009a30 <app_pins_dirty_msg+0x19c>)
 8009998:	f814 1c04 	ldrb.w	r1, [r4, #-4]
 800999c:	f814 2c03 	ldrb.w	r2, [r4, #-3]
 80099a0:	f7ff fbfc 	bl	800919c <arcprint>

///////////////////////////////// DEVICE STUFF

static void device_start_timer(device_info *d) {
  time tim_delta;
  switch (d->type) {
 80099a4:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 80099a8:	2b02      	cmp	r3, #2
 80099aa:	d004      	beq.n	80099b6 <app_pins_dirty_msg+0x122>
 80099ac:	2b03      	cmp	r3, #3
 80099ae:	d105      	bne.n	80099bc <app_pins_dirty_msg+0x128>
  case HID_ID_TYPE_MOUSE: tim_delta = app.mouse_delta; break;
  case HID_ID_TYPE_JOYSTICK: tim_delta = app.joystick_delta; break;
 80099b0:	f8d5 61f4 	ldr.w	r6, [r5, #500]	; 0x1f4
 80099b4:	e003      	b.n	80099be <app_pins_dirty_msg+0x12a>
///////////////////////////////// DEVICE STUFF

static void device_start_timer(device_info *d) {
  time tim_delta;
  switch (d->type) {
  case HID_ID_TYPE_MOUSE: tim_delta = app.mouse_delta; break;
 80099b6:	f8d5 61f0 	ldr.w	r6, [r5, #496]	; 0x1f0
 80099ba:	e000      	b.n	80099be <app_pins_dirty_msg+0x12a>
  case HID_ID_TYPE_JOYSTICK: tim_delta = app.joystick_delta; break;
  default: tim_delta = 10; break;
 80099bc:	260a      	movs	r6, #10
  }
  TASK_stop_timer(&d->timer);
 80099be:	4620      	mov	r0, r4
 80099c0:	f7f8 fa82 	bl	8001ec8 <TASK_stop_timer>
  TASK_start_timer(d->timer_task, &d->timer, 0, d, tim_delta, tim_delta, "tim");
 80099c4:	9600      	str	r6, [sp, #0]
 80099c6:	9601      	str	r6, [sp, #4]
 80099c8:	f8cd b008 	str.w	fp, [sp, #8]
 80099cc:	464b      	mov	r3, r9
 80099ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80099d0:	4621      	mov	r1, r4
 80099d2:	2200      	movs	r2, #0
 80099d4:	f7f8 fa3b 	bl	8001e4e <TASK_start_timer>
  d->timer_started = TRUE;
 80099d8:	2301      	movs	r3, #1
 80099da:	f804 3c01 	strb.w	r3, [r4, #-1]
 80099de:	3444      	adds	r4, #68	; 0x44

  app.lock_gpio_sampling = FALSE;
  __DMB();

  int i;
  for (i = 0; i < DEVICES; i++) {
 80099e0:	4554      	cmp	r4, sl
 80099e2:	d1aa      	bne.n	800993a <app_pins_dirty_msg+0xa6>
      device_start_timer(d);
    }
  }

  // update app states
  memcpy(&app.pin_state_prev[0], &app.pin_state[0], sizeof(app.pin_state));
 80099e4:	4b13      	ldr	r3, [pc, #76]	; (8009a34 <app_pins_dirty_msg+0x1a0>)
 80099e6:	f103 021a 	add.w	r2, r3, #26
 80099ea:	f103 0618 	add.w	r6, r3, #24
 80099ee:	461c      	mov	r4, r3
 80099f0:	cc03      	ldmia	r4!, {r0, r1}
 80099f2:	42b4      	cmp	r4, r6
 80099f4:	6010      	str	r0, [r2, #0]
 80099f6:	6051      	str	r1, [r2, #4]
 80099f8:	4623      	mov	r3, r4
 80099fa:	f102 0208 	add.w	r2, r2, #8
 80099fe:	d1f6      	bne.n	80099ee <app_pins_dirty_msg+0x15a>
 8009a00:	8823      	ldrh	r3, [r4, #0]
 8009a02:	8013      	strh	r3, [r2, #0]

  app.dirty_gpio = FALSE;
 8009a04:	2300      	movs	r3, #0
 8009a06:	f885 31fe 	strb.w	r3, [r5, #510]	; 0x1fe
  DBG(D_APP, D_DEBUG, "device %i:%i cts\n", d->type, d->index);
}

static void app_pins_dirty_msg(u32_t ignore, void *ignore_p) {
  app_pins_update();
}
 8009a0a:	b005      	add	sp, #20
 8009a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a10:	200006ac 	.word	0x200006ac
 8009a14:	20004f80 	.word	0x20004f80
 8009a18:	0801254e 	.word	0x0801254e
 8009a1c:	08012559 	.word	0x08012559
 8009a20:	08012b8e 	.word	0x08012b8e
 8009a24:	20000934 	.word	0x20000934
 8009a28:	0801255b 	.word	0x0801255b
 8009a2c:	08012570 	.word	0x08012570
 8009a30:	08012587 	.word	0x08012587
 8009a34:	200008e0 	.word	0x200008e0
 8009a38:	20004f84 	.word	0x20004f84
 8009a3c:	080125a5 	.word	0x080125a5

08009a40 <print_index_indicator>:
    KEYPARSERR("%c", str[i]);
  }
  KEYPARSERR(" @ index %i\n", sym->offs_start);
}

static void print_index_indicator(const char *str, u16_t ix) {
 8009a40:	4603      	mov	r3, r0
 8009a42:	b510      	push	{r4, lr}
  KEYPARSERR("%s\n", str);
 8009a44:	4808      	ldr	r0, [pc, #32]	; (8009a68 <print_index_indicator+0x28>)
    KEYPARSERR("%c", str[i]);
  }
  KEYPARSERR(" @ index %i\n", sym->offs_start);
}

static void print_index_indicator(const char *str, u16_t ix) {
 8009a46:	460c      	mov	r4, r1
  KEYPARSERR("%s\n", str);
 8009a48:	4619      	mov	r1, r3
 8009a4a:	f7ff fba7 	bl	800919c <arcprint>
  while (ix--) {
 8009a4e:	b12c      	cbz	r4, 8009a5c <print_index_indicator+0x1c>
    KEYPARSERR(" ");
 8009a50:	4806      	ldr	r0, [pc, #24]	; (8009a6c <print_index_indicator+0x2c>)
 8009a52:	3c01      	subs	r4, #1
 8009a54:	f7ff fba2 	bl	800919c <arcprint>
 8009a58:	b2a4      	uxth	r4, r4
 8009a5a:	e7f8      	b.n	8009a4e <print_index_indicator+0xe>
  }
  KEYPARSERR("^\n");
 8009a5c:	4804      	ldr	r0, [pc, #16]	; (8009a70 <print_index_indicator+0x30>)
}
 8009a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void print_index_indicator(const char *str, u16_t ix) {
  KEYPARSERR("%s\n", str);
  while (ix--) {
    KEYPARSERR(" ");
  }
  KEYPARSERR("^\n");
 8009a62:	f7ff bb9b 	b.w	800919c <arcprint>
 8009a66:	bf00      	nop
 8009a68:	0800fe96 	.word	0x0800fe96
 8009a6c:	08011746 	.word	0x08011746
 8009a70:	080125a9 	.word	0x080125a9

08009a74 <print_lex_sym>:
    *nbr = -*nbr;
  }
  return TRUE;
}

static void print_lex_sym(lex_type_sym *sym, const char *str) {
 8009a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int i;
  for (i = sym->offs_start; i < sym->offs_end + 1; i++) {
 8009a76:	8846      	ldrh	r6, [r0, #2]
    *nbr = -*nbr;
  }
  return TRUE;
}

static void print_lex_sym(lex_type_sym *sym, const char *str) {
 8009a78:	4605      	mov	r5, r0
  int i;
  for (i = sym->offs_start; i < sym->offs_end + 1; i++) {
 8009a7a:	2400      	movs	r4, #0
 8009a7c:	198f      	adds	r7, r1, r6
 8009a7e:	88aa      	ldrh	r2, [r5, #4]
 8009a80:	19a3      	adds	r3, r4, r6
 8009a82:	429a      	cmp	r2, r3
 8009a84:	db05      	blt.n	8009a92 <print_lex_sym+0x1e>
    KEYPARSERR("%c", str[i]);
 8009a86:	5d39      	ldrb	r1, [r7, r4]
 8009a88:	4805      	ldr	r0, [pc, #20]	; (8009aa0 <print_lex_sym+0x2c>)
 8009a8a:	f7ff fb87 	bl	800919c <arcprint>
 8009a8e:	3401      	adds	r4, #1
 8009a90:	e7f5      	b.n	8009a7e <print_lex_sym+0xa>
  }
  KEYPARSERR(" @ index %i\n", sym->offs_start);
 8009a92:	8869      	ldrh	r1, [r5, #2]
 8009a94:	4803      	ldr	r0, [pc, #12]	; (8009aa4 <print_lex_sym+0x30>)
}
 8009a96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
static void print_lex_sym(lex_type_sym *sym, const char *str) {
  int i;
  for (i = sym->offs_start; i < sym->offs_end + 1; i++) {
    KEYPARSERR("%c", str[i]);
  }
  KEYPARSERR(" @ index %i\n", sym->offs_start);
 8009a9a:	f7ff bb7f 	b.w	800919c <arcprint>
 8009a9e:	bf00      	nop
 8009aa0:	0801035f 	.word	0x0801035f
 8009aa4:	080125f8 	.word	0x080125f8

08009aa8 <is_pin_sym.isra.1>:
  if (c >= 'A' && c <= 'Z')
    return c - 'A' + 'a';
  return c;
}

static bool is_pin_sym(const char *str, lex_type_sym *sym) {
 8009aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (1 + sym->offs_end - sym->offs_start <= strlen(pin_sym)) {
 8009aaa:	4b15      	ldr	r3, [pc, #84]	; (8009b00 <is_pin_sym.isra.1+0x58>)
  if (c >= 'A' && c <= 'Z')
    return c - 'A' + 'a';
  return c;
}

static bool is_pin_sym(const char *str, lex_type_sym *sym) {
 8009aac:	4606      	mov	r6, r0
  if (1 + sym->offs_end - sym->offs_start <= strlen(pin_sym)) {
 8009aae:	681d      	ldr	r5, [r3, #0]
  if (c >= 'A' && c <= 'Z')
    return c - 'A' + 'a';
  return c;
}

static bool is_pin_sym(const char *str, lex_type_sym *sym) {
 8009ab0:	460c      	mov	r4, r1
  if (1 + sym->offs_end - sym->offs_start <= strlen(pin_sym)) {
 8009ab2:	4628      	mov	r0, r5
  if (c >= 'A' && c <= 'Z')
    return c - 'A' + 'a';
  return c;
}

static bool is_pin_sym(const char *str, lex_type_sym *sym) {
 8009ab4:	4617      	mov	r7, r2
  if (1 + sym->offs_end - sym->offs_start <= strlen(pin_sym)) {
 8009ab6:	f7f7 f9d1 	bl	8000e5c <strlen>
 8009aba:	3701      	adds	r7, #1
 8009abc:	1b3f      	subs	r7, r7, r4
 8009abe:	4287      	cmp	r7, r0
 8009ac0:	4601      	mov	r1, r0
 8009ac2:	dd1a      	ble.n	8009afa <is_pin_sym.isra.1+0x52>
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	4426      	add	r6, r4
    return FALSE;
  }
  int i;
  for (i = 0; i < strlen(pin_sym); i++) {
 8009ac8:	428b      	cmp	r3, r1
 8009aca:	da14      	bge.n	8009af6 <is_pin_sym.isra.1+0x4e>
    if (to_lower(pin_sym[i]) != to_lower(str[sym->offs_start + i])) {
 8009acc:	5cec      	ldrb	r4, [r5, r3]

static u8_t lex_sym_ix;
static lex_type_sym lex_syms[MAX_LEX_SYM_LEN];

static char to_lower(char c) {
  if (c >= 'A' && c <= 'Z')
 8009ace:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8009ad2:	b2d2      	uxtb	r2, r2
 8009ad4:	2a19      	cmp	r2, #25
  if (1 + sym->offs_end - sym->offs_start <= strlen(pin_sym)) {
    return FALSE;
  }
  int i;
  for (i = 0; i < strlen(pin_sym); i++) {
    if (to_lower(pin_sym[i]) != to_lower(str[sym->offs_start + i])) {
 8009ad6:	5cf2      	ldrb	r2, [r6, r3]
static u8_t lex_sym_ix;
static lex_type_sym lex_syms[MAX_LEX_SYM_LEN];

static char to_lower(char c) {
  if (c >= 'A' && c <= 'Z')
    return c - 'A' + 'a';
 8009ad8:	bf98      	it	ls
 8009ada:	3420      	addls	r4, #32

static u8_t lex_sym_ix;
static lex_type_sym lex_syms[MAX_LEX_SYM_LEN];

static char to_lower(char c) {
  if (c >= 'A' && c <= 'Z')
 8009adc:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
 8009ae0:	b2c0      	uxtb	r0, r0
    return c - 'A' + 'a';
 8009ae2:	bf98      	it	ls
 8009ae4:	b2e4      	uxtbls	r4, r4

static u8_t lex_sym_ix;
static lex_type_sym lex_syms[MAX_LEX_SYM_LEN];

static char to_lower(char c) {
  if (c >= 'A' && c <= 'Z')
 8009ae6:	2819      	cmp	r0, #25
    return c - 'A' + 'a';
 8009ae8:	bf9c      	itt	ls
 8009aea:	3220      	addls	r2, #32
 8009aec:	b2d2      	uxtbls	r2, r2
  if (1 + sym->offs_end - sym->offs_start <= strlen(pin_sym)) {
    return FALSE;
  }
  int i;
  for (i = 0; i < strlen(pin_sym); i++) {
    if (to_lower(pin_sym[i]) != to_lower(str[sym->offs_start + i])) {
 8009aee:	4294      	cmp	r4, r2
 8009af0:	d103      	bne.n	8009afa <is_pin_sym.isra.1+0x52>
static bool is_pin_sym(const char *str, lex_type_sym *sym) {
  if (1 + sym->offs_end - sym->offs_start <= strlen(pin_sym)) {
    return FALSE;
  }
  int i;
  for (i = 0; i < strlen(pin_sym); i++) {
 8009af2:	3301      	adds	r3, #1
 8009af4:	e7e8      	b.n	8009ac8 <is_pin_sym.isra.1+0x20>
    if (to_lower(pin_sym[i]) != to_lower(str[sym->offs_start + i])) {
      return FALSE;
    }
  }
  return TRUE;
 8009af6:	2001      	movs	r0, #1
 8009af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return c;
}

static bool is_pin_sym(const char *str, lex_type_sym *sym) {
  if (1 + sym->offs_end - sym->offs_start <= strlen(pin_sym)) {
    return FALSE;
 8009afa:	2000      	movs	r0, #0
    if (to_lower(pin_sym[i]) != to_lower(str[sym->offs_start + i])) {
      return FALSE;
    }
  }
  return TRUE;
}
 8009afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009afe:	bf00      	nop
 8009b00:	20000050 	.word	0x20000050

08009b04 <emit_lex_sym>:
    KEYPARSERR(" ");
  }
  KEYPARSERR("^\n");
}

static bool emit_lex_sym(lex_type_sym *sym, const char *str) {
 8009b04:	b510      	push	{r4, lr}
 8009b06:	4604      	mov	r4, r0
  switch (sym->type) {
 8009b08:	7823      	ldrb	r3, [r4, #0]
    KEYPARSERR(" ");
  }
  KEYPARSERR("^\n");
}

static bool emit_lex_sym(lex_type_sym *sym, const char *str) {
 8009b0a:	4608      	mov	r0, r1
  switch (sym->type) {
 8009b0c:	2b02      	cmp	r3, #2
 8009b0e:	d003      	beq.n	8009b18 <emit_lex_sym+0x14>
 8009b10:	d30a      	bcc.n	8009b28 <emit_lex_sym+0x24>
 8009b12:	2b06      	cmp	r3, #6
 8009b14:	d90d      	bls.n	8009b32 <emit_lex_sym+0x2e>
 8009b16:	e007      	b.n	8009b28 <emit_lex_sym+0x24>
  case LEX_DEF: {
    if (is_pin_sym(str, sym)) {
 8009b18:	8861      	ldrh	r1, [r4, #2]
 8009b1a:	88a2      	ldrh	r2, [r4, #4]
 8009b1c:	f7ff ffc4 	bl	8009aa8 <is_pin_sym.isra.1>
 8009b20:	b138      	cbz	r0, 8009b32 <emit_lex_sym+0x2e>
      sym->type = LEX_PIN;
 8009b22:	2301      	movs	r3, #1
 8009b24:	7023      	strb	r3, [r4, #0]
 8009b26:	e004      	b.n	8009b32 <emit_lex_sym+0x2e>
  case LEX_NUM:
  case LEX_TERN:
  case LEX_TERN_OPT:
    break;
  default:
    print_index_indicator(str, sym->offs_start);
 8009b28:	8861      	ldrh	r1, [r4, #2]
 8009b2a:	f7ff ff89 	bl	8009a40 <print_index_indicator>
    KEYPARSERR("Error: unknown symbol\n");
 8009b2e:	480e      	ldr	r0, [pc, #56]	; (8009b68 <emit_lex_sym+0x64>)
 8009b30:	e004      	b.n	8009b3c <emit_lex_sym+0x38>
    return FALSE;
    break;
  }

  if (lex_sym_ix >= MAX_LEX_SYM_LEN) {
 8009b32:	4b0e      	ldr	r3, [pc, #56]	; (8009b6c <emit_lex_sym+0x68>)
 8009b34:	781a      	ldrb	r2, [r3, #0]
 8009b36:	2a14      	cmp	r2, #20
 8009b38:	d904      	bls.n	8009b44 <emit_lex_sym+0x40>
    KEYPARSERR("Error: too long definition\n");
 8009b3a:	480d      	ldr	r0, [pc, #52]	; (8009b70 <emit_lex_sym+0x6c>)
 8009b3c:	f7ff fb2e 	bl	800919c <arcprint>
    return FALSE;
 8009b40:	2000      	movs	r0, #0
 8009b42:	bd10      	pop	{r4, pc}
  }

  lex_syms[lex_sym_ix].type = sym->type;
 8009b44:	2106      	movs	r1, #6
 8009b46:	fb01 3102 	mla	r1, r1, r2, r3
 8009b4a:	7820      	ldrb	r0, [r4, #0]
  lex_syms[lex_sym_ix].offs_start = sym->offs_start;
  lex_syms[lex_sym_ix].offs_end = sym->offs_end;
  lex_sym_ix++;
 8009b4c:	3201      	adds	r2, #1
  if (lex_sym_ix >= MAX_LEX_SYM_LEN) {
    KEYPARSERR("Error: too long definition\n");
    return FALSE;
  }

  lex_syms[lex_sym_ix].type = sym->type;
 8009b4e:	7088      	strb	r0, [r1, #2]
  lex_syms[lex_sym_ix].offs_start = sym->offs_start;
 8009b50:	8860      	ldrh	r0, [r4, #2]
  lex_syms[lex_sym_ix].offs_end = sym->offs_end;
  lex_sym_ix++;
 8009b52:	701a      	strb	r2, [r3, #0]
    KEYPARSERR("Error: too long definition\n");
    return FALSE;
  }

  lex_syms[lex_sym_ix].type = sym->type;
  lex_syms[lex_sym_ix].offs_start = sym->offs_start;
 8009b54:	8088      	strh	r0, [r1, #4]
  lex_syms[lex_sym_ix].offs_end = sym->offs_end;
 8009b56:	88a0      	ldrh	r0, [r4, #4]
  lex_sym_ix++;

  sym->type = LEX_UNKNOWN;
 8009b58:	2300      	movs	r3, #0
    return FALSE;
  }

  lex_syms[lex_sym_ix].type = sym->type;
  lex_syms[lex_sym_ix].offs_start = sym->offs_start;
  lex_syms[lex_sym_ix].offs_end = sym->offs_end;
 8009b5a:	80c8      	strh	r0, [r1, #6]
  lex_sym_ix++;

  sym->type = LEX_UNKNOWN;
 8009b5c:	7023      	strb	r3, [r4, #0]

  sym->offs_start = 0;
 8009b5e:	8063      	strh	r3, [r4, #2]
  sym->offs_end = 0;
 8009b60:	80a3      	strh	r3, [r4, #4]

  return TRUE;
 8009b62:	2001      	movs	r0, #1
}
 8009b64:	bd10      	pop	{r4, pc}
 8009b66:	bf00      	nop
 8009b68:	080125ac 	.word	0x080125ac
 8009b6c:	20000aa0 	.word	0x20000aa0
 8009b70:	080125c3 	.word	0x080125c3

08009b74 <parse_pin_nbr>:
    }
  }
  return TRUE;
}

static bool parse_pin_nbr(const char *str, lex_type_sym *sym, u8_t *nbr) {
 8009b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b78:	460c      	mov	r4, r1
 8009b7a:	4615      	mov	r5, r2
  if (!is_pin_sym(str, sym))
 8009b7c:	8849      	ldrh	r1, [r1, #2]
 8009b7e:	88a2      	ldrh	r2, [r4, #4]
    }
  }
  return TRUE;
}

static bool parse_pin_nbr(const char *str, lex_type_sym *sym, u8_t *nbr) {
 8009b80:	4681      	mov	r9, r0
  if (!is_pin_sym(str, sym))
 8009b82:	f7ff ff91 	bl	8009aa8 <is_pin_sym.isra.1>
 8009b86:	2600      	movs	r6, #0
 8009b88:	b358      	cbz	r0, 8009be2 <parse_pin_nbr+0x6e>
    return FALSE;
  *nbr = 0;
  int i;
  for (i = 0; i <= sym->offs_end - sym->offs_start - strlen(pin_sym); i++) {
 8009b8a:	4f17      	ldr	r7, [pc, #92]	; (8009be8 <parse_pin_nbr+0x74>)
}

static bool parse_pin_nbr(const char *str, lex_type_sym *sym, u8_t *nbr) {
  if (!is_pin_sym(str, sym))
    return FALSE;
  *nbr = 0;
 8009b8c:	702e      	strb	r6, [r5, #0]
  int i;
  for (i = 0; i <= sym->offs_end - sym->offs_start - strlen(pin_sym); i++) {
    *nbr *= 10;
 8009b8e:	f04f 0a0a 	mov.w	sl, #10
static bool parse_pin_nbr(const char *str, lex_type_sym *sym, u8_t *nbr) {
  if (!is_pin_sym(str, sym))
    return FALSE;
  *nbr = 0;
  int i;
  for (i = 0; i <= sym->offs_end - sym->offs_start - strlen(pin_sym); i++) {
 8009b92:	6838      	ldr	r0, [r7, #0]
 8009b94:	f7f7 f962 	bl	8000e5c <strlen>
 8009b98:	88a2      	ldrh	r2, [r4, #4]
 8009b9a:	8863      	ldrh	r3, [r4, #2]
 8009b9c:	1ad3      	subs	r3, r2, r3
 8009b9e:	1a18      	subs	r0, r3, r0
 8009ba0:	4286      	cmp	r6, r0
 8009ba2:	dc1a      	bgt.n	8009bda <parse_pin_nbr+0x66>
    *nbr *= 10;
 8009ba4:	f895 8000 	ldrb.w	r8, [r5]
 8009ba8:	fb0a f808 	mul.w	r8, sl, r8
 8009bac:	fa5f f888 	uxtb.w	r8, r8
 8009bb0:	f885 8000 	strb.w	r8, [r5]
    char c = str[sym->offs_start + i + strlen(pin_sym)];
 8009bb4:	6838      	ldr	r0, [r7, #0]
 8009bb6:	f7f7 f951 	bl	8000e5c <strlen>
 8009bba:	eb09 0206 	add.w	r2, r9, r6
 8009bbe:	8863      	ldrh	r3, [r4, #2]
 8009bc0:	4410      	add	r0, r2
 8009bc2:	5cc3      	ldrb	r3, [r0, r3]
    if (c < '0' || c > '9')
 8009bc4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009bc8:	b2d2      	uxtb	r2, r2
 8009bca:	2a09      	cmp	r2, #9
 8009bcc:	d808      	bhi.n	8009be0 <parse_pin_nbr+0x6c>
      return FALSE;
    *nbr += c - '0';
 8009bce:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 8009bd2:	4443      	add	r3, r8
 8009bd4:	702b      	strb	r3, [r5, #0]
static bool parse_pin_nbr(const char *str, lex_type_sym *sym, u8_t *nbr) {
  if (!is_pin_sym(str, sym))
    return FALSE;
  *nbr = 0;
  int i;
  for (i = 0; i <= sym->offs_end - sym->offs_start - strlen(pin_sym); i++) {
 8009bd6:	3601      	adds	r6, #1
 8009bd8:	e7db      	b.n	8009b92 <parse_pin_nbr+0x1e>
    char c = str[sym->offs_start + i + strlen(pin_sym)];
    if (c < '0' || c > '9')
      return FALSE;
    *nbr += c - '0';
  }
  return TRUE;
 8009bda:	2001      	movs	r0, #1
 8009bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  int i;
  for (i = 0; i <= sym->offs_end - sym->offs_start - strlen(pin_sym); i++) {
    *nbr *= 10;
    char c = str[sym->offs_start + i + strlen(pin_sym)];
    if (c < '0' || c > '9')
      return FALSE;
 8009be0:	2000      	movs	r0, #0
    *nbr += c - '0';
  }
  return TRUE;
}
 8009be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009be6:	bf00      	nop
 8009be8:	20000050 	.word	0x20000050

08009bec <def_config_parse>:
  }

  return TRUE;
}

bool def_config_parse(def_config *pindef, const char *str, u16_t len) {
 8009bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf0:	4683      	mov	fp, r0
  h_id->type = HID_ID_TYPE_NONE;
}

static bool lex(const char *str, u16_t len) {
  int i;
  lex_sym_ix = 0;
 8009bf2:	48a1      	ldr	r0, [pc, #644]	; (8009e78 <def_config_parse+0x28c>)
 8009bf4:	f04f 0800 	mov.w	r8, #0
  }

  return TRUE;
}

bool def_config_parse(def_config *pindef, const char *str, u16_t len) {
 8009bf8:	b08d      	sub	sp, #52	; 0x34
 8009bfa:	9209      	str	r2, [sp, #36]	; 0x24
 8009bfc:	460c      	mov	r4, r1
  h_id->type = HID_ID_TYPE_NONE;
}

static bool lex(const char *str, u16_t len) {
  int i;
  lex_sym_ix = 0;
 8009bfe:	f800 8b02 	strb.w	r8, [r0], #2
  memset(lex_syms, 0, sizeof(lex_syms));
 8009c02:	4641      	mov	r1, r8
 8009c04:	227e      	movs	r2, #126	; 0x7e
 8009c06:	4f9d      	ldr	r7, [pc, #628]	; (8009e7c <def_config_parse+0x290>)
 8009c08:	f004 fbc2 	bl	800e390 <memset>
  lex_state state = LEX_STATE_INIT;
  lex_type_sym sym = { LEX_UNKNOWN, 0, 0 };

  for (i = 0; i < len + 1; i++) {
 8009c0c:	4645      	mov	r5, r8
static bool lex(const char *str, u16_t len) {
  int i;
  lex_sym_ix = 0;
  memset(lex_syms, 0, sizeof(lex_syms));
  lex_state state = LEX_STATE_INIT;
  lex_type_sym sym = { LEX_UNKNOWN, 0, 0 };
 8009c0e:	f88d 8028 	strb.w	r8, [sp, #40]	; 0x28
 8009c12:	f8ad 802a 	strh.w	r8, [sp, #42]	; 0x2a
 8009c16:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c

  for (i = 0; i < len + 1; i++) {
 8009c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c1c:	42ab      	cmp	r3, r5
 8009c1e:	f2c0 80c6 	blt.w	8009dae <def_config_parse+0x1c2>
    char c = i >= len ? ignore_chars[0] : str[i];
 8009c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bool is_ignore = strchr(ignore_chars, c) != 0;
 8009c24:	6878      	ldr	r0, [r7, #4]
  memset(lex_syms, 0, sizeof(lex_syms));
  lex_state state = LEX_STATE_INIT;
  lex_type_sym sym = { LEX_UNKNOWN, 0, 0 };

  for (i = 0; i < len + 1; i++) {
    char c = i >= len ? ignore_chars[0] : str[i];
 8009c26:	429d      	cmp	r5, r3
 8009c28:	bfaa      	itet	ge
 8009c2a:	687b      	ldrge	r3, [r7, #4]
 8009c2c:	5d66      	ldrblt	r6, [r4, r5]
 8009c2e:	781e      	ldrbge	r6, [r3, #0]
    bool is_ignore = strchr(ignore_chars, c) != 0;
 8009c30:	4631      	mov	r1, r6
 8009c32:	f7f7 fb98 	bl	8001366 <strchr>
 8009c36:	f110 0c00 	adds.w	ip, r0, #0
 8009c3a:	bf18      	it	ne
 8009c3c:	f04f 0c01 	movne.w	ip, #1
    bool is_sym = strchr(sym_chars, c) != 0;
 8009c40:	68b8      	ldr	r0, [r7, #8]
 8009c42:	4631      	mov	r1, r6
 8009c44:	f8cd c00c 	str.w	ip, [sp, #12]
 8009c48:	f7f7 fb8d 	bl	8001366 <strchr>
    bool is_num = strchr(num_chars, c) != 0;
 8009c4c:	4631      	mov	r1, r6
  lex_type_sym sym = { LEX_UNKNOWN, 0, 0 };

  for (i = 0; i < len + 1; i++) {
    char c = i >= len ? ignore_chars[0] : str[i];
    bool is_ignore = strchr(ignore_chars, c) != 0;
    bool is_sym = strchr(sym_chars, c) != 0;
 8009c4e:	f110 0a00 	adds.w	sl, r0, #0
    bool is_num = strchr(num_chars, c) != 0;
 8009c52:	68f8      	ldr	r0, [r7, #12]
  lex_type_sym sym = { LEX_UNKNOWN, 0, 0 };

  for (i = 0; i < len + 1; i++) {
    char c = i >= len ? ignore_chars[0] : str[i];
    bool is_ignore = strchr(ignore_chars, c) != 0;
    bool is_sym = strchr(sym_chars, c) != 0;
 8009c54:	bf18      	it	ne
 8009c56:	f04f 0a01 	movne.w	sl, #1
    bool is_num = strchr(num_chars, c) != 0;
 8009c5a:	f7f7 fb84 	bl	8001366 <strchr>
    bool is_numdef = strchr(numdef_chars, c) != 0;
 8009c5e:	693b      	ldr	r3, [r7, #16]

  for (i = 0; i < len + 1; i++) {
    char c = i >= len ? ignore_chars[0] : str[i];
    bool is_ignore = strchr(ignore_chars, c) != 0;
    bool is_sym = strchr(sym_chars, c) != 0;
    bool is_num = strchr(num_chars, c) != 0;
 8009c60:	3000      	adds	r0, #0
 8009c62:	bf18      	it	ne
 8009c64:	2001      	movne	r0, #1
 8009c66:	9006      	str	r0, [sp, #24]
    bool is_numdef = strchr(numdef_chars, c) != 0;
 8009c68:	4631      	mov	r1, r6
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	9304      	str	r3, [sp, #16]
 8009c6e:	f7f7 fb7a 	bl	8001366 <strchr>
 8009c72:	1c02      	adds	r2, r0, #0
 8009c74:	bf18      	it	ne
 8009c76:	2201      	movne	r2, #1
    bool is_assign = strchr(assign_chars, c) != 0;
 8009c78:	6978      	ldr	r0, [r7, #20]
 8009c7a:	4631      	mov	r1, r6
 8009c7c:	9205      	str	r2, [sp, #20]
 8009c7e:	f7f7 fb72 	bl	8001366 <strchr>
 8009c82:	3000      	adds	r0, #0
 8009c84:	bf18      	it	ne
 8009c86:	2001      	movne	r0, #1
 8009c88:	9007      	str	r0, [sp, #28]
    bool is_tern = strchr(tern_chars, c) != 0;
 8009c8a:	69b8      	ldr	r0, [r7, #24]
 8009c8c:	4631      	mov	r1, r6
 8009c8e:	9008      	str	r0, [sp, #32]
 8009c90:	f7f7 fb69 	bl	8001366 <strchr>
    if (!(is_ignore || is_sym || is_num || is_numdef || is_assign || is_tern)) {
 8009c94:	f8dd c00c 	ldr.w	ip, [sp, #12]
    bool is_ignore = strchr(ignore_chars, c) != 0;
    bool is_sym = strchr(sym_chars, c) != 0;
    bool is_num = strchr(num_chars, c) != 0;
    bool is_numdef = strchr(numdef_chars, c) != 0;
    bool is_assign = strchr(assign_chars, c) != 0;
    bool is_tern = strchr(tern_chars, c) != 0;
 8009c98:	f110 0900 	adds.w	r9, r0, #0
 8009c9c:	bf18      	it	ne
 8009c9e:	f04f 0901 	movne.w	r9, #1
    if (!(is_ignore || is_sym || is_num || is_numdef || is_assign || is_tern)) {
 8009ca2:	9a05      	ldr	r2, [sp, #20]
 8009ca4:	9b04      	ldr	r3, [sp, #16]
 8009ca6:	f1bc 0f00 	cmp.w	ip, #0
 8009caa:	d110      	bne.n	8009cce <def_config_parse+0xe2>
 8009cac:	f1ba 0f00 	cmp.w	sl, #0
 8009cb0:	d10d      	bne.n	8009cce <def_config_parse+0xe2>
 8009cb2:	9906      	ldr	r1, [sp, #24]
 8009cb4:	b959      	cbnz	r1, 8009cce <def_config_parse+0xe2>
 8009cb6:	b952      	cbnz	r2, 8009cce <def_config_parse+0xe2>
 8009cb8:	9807      	ldr	r0, [sp, #28]
 8009cba:	b940      	cbnz	r0, 8009cce <def_config_parse+0xe2>
 8009cbc:	f1b9 0f00 	cmp.w	r9, #0
 8009cc0:	d105      	bne.n	8009cce <def_config_parse+0xe2>
      print_index_indicator(str, i);
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	b2a9      	uxth	r1, r5
 8009cc6:	f7ff febb 	bl	8009a40 <print_index_indicator>
      KEYPARSERR("Error: bad character [%c] @ index %i\n", c, i);
 8009cca:	486d      	ldr	r0, [pc, #436]	; (8009e80 <def_config_parse+0x294>)
 8009ccc:	e068      	b.n	8009da0 <def_config_parse+0x1b4>
      return FALSE;
    }

    switch (state) {
 8009cce:	f1b8 0f01 	cmp.w	r8, #1
 8009cd2:	d03e      	beq.n	8009d52 <def_config_parse+0x166>
 8009cd4:	d303      	bcc.n	8009cde <def_config_parse+0xf2>
 8009cd6:	f1b8 0f02 	cmp.w	r8, #2
 8009cda:	d049      	beq.n	8009d70 <def_config_parse+0x184>
 8009cdc:	e065      	b.n	8009daa <def_config_parse+0x1be>
    case LEX_STATE_INIT:
      if (is_ignore) {
 8009cde:	f1bc 0f00 	cmp.w	ip, #0
 8009ce2:	d162      	bne.n	8009daa <def_config_parse+0x1be>
        continue;
      } else if (is_sym) {
 8009ce4:	f1ba 0f00 	cmp.w	sl, #0
 8009ce8:	d007      	beq.n	8009cfa <def_config_parse+0x10e>
        sym.type = LEX_DEF;
 8009cea:	2302      	movs	r3, #2
 8009cec:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        sym.offs_start = i;
 8009cf0:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
        state = LEX_STATE_SYM;
 8009cf4:	f04f 0801 	mov.w	r8, #1
 8009cf8:	e057      	b.n	8009daa <def_config_parse+0x1be>
      } else if (is_numdef && c == numdef_chars[0]) {
 8009cfa:	b15a      	cbz	r2, 8009d14 <def_config_parse+0x128>
 8009cfc:	781b      	ldrb	r3, [r3, #0]
 8009cfe:	42b3      	cmp	r3, r6
 8009d00:	d108      	bne.n	8009d14 <def_config_parse+0x128>
        sym.type = LEX_NUM;
 8009d02:	2303      	movs	r3, #3
 8009d04:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        sym.offs_start = i + 1;
 8009d08:	1c6b      	adds	r3, r5, #1
 8009d0a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
        state = LEX_STATE_NUM;
 8009d0e:	f04f 0802 	mov.w	r8, #2
 8009d12:	e04a      	b.n	8009daa <def_config_parse+0x1be>
      } else if (is_assign) {
 8009d14:	9a07      	ldr	r2, [sp, #28]
 8009d16:	b2a9      	uxth	r1, r5
 8009d18:	b16a      	cbz	r2, 8009d36 <def_config_parse+0x14a>
        sym.type = LEX_ASSIGN;
 8009d1a:	2304      	movs	r3, #4
 8009d1c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        sym.offs_start = sym.offs_end = i;
 8009d20:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8009d24:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
        if (!emit_lex_sym(&sym, str))
 8009d28:	a80a      	add	r0, sp, #40	; 0x28
 8009d2a:	4621      	mov	r1, r4
 8009d2c:	f7ff feea 	bl	8009b04 <emit_lex_sym>
 8009d30:	2800      	cmp	r0, #0
 8009d32:	d13a      	bne.n	8009daa <def_config_parse+0x1be>
 8009d34:	e359      	b.n	800a3ea <def_config_parse+0x7fe>
          return FALSE;
        state = LEX_STATE_INIT;
      } else if (is_tern) {
 8009d36:	f1b9 0f00 	cmp.w	r9, #0
 8009d3a:	d008      	beq.n	8009d4e <def_config_parse+0x162>
        sym.type = c == tern_chars[0] ? LEX_TERN : LEX_TERN_OPT;
 8009d3c:	9a08      	ldr	r2, [sp, #32]
 8009d3e:	7813      	ldrb	r3, [r2, #0]
 8009d40:	42b3      	cmp	r3, r6
 8009d42:	bf14      	ite	ne
 8009d44:	2606      	movne	r6, #6
 8009d46:	2605      	moveq	r6, #5
 8009d48:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
 8009d4c:	e7e8      	b.n	8009d20 <def_config_parse+0x134>
        sym.offs_start = sym.offs_end = i;
        if (!emit_lex_sym(&sym, str))
          return FALSE;
        state = LEX_STATE_INIT;
      } else {
        print_index_indicator(str, i);
 8009d4e:	4620      	mov	r0, r4
 8009d50:	e023      	b.n	8009d9a <def_config_parse+0x1ae>
        KEYPARSERR("Error: unexpected character [%c] @ index %i\n", c, i);
        return FALSE;
      }
      break;
    case LEX_STATE_SYM:
      if (!is_sym) {
 8009d52:	f1ba 0f00 	cmp.w	sl, #0
 8009d56:	d128      	bne.n	8009daa <def_config_parse+0x1be>
        sym.offs_end = i - 1;
 8009d58:	3d01      	subs	r5, #1
        if (!emit_lex_sym(&sym, str))
 8009d5a:	a80a      	add	r0, sp, #40	; 0x28
 8009d5c:	4621      	mov	r1, r4
        return FALSE;
      }
      break;
    case LEX_STATE_SYM:
      if (!is_sym) {
        sym.offs_end = i - 1;
 8009d5e:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
        if (!emit_lex_sym(&sym, str))
 8009d62:	f7ff fecf 	bl	8009b04 <emit_lex_sym>
 8009d66:	2800      	cmp	r0, #0
 8009d68:	f000 833f 	beq.w	800a3ea <def_config_parse+0x7fe>
          return FALSE;
        // reparse
        state = LEX_STATE_INIT;
 8009d6c:	46d0      	mov	r8, sl
 8009d6e:	e01c      	b.n	8009daa <def_config_parse+0x1be>
        i--;
        continue;
      }
      break;
      case LEX_STATE_NUM:
      if (is_num) {
 8009d70:	9806      	ldr	r0, [sp, #24]
 8009d72:	b9d0      	cbnz	r0, 8009daa <def_config_parse+0x1be>
        // ok
      } else if (is_numdef && c == numdef_chars[1]) {
 8009d74:	b17a      	cbz	r2, 8009d96 <def_config_parse+0x1aa>
 8009d76:	785b      	ldrb	r3, [r3, #1]
 8009d78:	42b3      	cmp	r3, r6
 8009d7a:	d10c      	bne.n	8009d96 <def_config_parse+0x1aa>
        sym.offs_end = i-1;
 8009d7c:	1e6b      	subs	r3, r5, #1
        if (!emit_lex_sym(&sym, str)) return FALSE;
 8009d7e:	a80a      	add	r0, sp, #40	; 0x28
 8009d80:	4621      	mov	r1, r4
      break;
      case LEX_STATE_NUM:
      if (is_num) {
        // ok
      } else if (is_numdef && c == numdef_chars[1]) {
        sym.offs_end = i-1;
 8009d82:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
        if (!emit_lex_sym(&sym, str)) return FALSE;
 8009d86:	f7ff febd 	bl	8009b04 <emit_lex_sym>
 8009d8a:	2800      	cmp	r0, #0
 8009d8c:	f000 832d 	beq.w	800a3ea <def_config_parse+0x7fe>
        state = LEX_STATE_INIT;
 8009d90:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009d94:	e009      	b.n	8009daa <def_config_parse+0x1be>
      } else {
        print_index_indicator(str, i);
 8009d96:	4620      	mov	r0, r4
 8009d98:	b2a9      	uxth	r1, r5
 8009d9a:	f7ff fe51 	bl	8009a40 <print_index_indicator>
        KEYPARSERR("Error: unexpected character [%c] @ index %i\n", c, i);
 8009d9e:	4839      	ldr	r0, [pc, #228]	; (8009e84 <def_config_parse+0x298>)
 8009da0:	4631      	mov	r1, r6
 8009da2:	462a      	mov	r2, r5
 8009da4:	f7ff f9fa 	bl	800919c <arcprint>
 8009da8:	e31f      	b.n	800a3ea <def_config_parse+0x7fe>
  lex_sym_ix = 0;
  memset(lex_syms, 0, sizeof(lex_syms));
  lex_state state = LEX_STATE_INIT;
  lex_type_sym sym = { LEX_UNKNOWN, 0, 0 };

  for (i = 0; i < len + 1; i++) {
 8009daa:	3501      	adds	r5, #1
 8009dac:	e735      	b.n	8009c1a <def_config_parse+0x2e>
  return TRUE;
}

bool def_config_parse(def_config *pindef, const char *str, u16_t len) {
  if (lex(str, len)) {
    return parse(pindef, str, lex_syms, lex_sym_ix);
 8009dae:	4f32      	ldr	r7, [pc, #200]	; (8009e78 <def_config_parse+0x28c>)
static bool parse(def_config *pindef, const char *str, lex_type_sym *syms, u8_t lex_sym_cnt) {
  int sym_ix;

  u8_t def_ix = 0;

  memset(pindef, 0, sizeof(def_config));
 8009db0:	4658      	mov	r0, fp
 8009db2:	2100      	movs	r1, #0
 8009db4:	2213      	movs	r2, #19
  return TRUE;
}

bool def_config_parse(def_config *pindef, const char *str, u16_t len) {
  if (lex(str, len)) {
    return parse(pindef, str, lex_syms, lex_sym_ix);
 8009db6:	f897 a000 	ldrb.w	sl, [r7]
static bool parse(def_config *pindef, const char *str, lex_type_sym *syms, u8_t lex_sym_cnt) {
  int sym_ix;

  u8_t def_ix = 0;

  memset(pindef, 0, sizeof(def_config));
 8009dba:	f004 fae9 	bl	800e390 <memset>

  // check common syntax
  int tern_ix = -1;
  int tern_opt_ix = -1;
 8009dbe:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8009dc2:	1f3d      	subs	r5, r7, #4
  u8_t def_ix = 0;

  memset(pindef, 0, sizeof(def_config));

  // check common syntax
  int tern_ix = -1;
 8009dc4:	46c1      	mov	r9, r8
  int tern_opt_ix = -1;
  for (sym_ix = 0; sym_ix < lex_sym_cnt; sym_ix++) {
 8009dc6:	2600      	movs	r6, #0
 8009dc8:	4556      	cmp	r6, sl
 8009dca:	da6f      	bge.n	8009eac <def_config_parse+0x2c0>
    lex_type_sym *sym = &syms[sym_ix];
    switch (sym->type) {
 8009dcc:	79ab      	ldrb	r3, [r5, #6]
 8009dce:	1daf      	adds	r7, r5, #6
 8009dd0:	3b01      	subs	r3, #1
 8009dd2:	2b05      	cmp	r3, #5
 8009dd4:	d847      	bhi.n	8009e66 <def_config_parse+0x27a>
 8009dd6:	e8df f003 	tbb	[pc, r3]
 8009dda:	6666      	.short	0x6666
 8009ddc:	34136603 	.word	0x34136603
    case LEX_DEF:
      break;
    case LEX_NUM:
      if (sym_ix == 0) {
 8009de0:	b92e      	cbnz	r6, 8009dee <def_config_parse+0x202>
        print_index_indicator(str, sym->offs_start);
 8009de2:	4620      	mov	r0, r4
 8009de4:	8879      	ldrh	r1, [r7, #2]
 8009de6:	f7ff fe2b 	bl	8009a40 <print_index_indicator>
        KEYPARSERR(
 8009dea:	4827      	ldr	r0, [pc, #156]	; (8009e88 <def_config_parse+0x29c>)
 8009dec:	e040      	b.n	8009e70 <def_config_parse+0x284>
            "Syntax error: unexpected numerator ");
        print_lex_sym(sym, str);
        return FALSE;
      } else if (syms[sym_ix - 1].type != LEX_DEF) {
 8009dee:	782b      	ldrb	r3, [r5, #0]
 8009df0:	2b02      	cmp	r3, #2
 8009df2:	d058      	beq.n	8009ea6 <def_config_parse+0x2ba>
        print_index_indicator(str, syms[sym_ix-1].offs_start);
 8009df4:	4620      	mov	r0, r4
 8009df6:	8869      	ldrh	r1, [r5, #2]
 8009df8:	f7ff fe22 	bl	8009a40 <print_index_indicator>
        KEYPARSERR("Syntax error: numerator must follow a definition, found ");
 8009dfc:	4823      	ldr	r0, [pc, #140]	; (8009e8c <def_config_parse+0x2a0>)
 8009dfe:	e2c2      	b.n	800a386 <def_config_parse+0x79a>
    case LEX_PIN:
      break;
    case LEX_ASSIGN:
      break;
    case LEX_TERN:
      if (tern_ix >= 0) {
 8009e00:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8009e04:	d00c      	beq.n	8009e20 <def_config_parse+0x234>
        print_index_indicator(str, sym->offs_start);
 8009e06:	4620      	mov	r0, r4
 8009e08:	8879      	ldrh	r1, [r7, #2]
 8009e0a:	f7ff fe19 	bl	8009a40 <print_index_indicator>
        KEYPARSERR(
 8009e0e:	4b1b      	ldr	r3, [pc, #108]	; (8009e7c <def_config_parse+0x290>)
 8009e10:	4819      	ldr	r0, [pc, #100]	; (8009e78 <def_config_parse+0x28c>)
 8009e12:	699b      	ldr	r3, [r3, #24]
 8009e14:	2506      	movs	r5, #6
 8009e16:	fb05 0509 	mla	r5, r5, r9, r0
 8009e1a:	7819      	ldrb	r1, [r3, #0]
 8009e1c:	481c      	ldr	r0, [pc, #112]	; (8009e90 <def_config_parse+0x2a4>)
 8009e1e:	e01f      	b.n	8009e60 <def_config_parse+0x274>
            "Syntax error: ternary '%c' @ index %i already defined @ index %i\n", tern_chars[0], sym->offs_start, syms[tern_ix].offs_start);
        return FALSE;
      }
      if (sym_ix > 0 && syms[sym_ix - 1].type != LEX_PIN) {
 8009e20:	2e00      	cmp	r6, #0
 8009e22:	d03d      	beq.n	8009ea0 <def_config_parse+0x2b4>
 8009e24:	782b      	ldrb	r3, [r5, #0]
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d03a      	beq.n	8009ea0 <def_config_parse+0x2b4>
        print_index_indicator(str, sym->offs_start);
 8009e2a:	4620      	mov	r0, r4
 8009e2c:	8879      	ldrh	r1, [r7, #2]
 8009e2e:	f7ff fe07 	bl	8009a40 <print_index_indicator>
        KEYPARSERR(
 8009e32:	4b12      	ldr	r3, [pc, #72]	; (8009e7c <def_config_parse+0x290>)
 8009e34:	4817      	ldr	r0, [pc, #92]	; (8009e94 <def_config_parse+0x2a8>)
 8009e36:	699b      	ldr	r3, [r3, #24]
 8009e38:	887a      	ldrh	r2, [r7, #2]
 8009e3a:	7819      	ldrb	r1, [r3, #0]
 8009e3c:	f7ff f9ae 	bl	800919c <arcprint>
 8009e40:	e2a3      	b.n	800a38a <def_config_parse+0x79e>
        return FALSE;
      }
      tern_ix = sym_ix;
      break;
    case LEX_TERN_OPT:
      if (tern_opt_ix >= 0) {
 8009e42:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8009e46:	d02d      	beq.n	8009ea4 <def_config_parse+0x2b8>
        print_index_indicator(str, sym->offs_start);
 8009e48:	4620      	mov	r0, r4
 8009e4a:	8879      	ldrh	r1, [r7, #2]
 8009e4c:	f7ff fdf8 	bl	8009a40 <print_index_indicator>
        KEYPARSERR(
 8009e50:	4b0a      	ldr	r3, [pc, #40]	; (8009e7c <def_config_parse+0x290>)
 8009e52:	4909      	ldr	r1, [pc, #36]	; (8009e78 <def_config_parse+0x28c>)
 8009e54:	699b      	ldr	r3, [r3, #24]
 8009e56:	2506      	movs	r5, #6
 8009e58:	fb05 1508 	mla	r5, r5, r8, r1
 8009e5c:	480e      	ldr	r0, [pc, #56]	; (8009e98 <def_config_parse+0x2ac>)
 8009e5e:	7859      	ldrb	r1, [r3, #1]
 8009e60:	887a      	ldrh	r2, [r7, #2]
 8009e62:	88ab      	ldrh	r3, [r5, #4]
 8009e64:	e04d      	b.n	8009f02 <def_config_parse+0x316>
        return FALSE;
      }
      tern_opt_ix = sym_ix;
      break;
    default:
      print_index_indicator(str, sym->offs_start);
 8009e66:	4620      	mov	r0, r4
 8009e68:	8879      	ldrh	r1, [r7, #2]
 8009e6a:	f7ff fde9 	bl	8009a40 <print_index_indicator>
      KEYPARSERR("Syntax error: unknown symbol ");
 8009e6e:	480b      	ldr	r0, [pc, #44]	; (8009e9c <def_config_parse+0x2b0>)
 8009e70:	f7ff f994 	bl	800919c <arcprint>
      print_lex_sym(sym, str);
 8009e74:	4638      	mov	r0, r7
 8009e76:	e289      	b.n	800a38c <def_config_parse+0x7a0>
 8009e78:	20000aa0 	.word	0x20000aa0
 8009e7c:	20000050 	.word	0x20000050
 8009e80:	080125df 	.word	0x080125df
 8009e84:	08012605 	.word	0x08012605
 8009e88:	08012632 	.word	0x08012632
 8009e8c:	08012656 	.word	0x08012656
 8009e90:	0801268f 	.word	0x0801268f
 8009e94:	080126d1 	.word	0x080126d1
 8009e98:	0801271c 	.word	0x0801271c
 8009e9c:	08012765 	.word	0x08012765
        print_index_indicator(str, sym->offs_start);
        KEYPARSERR(
            "Syntax error: ternary '%c' @ index %i already defined @ index %i\n", tern_chars[0], sym->offs_start, syms[tern_ix].offs_start);
        return FALSE;
      }
      if (sym_ix > 0 && syms[sym_ix - 1].type != LEX_PIN) {
 8009ea0:	46b1      	mov	r9, r6
 8009ea2:	e000      	b.n	8009ea6 <def_config_parse+0x2ba>
        return FALSE;
      }
      tern_ix = sym_ix;
      break;
    case LEX_TERN_OPT:
      if (tern_opt_ix >= 0) {
 8009ea4:	46b0      	mov	r8, r6
  memset(pindef, 0, sizeof(def_config));

  // check common syntax
  int tern_ix = -1;
  int tern_opt_ix = -1;
  for (sym_ix = 0; sym_ix < lex_sym_cnt; sym_ix++) {
 8009ea6:	3601      	adds	r6, #1
 8009ea8:	463d      	mov	r5, r7
 8009eaa:	e78d      	b.n	8009dc8 <def_config_parse+0x1dc>
      print_lex_sym(sym, str);
      return FALSE;
    }
  }

  if (lex_sym_cnt == 0) {
 8009eac:	f1ba 0f00 	cmp.w	sl, #0
 8009eb0:	d101      	bne.n	8009eb6 <def_config_parse+0x2ca>
    KEYPARSERR("Error: no input\n");
 8009eb2:	489f      	ldr	r0, [pc, #636]	; (800a130 <def_config_parse+0x544>)
 8009eb4:	e0e1      	b.n	800a07a <def_config_parse+0x48e>
    return FALSE;
  }

  // ternary syntax
  if (tern_ix >= 0 && tern_opt_ix < 0) {
 8009eb6:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8009eba:	4d9e      	ldr	r5, [pc, #632]	; (800a134 <def_config_parse+0x548>)
 8009ebc:	d024      	beq.n	8009f08 <def_config_parse+0x31c>
 8009ebe:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8009ec2:	d10e      	bne.n	8009ee2 <def_config_parse+0x2f6>
    print_index_indicator(str, syms[tern_ix].offs_start);
 8009ec4:	f04f 0806 	mov.w	r8, #6
 8009ec8:	fb08 5509 	mla	r5, r8, r9, r5
 8009ecc:	4620      	mov	r0, r4
 8009ece:	8869      	ldrh	r1, [r5, #2]
 8009ed0:	f7ff fdb6 	bl	8009a40 <print_index_indicator>
    KEYPARSERR(
 8009ed4:	4b98      	ldr	r3, [pc, #608]	; (800a138 <def_config_parse+0x54c>)
 8009ed6:	4899      	ldr	r0, [pc, #612]	; (800a13c <def_config_parse+0x550>)
 8009ed8:	699b      	ldr	r3, [r3, #24]
 8009eda:	886a      	ldrh	r2, [r5, #2]
 8009edc:	7819      	ldrb	r1, [r3, #0]
 8009ede:	785b      	ldrb	r3, [r3, #1]
 8009ee0:	e00f      	b.n	8009f02 <def_config_parse+0x316>
        "Syntax error: found ternary '%c' @ index %i without ternary option '%c'\n", tern_chars[0], syms[tern_ix].offs_start, tern_chars[1]);
    return FALSE;
  }
  if (tern_ix >= 0 && tern_opt_ix < tern_ix) {
 8009ee2:	45c8      	cmp	r8, r9
 8009ee4:	da10      	bge.n	8009f08 <def_config_parse+0x31c>
    print_index_indicator(str, syms[tern_opt_ix].offs_start);
 8009ee6:	f04f 0906 	mov.w	r9, #6
 8009eea:	fb09 5508 	mla	r5, r9, r8, r5
 8009eee:	4620      	mov	r0, r4
 8009ef0:	8869      	ldrh	r1, [r5, #2]
 8009ef2:	f7ff fda5 	bl	8009a40 <print_index_indicator>
    KEYPARSERR(
 8009ef6:	4b90      	ldr	r3, [pc, #576]	; (800a138 <def_config_parse+0x54c>)
 8009ef8:	4891      	ldr	r0, [pc, #580]	; (800a140 <def_config_parse+0x554>)
 8009efa:	699b      	ldr	r3, [r3, #24]
 8009efc:	886a      	ldrh	r2, [r5, #2]
 8009efe:	7859      	ldrb	r1, [r3, #1]
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	f7ff f94b 	bl	800919c <arcprint>
 8009f06:	e270      	b.n	800a3ea <def_config_parse+0x7fe>
        "Syntax error: found ternary option '%c' @ index %i declared before ternary '%c'\n", tern_chars[1], syms[tern_opt_ix].offs_start, tern_chars[0]);
    return FALSE;
  }

  // assignment syntax
  if (syms[0].type != LEX_PIN) {
 8009f08:	4f8e      	ldr	r7, [pc, #568]	; (800a144 <def_config_parse+0x558>)
    print_index_indicator(str, syms[0].offs_start);
 8009f0a:	4620      	mov	r0, r4
        "Syntax error: found ternary option '%c' @ index %i declared before ternary '%c'\n", tern_chars[1], syms[tern_opt_ix].offs_start, tern_chars[0]);
    return FALSE;
  }

  // assignment syntax
  if (syms[0].type != LEX_PIN) {
 8009f0c:	78bb      	ldrb	r3, [r7, #2]
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	d004      	beq.n	8009f1c <def_config_parse+0x330>
    print_index_indicator(str, syms[0].offs_start);
 8009f12:	88b9      	ldrh	r1, [r7, #4]
 8009f14:	f7ff fd94 	bl	8009a40 <print_index_indicator>
    KEYPARSERR("Syntax error: expected pin as first definition, found ");
 8009f18:	488b      	ldr	r0, [pc, #556]	; (800a148 <def_config_parse+0x55c>)
 8009f1a:	e009      	b.n	8009f30 <def_config_parse+0x344>
    print_lex_sym(&syms[0], str);
    return FALSE;
  }

  if (!parse_pin_nbr(str, &syms[0], &pindef->pin)) {
 8009f1c:	1cb9      	adds	r1, r7, #2
 8009f1e:	465a      	mov	r2, fp
 8009f20:	f7ff fe28 	bl	8009b74 <parse_pin_nbr>
 8009f24:	b940      	cbnz	r0, 8009f38 <def_config_parse+0x34c>
    print_index_indicator(str, syms[0].offs_start);
 8009f26:	4620      	mov	r0, r4
 8009f28:	88b9      	ldrh	r1, [r7, #4]
 8009f2a:	f7ff fd89 	bl	8009a40 <print_index_indicator>
    KEYPARSERR("Syntax error: bad pin number ");
 8009f2e:	4887      	ldr	r0, [pc, #540]	; (800a14c <def_config_parse+0x560>)
 8009f30:	f7ff f934 	bl	800919c <arcprint>
    print_lex_sym(&syms[0], str);
 8009f34:	1cb8      	adds	r0, r7, #2
 8009f36:	e229      	b.n	800a38c <def_config_parse+0x7a0>
    return FALSE;
  }

  if (pindef->pin <= 0 || pindef->pin > APP_CONFIG_PINS) {
 8009f38:	f89b 3000 	ldrb.w	r3, [fp]
 8009f3c:	3b01      	subs	r3, #1
 8009f3e:	b2db      	uxtb	r3, r3
 8009f40:	2b19      	cmp	r3, #25
 8009f42:	d905      	bls.n	8009f50 <def_config_parse+0x364>
    print_index_indicator(str, syms[0].offs_start);
 8009f44:	4620      	mov	r0, r4
 8009f46:	88b9      	ldrh	r1, [r7, #4]
 8009f48:	f7ff fd7a 	bl	8009a40 <print_index_indicator>
    KEYPARSERR("Syntax error: pin number out of range ");
 8009f4c:	4880      	ldr	r0, [pc, #512]	; (800a150 <def_config_parse+0x564>)
 8009f4e:	e7ef      	b.n	8009f30 <def_config_parse+0x344>
    print_lex_sym(&syms[0], str);
    return FALSE;
  }

  if (lex_sym_cnt < 2 || syms[1].type != LEX_ASSIGN) {
 8009f50:	f1ba 0f01 	cmp.w	sl, #1
 8009f54:	d902      	bls.n	8009f5c <def_config_parse+0x370>
 8009f56:	7a3b      	ldrb	r3, [r7, #8]
 8009f58:	2b04      	cmp	r3, #4
 8009f5a:	d014      	beq.n	8009f86 <def_config_parse+0x39a>
    if (lex_sym_cnt >= 1) print_index_indicator(str, syms[1].offs_start);
 8009f5c:	4a79      	ldr	r2, [pc, #484]	; (800a144 <def_config_parse+0x558>)
 8009f5e:	4620      	mov	r0, r4
 8009f60:	8951      	ldrh	r1, [r2, #10]
 8009f62:	f7ff fd6d 	bl	8009a40 <print_index_indicator>
    KEYPARSERR(
 8009f66:	4b74      	ldr	r3, [pc, #464]	; (800a138 <def_config_parse+0x54c>)
 8009f68:	487a      	ldr	r0, [pc, #488]	; (800a154 <def_config_parse+0x568>)
 8009f6a:	695b      	ldr	r3, [r3, #20]
 8009f6c:	7819      	ldrb	r1, [r3, #0]
 8009f6e:	f7ff f915 	bl	800919c <arcprint>
        "Syntax error: expected assignment '%c' as second definition", assign_chars[0]);
    if (lex_sym_cnt > 1) {
 8009f72:	f1ba 0f01 	cmp.w	sl, #1
 8009f76:	d904      	bls.n	8009f82 <def_config_parse+0x396>
      KEYPARSERR(", found ");
 8009f78:	4877      	ldr	r0, [pc, #476]	; (800a158 <def_config_parse+0x56c>)
 8009f7a:	f7ff f90f 	bl	800919c <arcprint>
      print_lex_sym(&syms[1], str);
 8009f7e:	4877      	ldr	r0, [pc, #476]	; (800a15c <def_config_parse+0x570>)
 8009f80:	e204      	b.n	800a38c <def_config_parse+0x7a0>
    } else {
      KEYPARSERR("\n");
 8009f82:	4877      	ldr	r0, [pc, #476]	; (800a160 <def_config_parse+0x574>)
 8009f84:	e079      	b.n	800a07a <def_config_parse+0x48e>
    }
    return FALSE;
  }

  if (lex_sym_cnt >= 3) {
 8009f86:	f1ba 0f02 	cmp.w	sl, #2
 8009f8a:	d04b      	beq.n	800a024 <def_config_parse+0x438>
    if (syms[2].type == LEX_DEF) {
 8009f8c:	7bbb      	ldrb	r3, [r7, #14]
 8009f8e:	2b02      	cmp	r3, #2
 8009f90:	d103      	bne.n	8009f9a <def_config_parse+0x3ae>
      pindef->tern_pin = 0;
 8009f92:	2300      	movs	r3, #0
 8009f94:	f88b 3001 	strb.w	r3, [fp, #1]
 8009f98:	e044      	b.n	800a024 <def_config_parse+0x438>
    } else if (syms[2].type == LEX_PIN) {
 8009f9a:	2b01      	cmp	r3, #1
      // ternary syntax
      if (!parse_pin_nbr(str, &syms[2], &pindef->tern_pin)) {
 8009f9c:	4620      	mov	r0, r4
  }

  if (lex_sym_cnt >= 3) {
    if (syms[2].type == LEX_DEF) {
      pindef->tern_pin = 0;
    } else if (syms[2].type == LEX_PIN) {
 8009f9e:	d138      	bne.n	800a012 <def_config_parse+0x426>
      // ternary syntax
      if (!parse_pin_nbr(str, &syms[2], &pindef->tern_pin)) {
 8009fa0:	f107 010e 	add.w	r1, r7, #14
 8009fa4:	f10b 0201 	add.w	r2, fp, #1
 8009fa8:	f7ff fde4 	bl	8009b74 <parse_pin_nbr>
 8009fac:	b928      	cbnz	r0, 8009fba <def_config_parse+0x3ce>
        print_index_indicator(str, syms[2].offs_start);
 8009fae:	4620      	mov	r0, r4
 8009fb0:	8a39      	ldrh	r1, [r7, #16]
 8009fb2:	f7ff fd45 	bl	8009a40 <print_index_indicator>
        KEYPARSERR("Syntax error: bad ternary pin number ");
 8009fb6:	486b      	ldr	r0, [pc, #428]	; (800a164 <def_config_parse+0x578>)
 8009fb8:	e02f      	b.n	800a01a <def_config_parse+0x42e>
        print_lex_sym(&syms[2], str);
        return FALSE;
      }
      if (pindef->tern_pin == 0 || pindef->tern_pin > APP_CONFIG_PINS) {
 8009fba:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8009fbe:	1e5a      	subs	r2, r3, #1
 8009fc0:	b2d2      	uxtb	r2, r2
 8009fc2:	2a19      	cmp	r2, #25
 8009fc4:	d906      	bls.n	8009fd4 <def_config_parse+0x3e8>
        print_index_indicator(str, syms[2].offs_start);
 8009fc6:	4b5f      	ldr	r3, [pc, #380]	; (800a144 <def_config_parse+0x558>)
 8009fc8:	4620      	mov	r0, r4
 8009fca:	8a19      	ldrh	r1, [r3, #16]
 8009fcc:	f7ff fd38 	bl	8009a40 <print_index_indicator>
        KEYPARSERR("Syntax error: ternary pin number out of range ");
 8009fd0:	4865      	ldr	r0, [pc, #404]	; (800a168 <def_config_parse+0x57c>)
 8009fd2:	e009      	b.n	8009fe8 <def_config_parse+0x3fc>
        print_lex_sym(&syms[2], str);
        return FALSE;
      }
      if (pindef->tern_pin == pindef->pin) {
 8009fd4:	f89b 2000 	ldrb.w	r2, [fp]
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d109      	bne.n	8009ff0 <def_config_parse+0x404>
        print_index_indicator(str, syms[2].offs_start);
 8009fdc:	4a59      	ldr	r2, [pc, #356]	; (800a144 <def_config_parse+0x558>)
 8009fde:	4620      	mov	r0, r4
 8009fe0:	8a11      	ldrh	r1, [r2, #16]
 8009fe2:	f7ff fd2d 	bl	8009a40 <print_index_indicator>
        KEYPARSERR(
 8009fe6:	4861      	ldr	r0, [pc, #388]	; (800a16c <def_config_parse+0x580>)
 8009fe8:	f7ff f8d8 	bl	800919c <arcprint>
            "Syntax error: ternary pin cannot have same number as pin assignment ");
        print_lex_sym(&syms[2], str);
 8009fec:	4860      	ldr	r0, [pc, #384]	; (800a170 <def_config_parse+0x584>)
 8009fee:	e1cd      	b.n	800a38c <def_config_parse+0x7a0>
        return FALSE;
      }

      if (syms[3].type != LEX_TERN) {
 8009ff0:	4e54      	ldr	r6, [pc, #336]	; (800a144 <def_config_parse+0x558>)
 8009ff2:	7d33      	ldrb	r3, [r6, #20]
 8009ff4:	2b05      	cmp	r3, #5
 8009ff6:	d015      	beq.n	800a024 <def_config_parse+0x438>
        print_index_indicator(str, syms[3].offs_start);
 8009ff8:	4620      	mov	r0, r4
 8009ffa:	8af1      	ldrh	r1, [r6, #22]
 8009ffc:	f7ff fd20 	bl	8009a40 <print_index_indicator>
        KEYPARSERR(
 800a000:	4b4d      	ldr	r3, [pc, #308]	; (800a138 <def_config_parse+0x54c>)
 800a002:	485c      	ldr	r0, [pc, #368]	; (800a174 <def_config_parse+0x588>)
 800a004:	699b      	ldr	r3, [r3, #24]
 800a006:	7819      	ldrb	r1, [r3, #0]
 800a008:	f7ff f8c8 	bl	800919c <arcprint>
            "Syntax error: ternary character '%c' must follow pin ternary definition, found ", tern_chars[0]);
        print_lex_sym(&syms[3], str);
 800a00c:	f106 0014 	add.w	r0, r6, #20
 800a010:	e1bc      	b.n	800a38c <def_config_parse+0x7a0>
        return FALSE;
      }
    } else {
      print_index_indicator(str, syms[2].offs_start);
 800a012:	8a39      	ldrh	r1, [r7, #16]
 800a014:	f7ff fd14 	bl	8009a40 <print_index_indicator>
      KEYPARSERR("Syntax error: unexpected definition ");
 800a018:	4857      	ldr	r0, [pc, #348]	; (800a178 <def_config_parse+0x58c>)
 800a01a:	f7ff f8bf 	bl	800919c <arcprint>
      print_lex_sym(&syms[2], str);
 800a01e:	f107 000e 	add.w	r0, r7, #14
 800a022:	e1b3      	b.n	800a38c <def_config_parse+0x7a0>
  }

  // build

  def_ix = 0;
  sym_ix = pindef->tern_pin > 0 ? 4 : 2;
 800a024:	f89b 3001 	ldrb.w	r3, [fp, #1]
  pindef->tern_splice = 0;
 800a028:	2600      	movs	r6, #0
 800a02a:	42b3      	cmp	r3, r6
 800a02c:	bf0c      	ite	eq
 800a02e:	f04f 0c02 	moveq.w	ip, #2
 800a032:	f04f 0c04 	movne.w	ip, #4
 800a036:	42b3      	cmp	r3, r6
 800a038:	bf14      	ite	ne
 800a03a:	2318      	movne	r3, #24
 800a03c:	230c      	moveq	r3, #12
 800a03e:	f88b 6002 	strb.w	r6, [fp, #2]
 800a042:	f8cd c01c 	str.w	ip, [sp, #28]
 800a046:	441d      	add	r5, r3
    }
  }

  // build

  def_ix = 0;
 800a048:	9606      	str	r6, [sp, #24]
 800a04a:	e031      	b.n	800a0b0 <def_config_parse+0x4c4>
        KEYPARSERR("Syntax error: unknown definition ");
        print_lex_sym(sym, str);
        return FALSE;
      }
      int i;
      for (i = pindef->tern_splice; i < def_ix; i++) {
 800a04c:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800a050:	f8dd c018 	ldr.w	ip, [sp, #24]
 800a054:	4562      	cmp	r2, ip
 800a056:	f2c0 80cc 	blt.w	800a1f2 <def_config_parse+0x606>
          KEYPARSERR("Error: identical definition ");
          print_lex_sym(sym, str);
          return FALSE;
        }
      }
      def_ix++;
 800a05a:	f10c 0301 	add.w	r3, ip, #1
 800a05e:	b2db      	uxtb	r3, r3
      if (def_ix > APP_CONFIG_DEFS_PER_PIN) {
 800a060:	2b08      	cmp	r3, #8
          KEYPARSERR("Error: identical definition ");
          print_lex_sym(sym, str);
          return FALSE;
        }
      }
      def_ix++;
 800a062:	9306      	str	r3, [sp, #24]
      if (def_ix > APP_CONFIG_DEFS_PER_PIN) {
 800a064:	d91d      	bls.n	800a0a2 <def_config_parse+0x4b6>
        print_index_indicator(str, syms[def_ix + 1].offs_start);
 800a066:	4837      	ldr	r0, [pc, #220]	; (800a144 <def_config_parse+0x558>)
 800a068:	2206      	movs	r2, #6
 800a06a:	3301      	adds	r3, #1
 800a06c:	fb02 0303 	mla	r3, r2, r3, r0
 800a070:	4620      	mov	r0, r4
 800a072:	8899      	ldrh	r1, [r3, #4]
 800a074:	f7ff fce4 	bl	8009a40 <print_index_indicator>
        KEYPARSERR("Error: definition overflow\n");
 800a078:	4840      	ldr	r0, [pc, #256]	; (800a17c <def_config_parse+0x590>)
 800a07a:	f7ff f88f 	bl	800919c <arcprint>
 800a07e:	e1b4      	b.n	800a3ea <def_config_parse+0x7fe>
        return FALSE;
      }

      int i;
      for (i = pindef->tern_splice; i < def_ix-1; i++) {
        if (pindef->id[i].type == pindef->id[def_ix-1].type &&
 800a080:	eb0b 0743 	add.w	r7, fp, r3, lsl #1
 800a084:	78fe      	ldrb	r6, [r7, #3]
 800a086:	78d0      	ldrb	r0, [r2, #3]
 800a088:	f006 0803 	and.w	r8, r6, #3
 800a08c:	f000 0c03 	and.w	ip, r0, #3
 800a090:	45e0      	cmp	r8, ip
 800a092:	f000 8146 	beq.w	800a322 <def_config_parse+0x736>
        print_lex_sym(sym, str);
        return FALSE;
      }

      int i;
      for (i = pindef->tern_splice; i < def_ix-1; i++) {
 800a096:	3301      	adds	r3, #1
 800a098:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a09c:	4563      	cmp	r3, ip
 800a09e:	dbef      	blt.n	800a080 <def_config_parse+0x494>
  sym_ix = pindef->tern_pin > 0 ? 4 : 2;
  pindef->tern_splice = 0;
  bool numerator = FALSE;
  bool prev_numerator = FALSE;
  while (sym_ix < lex_sym_cnt) {
    numerator = FALSE;
 800a0a0:	2600      	movs	r6, #0
      KEYPARSERR("Syntax error: unexpected symbol ");
      print_lex_sym(sym, str);
      return FALSE;
    }
    prev_numerator = numerator;
    sym_ix++;
 800a0a2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800a0a6:	3506      	adds	r5, #6
 800a0a8:	f10c 0c01 	add.w	ip, ip, #1
 800a0ac:	f8cd c01c 	str.w	ip, [sp, #28]
  def_ix = 0;
  sym_ix = pindef->tern_pin > 0 ? 4 : 2;
  pindef->tern_splice = 0;
  bool numerator = FALSE;
  bool prev_numerator = FALSE;
  while (sym_ix < lex_sym_cnt) {
 800a0b0:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800a0b4:	45d4      	cmp	ip, sl
 800a0b6:	f280 8153 	bge.w	800a360 <def_config_parse+0x774>
 800a0ba:	782b      	ldrb	r3, [r5, #0]
    numerator = FALSE;
    lex_type_sym *sym = &syms[sym_ix];
    if (prev_numerator && sym->type != LEX_NUM) {
 800a0bc:	b146      	cbz	r6, 800a0d0 <def_config_parse+0x4e4>
 800a0be:	2b03      	cmp	r3, #3
 800a0c0:	f000 80ac 	beq.w	800a21c <def_config_parse+0x630>
      print_index_indicator(str, sym->offs_start);
 800a0c4:	4620      	mov	r0, r4
 800a0c6:	8869      	ldrh	r1, [r5, #2]
 800a0c8:	f7ff fcba 	bl	8009a40 <print_index_indicator>
      KEYPARSERR("Syntax error: expected numerator instead of ");
 800a0cc:	482c      	ldr	r0, [pc, #176]	; (800a180 <def_config_parse+0x594>)
 800a0ce:	e15a      	b.n	800a386 <def_config_parse+0x79a>
      print_lex_sym(sym, str);
      return FALSE;
    }
    if (sym->type == LEX_DEF) {
 800a0d0:	2b02      	cmp	r3, #2
 800a0d2:	f040 80a0 	bne.w	800a216 <def_config_parse+0x62a>

static void lookup_def(const char *str, lex_type_sym *sym, hid_id *h_id, bool *numerator) {
  // test keyboard definitions
  enum kb_hid_code kb_code;
  for (kb_code = 0; kb_code < _KB_HID_CODE_MAX; kb_code++) {
    const keymap *kb_map = USB_ARC_get_keymap(kb_code);
 800a0d6:	4630      	mov	r0, r6
 800a0d8:	f002 fc3c 	bl	800c954 <USB_ARC_get_keymap>
 800a0dc:	4607      	mov	r7, r0
    if (kb_map->name == NULL) continue;
 800a0de:	6800      	ldr	r0, [r0, #0]
 800a0e0:	b150      	cbz	r0, 800a0f8 <def_config_parse+0x50c>
    if (sym_strcmp(kb_map->name, str, sym) == 0) {
 800a0e2:	4621      	mov	r1, r4
 800a0e4:	886a      	ldrh	r2, [r5, #2]
 800a0e6:	88ab      	ldrh	r3, [r5, #4]
 800a0e8:	f004 fa30 	bl	800e54c <sym_strcmp.isra.4>
 800a0ec:	b920      	cbnz	r0, 800a0f8 <def_config_parse+0x50c>
      h_id->type = HID_ID_TYPE_KEYBOARD;
      h_id->kb.kb_code = kb_code;
 800a0ee:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
      *numerator = kb_map->numerator;
 800a0f2:	7a3e      	ldrb	r6, [r7, #8]
  enum kb_hid_code kb_code;
  for (kb_code = 0; kb_code < _KB_HID_CODE_MAX; kb_code++) {
    const keymap *kb_map = USB_ARC_get_keymap(kb_code);
    if (kb_map->name == NULL) continue;
    if (sym_strcmp(kb_map->name, str, sym) == 0) {
      h_id->type = HID_ID_TYPE_KEYBOARD;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	e065      	b.n	800a1c4 <def_config_parse+0x5d8>
}

static void lookup_def(const char *str, lex_type_sym *sym, hid_id *h_id, bool *numerator) {
  // test keyboard definitions
  enum kb_hid_code kb_code;
  for (kb_code = 0; kb_code < _KB_HID_CODE_MAX; kb_code++) {
 800a0f8:	3601      	adds	r6, #1
 800a0fa:	b2f6      	uxtb	r6, r6
 800a0fc:	2ec5      	cmp	r6, #197	; 0xc5
 800a0fe:	d1ea      	bne.n	800a0d6 <def_config_parse+0x4ea>
 800a100:	2600      	movs	r6, #0
  }

  // test mouse definitions
  enum mouse_code m_code;
  for (m_code = 0; m_code < _MOUSE_CODE_MAX; m_code++) {
    const keymap *m_map = USB_ARC_get_mousemap(m_code);
 800a102:	4630      	mov	r0, r6
 800a104:	f002 fc2e 	bl	800c964 <USB_ARC_get_mousemap>
 800a108:	4607      	mov	r7, r0
    if (m_map->name == NULL) continue;
 800a10a:	6800      	ldr	r0, [r0, #0]
 800a10c:	2800      	cmp	r0, #0
 800a10e:	d039      	beq.n	800a184 <def_config_parse+0x598>
    if (sym_strcmp(m_map->name, str, sym) == 0) {
 800a110:	4621      	mov	r1, r4
 800a112:	886a      	ldrh	r2, [r5, #2]
 800a114:	88ab      	ldrh	r3, [r5, #4]
 800a116:	f004 fa19 	bl	800e54c <sym_strcmp.isra.4>
 800a11a:	bb98      	cbnz	r0, 800a184 <def_config_parse+0x598>
      h_id->type = HID_ID_TYPE_MOUSE;
      h_id->mouse.mouse_code = m_code;
 800a11c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800a120:	f366 0385 	bfi	r3, r6, #2, #4
 800a124:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
      *numerator = m_map->numerator;
 800a128:	7a3e      	ldrb	r6, [r7, #8]
  enum mouse_code m_code;
  for (m_code = 0; m_code < _MOUSE_CODE_MAX; m_code++) {
    const keymap *m_map = USB_ARC_get_mousemap(m_code);
    if (m_map->name == NULL) continue;
    if (sym_strcmp(m_map->name, str, sym) == 0) {
      h_id->type = HID_ID_TYPE_MOUSE;
 800a12a:	2302      	movs	r3, #2
 800a12c:	e04a      	b.n	800a1c4 <def_config_parse+0x5d8>
 800a12e:	bf00      	nop
 800a130:	08012783 	.word	0x08012783
 800a134:	20000aa2 	.word	0x20000aa2
 800a138:	20000050 	.word	0x20000050
 800a13c:	08012794 	.word	0x08012794
 800a140:	080127dd 	.word	0x080127dd
 800a144:	20000aa0 	.word	0x20000aa0
 800a148:	0801282e 	.word	0x0801282e
 800a14c:	08012865 	.word	0x08012865
 800a150:	08012883 	.word	0x08012883
 800a154:	080128aa 	.word	0x080128aa
 800a158:	08012686 	.word	0x08012686
 800a15c:	20000aa8 	.word	0x20000aa8
 800a160:	0801197d 	.word	0x0801197d
 800a164:	080128e6 	.word	0x080128e6
 800a168:	0801290c 	.word	0x0801290c
 800a16c:	0801293b 	.word	0x0801293b
 800a170:	20000aae 	.word	0x20000aae
 800a174:	08012980 	.word	0x08012980
 800a178:	080129d0 	.word	0x080129d0
 800a17c:	08012a61 	.word	0x08012a61
 800a180:	080129f5 	.word	0x080129f5
    }
  }

  // test mouse definitions
  enum mouse_code m_code;
  for (m_code = 0; m_code < _MOUSE_CODE_MAX; m_code++) {
 800a184:	3601      	adds	r6, #1
 800a186:	b2f6      	uxtb	r6, r6
 800a188:	2e06      	cmp	r6, #6
 800a18a:	d1ba      	bne.n	800a102 <def_config_parse+0x516>
 800a18c:	2600      	movs	r6, #0
  }

  // test joystick definitions
  enum joystick_code j_code;
  for (j_code = 0; j_code < _JOYSTICK_CODE_MAX; j_code++) {
    const keymap *j_map = USB_ARC_get_joystickmap(j_code);
 800a18e:	4630      	mov	r0, r6
 800a190:	f002 fbf0 	bl	800c974 <USB_ARC_get_joystickmap>
 800a194:	4607      	mov	r7, r0
    if (j_map->name == NULL) continue;
 800a196:	6800      	ldr	r0, [r0, #0]
 800a198:	b170      	cbz	r0, 800a1b8 <def_config_parse+0x5cc>
    if (sym_strcmp(j_map->name, str, sym) == 0) {
 800a19a:	4621      	mov	r1, r4
 800a19c:	886a      	ldrh	r2, [r5, #2]
 800a19e:	88ab      	ldrh	r3, [r5, #4]
 800a1a0:	f004 f9d4 	bl	800e54c <sym_strcmp.isra.4>
 800a1a4:	b940      	cbnz	r0, 800a1b8 <def_config_parse+0x5cc>
      h_id->type = HID_ID_TYPE_JOYSTICK;
      h_id->joy.joystick_code = j_code;
 800a1a6:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800a1aa:	f366 0386 	bfi	r3, r6, #2, #5
 800a1ae:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
      *numerator = j_map->numerator;
 800a1b2:	7a3e      	ldrb	r6, [r7, #8]
  enum joystick_code j_code;
  for (j_code = 0; j_code < _JOYSTICK_CODE_MAX; j_code++) {
    const keymap *j_map = USB_ARC_get_joystickmap(j_code);
    if (j_map->name == NULL) continue;
    if (sym_strcmp(j_map->name, str, sym) == 0) {
      h_id->type = HID_ID_TYPE_JOYSTICK;
 800a1b4:	2303      	movs	r3, #3
 800a1b6:	e005      	b.n	800a1c4 <def_config_parse+0x5d8>
    }
  }

  // test joystick definitions
  enum joystick_code j_code;
  for (j_code = 0; j_code < _JOYSTICK_CODE_MAX; j_code++) {
 800a1b8:	3601      	adds	r6, #1
 800a1ba:	b2f6      	uxtb	r6, r6
 800a1bc:	2e20      	cmp	r6, #32
 800a1be:	d1e6      	bne.n	800a18e <def_config_parse+0x5a2>
      *numerator = j_map->numerator;
      return;
    }
  }

  h_id->type = HID_ID_TYPE_NONE;
 800a1c0:	2300      	movs	r3, #0
  sym_ix = pindef->tern_pin > 0 ? 4 : 2;
  pindef->tern_splice = 0;
  bool numerator = FALSE;
  bool prev_numerator = FALSE;
  while (sym_ix < lex_sym_cnt) {
    numerator = FALSE;
 800a1c2:	461e      	mov	r6, r3
    }
    if (sym->type == LEX_DEF) {
      hid_id h_id;
      lookup_def(str, sym, &h_id, &numerator);
      pindef->id[def_ix].type = h_id.type;
      pindef->id[def_ix].raw = h_id.raw;
 800a1c4:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
      return FALSE;
    }
    if (sym->type == LEX_DEF) {
      hid_id h_id;
      lookup_def(str, sym, &h_id, &numerator);
      pindef->id[def_ix].type = h_id.type;
 800a1c8:	f8dd c018 	ldr.w	ip, [sp, #24]
      pindef->id[def_ix].raw = h_id.raw;
 800a1cc:	f3c2 018d 	ubfx	r1, r2, #2, #14
 800a1d0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
      return FALSE;
    }
    if (sym->type == LEX_DEF) {
      hid_id h_id;
      lookup_def(str, sym, &h_id, &numerator);
      pindef->id[def_ix].type = h_id.type;
 800a1d4:	eb0b 004c 	add.w	r0, fp, ip, lsl #1
      pindef->id[def_ix].raw = h_id.raw;
 800a1d8:	431a      	orrs	r2, r3
 800a1da:	70c2      	strb	r2, [r0, #3]
 800a1dc:	098f      	lsrs	r7, r1, #6
      if (pindef->id[def_ix].type == HID_ID_TYPE_NONE) {
 800a1de:	0792      	lsls	r2, r2, #30
    }
    if (sym->type == LEX_DEF) {
      hid_id h_id;
      lookup_def(str, sym, &h_id, &numerator);
      pindef->id[def_ix].type = h_id.type;
      pindef->id[def_ix].raw = h_id.raw;
 800a1e0:	7107      	strb	r7, [r0, #4]
      if (pindef->id[def_ix].type == HID_ID_TYPE_NONE) {
 800a1e2:	f47f af33 	bne.w	800a04c <def_config_parse+0x460>
        print_index_indicator(str, sym->offs_start);
 800a1e6:	4620      	mov	r0, r4
 800a1e8:	8869      	ldrh	r1, [r5, #2]
 800a1ea:	f7ff fc29 	bl	8009a40 <print_index_indicator>
        KEYPARSERR("Syntax error: unknown definition ");
 800a1ee:	4883      	ldr	r0, [pc, #524]	; (800a3fc <def_config_parse+0x810>)
 800a1f0:	e0c9      	b.n	800a386 <def_config_parse+0x79a>
        print_lex_sym(sym, str);
        return FALSE;
      }
      int i;
      for (i = pindef->tern_splice; i < def_ix; i++) {
        if (pindef->id[i].type == h_id.type &&
 800a1f2:	eb0b 0742 	add.w	r7, fp, r2, lsl #1
 800a1f6:	78f8      	ldrb	r0, [r7, #3]
 800a1f8:	f000 0c03 	and.w	ip, r0, #3
 800a1fc:	459c      	cmp	ip, r3
 800a1fe:	d108      	bne.n	800a212 <def_config_parse+0x626>
            pindef->id[i].raw == h_id.raw) {
 800a200:	793f      	ldrb	r7, [r7, #4]
 800a202:	01bf      	lsls	r7, r7, #6
        print_lex_sym(sym, str);
        return FALSE;
      }
      int i;
      for (i = pindef->tern_splice; i < def_ix; i++) {
        if (pindef->id[i].type == h_id.type &&
 800a204:	ea47 0090 	orr.w	r0, r7, r0, lsr #2
 800a208:	4288      	cmp	r0, r1
 800a20a:	d102      	bne.n	800a212 <def_config_parse+0x626>
            pindef->id[i].raw == h_id.raw) {
          print_index_indicator(str, sym->offs_start);
 800a20c:	4620      	mov	r0, r4
 800a20e:	8869      	ldrh	r1, [r5, #2]
 800a210:	e095      	b.n	800a33e <def_config_parse+0x752>
        KEYPARSERR("Syntax error: unknown definition ");
        print_lex_sym(sym, str);
        return FALSE;
      }
      int i;
      for (i = pindef->tern_splice; i < def_ix; i++) {
 800a212:	3201      	adds	r2, #1
 800a214:	e71c      	b.n	800a050 <def_config_parse+0x464>
        print_index_indicator(str, syms[def_ix + 1].offs_start);
        KEYPARSERR("Error: definition overflow\n");
        return FALSE;
      }

    } else if (sym->type == LEX_NUM) {
 800a216:	2b03      	cmp	r3, #3
 800a218:	f040 8095 	bne.w	800a346 <def_config_parse+0x75a>
      if (prev_numerator) {
 800a21c:	2e00      	cmp	r6, #0
 800a21e:	d07a      	beq.n	800a316 <def_config_parse+0x72a>
  }
  return TRUE;
}

static bool is_acc_sym(const char *str, lex_type_sym *sym) {
  if (1 + sym->offs_end - sym->offs_start <= strlen(acc_sym)) {
 800a220:	4b77      	ldr	r3, [pc, #476]	; (800a400 <def_config_parse+0x814>)
        return FALSE;
      }

    } else if (sym->type == LEX_NUM) {
      if (prev_numerator) {
        if (!parse_numerator(sym, str, &pindef->id[def_ix-1])) {
 800a222:	9a06      	ldr	r2, [sp, #24]
  }
  return TRUE;
}

static bool is_acc_sym(const char *str, lex_type_sym *sym) {
  if (1 + sym->offs_end - sym->offs_start <= strlen(acc_sym)) {
 800a224:	f8d3 801c 	ldr.w	r8, [r3, #28]
        return FALSE;
      }

    } else if (sym->type == LEX_NUM) {
      if (prev_numerator) {
        if (!parse_numerator(sym, str, &pindef->id[def_ix-1])) {
 800a228:	3a01      	subs	r2, #1
  }
  return TRUE;
}

static bool is_acc_sym(const char *str, lex_type_sym *sym) {
  if (1 + sym->offs_end - sym->offs_start <= strlen(acc_sym)) {
 800a22a:	4640      	mov	r0, r8
        return FALSE;
      }

    } else if (sym->type == LEX_NUM) {
      if (prev_numerator) {
        if (!parse_numerator(sym, str, &pindef->id[def_ix-1])) {
 800a22c:	eb0b 0742 	add.w	r7, fp, r2, lsl #1
 800a230:	9208      	str	r2, [sp, #32]
  }
  return TRUE;
}

static bool is_acc_sym(const char *str, lex_type_sym *sym) {
  if (1 + sym->offs_end - sym->offs_start <= strlen(acc_sym)) {
 800a232:	f7f6 fe13 	bl	8000e5c <strlen>
 800a236:	88ab      	ldrh	r3, [r5, #4]
    }
  }
  return TRUE;
}

static bool parse_numerator(lex_type_sym *sym, const char *str, hid_id *id) {
 800a238:	f8b5 9002 	ldrh.w	r9, [r5, #2]
  }
  return TRUE;
}

static bool is_acc_sym(const char *str, lex_type_sym *sym) {
  if (1 + sym->offs_end - sym->offs_start <= strlen(acc_sym)) {
 800a23c:	3301      	adds	r3, #1
 800a23e:	ebc9 0303 	rsb	r3, r9, r3
 800a242:	4283      	cmp	r3, r0
        return FALSE;
      }

    } else if (sym->type == LEX_NUM) {
      if (prev_numerator) {
        if (!parse_numerator(sym, str, &pindef->id[def_ix-1])) {
 800a244:	f107 0603 	add.w	r6, r7, #3
  }
  return TRUE;
}

static bool is_acc_sym(const char *str, lex_type_sym *sym) {
  if (1 + sym->offs_end - sym->offs_start <= strlen(acc_sym)) {
 800a248:	f04f 0300 	mov.w	r3, #0
 800a24c:	dd1e      	ble.n	800a28c <def_config_parse+0x6a0>
 800a24e:	eb04 0c09 	add.w	ip, r4, r9
    return FALSE;
  }
  int i;
  for (i = 0; i < strlen(acc_sym); i++) {
 800a252:	4283      	cmp	r3, r0
 800a254:	f280 80cb 	bge.w	800a3ee <def_config_parse+0x802>
    if (to_lower(acc_sym[i]) != to_lower(str[sym->offs_start + i])) {
 800a258:	f818 1003 	ldrb.w	r1, [r8, r3]

static u8_t lex_sym_ix;
static lex_type_sym lex_syms[MAX_LEX_SYM_LEN];

static char to_lower(char c) {
  if (c >= 'A' && c <= 'Z')
 800a25c:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
 800a260:	b2d2      	uxtb	r2, r2
 800a262:	2a19      	cmp	r2, #25
  if (1 + sym->offs_end - sym->offs_start <= strlen(acc_sym)) {
    return FALSE;
  }
  int i;
  for (i = 0; i < strlen(acc_sym); i++) {
    if (to_lower(acc_sym[i]) != to_lower(str[sym->offs_start + i])) {
 800a264:	f81c 2003 	ldrb.w	r2, [ip, r3]
static u8_t lex_sym_ix;
static lex_type_sym lex_syms[MAX_LEX_SYM_LEN];

static char to_lower(char c) {
  if (c >= 'A' && c <= 'Z')
    return c - 'A' + 'a';
 800a268:	bf98      	it	ls
 800a26a:	3120      	addls	r1, #32

static u8_t lex_sym_ix;
static lex_type_sym lex_syms[MAX_LEX_SYM_LEN];

static char to_lower(char c) {
  if (c >= 'A' && c <= 'Z')
 800a26c:	f1a2 0941 	sub.w	r9, r2, #65	; 0x41
 800a270:	fa5f f989 	uxtb.w	r9, r9
    return c - 'A' + 'a';
 800a274:	bf98      	it	ls
 800a276:	b2c9      	uxtbls	r1, r1

static u8_t lex_sym_ix;
static lex_type_sym lex_syms[MAX_LEX_SYM_LEN];

static char to_lower(char c) {
  if (c >= 'A' && c <= 'Z')
 800a278:	f1b9 0f19 	cmp.w	r9, #25
    return c - 'A' + 'a';
 800a27c:	bf9c      	itt	ls
 800a27e:	3220      	addls	r2, #32
 800a280:	b2d2      	uxtbls	r2, r2
  if (1 + sym->offs_end - sym->offs_start <= strlen(acc_sym)) {
    return FALSE;
  }
  int i;
  for (i = 0; i < strlen(acc_sym); i++) {
    if (to_lower(acc_sym[i]) != to_lower(str[sym->offs_start + i])) {
 800a282:	4291      	cmp	r1, r2
 800a284:	d101      	bne.n	800a28a <def_config_parse+0x69e>
static bool is_acc_sym(const char *str, lex_type_sym *sym) {
  if (1 + sym->offs_end - sym->offs_start <= strlen(acc_sym)) {
    return FALSE;
  }
  int i;
  for (i = 0; i < strlen(acc_sym); i++) {
 800a286:	3301      	adds	r3, #1
 800a288:	e7e3      	b.n	800a252 <def_config_parse+0x666>
    if (to_lower(acc_sym[i]) != to_lower(str[sym->offs_start + i])) {
 800a28a:	2300      	movs	r3, #0
  return TRUE;
}

static bool parse_numerator(lex_type_sym *sym, const char *str, hid_id *id) {
  s32_t nbr = 0;
  u32_t offs = 0;
 800a28c:	4698      	mov	r8, r3
  bool is_acc = is_acc_sym(str, sym);
  if (is_acc) {
    offs = strlen(acc_sym);
  }
  if (id->type == HID_ID_TYPE_MOUSE) {
 800a28e:	78fa      	ldrb	r2, [r7, #3]
 800a290:	f002 0203 	and.w	r2, r2, #3
 800a294:	2a02      	cmp	r2, #2
 800a296:	d001      	beq.n	800a29c <def_config_parse+0x6b0>
    id->mouse.mouse_acc = is_acc;
  } else if (id->type == HID_ID_TYPE_JOYSTICK) {
 800a298:	2a03      	cmp	r2, #3
 800a29a:	d104      	bne.n	800a2a6 <def_config_parse+0x6ba>
    id->joy.joystick_acc = is_acc;
 800a29c:	7872      	ldrb	r2, [r6, #1]
 800a29e:	f363 0200 	bfi	r2, r3, #0, #1
 800a2a2:	7072      	strb	r2, [r6, #1]
 800a2a4:	e004      	b.n	800a2b0 <def_config_parse+0x6c4>
  } else {
    ASSERT(FALSE);
 800a2a6:	4857      	ldr	r0, [pc, #348]	; (800a404 <def_config_parse+0x818>)
 800a2a8:	f44f 719e 	mov.w	r1, #316	; 0x13c
 800a2ac:	f7f6 fa98 	bl	80007e0 <SYS_assert>
    }
  }
  return TRUE;
}

static bool parse_numerator(lex_type_sym *sym, const char *str, hid_id *id) {
 800a2b0:	8869      	ldrh	r1, [r5, #2]
 800a2b2:	f8b5 c004 	ldrh.w	ip, [r5, #4]

static bool parse_numerator_nbr(const char *str, lex_type_sym *sym, u32_t offs, s32_t *nbr) {
  *nbr = 0;
  int i = offs;
  bool sign = FALSE;
  if (str[sym->offs_start + i] == '+') {
 800a2b6:	1863      	adds	r3, r4, r1
 800a2b8:	f813 3008 	ldrb.w	r3, [r3, r8]
  return TRUE;
}

static bool parse_numerator_nbr(const char *str, lex_type_sym *sym, u32_t offs, s32_t *nbr) {
  *nbr = 0;
  int i = offs;
 800a2bc:	4640      	mov	r0, r8
  bool sign = FALSE;
  if (str[sym->offs_start + i] == '+') {
 800a2be:	2b2b      	cmp	r3, #43	; 0x2b
 800a2c0:	d102      	bne.n	800a2c8 <def_config_parse+0x6dc>
    i++;
 800a2c2:	f108 0001 	add.w	r0, r8, #1
 800a2c6:	e005      	b.n	800a2d4 <def_config_parse+0x6e8>
  } else if (str[sym->offs_start + i] == '-') {
 800a2c8:	2b2d      	cmp	r3, #45	; 0x2d
 800a2ca:	d103      	bne.n	800a2d4 <def_config_parse+0x6e8>
    sign = TRUE;
    i++;
 800a2cc:	f108 0001 	add.w	r0, r8, #1
  int i = offs;
  bool sign = FALSE;
  if (str[sym->offs_start + i] == '+') {
    i++;
  } else if (str[sym->offs_start + i] == '-') {
    sign = TRUE;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	e000      	b.n	800a2d6 <def_config_parse+0x6ea>
}

static bool parse_numerator_nbr(const char *str, lex_type_sym *sym, u32_t offs, s32_t *nbr) {
  *nbr = 0;
  int i = offs;
  bool sign = FALSE;
 800a2d4:	2300      	movs	r3, #0
    i++;
  } else if (str[sym->offs_start + i] == '-') {
    sign = TRUE;
    i++;
  }
  while (i <= sym->offs_end - sym->offs_start) {
 800a2d6:	ebc1 0c0c 	rsb	ip, r1, ip
  }
  return TRUE;
}

static bool parse_numerator_nbr(const char *str, lex_type_sym *sym, u32_t offs, s32_t *nbr) {
  *nbr = 0;
 800a2da:	f04f 0900 	mov.w	r9, #0
    i++;
  } else if (str[sym->offs_start + i] == '-') {
    sign = TRUE;
    i++;
  }
  while (i <= sym->offs_end - sym->offs_start) {
 800a2de:	f8cd c004 	str.w	ip, [sp, #4]
 800a2e2:	eb04 0801 	add.w	r8, r4, r1
 800a2e6:	9a01      	ldr	r2, [sp, #4]
 800a2e8:	4290      	cmp	r0, r2
 800a2ea:	dc0f      	bgt.n	800a30c <def_config_parse+0x720>
    *nbr *= 10;
    char c = str[sym->offs_start + i];
 800a2ec:	f818 2000 	ldrb.w	r2, [r8, r0]
  } else if (str[sym->offs_start + i] == '-') {
    sign = TRUE;
    i++;
  }
  while (i <= sym->offs_end - sym->offs_start) {
    *nbr *= 10;
 800a2f0:	f04f 0c0a 	mov.w	ip, #10
    char c = str[sym->offs_start + i];
    if (c < '0' || c > '9')
 800a2f4:	3a30      	subs	r2, #48	; 0x30
 800a2f6:	9202      	str	r2, [sp, #8]
 800a2f8:	b2d2      	uxtb	r2, r2
 800a2fa:	2a09      	cmp	r2, #9
  } else if (str[sym->offs_start + i] == '-') {
    sign = TRUE;
    i++;
  }
  while (i <= sym->offs_end - sym->offs_start) {
    *nbr *= 10;
 800a2fc:	fb0c f909 	mul.w	r9, ip, r9
    char c = str[sym->offs_start + i];
    if (c < '0' || c > '9')
 800a300:	d83d      	bhi.n	800a37e <def_config_parse+0x792>
      return FALSE;
    *nbr += c - '0';
 800a302:	f8dd c008 	ldr.w	ip, [sp, #8]
    i++;
 800a306:	3001      	adds	r0, #1
  while (i <= sym->offs_end - sym->offs_start) {
    *nbr *= 10;
    char c = str[sym->offs_start + i];
    if (c < '0' || c > '9')
      return FALSE;
    *nbr += c - '0';
 800a308:	44e1      	add	r9, ip
 800a30a:	e7ec      	b.n	800a2e6 <def_config_parse+0x6fa>
    i++;
  }
  if (sign) {
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d041      	beq.n	800a394 <def_config_parse+0x7a8>
    *nbr = -*nbr;
 800a310:	f1c9 0900 	rsb	r9, r9, #0
 800a314:	e03e      	b.n	800a394 <def_config_parse+0x7a8>
      if (prev_numerator) {
        if (!parse_numerator(sym, str, &pindef->id[def_ix-1])) {
          return FALSE;
        }
      } else {
        print_index_indicator(str, sym->offs_start);
 800a316:	4620      	mov	r0, r4
 800a318:	8869      	ldrh	r1, [r5, #2]
 800a31a:	f7ff fb91 	bl	8009a40 <print_index_indicator>
        KEYPARSERR("Syntax error: unexpected numerator ");
 800a31e:	483a      	ldr	r0, [pc, #232]	; (800a408 <def_config_parse+0x81c>)
 800a320:	e031      	b.n	800a386 <def_config_parse+0x79a>
      }

      int i;
      for (i = pindef->tern_splice; i < def_ix-1; i++) {
        if (pindef->id[i].type == pindef->id[def_ix-1].type &&
            pindef->id[i].raw == pindef->id[def_ix-1].raw) {
 800a322:	f897 c004 	ldrb.w	ip, [r7, #4]
 800a326:	7917      	ldrb	r7, [r2, #4]
 800a328:	ea4f 1c8c 	mov.w	ip, ip, lsl #6
 800a32c:	01bf      	lsls	r7, r7, #6
        return FALSE;
      }

      int i;
      for (i = pindef->tern_splice; i < def_ix-1; i++) {
        if (pindef->id[i].type == pindef->id[def_ix-1].type &&
 800a32e:	ea4c 0696 	orr.w	r6, ip, r6, lsr #2
 800a332:	ea47 0090 	orr.w	r0, r7, r0, lsr #2
 800a336:	4286      	cmp	r6, r0
 800a338:	f47f aead 	bne.w	800a096 <def_config_parse+0x4aa>
            pindef->id[i].raw == pindef->id[def_ix-1].raw) {
          print_index_indicator(str, sym->offs_start);
 800a33c:	4620      	mov	r0, r4
 800a33e:	f7ff fb7f 	bl	8009a40 <print_index_indicator>
          KEYPARSERR("Error: identical definition ");
 800a342:	4832      	ldr	r0, [pc, #200]	; (800a40c <def_config_parse+0x820>)
 800a344:	e01f      	b.n	800a386 <def_config_parse+0x79a>
          print_lex_sym(sym, str);
          return FALSE;
        }
      }
    } else if (sym->type == LEX_TERN_OPT) {
 800a346:	2b06      	cmp	r3, #6
 800a348:	d104      	bne.n	800a354 <def_config_parse+0x768>
      pindef->tern_splice = def_ix;
 800a34a:	f8dd c018 	ldr.w	ip, [sp, #24]
 800a34e:	f88b c002 	strb.w	ip, [fp, #2]
 800a352:	e6a6      	b.n	800a0a2 <def_config_parse+0x4b6>
    } else {
      print_index_indicator(str, sym->offs_start);
 800a354:	4620      	mov	r0, r4
 800a356:	8869      	ldrh	r1, [r5, #2]
 800a358:	f7ff fb72 	bl	8009a40 <print_index_indicator>
      KEYPARSERR("Syntax error: unexpected symbol ");
 800a35c:	482c      	ldr	r0, [pc, #176]	; (800a410 <def_config_parse+0x824>)
 800a35e:	e012      	b.n	800a386 <def_config_parse+0x79a>
    }
    prev_numerator = numerator;
    sym_ix++;
  }

  if (numerator) {
 800a360:	b15e      	cbz	r6, 800a37a <def_config_parse+0x78e>
    lex_type_sym *sym = &syms[lex_sym_cnt-1];
 800a362:	4b2c      	ldr	r3, [pc, #176]	; (800a414 <def_config_parse+0x828>)
 800a364:	2506      	movs	r5, #6
 800a366:	fb05 350a 	mla	r5, r5, sl, r3
    print_index_indicator(str, sym->offs_end);
 800a36a:	4620      	mov	r0, r4
 800a36c:	f835 1c02 	ldrh.w	r1, [r5, #-2]
 800a370:	f7ff fb66 	bl	8009a40 <print_index_indicator>
    prev_numerator = numerator;
    sym_ix++;
  }

  if (numerator) {
    lex_type_sym *sym = &syms[lex_sym_cnt-1];
 800a374:	3d06      	subs	r5, #6
    print_index_indicator(str, sym->offs_end);
    KEYPARSERR("Syntax error: expected numerator ");
 800a376:	4828      	ldr	r0, [pc, #160]	; (800a418 <def_config_parse+0x82c>)
 800a378:	e005      	b.n	800a386 <def_config_parse+0x79a>
    print_lex_sym(sym, str);
    return FALSE;
  }

  return TRUE;
 800a37a:	2001      	movs	r0, #1
}

bool def_config_parse(def_config *pindef, const char *str, u16_t len) {
  if (lex(str, len)) {
    return parse(pindef, str, lex_syms, lex_sym_ix);
 800a37c:	e03a      	b.n	800a3f4 <def_config_parse+0x808>
    id->joy.joystick_acc = is_acc;
  } else {
    ASSERT(FALSE);
  }
  if (!parse_numerator_nbr(str, sym, offs, &nbr)) {
    print_index_indicator(str, sym->offs_start);
 800a37e:	4620      	mov	r0, r4
 800a380:	f7ff fb5e 	bl	8009a40 <print_index_indicator>
    KEYPARSERR("Syntax error: could not parse numerator ");
 800a384:	4825      	ldr	r0, [pc, #148]	; (800a41c <def_config_parse+0x830>)
 800a386:	f7fe ff09 	bl	800919c <arcprint>
    print_lex_sym(sym, str);
 800a38a:	4628      	mov	r0, r5
 800a38c:	4621      	mov	r1, r4
 800a38e:	f7ff fb71 	bl	8009a74 <print_lex_sym>
 800a392:	e02a      	b.n	800a3ea <def_config_parse+0x7fe>
    return FALSE;
  }
  if (nbr < -128 || nbr > 127 || nbr == 0) {
 800a394:	f109 0380 	add.w	r3, r9, #128	; 0x80
 800a398:	2bff      	cmp	r3, #255	; 0xff
 800a39a:	d802      	bhi.n	800a3a2 <def_config_parse+0x7b6>
 800a39c:	f1b9 0f00 	cmp.w	r9, #0
 800a3a0:	d104      	bne.n	800a3ac <def_config_parse+0x7c0>
    print_index_indicator(str, sym->offs_start);
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	f7ff fb4c 	bl	8009a40 <print_index_indicator>
    KEYPARSERR("Error: numerator bad value ");
 800a3a8:	481d      	ldr	r0, [pc, #116]	; (800a420 <def_config_parse+0x834>)
 800a3aa:	e7ec      	b.n	800a386 <def_config_parse+0x79a>
    print_lex_sym(sym, str);
    return FALSE;
  }
  if (nbr < 0) {
 800a3ac:	da0b      	bge.n	800a3c6 <def_config_parse+0x7da>
    if (id->type == HID_ID_TYPE_MOUSE) {
 800a3ae:	78fb      	ldrb	r3, [r7, #3]
 800a3b0:	f003 0203 	and.w	r2, r3, #3
 800a3b4:	2a02      	cmp	r2, #2
 800a3b6:	d001      	beq.n	800a3bc <def_config_parse+0x7d0>
      id->mouse.mouse_sign = TRUE;
    } else if (id->type == HID_ID_TYPE_JOYSTICK) {
 800a3b8:	2a03      	cmp	r2, #3
 800a3ba:	d102      	bne.n	800a3c2 <def_config_parse+0x7d6>
      id->joy.joystick_sign = TRUE;
 800a3bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3c0:	70fb      	strb	r3, [r7, #3]
    }
    nbr = -nbr;
 800a3c2:	f1c9 0900 	rsb	r9, r9, #0
  }
  if (id->type == HID_ID_TYPE_MOUSE) {
 800a3c6:	78fb      	ldrb	r3, [r7, #3]
 800a3c8:	f003 0303 	and.w	r3, r3, #3
 800a3cc:	2b02      	cmp	r3, #2
 800a3ce:	d001      	beq.n	800a3d4 <def_config_parse+0x7e8>
    id->mouse.mouse_data = nbr;
  } else if (id->type == HID_ID_TYPE_JOYSTICK) {
 800a3d0:	2b03      	cmp	r3, #3
 800a3d2:	d103      	bne.n	800a3dc <def_config_parse+0x7f0>
    id->joy.joystick_data = nbr;
 800a3d4:	7873      	ldrb	r3, [r6, #1]
 800a3d6:	f369 0347 	bfi	r3, r9, #1, #7
 800a3da:	7073      	strb	r3, [r6, #1]
        return FALSE;
      }

      int i;
      for (i = pindef->tern_splice; i < def_ix-1; i++) {
        if (pindef->id[i].type == pindef->id[def_ix-1].type &&
 800a3dc:	f8dd c020 	ldr.w	ip, [sp, #32]
        print_lex_sym(sym, str);
        return FALSE;
      }

      int i;
      for (i = pindef->tern_splice; i < def_ix-1; i++) {
 800a3e0:	f89b 3002 	ldrb.w	r3, [fp, #2]
        if (pindef->id[i].type == pindef->id[def_ix-1].type &&
 800a3e4:	eb0b 024c 	add.w	r2, fp, ip, lsl #1
 800a3e8:	e656      	b.n	800a098 <def_config_parse+0x4ac>
      }

    } else if (sym->type == LEX_NUM) {
      if (prev_numerator) {
        if (!parse_numerator(sym, str, &pindef->id[def_ix-1])) {
          return FALSE;
 800a3ea:	2000      	movs	r0, #0
 800a3ec:	e002      	b.n	800a3f4 <def_config_parse+0x808>
static bool parse_numerator(lex_type_sym *sym, const char *str, hid_id *id) {
  s32_t nbr = 0;
  u32_t offs = 0;
  bool is_acc = is_acc_sym(str, sym);
  if (is_acc) {
    offs = strlen(acc_sym);
 800a3ee:	4680      	mov	r8, r0
  for (i = 0; i < strlen(acc_sym); i++) {
    if (to_lower(acc_sym[i]) != to_lower(str[sym->offs_start + i])) {
      return FALSE;
    }
  }
  return TRUE;
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	e74c      	b.n	800a28e <def_config_parse+0x6a2>
bool def_config_parse(def_config *pindef, const char *str, u16_t len) {
  if (lex(str, len)) {
    return parse(pindef, str, lex_syms, lex_sym_ix);
  }
  return FALSE;
}
 800a3f4:	b00d      	add	sp, #52	; 0x34
 800a3f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3fa:	bf00      	nop
 800a3fc:	08012a22 	.word	0x08012a22
 800a400:	20000050 	.word	0x20000050
 800a404:	08012a7d 	.word	0x08012a7d
 800a408:	08012632 	.word	0x08012632
 800a40c:	08012a44 	.word	0x08012a44
 800a410:	08012ab1 	.word	0x08012ab1
 800a414:	20000aa2 	.word	0x20000aa2
 800a418:	08012ad2 	.word	0x08012ad2
 800a41c:	08012af4 	.word	0x08012af4
 800a420:	08012a95 	.word	0x08012a95

0800a424 <def_config_print>:

void def_config_print(def_config *pindef) {
 800a424:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800a428:	4605      	mov	r5, r0
  int i;
  print("pin%i = ", pindef->pin);
 800a42a:	7829      	ldrb	r1, [r5, #0]
 800a42c:	4834      	ldr	r0, [pc, #208]	; (800a500 <def_config_print+0xdc>)
 800a42e:	f7fe feb5 	bl	800919c <arcprint>
  if (pindef->tern_pin > 0) {
 800a432:	7869      	ldrb	r1, [r5, #1]
 800a434:	b111      	cbz	r1, 800a43c <def_config_print+0x18>
    print("pin%i ? ", pindef->tern_pin);
 800a436:	4833      	ldr	r0, [pc, #204]	; (800a504 <def_config_print+0xe0>)
 800a438:	f7fe feb0 	bl	800919c <arcprint>
        if (km->numerator) {
          print("(");
          if (id.joy.joystick_acc) {
            print("ACC");
          }
          print("%s%i", id.joy.joystick_sign ? "-" : "+", id.joy.joystick_data);
 800a43c:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 800a52c <def_config_print+0x108>
 800a440:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 800a530 <def_config_print+0x10c>
 800a444:	1cec      	adds	r4, r5, #3
    return parse(pindef, str, lex_syms, lex_sym_ix);
  }
  return FALSE;
}

void def_config_print(def_config *pindef) {
 800a446:	2600      	movs	r6, #0
  print("pin%i = ", pindef->pin);
  if (pindef->tern_pin > 0) {
    print("pin%i ? ", pindef->tern_pin);
  }
  for (i = 0; i < APP_CONFIG_DEFS_PER_PIN; i++) {
    hid_id id = pindef->id[i];
 800a448:	8823      	ldrh	r3, [r4, #0]
 800a44a:	f9b4 7000 	ldrsh.w	r7, [r4]
 800a44e:	f8ad 3004 	strh.w	r3, [sp, #4]
 800a452:	f894 a000 	ldrb.w	sl, [r4]
    if (pindef->tern_pin > 0 && i == pindef->tern_splice)
 800a456:	786b      	ldrb	r3, [r5, #1]
  print("pin%i = ", pindef->pin);
  if (pindef->tern_pin > 0) {
    print("pin%i ? ", pindef->tern_pin);
  }
  for (i = 0; i < APP_CONFIG_DEFS_PER_PIN; i++) {
    hid_id id = pindef->id[i];
 800a458:	f007 0703 	and.w	r7, r7, #3
 800a45c:	ea4f 1ada 	mov.w	sl, sl, lsr #7
    if (pindef->tern_pin > 0 && i == pindef->tern_splice)
 800a460:	b12b      	cbz	r3, 800a46e <def_config_print+0x4a>
 800a462:	78ab      	ldrb	r3, [r5, #2]
 800a464:	429e      	cmp	r6, r3
 800a466:	d102      	bne.n	800a46e <def_config_print+0x4a>
      print(": ");
 800a468:	4827      	ldr	r0, [pc, #156]	; (800a508 <def_config_print+0xe4>)
 800a46a:	f7fe fe97 	bl	800919c <arcprint>
    if (id.type != HID_ID_TYPE_NONE) {
 800a46e:	2f00      	cmp	r7, #0
 800a470:	d03b      	beq.n	800a4ea <def_config_print+0xc6>
      if (id.type == HID_ID_TYPE_KEYBOARD) {
 800a472:	2f01      	cmp	r7, #1
 800a474:	d109      	bne.n	800a48a <def_config_print+0x66>
        print("%s ", USB_ARC_get_keymap(id.kb.kb_code)->name);
 800a476:	f89d 0005 	ldrb.w	r0, [sp, #5]
 800a47a:	f002 fa6b 	bl	800c954 <USB_ARC_get_keymap>
 800a47e:	4603      	mov	r3, r0
 800a480:	6819      	ldr	r1, [r3, #0]
 800a482:	4822      	ldr	r0, [pc, #136]	; (800a50c <def_config_print+0xe8>)
 800a484:	f7fe fe8a 	bl	800919c <arcprint>
 800a488:	e02f      	b.n	800a4ea <def_config_print+0xc6>
      } else if (id.type == HID_ID_TYPE_MOUSE) {
 800a48a:	2f02      	cmp	r7, #2
 800a48c:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800a490:	d126      	bne.n	800a4e0 <def_config_print+0xbc>
        const keymap *km = USB_ARC_get_mousemap(id.mouse.mouse_code);
 800a492:	f3c0 0083 	ubfx	r0, r0, #2, #4
 800a496:	f002 fa65 	bl	800c964 <USB_ARC_get_mousemap>
 800a49a:	4607      	mov	r7, r0
        print("%s", km->name);
 800a49c:	6839      	ldr	r1, [r7, #0]
 800a49e:	481c      	ldr	r0, [pc, #112]	; (800a510 <def_config_print+0xec>)
 800a4a0:	f7fe fe7c 	bl	800919c <arcprint>
        if (km->numerator) {
 800a4a4:	7a3b      	ldrb	r3, [r7, #8]
 800a4a6:	b1bb      	cbz	r3, 800a4d8 <def_config_print+0xb4>
          print("(");
 800a4a8:	481a      	ldr	r0, [pc, #104]	; (800a514 <def_config_print+0xf0>)
 800a4aa:	f7fe fe77 	bl	800919c <arcprint>
          if (id.mouse.mouse_acc) {
 800a4ae:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a4b2:	07d9      	lsls	r1, r3, #31
 800a4b4:	d502      	bpl.n	800a4bc <def_config_print+0x98>
            print("ACC");
 800a4b6:	4818      	ldr	r0, [pc, #96]	; (800a518 <def_config_print+0xf4>)
 800a4b8:	f7fe fe70 	bl	800919c <arcprint>
          }
          print("%s%i", id.mouse.mouse_sign ? "-" : "+", id.mouse.mouse_data);
 800a4bc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a4c0:	4816      	ldr	r0, [pc, #88]	; (800a51c <def_config_print+0xf8>)
 800a4c2:	f1ba 0f00 	cmp.w	sl, #0
 800a4c6:	bf0c      	ite	eq
 800a4c8:	4641      	moveq	r1, r8
 800a4ca:	4649      	movne	r1, r9
 800a4cc:	0852      	lsrs	r2, r2, #1
 800a4ce:	f7fe fe65 	bl	800919c <arcprint>
          print(")");
 800a4d2:	4813      	ldr	r0, [pc, #76]	; (800a520 <def_config_print+0xfc>)
 800a4d4:	f7fe fe62 	bl	800919c <arcprint>
        }
        print(" ");
 800a4d8:	4812      	ldr	r0, [pc, #72]	; (800a524 <def_config_print+0x100>)
 800a4da:	f7fe fe5f 	bl	800919c <arcprint>
 800a4de:	e004      	b.n	800a4ea <def_config_print+0xc6>
      } else if (id.type == HID_ID_TYPE_JOYSTICK) {
        const keymap *km = USB_ARC_get_joystickmap(id.joy.joystick_code);
 800a4e0:	f3c0 0084 	ubfx	r0, r0, #2, #5
 800a4e4:	f002 fa46 	bl	800c974 <USB_ARC_get_joystickmap>
 800a4e8:	e7d7      	b.n	800a49a <def_config_print+0x76>
  int i;
  print("pin%i = ", pindef->pin);
  if (pindef->tern_pin > 0) {
    print("pin%i ? ", pindef->tern_pin);
  }
  for (i = 0; i < APP_CONFIG_DEFS_PER_PIN; i++) {
 800a4ea:	3601      	adds	r6, #1
 800a4ec:	2e08      	cmp	r6, #8
 800a4ee:	f104 0402 	add.w	r4, r4, #2
 800a4f2:	d1a9      	bne.n	800a448 <def_config_print+0x24>
        }
        print(" ");
      }
    }
  }
  print("\n");
 800a4f4:	480c      	ldr	r0, [pc, #48]	; (800a528 <def_config_print+0x104>)
}
 800a4f6:	b002      	add	sp, #8
 800a4f8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        }
        print(" ");
      }
    }
  }
  print("\n");
 800a4fc:	f7fe be4e 	b.w	800919c <arcprint>
 800a500:	08012b1f 	.word	0x08012b1f
 800a504:	08012b28 	.word	0x08012b28
 800a508:	08012b31 	.word	0x08012b31
 800a50c:	08012b34 	.word	0x08012b34
 800a510:	08011907 	.word	0x08011907
 800a514:	08012b38 	.word	0x08012b38
 800a518:	08012b3a 	.word	0x08012b3a
 800a51c:	08012b3e 	.word	0x08012b3e
 800a520:	08012b4d 	.word	0x08012b4d
 800a524:	08011746 	.word	0x08011746
 800a528:	0801197d 	.word	0x0801197d
 800a52c:	08012b1d 	.word	0x08012b1d
 800a530:	08012b8e 	.word	0x08012b8e

0800a534 <GPIO_MAP_get_pin_map>:
#endif
};

const gpio_pin_map *GPIO_MAP_get_pin_map(void) {
  return &pin_map[0];
}
 800a534:	4800      	ldr	r0, [pc, #0]	; (800a538 <GPIO_MAP_get_pin_map+0x4>)
 800a536:	4770      	bx	lr
 800a538:	0800ed8c 	.word	0x0800ed8c

0800a53c <GPIO_MAP_get_led_map>:

const gpio_pin_map *GPIO_MAP_get_led_map(void) {
  return &led_map;
}
 800a53c:	4800      	ldr	r0, [pc, #0]	; (800a540 <GPIO_MAP_get_led_map+0x4>)
 800a53e:	4770      	bx	lr
 800a540:	0800edc0 	.word	0x0800edc0

0800a544 <_flash_wait.constprop.1>:
// flash hal

static FLASH_res _flash_status(void) {
  FLASH_res res = FLASH_OK;

  if ((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) {
 800a544:	4a1e      	ldr	r2, [pc, #120]	; (800a5c0 <_flash_wait.constprop.1+0x7c>)
  }

  return res;
}

static FLASH_res _flash_wait(u32_t timeout) {
 800a546:	b510      	push	{r4, lr}
 800a548:	f44f 2430 	mov.w	r4, #720896	; 0xb0000
// flash hal

static FLASH_res _flash_status(void) {
  FLASH_res res = FLASH_OK;

  if ((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) {
 800a54c:	68d1      	ldr	r1, [r2, #12]
 800a54e:	4b1c      	ldr	r3, [pc, #112]	; (800a5c0 <_flash_wait.constprop.1+0x7c>)
 800a550:	07c9      	lsls	r1, r1, #31
 800a552:	d41e      	bmi.n	800a592 <_flash_wait.constprop.1+0x4e>
    res = FLASH_ERR_BUSY;
  } else if ((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0) {
 800a554:	68da      	ldr	r2, [r3, #12]
 800a556:	0750      	lsls	r0, r2, #29
 800a558:	d50b      	bpl.n	800a572 <_flash_wait.constprop.1+0x2e>
    DBG(D_FS, D_WARN, "FLASH_ERR_OTHER\n");
 800a55a:	4b1a      	ldr	r3, [pc, #104]	; (800a5c4 <_flash_wait.constprop.1+0x80>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	0559      	lsls	r1, r3, #21
 800a560:	d527      	bpl.n	800a5b2 <_flash_wait.constprop.1+0x6e>
 800a562:	4b19      	ldr	r3, [pc, #100]	; (800a5c8 <_flash_wait.constprop.1+0x84>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	2b02      	cmp	r3, #2
 800a568:	d823      	bhi.n	800a5b2 <_flash_wait.constprop.1+0x6e>
 800a56a:	4818      	ldr	r0, [pc, #96]	; (800a5cc <_flash_wait.constprop.1+0x88>)
 800a56c:	f7fe fe16 	bl	800919c <arcprint>
 800a570:	e01f      	b.n	800a5b2 <_flash_wait.constprop.1+0x6e>
    res = FLASH_ERR_OTHER;
  } else if ((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0) {
 800a572:	68d8      	ldr	r0, [r3, #12]
 800a574:	f010 0010 	ands.w	r0, r0, #16
 800a578:	d01e      	beq.n	800a5b8 <_flash_wait.constprop.1+0x74>
    DBG(D_FS, D_WARN, "FLASH_ERR_WRP\n");
 800a57a:	4b12      	ldr	r3, [pc, #72]	; (800a5c4 <_flash_wait.constprop.1+0x80>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	055a      	lsls	r2, r3, #21
 800a580:	d519      	bpl.n	800a5b6 <_flash_wait.constprop.1+0x72>
 800a582:	4b11      	ldr	r3, [pc, #68]	; (800a5c8 <_flash_wait.constprop.1+0x84>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	2b02      	cmp	r3, #2
 800a588:	d815      	bhi.n	800a5b6 <_flash_wait.constprop.1+0x72>
 800a58a:	4811      	ldr	r0, [pc, #68]	; (800a5d0 <_flash_wait.constprop.1+0x8c>)
 800a58c:	f7fe fe06 	bl	800919c <arcprint>
 800a590:	e011      	b.n	800a5b6 <_flash_wait.constprop.1+0x72>
}

static FLASH_res _flash_wait(u32_t timeout) {
  FLASH_res res;

  while (((res = _flash_status()) == FLASH_ERR_BUSY) && timeout) {
 800a592:	b10c      	cbz	r4, 800a598 <_flash_wait.constprop.1+0x54>
    timeout--;
 800a594:	3c01      	subs	r4, #1
 800a596:	e7d9      	b.n	800a54c <_flash_wait.constprop.1+0x8>
  }

  if (timeout == 0) {
    DBG(D_FS, D_WARN, "FLASH_ERR_TIMEOUT\n");
 800a598:	4b0a      	ldr	r3, [pc, #40]	; (800a5c4 <_flash_wait.constprop.1+0x80>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	055b      	lsls	r3, r3, #21
 800a59e:	d506      	bpl.n	800a5ae <_flash_wait.constprop.1+0x6a>
 800a5a0:	4b09      	ldr	r3, [pc, #36]	; (800a5c8 <_flash_wait.constprop.1+0x84>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	2b02      	cmp	r3, #2
 800a5a6:	d802      	bhi.n	800a5ae <_flash_wait.constprop.1+0x6a>
 800a5a8:	480a      	ldr	r0, [pc, #40]	; (800a5d4 <_flash_wait.constprop.1+0x90>)
 800a5aa:	f7fe fdf7 	bl	800919c <arcprint>
    res = FLASH_ERR_TIMEOUT;
 800a5ae:	2003      	movs	r0, #3
 800a5b0:	bd10      	pop	{r4, pc}

  if ((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) {
    res = FLASH_ERR_BUSY;
  } else if ((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0) {
    DBG(D_FS, D_WARN, "FLASH_ERR_OTHER\n");
    res = FLASH_ERR_OTHER;
 800a5b2:	2004      	movs	r0, #4
 800a5b4:	e000      	b.n	800a5b8 <_flash_wait.constprop.1+0x74>
  } else if ((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0) {
    DBG(D_FS, D_WARN, "FLASH_ERR_WRP\n");
    res = FLASH_ERROR_WRP;
 800a5b6:	2003      	movs	r0, #3

  while (((res = _flash_status()) == FLASH_ERR_BUSY) && timeout) {
    timeout--;
  }

  if (timeout == 0) {
 800a5b8:	2c00      	cmp	r4, #0
 800a5ba:	d0ed      	beq.n	800a598 <_flash_wait.constprop.1+0x54>
    DBG(D_FS, D_WARN, "FLASH_ERR_TIMEOUT\n");
    res = FLASH_ERR_TIMEOUT;
  }

  return res;
}
 800a5bc:	bd10      	pop	{r4, pc}
 800a5be:	bf00      	nop
 800a5c0:	40022000 	.word	0x40022000
 800a5c4:	20004f80 	.word	0x20004f80
 800a5c8:	20004f84 	.word	0x20004f84
 800a5cc:	08012bd3 	.word	0x08012bd3
 800a5d0:	08012be4 	.word	0x08012be4
 800a5d4:	08012bf3 	.word	0x08012bf3

0800a5d8 <_flash_write_hword>:
  }
  gpio_disable(led->port, led->pin);
  return res;
}

static FLASH_res _flash_write_hword(u32_t addr, u16_t data) {
 800a5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5dc:	4688      	mov	r8, r1
 800a5de:	4607      	mov	r7, r0
  //FLASH_ProgramHalfWord(Address, Data);
  const gpio_pin_map *led = GPIO_MAP_get_led_map();
 800a5e0:	f7ff ffac 	bl	800a53c <GPIO_MAP_get_led_map>
 800a5e4:	4604      	mov	r4, r0
  gpio_enable(led->port, led->pin);
 800a5e6:	7861      	ldrb	r1, [r4, #1]
 800a5e8:	7800      	ldrb	r0, [r0, #0]
 800a5ea:	f7f8 f9ed 	bl	80029c8 <gpio_enable>
  FLASH_res res = _flash_wait(FLASH_TIMEOUT);
 800a5ee:	f7ff ffa9 	bl	800a544 <_flash_wait.constprop.1>
 800a5f2:	4d0c      	ldr	r5, [pc, #48]	; (800a624 <_flash_write_hword+0x4c>)

  if (res == FLASH_OK) {
 800a5f4:	4606      	mov	r6, r0
 800a5f6:	b940      	cbnz	r0, 800a60a <_flash_write_hword+0x32>
    // if the previous operation is completed, proceed to program the new first
    // half word
    FLASH->CR |= CR_PG_Set;
 800a5f8:	692b      	ldr	r3, [r5, #16]
 800a5fa:	f043 0301 	orr.w	r3, r3, #1
 800a5fe:	612b      	str	r3, [r5, #16]

    *(__IO uint16_t*) addr = (uint16_t) data;
 800a600:	f8a7 8000 	strh.w	r8, [r7]
    res = _flash_wait(FLASH_TIMEOUT);
 800a604:	f7ff ff9e 	bl	800a544 <_flash_wait.constprop.1>
 800a608:	4606      	mov	r6, r0
  }
  // Disable the PG Bit
  FLASH->CR &= CR_PG_Reset;
 800a60a:	692a      	ldr	r2, [r5, #16]
 800a60c:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 800a610:	4013      	ands	r3, r2
  gpio_disable(led->port, led->pin);
 800a612:	7820      	ldrb	r0, [r4, #0]

    *(__IO uint16_t*) addr = (uint16_t) data;
    res = _flash_wait(FLASH_TIMEOUT);
  }
  // Disable the PG Bit
  FLASH->CR &= CR_PG_Reset;
 800a614:	612b      	str	r3, [r5, #16]
  gpio_disable(led->port, led->pin);
 800a616:	7861      	ldrb	r1, [r4, #1]
 800a618:	f7f8 f9e4 	bl	80029e4 <gpio_disable>

  return res;
}
 800a61c:	4630      	mov	r0, r6
 800a61e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a622:	bf00      	nop
 800a624:	40022000 	.word	0x40022000

0800a628 <niffs_hal_write>:
  _flash_open();
  FLASH_res r = _flash_erase((u32_t)addr);
  _flash_close();
  return r == FLASH_OK ? NIFFS_OK : ERR_NIFFS_HAL;
}
static int niffs_hal_write(u8_t *addr, const u8_t *src, u32_t len) {
 800a628:	b570      	push	{r4, r5, r6, lr}

static void _flash_open() {
  // unlock flash block

  // FLASH_UnlockBank1()
  FLASH->KEYR = FLASH_KEY1;
 800a62a:	4b17      	ldr	r3, [pc, #92]	; (800a688 <niffs_hal_write+0x60>)
  _flash_open();
  FLASH_res r = _flash_erase((u32_t)addr);
  _flash_close();
  return r == FLASH_OK ? NIFFS_OK : ERR_NIFFS_HAL;
}
static int niffs_hal_write(u8_t *addr, const u8_t *src, u32_t len) {
 800a62c:	4615      	mov	r5, r2

static void _flash_open() {
  // unlock flash block

  // FLASH_UnlockBank1()
  FLASH->KEYR = FLASH_KEY1;
 800a62e:	4a17      	ldr	r2, [pc, #92]	; (800a68c <niffs_hal_write+0x64>)
  _flash_open();
  FLASH_res r = _flash_erase((u32_t)addr);
  _flash_close();
  return r == FLASH_OK ? NIFFS_OK : ERR_NIFFS_HAL;
}
static int niffs_hal_write(u8_t *addr, const u8_t *src, u32_t len) {
 800a630:	460c      	mov	r4, r1

static void _flash_open() {
  // unlock flash block

  // FLASH_UnlockBank1()
  FLASH->KEYR = FLASH_KEY1;
 800a632:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 800a634:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800a638:	605a      	str	r2, [r3, #4]
  // clear flags
  FLASH->SR = (FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR );
 800a63a:	2235      	movs	r2, #53	; 0x35
 800a63c:	60da      	str	r2, [r3, #12]
 800a63e:	1c86      	adds	r6, r0, #2
  return r == FLASH_OK ? NIFFS_OK : ERR_NIFFS_HAL;
}
static int niffs_hal_write(u8_t *addr, const u8_t *src, u32_t len) {
  _flash_open();
  FLASH_res r = FLASH_OK;
  while (r == FLASH_OK && len > 0) {
 800a640:	b1b5      	cbz	r5, 800a670 <niffs_hal_write+0x48>
    if (len == 1) {
 800a642:	2d01      	cmp	r5, #1
 800a644:	f1a6 0002 	sub.w	r0, r6, #2
 800a648:	7821      	ldrb	r1, [r4, #0]
 800a64a:	d106      	bne.n	800a65a <niffs_hal_write+0x32>
      u16_t d = 0xff00 | (*src);
      r = _flash_write_hword((u32_t)addr, d);
 800a64c:	f441 417f 	orr.w	r1, r1, #65280	; 0xff00
 800a650:	f7ff ffc2 	bl	800a5d8 <_flash_write_hword>
      addr += 2;
      len--;
      src++;
 800a654:	3401      	adds	r4, #1
  while (r == FLASH_OK && len > 0) {
    if (len == 1) {
      u16_t d = 0xff00 | (*src);
      r = _flash_write_hword((u32_t)addr, d);
      addr += 2;
      len--;
 800a656:	2500      	movs	r5, #0
 800a658:	e006      	b.n	800a668 <niffs_hal_write+0x40>
      src++;
    } else {
      u16_t d = (src[1] << 8) | (src[0]);
 800a65a:	7863      	ldrb	r3, [r4, #1]
      r = _flash_write_hword((u32_t)addr, d);
      addr += 2;
      len -= 2;
 800a65c:	3d02      	subs	r5, #2
      addr += 2;
      len--;
      src++;
    } else {
      u16_t d = (src[1] << 8) | (src[0]);
      r = _flash_write_hword((u32_t)addr, d);
 800a65e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 800a662:	f7ff ffb9 	bl	800a5d8 <_flash_write_hword>
      addr += 2;
      len -= 2;
      src += 2;
 800a666:	3402      	adds	r4, #2
 800a668:	3602      	adds	r6, #2
  return r == FLASH_OK ? NIFFS_OK : ERR_NIFFS_HAL;
}
static int niffs_hal_write(u8_t *addr, const u8_t *src, u32_t len) {
  _flash_open();
  FLASH_res r = FLASH_OK;
  while (r == FLASH_OK && len > 0) {
 800a66a:	2800      	cmp	r0, #0
 800a66c:	d0e8      	beq.n	800a640 <niffs_hal_write+0x18>
 800a66e:	e000      	b.n	800a672 <niffs_hal_write+0x4a>
 800a670:	4628      	mov	r0, r5
  FLASH->SR = (FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR );
}

static void _flash_close() {
  //FLASH_LockBank1();
  FLASH->CR |= CR_LOCK_Set;
 800a672:	4b05      	ldr	r3, [pc, #20]	; (800a688 <niffs_hal_write+0x60>)
 800a674:	691a      	ldr	r2, [r3, #16]
 800a676:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a67a:	611a      	str	r2, [r3, #16]
      src += 2;
    }
  }
  _flash_close();
  return r == FLASH_OK ? NIFFS_OK : ERR_NIFFS_HAL;
}
 800a67c:	4b04      	ldr	r3, [pc, #16]	; (800a690 <niffs_hal_write+0x68>)
 800a67e:	2800      	cmp	r0, #0
 800a680:	bf14      	ite	ne
 800a682:	4618      	movne	r0, r3
 800a684:	2000      	moveq	r0, #0
 800a686:	bd70      	pop	{r4, r5, r6, pc}
 800a688:	40022000 	.word	0x40022000
 800a68c:	45670123 	.word	0x45670123
 800a690:	ffffd4d6 	.word	0xffffd4d6

0800a694 <niffs_hal_erase>:

static niffs fs;
static u8_t niffs_buf[128];
static niffs_file_desc niffs_fd[4];

static int niffs_hal_erase(u8_t *addr, u32_t len) {
 800a694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

static void _flash_open() {
  // unlock flash block

  // FLASH_UnlockBank1()
  FLASH->KEYR = FLASH_KEY1;
 800a696:	4c19      	ldr	r4, [pc, #100]	; (800a6fc <niffs_hal_erase+0x68>)
 800a698:	4b19      	ldr	r3, [pc, #100]	; (800a700 <niffs_hal_erase+0x6c>)

static niffs fs;
static u8_t niffs_buf[128];
static niffs_file_desc niffs_fd[4];

static int niffs_hal_erase(u8_t *addr, u32_t len) {
 800a69a:	4607      	mov	r7, r0

static void _flash_open() {
  // unlock flash block

  // FLASH_UnlockBank1()
  FLASH->KEYR = FLASH_KEY1;
 800a69c:	6063      	str	r3, [r4, #4]
  FLASH->KEYR = FLASH_KEY2;
 800a69e:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 800a6a2:	6063      	str	r3, [r4, #4]
  // clear flags
  FLASH->SR = (FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR );
 800a6a4:	2335      	movs	r3, #53	; 0x35
 800a6a6:	60e3      	str	r3, [r4, #12]
  FLASH->CR |= CR_LOCK_Set;
}

static FLASH_res _flash_erase(u32_t addr) {
  // FLASH_ErasePage(BANK2_WRITE_START_ADDR + (FLASH_PAGE_SIZE * EraseCounter));
  const gpio_pin_map *led = GPIO_MAP_get_led_map();
 800a6a8:	f7ff ff48 	bl	800a53c <GPIO_MAP_get_led_map>
 800a6ac:	4605      	mov	r5, r0
  gpio_enable(led->port, led->pin);
 800a6ae:	7869      	ldrb	r1, [r5, #1]
 800a6b0:	7800      	ldrb	r0, [r0, #0]
 800a6b2:	f7f8 f989 	bl	80029c8 <gpio_enable>
  FLASH_res res = _flash_wait(FLASH_TIMEOUT );
 800a6b6:	f7ff ff45 	bl	800a544 <_flash_wait.constprop.1>

  if (res == FLASH_OK) {
 800a6ba:	4606      	mov	r6, r0
 800a6bc:	b980      	cbnz	r0, 800a6e0 <niffs_hal_erase+0x4c>
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR |= CR_PER_Set;
 800a6be:	6923      	ldr	r3, [r4, #16]
 800a6c0:	f043 0302 	orr.w	r3, r3, #2
 800a6c4:	6123      	str	r3, [r4, #16]
    FLASH->AR = addr;
 800a6c6:	6167      	str	r7, [r4, #20]
    FLASH->CR |= CR_STRT_Set;
 800a6c8:	6923      	ldr	r3, [r4, #16]
 800a6ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6ce:	6123      	str	r3, [r4, #16]

    res = _flash_wait(FLASH_TIMEOUT );
 800a6d0:	f7ff ff38 	bl	800a544 <_flash_wait.constprop.1>

    /* Disable the PER Bit */
    FLASH->CR &= CR_PER_Reset;
 800a6d4:	6922      	ldr	r2, [r4, #16]
 800a6d6:	f641 73fd 	movw	r3, #8189	; 0x1ffd
 800a6da:	4013      	ands	r3, r2
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR |= CR_PER_Set;
    FLASH->AR = addr;
    FLASH->CR |= CR_STRT_Set;

    res = _flash_wait(FLASH_TIMEOUT );
 800a6dc:	4606      	mov	r6, r0

    /* Disable the PER Bit */
    FLASH->CR &= CR_PER_Reset;
 800a6de:	6123      	str	r3, [r4, #16]
  }
  gpio_disable(led->port, led->pin);
 800a6e0:	7828      	ldrb	r0, [r5, #0]
 800a6e2:	7869      	ldrb	r1, [r5, #1]
 800a6e4:	f7f8 f97e 	bl	80029e4 <gpio_disable>
  FLASH->SR = (FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR );
}

static void _flash_close() {
  //FLASH_LockBank1();
  FLASH->CR |= CR_LOCK_Set;
 800a6e8:	4b04      	ldr	r3, [pc, #16]	; (800a6fc <niffs_hal_erase+0x68>)
static int niffs_hal_erase(u8_t *addr, u32_t len) {
  _flash_open();
  FLASH_res r = _flash_erase((u32_t)addr);
  _flash_close();
  return r == FLASH_OK ? NIFFS_OK : ERR_NIFFS_HAL;
}
 800a6ea:	4806      	ldr	r0, [pc, #24]	; (800a704 <niffs_hal_erase+0x70>)
  FLASH->SR = (FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR );
}

static void _flash_close() {
  //FLASH_LockBank1();
  FLASH->CR |= CR_LOCK_Set;
 800a6ec:	691a      	ldr	r2, [r3, #16]
static int niffs_hal_erase(u8_t *addr, u32_t len) {
  _flash_open();
  FLASH_res r = _flash_erase((u32_t)addr);
  _flash_close();
  return r == FLASH_OK ? NIFFS_OK : ERR_NIFFS_HAL;
}
 800a6ee:	2e00      	cmp	r6, #0
 800a6f0:	bf08      	it	eq
 800a6f2:	2000      	moveq	r0, #0
  FLASH->SR = (FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR );
}

static void _flash_close() {
  //FLASH_LockBank1();
  FLASH->CR |= CR_LOCK_Set;
 800a6f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a6f8:	611a      	str	r2, [r3, #16]
static int niffs_hal_erase(u8_t *addr, u32_t len) {
  _flash_open();
  FLASH_res r = _flash_erase((u32_t)addr);
  _flash_close();
  return r == FLASH_OK ? NIFFS_OK : ERR_NIFFS_HAL;
}
 800a6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6fc:	40022000 	.word	0x40022000
 800a700:	45670123 	.word	0x45670123
 800a704:	ffffd4d6 	.word	0xffffd4d6

0800a708 <FS_mount>:
  }
  _flash_close();
  return r == FLASH_OK ? NIFFS_OK : ERR_NIFFS_HAL;
}

int FS_mount(void) {
 800a708:	b500      	push	{lr}
  int res;
  res = NIFFS_init(&fs,
 800a70a:	4b1b      	ldr	r3, [pc, #108]	; (800a778 <FS_mount+0x70>)
  }
  _flash_close();
  return r == FLASH_OK ? NIFFS_OK : ERR_NIFFS_HAL;
}

int FS_mount(void) {
 800a70c:	b089      	sub	sp, #36	; 0x24
  int res;
  res = NIFFS_init(&fs,
 800a70e:	2280      	movs	r2, #128	; 0x80
 800a710:	9301      	str	r3, [sp, #4]
 800a712:	4413      	add	r3, r2
 800a714:	9303      	str	r3, [sp, #12]
 800a716:	2304      	movs	r3, #4
 800a718:	9304      	str	r3, [sp, #16]
 800a71a:	4b18      	ldr	r3, [pc, #96]	; (800a77c <FS_mount+0x74>)
 800a71c:	9200      	str	r2, [sp, #0]
 800a71e:	9305      	str	r3, [sp, #20]
 800a720:	4b17      	ldr	r3, [pc, #92]	; (800a780 <FS_mount+0x78>)
 800a722:	9202      	str	r2, [sp, #8]
 800a724:	9306      	str	r3, [sp, #24]
 800a726:	2300      	movs	r3, #0
 800a728:	9307      	str	r3, [sp, #28]
 800a72a:	4816      	ldr	r0, [pc, #88]	; (800a784 <FS_mount+0x7c>)
 800a72c:	4916      	ldr	r1, [pc, #88]	; (800a788 <FS_mount+0x80>)
 800a72e:	2220      	movs	r2, #32
 800a730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a734:	f7fc fdee 	bl	8007314 <NIFFS_init>
    128,
    niffs_buf, sizeof(niffs_buf),
    niffs_fd, sizeof(niffs_fd)/sizeof(niffs_file_desc),
    niffs_hal_erase, niffs_hal_write,
    0);
  if (res != NIFFS_OK) return res;
 800a738:	b9d0      	cbnz	r0, 800a770 <FS_mount+0x68>
  res = NIFFS_mount(&fs);
 800a73a:	4812      	ldr	r0, [pc, #72]	; (800a784 <FS_mount+0x7c>)
 800a73c:	f7fc ff56 	bl	80075ec <NIFFS_mount>
  if (res == ERR_NIFFS_NOT_A_FILESYSTEM) {
 800a740:	4b12      	ldr	r3, [pc, #72]	; (800a78c <FS_mount+0x84>)
 800a742:	4298      	cmp	r0, r3
 800a744:	d114      	bne.n	800a770 <FS_mount+0x68>
    DBG(D_FS, D_INFO, "not a fs, formatting..\n");
 800a746:	4b12      	ldr	r3, [pc, #72]	; (800a790 <FS_mount+0x88>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	0558      	lsls	r0, r3, #21
 800a74c:	d506      	bpl.n	800a75c <FS_mount+0x54>
 800a74e:	4b11      	ldr	r3, [pc, #68]	; (800a794 <FS_mount+0x8c>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	2b01      	cmp	r3, #1
 800a754:	d802      	bhi.n	800a75c <FS_mount+0x54>
 800a756:	4810      	ldr	r0, [pc, #64]	; (800a798 <FS_mount+0x90>)
 800a758:	f7fe fd20 	bl	800919c <arcprint>
    res = NIFFS_format(&fs);
 800a75c:	4809      	ldr	r0, [pc, #36]	; (800a784 <FS_mount+0x7c>)
 800a75e:	f7fc fedb 	bl	8007518 <NIFFS_format>
    if (res != NIFFS_OK) return res;
 800a762:	b928      	cbnz	r0, 800a770 <FS_mount+0x68>
    res = NIFFS_mount(&fs);
 800a764:	4807      	ldr	r0, [pc, #28]	; (800a784 <FS_mount+0x7c>)
  }
  return res;
}
 800a766:	b009      	add	sp, #36	; 0x24
 800a768:	f85d eb04 	ldr.w	lr, [sp], #4
  res = NIFFS_mount(&fs);
  if (res == ERR_NIFFS_NOT_A_FILESYSTEM) {
    DBG(D_FS, D_INFO, "not a fs, formatting..\n");
    res = NIFFS_format(&fs);
    if (res != NIFFS_OK) return res;
    res = NIFFS_mount(&fs);
 800a76c:	f7fc bf3e 	b.w	80075ec <NIFFS_mount>
  }
  return res;
}
 800a770:	b009      	add	sp, #36	; 0x24
 800a772:	f85d fb04 	ldr.w	pc, [sp], #4
 800a776:	bf00      	nop
 800a778:	20000b5c 	.word	0x20000b5c
 800a77c:	0800a695 	.word	0x0800a695
 800a780:	0800a629 	.word	0x0800a629
 800a784:	20000b20 	.word	0x20000b20
 800a788:	08018000 	.word	0x08018000
 800a78c:	ffffd506 	.word	0xffffd506
 800a790:	20004f80 	.word	0x20004f80
 800a794:	20004f84 	.word	0x20004f84
 800a798:	08012c06 	.word	0x08012c06

0800a79c <FS_dump>:

void FS_dump(void) {
  NIFFS_dump(&fs);
 800a79c:	4801      	ldr	r0, [pc, #4]	; (800a7a4 <FS_dump+0x8>)
 800a79e:	f7fc bf9b 	b.w	80076d8 <NIFFS_dump>
 800a7a2:	bf00      	nop
 800a7a4:	20000b20 	.word	0x20000b20

0800a7a8 <FS_ls>:
}

void FS_ls(void) {
 800a7a8:	b530      	push	{r4, r5, lr}
 800a7aa:	b093      	sub	sp, #76	; 0x4c
  niffs_DIR d;
  struct niffs_dirent e;
  struct niffs_dirent *pe = &e;
  u32_t files = 0;

  NIFFS_opendir(&fs, "/", &d);
 800a7ac:	4817      	ldr	r0, [pc, #92]	; (800a80c <FS_ls+0x64>)
 800a7ae:	4918      	ldr	r1, [pc, #96]	; (800a810 <FS_ls+0x68>)
 800a7b0:	aa03      	add	r2, sp, #12
 800a7b2:	f7f9 f837 	bl	8003824 <NIFFS_opendir>

void FS_ls(void) {
  niffs_DIR d;
  struct niffs_dirent e;
  struct niffs_dirent *pe = &e;
  u32_t files = 0;
 800a7b6:	2500      	movs	r5, #0
}

void FS_ls(void) {
  niffs_DIR d;
  struct niffs_dirent e;
  struct niffs_dirent *pe = &e;
 800a7b8:	ac0b      	add	r4, sp, #44	; 0x2c
  u32_t files = 0;

  NIFFS_opendir(&fs, "/", &d);
  while ((pe = NIFFS_readdir(&d, pe))) {
 800a7ba:	4621      	mov	r1, r4
 800a7bc:	a803      	add	r0, sp, #12
 800a7be:	f7f9 f847 	bl	8003850 <NIFFS_readdir>
 800a7c2:	4604      	mov	r4, r0
 800a7c4:	b138      	cbz	r0, 800a7d6 <FS_ls+0x2e>
    print("  %s [%04x] size:%i\n", pe->name, pe->obj_id, pe->size);
 800a7c6:	4813      	ldr	r0, [pc, #76]	; (800a814 <FS_ls+0x6c>)
 800a7c8:	1c61      	adds	r1, r4, #1
 800a7ca:	7822      	ldrb	r2, [r4, #0]
 800a7cc:	6963      	ldr	r3, [r4, #20]
 800a7ce:	f7fe fce5 	bl	800919c <arcprint>
    files++;
 800a7d2:	3501      	adds	r5, #1
 800a7d4:	e7f1      	b.n	800a7ba <FS_ls+0x12>
  }
  NIFFS_closedir(&d);
 800a7d6:	a803      	add	r0, sp, #12
 800a7d8:	f7f9 f82e 	bl	8003838 <NIFFS_closedir>
  niffs_info info;
  NIFFS_info(&fs, &info);
 800a7dc:	a905      	add	r1, sp, #20
 800a7de:	480b      	ldr	r0, [pc, #44]	; (800a80c <FS_ls+0x64>)
 800a7e0:	f7f8 fe19 	bl	8003416 <NIFFS_info>
  print("  %i bytes used of %i total in %i file%c\n", info.used_bytes, info.total_bytes, files, files == 1 ? ' ' : 's');
 800a7e4:	2d01      	cmp	r5, #1
 800a7e6:	bf14      	ite	ne
 800a7e8:	2373      	movne	r3, #115	; 0x73
 800a7ea:	2320      	moveq	r3, #32
 800a7ec:	9300      	str	r3, [sp, #0]
 800a7ee:	480a      	ldr	r0, [pc, #40]	; (800a818 <FS_ls+0x70>)
 800a7f0:	462b      	mov	r3, r5
 800a7f2:	9906      	ldr	r1, [sp, #24]
 800a7f4:	9a05      	ldr	r2, [sp, #20]
 800a7f6:	f7fe fcd1 	bl	800919c <arcprint>
  if (info.overflow) {
 800a7fa:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800a7fe:	b113      	cbz	r3, 800a806 <FS_ls+0x5e>
    print("WARNING: filesystem crammed. Remove files and run check.\n");
 800a800:	4806      	ldr	r0, [pc, #24]	; (800a81c <FS_ls+0x74>)
 800a802:	f7fe fccb 	bl	800919c <arcprint>
  }
}
 800a806:	b013      	add	sp, #76	; 0x4c
 800a808:	bd30      	pop	{r4, r5, pc}
 800a80a:	bf00      	nop
 800a80c:	20000b20 	.word	0x20000b20
 800a810:	08013008 	.word	0x08013008
 800a814:	08012c1e 	.word	0x08012c1e
 800a818:	08012c33 	.word	0x08012c33
 800a81c:	08012c5d 	.word	0x08012c5d

0800a820 <FS_save_config>:

int FS_save_config(char *name) {
 800a820:	b530      	push	{r4, r5, lr}
 800a822:	4601      	mov	r1, r0
 800a824:	b087      	sub	sp, #28
  int res;
  int fd;
  fd = NIFFS_open(&fs, name, NIFFS_O_WRONLY | NIFFS_O_CREAT | NIFFS_O_TRUNC | NIFFS_O_APPEND, 0);
 800a826:	4839      	ldr	r0, [pc, #228]	; (800a90c <FS_save_config+0xec>)
 800a828:	2217      	movs	r2, #23
 800a82a:	2300      	movs	r3, #0
 800a82c:	f7f8 fe26 	bl	800347c <NIFFS_open>
  if (fd < NIFFS_OK) {
 800a830:	1e04      	subs	r4, r0, #0
 800a832:	da0c      	bge.n	800a84e <FS_save_config+0x2e>
    DBG(D_FS, D_INFO, "save err: open %i\n", fd);
 800a834:	4b36      	ldr	r3, [pc, #216]	; (800a910 <FS_save_config+0xf0>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	0559      	lsls	r1, r3, #21
 800a83a:	d564      	bpl.n	800a906 <FS_save_config+0xe6>
 800a83c:	4b35      	ldr	r3, [pc, #212]	; (800a914 <FS_save_config+0xf4>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	2b01      	cmp	r3, #1
 800a842:	d860      	bhi.n	800a906 <FS_save_config+0xe6>
 800a844:	4834      	ldr	r0, [pc, #208]	; (800a918 <FS_save_config+0xf8>)
 800a846:	4621      	mov	r1, r4
 800a848:	f7fe fca8 	bl	800919c <arcprint>
 800a84c:	e05b      	b.n	800a906 <FS_save_config+0xe6>
    return fd;
  }
  file_config_hdr hdr =
 800a84e:	2100      	movs	r1, #0
 800a850:	2218      	movs	r2, #24
 800a852:	4668      	mov	r0, sp
 800a854:	f003 fd9c 	bl	800e390 <memset>
 800a858:	2302      	movs	r3, #2
 800a85a:	f8ad 3000 	strh.w	r3, [sp]
 800a85e:	231a      	movs	r3, #26
 800a860:	f88d 3002 	strb.w	r3, [sp, #2]
 800a864:	2308      	movs	r3, #8
 800a866:	f88d 3003 	strb.w	r3, [sp, #3]
    { .file_version = FS_FILE_VERSION,
      .nbr_of_pins = APP_CONFIG_PINS,
      .defs_per_pin = APP_CONFIG_DEFS_PER_PIN
    };
  hdr.debounce_cycles = APP_cfg_get_debounce_cycles();
 800a86a:	f7fe fbcb 	bl	8009004 <APP_cfg_get_debounce_cycles>
 800a86e:	f88d 0004 	strb.w	r0, [sp, #4]
  hdr.mouse_delta_ms = APP_cfg_get_mouse_delta_ms();
 800a872:	f7fe fbd3 	bl	800901c <APP_cfg_get_mouse_delta_ms>
 800a876:	9002      	str	r0, [sp, #8]
  hdr.acc_pos_speed = APP_cfg_get_acc_pos_speed();
 800a878:	f7fe fbdc 	bl	8009034 <APP_cfg_get_acc_pos_speed>
 800a87c:	f8ad 000c 	strh.w	r0, [sp, #12]
  hdr.acc_wheel_speed = APP_cfg_get_acc_wheel_speed();
 800a880:	f7fe fbe4 	bl	800904c <APP_cfg_get_acc_wheel_speed>
 800a884:	f8ad 000e 	strh.w	r0, [sp, #14]
  hdr.joystick_delta_ms = APP_cfg_get_joystick_delta_ms();
 800a888:	f7fe fbec 	bl	8009064 <APP_cfg_get_joystick_delta_ms>
 800a88c:	9004      	str	r0, [sp, #16]
  hdr.joystick_acc_speed = APP_cfg_get_joystick_acc_speed();
 800a88e:	f7fe fbf5 	bl	800907c <APP_cfg_get_joystick_acc_speed>

  res = NIFFS_write(&fs, fd, (u8_t *)&hdr, sizeof(hdr));
 800a892:	4621      	mov	r1, r4
  hdr.debounce_cycles = APP_cfg_get_debounce_cycles();
  hdr.mouse_delta_ms = APP_cfg_get_mouse_delta_ms();
  hdr.acc_pos_speed = APP_cfg_get_acc_pos_speed();
  hdr.acc_wheel_speed = APP_cfg_get_acc_wheel_speed();
  hdr.joystick_delta_ms = APP_cfg_get_joystick_delta_ms();
  hdr.joystick_acc_speed = APP_cfg_get_joystick_acc_speed();
 800a894:	f8ad 0014 	strh.w	r0, [sp, #20]

  res = NIFFS_write(&fs, fd, (u8_t *)&hdr, sizeof(hdr));
 800a898:	466a      	mov	r2, sp
 800a89a:	481c      	ldr	r0, [pc, #112]	; (800a90c <FS_save_config+0xec>)
 800a89c:	2318      	movs	r3, #24
 800a89e:	f7f8 feef 	bl	8003680 <NIFFS_write>
  if (res < NIFFS_OK) {
 800a8a2:	1e05      	subs	r5, r0, #0
 800a8a4:	da09      	bge.n	800a8ba <FS_save_config+0x9a>
    DBG(D_FS, D_INFO, "save err: write hdr %i\n", res);
 800a8a6:	4b1a      	ldr	r3, [pc, #104]	; (800a910 <FS_save_config+0xf0>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	055a      	lsls	r2, r3, #21
 800a8ac:	d51f      	bpl.n	800a8ee <FS_save_config+0xce>
 800a8ae:	4b19      	ldr	r3, [pc, #100]	; (800a914 <FS_save_config+0xf4>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d81b      	bhi.n	800a8ee <FS_save_config+0xce>
 800a8b6:	4819      	ldr	r0, [pc, #100]	; (800a91c <FS_save_config+0xfc>)
 800a8b8:	e016      	b.n	800a8e8 <FS_save_config+0xc8>
    NIFFS_close(&fs, fd);
    return res;
  }
  def_config *cfg = APP_cfg_get_pin(0);
 800a8ba:	2000      	movs	r0, #0
 800a8bc:	f7fe fb94 	bl	8008fe8 <APP_cfg_get_pin>
    res = NIFFS_write(&fs, fd, (u8_t *)cfg, sizeof(def_config)*hdr.nbr_of_pins);
 800a8c0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800a8c4:	2513      	movs	r5, #19
  if (res < NIFFS_OK) {
    DBG(D_FS, D_INFO, "save err: write hdr %i\n", res);
    NIFFS_close(&fs, fd);
    return res;
  }
  def_config *cfg = APP_cfg_get_pin(0);
 800a8c6:	4602      	mov	r2, r0
    res = NIFFS_write(&fs, fd, (u8_t *)cfg, sizeof(def_config)*hdr.nbr_of_pins);
 800a8c8:	436b      	muls	r3, r5
 800a8ca:	4810      	ldr	r0, [pc, #64]	; (800a90c <FS_save_config+0xec>)
 800a8cc:	4621      	mov	r1, r4
 800a8ce:	f7f8 fed7 	bl	8003680 <NIFFS_write>
  if (res < NIFFS_OK) {
 800a8d2:	1e05      	subs	r5, r0, #0
 800a8d4:	da11      	bge.n	800a8fa <FS_save_config+0xda>
    DBG(D_FS, D_INFO, "save err: write cfg %i\n", res);
 800a8d6:	4b0e      	ldr	r3, [pc, #56]	; (800a910 <FS_save_config+0xf0>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	055b      	lsls	r3, r3, #21
 800a8dc:	d507      	bpl.n	800a8ee <FS_save_config+0xce>
 800a8de:	4b0d      	ldr	r3, [pc, #52]	; (800a914 <FS_save_config+0xf4>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	d803      	bhi.n	800a8ee <FS_save_config+0xce>
 800a8e6:	480e      	ldr	r0, [pc, #56]	; (800a920 <FS_save_config+0x100>)
 800a8e8:	4629      	mov	r1, r5
 800a8ea:	f7fe fc57 	bl	800919c <arcprint>
    NIFFS_close(&fs, fd);
 800a8ee:	4807      	ldr	r0, [pc, #28]	; (800a90c <FS_save_config+0xec>)
 800a8f0:	4621      	mov	r1, r4
 800a8f2:	f7f8 ff83 	bl	80037fc <NIFFS_close>
    return res;
 800a8f6:	4628      	mov	r0, r5
 800a8f8:	e006      	b.n	800a908 <FS_save_config+0xe8>
  }

  NIFFS_close(&fs, fd);
 800a8fa:	4804      	ldr	r0, [pc, #16]	; (800a90c <FS_save_config+0xec>)
 800a8fc:	4621      	mov	r1, r4
 800a8fe:	f7f8 ff7d 	bl	80037fc <NIFFS_close>
  return res < NIFFS_OK ? res : NIFFS_OK;
 800a902:	2000      	movs	r0, #0
 800a904:	e000      	b.n	800a908 <FS_save_config+0xe8>
 800a906:	4620      	mov	r0, r4
}
 800a908:	b007      	add	sp, #28
 800a90a:	bd30      	pop	{r4, r5, pc}
 800a90c:	20000b20 	.word	0x20000b20
 800a910:	20004f80 	.word	0x20004f80
 800a914:	20004f84 	.word	0x20004f84
 800a918:	08012c97 	.word	0x08012c97
 800a91c:	08012caa 	.word	0x08012caa
 800a920:	08012cc2 	.word	0x08012cc2

0800a924 <FS_load_config>:

int FS_load_config(char *name) {
 800a924:	b570      	push	{r4, r5, r6, lr}
 800a926:	4601      	mov	r1, r0
 800a928:	b08c      	sub	sp, #48	; 0x30
  int res = NIFFS_OK;
#ifndef CONFIG_ANNOYATRON
  int fd;
  fd = NIFFS_open(&fs, name, NIFFS_O_RDONLY , 0);
 800a92a:	4844      	ldr	r0, [pc, #272]	; (800aa3c <FS_load_config+0x118>)
 800a92c:	2208      	movs	r2, #8
 800a92e:	2300      	movs	r3, #0
 800a930:	f7f8 fda4 	bl	800347c <NIFFS_open>
  if (fd < NIFFS_OK) {
 800a934:	1e04      	subs	r4, r0, #0
 800a936:	da0c      	bge.n	800a952 <FS_load_config+0x2e>
    DBG(D_FS, D_INFO, "load err: open %i\n", fd);
 800a938:	4b41      	ldr	r3, [pc, #260]	; (800aa40 <FS_load_config+0x11c>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	055b      	lsls	r3, r3, #21
 800a93e:	d579      	bpl.n	800aa34 <FS_load_config+0x110>
 800a940:	4b40      	ldr	r3, [pc, #256]	; (800aa44 <FS_load_config+0x120>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	2b01      	cmp	r3, #1
 800a946:	d875      	bhi.n	800aa34 <FS_load_config+0x110>
 800a948:	483f      	ldr	r0, [pc, #252]	; (800aa48 <FS_load_config+0x124>)
 800a94a:	4621      	mov	r1, r4
 800a94c:	f7fe fc26 	bl	800919c <arcprint>
 800a950:	e070      	b.n	800aa34 <FS_load_config+0x110>
    return fd;
  }
  file_config_hdr hdr;
  res = NIFFS_read(&fs, fd, (u8_t *)&hdr, sizeof(hdr));
 800a952:	483a      	ldr	r0, [pc, #232]	; (800aa3c <FS_load_config+0x118>)
 800a954:	4621      	mov	r1, r4
 800a956:	aa06      	add	r2, sp, #24
 800a958:	2318      	movs	r3, #24
 800a95a:	f7f8 fe11 	bl	8003580 <NIFFS_read>
  if (res < NIFFS_OK) {
 800a95e:	1e05      	subs	r5, r0, #0
 800a960:	da0c      	bge.n	800a97c <FS_load_config+0x58>
    DBG(D_FS, D_INFO, "load err: read hdr %i\n", res);
 800a962:	4b37      	ldr	r3, [pc, #220]	; (800aa40 <FS_load_config+0x11c>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	055e      	lsls	r6, r3, #21
 800a968:	d55e      	bpl.n	800aa28 <FS_load_config+0x104>
 800a96a:	4b36      	ldr	r3, [pc, #216]	; (800aa44 <FS_load_config+0x120>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	2b01      	cmp	r3, #1
 800a970:	d85a      	bhi.n	800aa28 <FS_load_config+0x104>
 800a972:	4836      	ldr	r0, [pc, #216]	; (800aa4c <FS_load_config+0x128>)
 800a974:	4629      	mov	r1, r5
 800a976:	f7fe fc11 	bl	800919c <arcprint>
 800a97a:	e055      	b.n	800aa28 <FS_load_config+0x104>
    NIFFS_close(&fs, fd);
    return res;
  }
  if (hdr.file_version != FS_FILE_VERSION) {
 800a97c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800a980:	2b02      	cmp	r3, #2
 800a982:	d001      	beq.n	800a988 <FS_load_config+0x64>
    print("wrong file version\n");
 800a984:	4832      	ldr	r0, [pc, #200]	; (800aa50 <FS_load_config+0x12c>)
 800a986:	e004      	b.n	800a992 <FS_load_config+0x6e>
    NIFFS_close(&fs, fd);
    return 0;
  }
  if (hdr.defs_per_pin != APP_CONFIG_DEFS_PER_PIN) {
 800a988:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800a98c:	2b08      	cmp	r3, #8
 800a98e:	d008      	beq.n	800a9a2 <FS_load_config+0x7e>
    print("defs per pin mismatch\n");
 800a990:	4830      	ldr	r0, [pc, #192]	; (800aa54 <FS_load_config+0x130>)
 800a992:	f7fe fc03 	bl	800919c <arcprint>
    NIFFS_close(&fs, fd);
 800a996:	4829      	ldr	r0, [pc, #164]	; (800aa3c <FS_load_config+0x118>)
 800a998:	4621      	mov	r1, r4
 800a99a:	f7f8 ff2f 	bl	80037fc <NIFFS_close>
    return 0;
 800a99e:	2000      	movs	r0, #0
 800a9a0:	e049      	b.n	800aa36 <FS_load_config+0x112>
  }
  if (hdr.nbr_of_pins != APP_CONFIG_PINS) {
 800a9a2:	f89d 501a 	ldrb.w	r5, [sp, #26]
 800a9a6:	2d1a      	cmp	r5, #26
 800a9a8:	d001      	beq.n	800a9ae <FS_load_config+0x8a>
    print("nbr of pin mismatch\n");
 800a9aa:	482b      	ldr	r0, [pc, #172]	; (800aa58 <FS_load_config+0x134>)
 800a9ac:	e7f1      	b.n	800a992 <FS_load_config+0x6e>
    NIFFS_close(&fs, fd);
    return 0;
  }

  APP_cfg_set_debounce_cycles(hdr.debounce_cycles);
 800a9ae:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800a9b2:	f7fe fb21 	bl	8008ff8 <APP_cfg_set_debounce_cycles>
  APP_cfg_set_mouse_delta_ms(hdr.mouse_delta_ms);
 800a9b6:	9808      	ldr	r0, [sp, #32]
 800a9b8:	f7fe fb2a 	bl	8009010 <APP_cfg_set_mouse_delta_ms>
  APP_cfg_set_acc_pos_speed(hdr.acc_pos_speed);
 800a9bc:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 800a9c0:	f7fe fb32 	bl	8009028 <APP_cfg_set_acc_pos_speed>
  APP_cfg_set_acc_wheel_speed(hdr.acc_wheel_speed);
 800a9c4:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
 800a9c8:	f7fe fb3a 	bl	8009040 <APP_cfg_set_acc_wheel_speed>
  APP_cfg_set_joystick_delta_ms(hdr.joystick_delta_ms);
 800a9cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a9ce:	f7fe fb43 	bl	8009058 <APP_cfg_set_joystick_delta_ms>
  APP_cfg_set_joystick_acc_speed(hdr.joystick_acc_speed);
 800a9d2:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 800a9d6:	f7fe fb4b 	bl	8009070 <APP_cfg_set_joystick_acc_speed>

  u8_t pin;
  for (pin = 0; pin < APP_CONFIG_PINS; pin++) {
    def_config cfg;
    res = NIFFS_read(&fs, fd, (u8_t *)&cfg, sizeof(def_config));
 800a9da:	4818      	ldr	r0, [pc, #96]	; (800aa3c <FS_load_config+0x118>)
 800a9dc:	4621      	mov	r1, r4
 800a9de:	aa01      	add	r2, sp, #4
 800a9e0:	2313      	movs	r3, #19
 800a9e2:	f7f8 fdcd 	bl	8003580 <NIFFS_read>
    if (res < NIFFS_OK) {
 800a9e6:	1e06      	subs	r6, r0, #0
 800a9e8:	da11      	bge.n	800aa0e <FS_load_config+0xea>
      DBG(D_FS, D_INFO, "read err: read cfg %i\n", res);
 800a9ea:	4b15      	ldr	r3, [pc, #84]	; (800aa40 <FS_load_config+0x11c>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	0558      	lsls	r0, r3, #21
 800a9f0:	d507      	bpl.n	800aa02 <FS_load_config+0xde>
 800a9f2:	4b14      	ldr	r3, [pc, #80]	; (800aa44 <FS_load_config+0x120>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d803      	bhi.n	800aa02 <FS_load_config+0xde>
 800a9fa:	4818      	ldr	r0, [pc, #96]	; (800aa5c <FS_load_config+0x138>)
 800a9fc:	4631      	mov	r1, r6
 800a9fe:	f7fe fbcd 	bl	800919c <arcprint>
      NIFFS_close(&fs, fd);
 800aa02:	480e      	ldr	r0, [pc, #56]	; (800aa3c <FS_load_config+0x118>)
 800aa04:	4621      	mov	r1, r4
 800aa06:	f7f8 fef9 	bl	80037fc <NIFFS_close>
  APP_cfg_set_joystick_acc_speed(hdr.joystick_acc_speed);

  u8_t pin;
  for (pin = 0; pin < APP_CONFIG_PINS; pin++) {
    def_config cfg;
    res = NIFFS_read(&fs, fd, (u8_t *)&cfg, sizeof(def_config));
 800aa0a:	4630      	mov	r0, r6
 800aa0c:	e013      	b.n	800aa36 <FS_load_config+0x112>
    if (res < NIFFS_OK) {
      DBG(D_FS, D_INFO, "read err: read cfg %i\n", res);
      NIFFS_close(&fs, fd);
      return res;
    }
    APP_cfg_set_pin(&cfg);
 800aa0e:	a801      	add	r0, sp, #4
 800aa10:	f7fe fa9a 	bl	8008f48 <APP_cfg_set_pin>
    if (cfg.pin) def_config_print(&cfg);
 800aa14:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800aa18:	b113      	cbz	r3, 800aa20 <FS_load_config+0xfc>
 800aa1a:	a801      	add	r0, sp, #4
 800aa1c:	f7ff fd02 	bl	800a424 <def_config_print>
 800aa20:	3d01      	subs	r5, #1
  APP_cfg_set_acc_wheel_speed(hdr.acc_wheel_speed);
  APP_cfg_set_joystick_delta_ms(hdr.joystick_delta_ms);
  APP_cfg_set_joystick_acc_speed(hdr.joystick_acc_speed);

  u8_t pin;
  for (pin = 0; pin < APP_CONFIG_PINS; pin++) {
 800aa22:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 800aa26:	d1d8      	bne.n	800a9da <FS_load_config+0xb6>
    }
    APP_cfg_set_pin(&cfg);
    if (cfg.pin) def_config_print(&cfg);
  }

  NIFFS_close(&fs, fd);
 800aa28:	4804      	ldr	r0, [pc, #16]	; (800aa3c <FS_load_config+0x118>)
 800aa2a:	4621      	mov	r1, r4
 800aa2c:	f7f8 fee6 	bl	80037fc <NIFFS_close>
#endif
  return res < NIFFS_OK ? res : NIFFS_OK;
 800aa30:	4628      	mov	r0, r5
 800aa32:	e000      	b.n	800aa36 <FS_load_config+0x112>
 800aa34:	4620      	mov	r0, r4
}
 800aa36:	b00c      	add	sp, #48	; 0x30
 800aa38:	bd70      	pop	{r4, r5, r6, pc}
 800aa3a:	bf00      	nop
 800aa3c:	20000b20 	.word	0x20000b20
 800aa40:	20004f80 	.word	0x20004f80
 800aa44:	20004f84 	.word	0x20004f84
 800aa48:	08012cda 	.word	0x08012cda
 800aa4c:	08012ced 	.word	0x08012ced
 800aa50:	08012d04 	.word	0x08012d04
 800aa54:	08012d18 	.word	0x08012d18
 800aa58:	08012d2f 	.word	0x08012d2f
 800aa5c:	08012d44 	.word	0x08012d44

0800aa60 <FS_rm_config>:

int FS_rm_config(char *name) {
 800aa60:	4601      	mov	r1, r0
  int res = NIFFS_remove(&fs, name);
 800aa62:	4801      	ldr	r0, [pc, #4]	; (800aa68 <FS_rm_config+0x8>)
 800aa64:	f7f8 bde4 	b.w	8003630 <NIFFS_remove>
 800aa68:	20000b20 	.word	0x20000b20

0800aa6c <FS_chk>:
  return res;
}

int FS_chk(void) {
 800aa6c:	b508      	push	{r3, lr}
  int res = NIFFS_unmount(&fs);
 800aa6e:	4807      	ldr	r0, [pc, #28]	; (800aa8c <FS_chk+0x20>)
 800aa70:	f7fc fdfc 	bl	800766c <NIFFS_unmount>
  if (res != NIFFS_OK) return res;
 800aa74:	b940      	cbnz	r0, 800aa88 <FS_chk+0x1c>
  res = NIFFS_chk(&fs);
 800aa76:	4805      	ldr	r0, [pc, #20]	; (800aa8c <FS_chk+0x20>)
 800aa78:	f7f8 ff04 	bl	8003884 <NIFFS_chk>
  if (res != NIFFS_OK) return res;
 800aa7c:	b920      	cbnz	r0, 800aa88 <FS_chk+0x1c>
  res = NIFFS_mount(&fs);
 800aa7e:	4803      	ldr	r0, [pc, #12]	; (800aa8c <FS_chk+0x20>)
  return res;
}
 800aa80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
int FS_chk(void) {
  int res = NIFFS_unmount(&fs);
  if (res != NIFFS_OK) return res;
  res = NIFFS_chk(&fs);
  if (res != NIFFS_OK) return res;
  res = NIFFS_mount(&fs);
 800aa84:	f7fc bdb2 	b.w	80075ec <NIFFS_mount>
  return res;
}
 800aa88:	bd08      	pop	{r3, pc}
 800aa8a:	bf00      	nop
 800aa8c:	20000b20 	.word	0x20000b20

0800aa90 <FS_format>:

int FS_format(void) {
 800aa90:	b508      	push	{r3, lr}
  int res = NIFFS_unmount(&fs);
 800aa92:	4807      	ldr	r0, [pc, #28]	; (800aab0 <FS_format+0x20>)
 800aa94:	f7fc fdea 	bl	800766c <NIFFS_unmount>
  if (res != NIFFS_OK) return res;
 800aa98:	b940      	cbnz	r0, 800aaac <FS_format+0x1c>
  res = NIFFS_format(&fs);
 800aa9a:	4805      	ldr	r0, [pc, #20]	; (800aab0 <FS_format+0x20>)
 800aa9c:	f7fc fd3c 	bl	8007518 <NIFFS_format>
  if (res != NIFFS_OK) return res;
 800aaa0:	b920      	cbnz	r0, 800aaac <FS_format+0x1c>
  res = NIFFS_mount(&fs);
 800aaa2:	4803      	ldr	r0, [pc, #12]	; (800aab0 <FS_format+0x20>)
  return res;
}
 800aaa4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
int FS_format(void) {
  int res = NIFFS_unmount(&fs);
  if (res != NIFFS_OK) return res;
  res = NIFFS_format(&fs);
  if (res != NIFFS_OK) return res;
  res = NIFFS_mount(&fs);
 800aaa8:	f7fc bda0 	b.w	80075ec <NIFFS_mount>
  return res;
}
 800aaac:	bd08      	pop	{r3, pc}
 800aaae:	bf00      	nop
 800aab0:	20000b20 	.word	0x20000b20

0800aab4 <FS_create>:

int FS_create(char *name) {
 800aab4:	4601      	mov	r1, r0
  return NIFFS_creat(&fs, name, 0);
 800aab6:	2200      	movs	r2, #0
 800aab8:	4801      	ldr	r0, [pc, #4]	; (800aac0 <FS_create+0xc>)
 800aaba:	f7f8 bcd3 	b.w	8003464 <NIFFS_creat>
 800aabe:	bf00      	nop
 800aac0:	20000b20 	.word	0x20000b20

0800aac4 <FS_append>:
}

int FS_append(char *name, char *line) {
 800aac4:	4603      	mov	r3, r0
 800aac6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aac8:	460d      	mov	r5, r1
  int fd = NIFFS_open(&fs, name, NIFFS_O_APPEND | NIFFS_O_CREAT | NIFFS_O_RDWR, 0);
 800aaca:	4813      	ldr	r0, [pc, #76]	; (800ab18 <FS_append+0x54>)
 800aacc:	4619      	mov	r1, r3
 800aace:	221d      	movs	r2, #29
 800aad0:	2300      	movs	r3, #0
 800aad2:	f7f8 fcd3 	bl	800347c <NIFFS_open>
  if (fd < 0) return fd;
 800aad6:	1e04      	subs	r4, r0, #0
 800aad8:	db1a      	blt.n	800ab10 <FS_append+0x4c>
  int res = NIFFS_write(&fs, fd, (u8_t *)line, strlen(line));
 800aada:	4628      	mov	r0, r5
 800aadc:	f7f6 f9be 	bl	8000e5c <strlen>
 800aae0:	4621      	mov	r1, r4
 800aae2:	4603      	mov	r3, r0
 800aae4:	462a      	mov	r2, r5
 800aae6:	480c      	ldr	r0, [pc, #48]	; (800ab18 <FS_append+0x54>)
 800aae8:	f7f8 fdca 	bl	8003680 <NIFFS_write>
  if (res < NIFFS_OK) return res;
 800aaec:	2800      	cmp	r0, #0
 800aaee:	db10      	blt.n	800ab12 <FS_append+0x4e>
  u8_t nl = '\n';
 800aaf0:	aa02      	add	r2, sp, #8
 800aaf2:	230a      	movs	r3, #10
 800aaf4:	f802 3d01 	strb.w	r3, [r2, #-1]!
  res = NIFFS_write(&fs, fd, &nl, 1);
 800aaf8:	4807      	ldr	r0, [pc, #28]	; (800ab18 <FS_append+0x54>)
 800aafa:	4621      	mov	r1, r4
 800aafc:	2301      	movs	r3, #1
 800aafe:	f7f8 fdbf 	bl	8003680 <NIFFS_write>
  if (res < NIFFS_OK) return res;
 800ab02:	2800      	cmp	r0, #0
 800ab04:	db05      	blt.n	800ab12 <FS_append+0x4e>
  return NIFFS_close(&fs, fd);
 800ab06:	4621      	mov	r1, r4
 800ab08:	4803      	ldr	r0, [pc, #12]	; (800ab18 <FS_append+0x54>)
 800ab0a:	f7f8 fe77 	bl	80037fc <NIFFS_close>
 800ab0e:	e000      	b.n	800ab12 <FS_append+0x4e>
 800ab10:	4620      	mov	r0, r4
}
 800ab12:	b003      	add	sp, #12
 800ab14:	bd30      	pop	{r4, r5, pc}
 800ab16:	bf00      	nop
 800ab18:	20000b20 	.word	0x20000b20

0800ab1c <FS_less>:

int FS_less(char *name) {
 800ab1c:	b570      	push	{r4, r5, r6, lr}
 800ab1e:	4601      	mov	r1, r0
 800ab20:	b088      	sub	sp, #32
  int fd = NIFFS_open(&fs, name, NIFFS_O_RDONLY, 0);
 800ab22:	4815      	ldr	r0, [pc, #84]	; (800ab78 <FS_less+0x5c>)
 800ab24:	2208      	movs	r2, #8
 800ab26:	2300      	movs	r3, #0
 800ab28:	f7f8 fca8 	bl	800347c <NIFFS_open>
  if (fd < 0) return fd;
 800ab2c:	1e05      	subs	r5, r0, #0
 800ab2e:	db1f      	blt.n	800ab70 <FS_less+0x54>
  char buf[32];
  int res;
  do {
    res = NIFFS_read(&fs, fd, (u8_t *)buf, sizeof(buf)-1);
    if (res > 0) {
      buf[res] = 0;
 800ab30:	2600      	movs	r6, #0
  int fd = NIFFS_open(&fs, name, NIFFS_O_RDONLY, 0);
  if (fd < 0) return fd;
  char buf[32];
  int res;
  do {
    res = NIFFS_read(&fs, fd, (u8_t *)buf, sizeof(buf)-1);
 800ab32:	4811      	ldr	r0, [pc, #68]	; (800ab78 <FS_less+0x5c>)
 800ab34:	4629      	mov	r1, r5
 800ab36:	466a      	mov	r2, sp
 800ab38:	231f      	movs	r3, #31
 800ab3a:	f7f8 fd21 	bl	8003580 <NIFFS_read>
    if (res > 0) {
 800ab3e:	1e04      	subs	r4, r0, #0
 800ab40:	dd08      	ble.n	800ab54 <FS_less+0x38>
      buf[res] = 0;
 800ab42:	ab08      	add	r3, sp, #32
 800ab44:	441c      	add	r4, r3
      print("%s", buf);
 800ab46:	480d      	ldr	r0, [pc, #52]	; (800ab7c <FS_less+0x60>)
 800ab48:	4669      	mov	r1, sp
  char buf[32];
  int res;
  do {
    res = NIFFS_read(&fs, fd, (u8_t *)buf, sizeof(buf)-1);
    if (res > 0) {
      buf[res] = 0;
 800ab4a:	f804 6c20 	strb.w	r6, [r4, #-32]
      print("%s", buf);
 800ab4e:	f7fe fb25 	bl	800919c <arcprint>
 800ab52:	e7ee      	b.n	800ab32 <FS_less+0x16>
    }
  } while (res >= NIFFS_OK);
 800ab54:	d0ed      	beq.n	800ab32 <FS_less+0x16>
  if (res == ERR_NIFFS_END_OF_FILE) res = NIFFS_OK;
 800ab56:	4b0a      	ldr	r3, [pc, #40]	; (800ab80 <FS_less+0x64>)
  if (res > 0) res = 0;
  print("\n");
 800ab58:	480a      	ldr	r0, [pc, #40]	; (800ab84 <FS_less+0x68>)
    if (res > 0) {
      buf[res] = 0;
      print("%s", buf);
    }
  } while (res >= NIFFS_OK);
  if (res == ERR_NIFFS_END_OF_FILE) res = NIFFS_OK;
 800ab5a:	429c      	cmp	r4, r3
 800ab5c:	bf08      	it	eq
 800ab5e:	2400      	moveq	r4, #0
  if (res > 0) res = 0;
  print("\n");
 800ab60:	f7fe fb1c 	bl	800919c <arcprint>
  NIFFS_close(&fs, fd);
 800ab64:	4804      	ldr	r0, [pc, #16]	; (800ab78 <FS_less+0x5c>)
 800ab66:	4629      	mov	r1, r5
 800ab68:	f7f8 fe48 	bl	80037fc <NIFFS_close>
  return res;
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	e000      	b.n	800ab72 <FS_less+0x56>
 800ab70:	4628      	mov	r0, r5
}
 800ab72:	b008      	add	sp, #32
 800ab74:	bd70      	pop	{r4, r5, r6, pc}
 800ab76:	bf00      	nop
 800ab78:	20000b20 	.word	0x20000b20
 800ab7c:	08011907 	.word	0x08011907
 800ab80:	ffffd4ef 	.word	0xffffd4ef
 800ab84:	0801197d 	.word	0x0801197d

0800ab88 <FS_rename>:

int FS_rename(char *oldname, char *newname) {
 800ab88:	4603      	mov	r3, r0
 800ab8a:	460a      	mov	r2, r1
  return NIFFS_rename(&fs, oldname, newname);
 800ab8c:	4801      	ldr	r0, [pc, #4]	; (800ab94 <FS_rename+0xc>)
 800ab8e:	4619      	mov	r1, r3
 800ab90:	f7f8 be3e 	b.w	8003810 <NIFFS_rename>
 800ab94:	20000b20 	.word	0x20000b20

0800ab98 <FS_get_fs>:
}


niffs *FS_get_fs(void) {
  return &fs;
}
 800ab98:	4800      	ldr	r0, [pc, #0]	; (800ab9c <FS_get_fs+0x4>)
 800ab9a:	4770      	bx	lr
 800ab9c:	20000b20 	.word	0x20000b20

0800aba0 <_flash_get_sector>:

  return res;
}

void _flash_get_sector(u32_t phys_addr, u32_t *sect_addr, u32_t *sect_len) {
  *sect_addr = phys_addr & (~(FLASH_PAGE_SIZE-1));
 800aba0:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
 800aba4:	f020 0003 	bic.w	r0, r0, #3
  *sect_len = FLASH_PAGE_SIZE;
 800aba8:	f44f 6380 	mov.w	r3, #1024	; 0x400

  return res;
}

void _flash_get_sector(u32_t phys_addr, u32_t *sect_addr, u32_t *sect_len) {
  *sect_addr = phys_addr & (~(FLASH_PAGE_SIZE-1));
 800abac:	6008      	str	r0, [r1, #0]
  *sect_len = FLASH_PAGE_SIZE;
 800abae:	6013      	str	r3, [r2, #0]
 800abb0:	4770      	bx	lr
 800abb2:	bf00      	nop

0800abb4 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 800abb4:	b510      	push	{r4, lr}
 800abb6:	4c06      	ldr	r4, [pc, #24]	; (800abd0 <Standard_GetConfiguration+0x1c>)
  if (Length == 0)
 800abb8:	b918      	cbnz	r0, 800abc2 <Standard_GetConfiguration+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 800abba:	6823      	ldr	r3, [r4, #0]
 800abbc:	2201      	movs	r2, #1
 800abbe:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 800abc0:	bd10      	pop	{r4, pc}
  }
  pUser_Standard_Requests->User_GetConfiguration();
 800abc2:	4b04      	ldr	r3, [pc, #16]	; (800abd4 <Standard_GetConfiguration+0x20>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_Configuration;
 800abca:	6820      	ldr	r0, [r4, #0]
 800abcc:	300a      	adds	r0, #10
}
 800abce:	bd10      	pop	{r4, pc}
 800abd0:	200017e0 	.word	0x200017e0
 800abd4:	200017dc 	.word	0x200017dc

0800abd8 <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 800abd8:	b510      	push	{r4, lr}
 800abda:	4c06      	ldr	r4, [pc, #24]	; (800abf4 <Standard_GetInterface+0x1c>)
  if (Length == 0)
 800abdc:	b918      	cbnz	r0, 800abe6 <Standard_GetInterface+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 800abde:	6823      	ldr	r3, [r4, #0]
 800abe0:	2201      	movs	r2, #1
 800abe2:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 800abe4:	bd10      	pop	{r4, pc}
  }
  pUser_Standard_Requests->User_GetInterface();
 800abe6:	4b04      	ldr	r3, [pc, #16]	; (800abf8 <Standard_GetInterface+0x20>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	689b      	ldr	r3, [r3, #8]
 800abec:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 800abee:	6820      	ldr	r0, [r4, #0]
 800abf0:	300c      	adds	r0, #12
}
 800abf2:	bd10      	pop	{r4, pc}
 800abf4:	200017e0 	.word	0x200017e0
 800abf8:	200017dc 	.word	0x200017dc

0800abfc <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 800abfc:	b510      	push	{r4, lr}
 800abfe:	4b20      	ldr	r3, [pc, #128]	; (800ac80 <Standard_GetStatus+0x84>)
  if (Length == 0)
 800ac00:	b918      	cbnz	r0, 800ac0a <Standard_GetStatus+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	2202      	movs	r2, #2
 800ac06:	821a      	strh	r2, [r3, #16]
    return 0;
 800ac08:	bd10      	pop	{r4, pc}
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 800ac0a:	4a1e      	ldr	r2, [pc, #120]	; (800ac84 <Standard_GetStatus+0x88>)

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800ac0c:	6819      	ldr	r1, [r3, #0]
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 800ac0e:	2000      	movs	r0, #0
 800ac10:	8010      	strh	r0, [r2, #0]

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800ac12:	780c      	ldrb	r4, [r1, #0]
 800ac14:	4613      	mov	r3, r2
 800ac16:	f014 047f 	ands.w	r4, r4, #127	; 0x7f
 800ac1a:	d10d      	bne.n	800ac38 <Standard_GetStatus+0x3c>
  {
    /*Get Device Status */
    uint8_t Feature = pInformation->Current_Feature;
 800ac1c:	7a4a      	ldrb	r2, [r1, #9]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 800ac1e:	0691      	lsls	r1, r2, #26
    {
      SetBit(StatusInfo0, 1);
 800ac20:	bf44      	itt	mi
 800ac22:	2102      	movmi	r1, #2
 800ac24:	7019      	strbmi	r1, [r3, #0]
    {
      ClrBit(StatusInfo0, 1);
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 800ac26:	f012 0f40 	tst.w	r2, #64	; 0x40
    {
      SetBit(StatusInfo0, 0);
 800ac2a:	781a      	ldrb	r2, [r3, #0]
 800ac2c:	bf14      	ite	ne
 800ac2e:	f042 0201 	orrne.w	r2, r2, #1
    }
    else /* Self-powered */
    {
      ClrBit(StatusInfo0, 0);
 800ac32:	f022 0201 	biceq.w	r2, r2, #1
 800ac36:	e014      	b.n	800ac62 <Standard_GetStatus+0x66>
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800ac38:	2c01      	cmp	r4, #1
 800ac3a:	d01f      	beq.n	800ac7c <Standard_GetStatus+0x80>
  {
    return (uint8_t *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800ac3c:	2c02      	cmp	r4, #2
 800ac3e:	d11e      	bne.n	800ac7e <Standard_GetStatus+0x82>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 800ac40:	7949      	ldrb	r1, [r1, #5]

    Related_Endpoint = (wIndex0 & 0x0f);
 800ac42:	f001 020f 	and.w	r2, r1, #15
 800ac46:	0092      	lsls	r2, r2, #2
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 800ac48:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800ac4c:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 800ac50:	f011 0f80 	tst.w	r1, #128	; 0x80
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 800ac54:	6812      	ldr	r2, [r2, #0]
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 800ac56:	d006      	beq.n	800ac66 <Standard_GetStatus+0x6a>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 800ac58:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800ac5c:	2a10      	cmp	r2, #16
 800ac5e:	d107      	bne.n	800ac70 <Standard_GetStatus+0x74>
      {
        SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
 800ac60:	2201      	movs	r2, #1
 800ac62:	701a      	strb	r2, [r3, #0]
 800ac64:	e004      	b.n	800ac70 <Standard_GetStatus+0x74>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 800ac66:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 800ac6a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800ac6e:	e7f6      	b.n	800ac5e <Standard_GetStatus+0x62>
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 800ac70:	4b05      	ldr	r3, [pc, #20]	; (800ac88 <Standard_GetStatus+0x8c>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	691b      	ldr	r3, [r3, #16]
 800ac76:	4798      	blx	r3
  return (uint8_t *)&StatusInfo;
 800ac78:	4802      	ldr	r0, [pc, #8]	; (800ac84 <Standard_GetStatus+0x88>)
 800ac7a:	bd10      	pop	{r4, pc}
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    return (uint8_t *)&StatusInfo;
 800ac7c:	4610      	mov	r0, r2
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
  return (uint8_t *)&StatusInfo;
}
 800ac7e:	bd10      	pop	{r4, pc}
 800ac80:	200017e0 	.word	0x200017e0
 800ac84:	20001154 	.word	0x20001154
 800ac88:	200017dc 	.word	0x200017dc

0800ac8c <DataStageIn>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 800ac8c:	4a23      	ldr	r2, [pc, #140]	; (800ad1c <DataStageIn+0x90>)
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 800ac8e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 800ac92:	6814      	ldr	r4, [r2, #0]
 800ac94:	4690      	mov	r8, r2
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 800ac96:	8a23      	ldrh	r3, [r4, #16]
  uint32_t ControlState = pInformation->ControlState;
 800ac98:	7a26      	ldrb	r6, [r4, #8]
 800ac9a:	4f21      	ldr	r7, [pc, #132]	; (800ad20 <DataStageIn+0x94>)

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 800ac9c:	b9a3      	cbnz	r3, 800acc8 <DataStageIn+0x3c>
 800ac9e:	2e04      	cmp	r6, #4
 800aca0:	d112      	bne.n	800acc8 <DataStageIn+0x3c>
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 800aca2:	4920      	ldr	r1, [pc, #128]	; (800ad24 <DataStageIn+0x98>)
 800aca4:	780a      	ldrb	r2, [r1, #0]
 800aca6:	2a01      	cmp	r2, #1
 800aca8:	d10a      	bne.n	800acc0 <DataStageIn+0x34>
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 800acaa:	4a1f      	ldr	r2, [pc, #124]	; (800ad28 <DataStageIn+0x9c>)
 800acac:	6810      	ldr	r0, [r2, #0]
 800acae:	4a1f      	ldr	r2, [pc, #124]	; (800ad2c <DataStageIn+0xa0>)
 800acb0:	b280      	uxth	r0, r0
 800acb2:	4402      	add	r2, r0
 800acb4:	0052      	lsls	r2, r2, #1
 800acb6:	6013      	str	r3, [r2, #0]
 800acb8:	2230      	movs	r2, #48	; 0x30
 800acba:	803a      	strh	r2, [r7, #0]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 800acbc:	700b      	strb	r3, [r1, #0]
 800acbe:	e027      	b.n	800ad10 <DataStageIn+0x84>
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 800acc0:	2310      	movs	r3, #16
 800acc2:	803b      	strh	r3, [r7, #0]
      Data_Mul_MaxPacketSize = FALSE;
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
 800acc4:	2607      	movs	r6, #7
 800acc6:	e023      	b.n	800ad10 <DataStageIn+0x84>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 800acc8:	8aa5      	ldrh	r5, [r4, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 800acca:	42ab      	cmp	r3, r5
 800accc:	bf8c      	ite	hi
 800acce:	2602      	movhi	r6, #2
 800acd0:	2604      	movls	r6, #4
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 800acd2:	429d      	cmp	r5, r3
 800acd4:	bf28      	it	cs
 800acd6:	461d      	movcs	r5, r3
 800acd8:	4628      	mov	r0, r5
 800acda:	69a3      	ldr	r3, [r4, #24]
 800acdc:	4798      	blx	r3
 800acde:	4681      	mov	r9, r0
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 800ace0:	2000      	movs	r0, #0
 800ace2:	f001 fc07 	bl	800c4f4 <GetEPTxAddr>
 800ace6:	462a      	mov	r2, r5
 800ace8:	4601      	mov	r1, r0
 800acea:	4648      	mov	r0, r9
 800acec:	f000 ff3e 	bl	800bb6c <UserToPMABufferCopy>

  SetEPTxCount(ENDP0, Length);
 800acf0:	4629      	mov	r1, r5
 800acf2:	2000      	movs	r0, #0
 800acf4:	f001 fc1a 	bl	800c52c <SetEPTxCount>

  pEPinfo->Usb_wLength -= Length;
 800acf8:	8a23      	ldrh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 800acfa:	f44f 5240 	mov.w	r2, #12288	; 0x3000
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 800acfe:	1b5b      	subs	r3, r3, r5
 800ad00:	8223      	strh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 800ad02:	8a63      	ldrh	r3, [r4, #18]
 800ad04:	441d      	add	r5, r3
  vSetEPTxStatus(EP_TX_VALID);
 800ad06:	2330      	movs	r3, #48	; 0x30
 800ad08:	803b      	strh	r3, [r7, #0]

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 800ad0a:	4b09      	ldr	r3, [pc, #36]	; (800ad30 <DataStageIn+0xa4>)
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 800ad0c:	8265      	strh	r5, [r4, #18]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 800ad0e:	801a      	strh	r2, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 800ad10:	f8d8 3000 	ldr.w	r3, [r8]
 800ad14:	721e      	strb	r6, [r3, #8]
 800ad16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad1a:	bf00      	nop
 800ad1c:	200017e0 	.word	0x200017e0
 800ad20:	200017e8 	.word	0x200017e8
 800ad24:	20000c1c 	.word	0x20000c1c
 800ad28:	40005c50 	.word	0x40005c50
 800ad2c:	20003002 	.word	0x20003002
 800ad30:	200017e6 	.word	0x200017e6

0800ad34 <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 800ad34:	b510      	push	{r4, lr}

  if ((pInformation->USBwValue0 <=
 800ad36:	4b0a      	ldr	r3, [pc, #40]	; (800ad60 <Standard_SetConfiguration+0x2c>)
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 800ad38:	490a      	ldr	r1, [pc, #40]	; (800ad64 <Standard_SetConfiguration+0x30>)
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	7849      	ldrb	r1, [r1, #1]
 800ad3e:	78da      	ldrb	r2, [r3, #3]
 800ad40:	4291      	cmp	r1, r2
 800ad42:	d30a      	bcc.n	800ad5a <Standard_SetConfiguration+0x26>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 800ad44:	7899      	ldrb	r1, [r3, #2]
 800ad46:	b941      	cbnz	r1, 800ad5a <Standard_SetConfiguration+0x26>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 800ad48:	889c      	ldrh	r4, [r3, #4]
 800ad4a:	b934      	cbnz	r4, 800ad5a <Standard_SetConfiguration+0x26>
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 800ad4c:	729a      	strb	r2, [r3, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 800ad4e:	4b06      	ldr	r3, [pc, #24]	; (800ad68 <Standard_SetConfiguration+0x34>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	4798      	blx	r3
    return USB_SUCCESS;
 800ad56:	4620      	mov	r0, r4
 800ad58:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USB_UNSUPPORT;
 800ad5a:	2002      	movs	r0, #2
  }
}
 800ad5c:	bd10      	pop	{r4, pc}
 800ad5e:	bf00      	nop
 800ad60:	200017e0 	.word	0x200017e0
 800ad64:	20000174 	.word	0x20000174
 800ad68:	200017dc 	.word	0x200017dc

0800ad6c <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 800ad6c:	b538      	push	{r3, r4, r5, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 800ad6e:	4a0e      	ldr	r2, [pc, #56]	; (800ada8 <Standard_SetInterface+0x3c>)
 800ad70:	4c0e      	ldr	r4, [pc, #56]	; (800adac <Standard_SetInterface+0x40>)
 800ad72:	6812      	ldr	r2, [r2, #0]
 800ad74:	6823      	ldr	r3, [r4, #0]
 800ad76:	6992      	ldr	r2, [r2, #24]
 800ad78:	7958      	ldrb	r0, [r3, #5]
 800ad7a:	78d9      	ldrb	r1, [r3, #3]
 800ad7c:	4790      	blx	r2

  if (pInformation->Current_Configuration != 0)
 800ad7e:	6823      	ldr	r3, [r4, #0]
 800ad80:	7a9a      	ldrb	r2, [r3, #10]
 800ad82:	b17a      	cbz	r2, 800ada4 <Standard_SetInterface+0x38>
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 800ad84:	b970      	cbnz	r0, 800ada4 <Standard_SetInterface+0x38>
 800ad86:	791a      	ldrb	r2, [r3, #4]
 800ad88:	b962      	cbnz	r2, 800ada4 <Standard_SetInterface+0x38>
        || (pInformation->USBwValue1 != 0))
 800ad8a:	789d      	ldrb	r5, [r3, #2]
 800ad8c:	b955      	cbnz	r5, 800ada4 <Standard_SetInterface+0x38>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
 800ad8e:	4b08      	ldr	r3, [pc, #32]	; (800adb0 <Standard_SetInterface+0x44>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	68db      	ldr	r3, [r3, #12]
 800ad94:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 800ad96:	6823      	ldr	r3, [r4, #0]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
      return USB_SUCCESS;
 800ad98:	4628      	mov	r0, r5
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 800ad9a:	795a      	ldrb	r2, [r3, #5]
 800ad9c:	72da      	strb	r2, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 800ad9e:	78da      	ldrb	r2, [r3, #3]
 800ada0:	731a      	strb	r2, [r3, #12]
      return USB_SUCCESS;
 800ada2:	bd38      	pop	{r3, r4, r5, pc}
    }

  }

  return USB_UNSUPPORT;
 800ada4:	2002      	movs	r0, #2
}
 800ada6:	bd38      	pop	{r3, r4, r5, pc}
 800ada8:	200017b8 	.word	0x200017b8
 800adac:	200017e0 	.word	0x200017e0
 800adb0:	200017dc 	.word	0x200017dc

0800adb4 <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 800adb4:	b538      	push	{r3, r4, r5, lr}
  uint32_t     Type_Rec = Type_Recipient;
 800adb6:	4b30      	ldr	r3, [pc, #192]	; (800ae78 <Standard_ClearFeature+0xc4>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	7818      	ldrb	r0, [r3, #0]
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800adbc:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 800adc0:	d104      	bne.n	800adcc <Standard_ClearFeature+0x18>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 800adc2:	7a5a      	ldrb	r2, [r3, #9]
 800adc4:	f022 0220 	bic.w	r2, r2, #32
 800adc8:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 800adca:	bd38      	pop	{r3, r4, r5, pc}
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800adcc:	2802      	cmp	r0, #2
 800adce:	d150      	bne.n	800ae72 <Standard_ClearFeature+0xbe>
    DEVICE* pDev;
    uint32_t Related_Endpoint;
    uint32_t wIndex0;
    uint32_t rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 800add0:	885a      	ldrh	r2, [r3, #2]
 800add2:	2a00      	cmp	r2, #0
 800add4:	d14e      	bne.n	800ae74 <Standard_ClearFeature+0xc0>
        || (pInformation->USBwIndex1 != 0))
 800add6:	791a      	ldrb	r2, [r3, #4]
 800add8:	2a00      	cmp	r2, #0
 800adda:	d14b      	bne.n	800ae74 <Standard_ClearFeature+0xc0>
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 800addc:	795a      	ldrb	r2, [r3, #5]
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 800adde:	4d27      	ldr	r5, [pc, #156]	; (800ae7c <Standard_ClearFeature+0xc8>)
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
 800ade0:	f022 0080 	bic.w	r0, r2, #128	; 0x80
 800ade4:	0084      	lsls	r4, r0, #2

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 800ade6:	f104 4180 	add.w	r1, r4, #1073741824	; 0x40000000
 800adea:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 800adee:	6809      	ldr	r1, [r1, #0]
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 800adf0:	782d      	ldrb	r5, [r5, #0]
    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 800adf2:	f012 0f80 	tst.w	r2, #128	; 0x80
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 800adf6:	bf14      	ite	ne
 800adf8:	f001 0130 	andne.w	r1, r1, #48	; 0x30
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 800adfc:	f401 5140 	andeq.w	r1, r1, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 800ae00:	42a8      	cmp	r0, r5
 800ae02:	d236      	bcs.n	800ae72 <Standard_ClearFeature+0xbe>
 800ae04:	2900      	cmp	r1, #0
 800ae06:	d034      	beq.n	800ae72 <Standard_ClearFeature+0xbe>
        || (pInformation->Current_Configuration == 0))
 800ae08:	7a9b      	ldrb	r3, [r3, #10]
 800ae0a:	b393      	cbz	r3, 800ae72 <Standard_ClearFeature+0xbe>


    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 800ae0c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800ae10:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 800ae14:	0615      	lsls	r5, r2, #24
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 800ae16:	6823      	ldr	r3, [r4, #0]
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 800ae18:	d50c      	bpl.n	800ae34 <Standard_ClearFeature+0x80>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 800ae1a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ae1e:	2b10      	cmp	r3, #16
 800ae20:	d121      	bne.n	800ae66 <Standard_ClearFeature+0xb2>
      {
        ClearDTOG_TX(Related_Endpoint);
 800ae22:	b2c4      	uxtb	r4, r0
 800ae24:	4620      	mov	r0, r4
 800ae26:	f001 fb19 	bl	800c45c <ClearDTOG_TX>
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 800ae2a:	4620      	mov	r0, r4
 800ae2c:	2130      	movs	r1, #48	; 0x30
 800ae2e:	f001 f9e5 	bl	800c1fc <SetEPTxStatus>
 800ae32:	e018      	b.n	800ae66 <Standard_ClearFeature+0xb2>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 800ae34:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ae38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae3c:	d113      	bne.n	800ae66 <Standard_ClearFeature+0xb2>
      {
        if (Related_Endpoint == ENDP0)
 800ae3e:	b928      	cbnz	r0, 800ae4c <Standard_ClearFeature+0x98>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 800ae40:	4b0f      	ldr	r3, [pc, #60]	; (800ae80 <Standard_ClearFeature+0xcc>)
 800ae42:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 800ae46:	f001 fb93 	bl	800c570 <SetEPRxCount>
 800ae4a:	e001      	b.n	800ae50 <Standard_ClearFeature+0x9c>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 800ae4c:	f001 faf4 	bl	800c438 <ClearDTOG_RX>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 800ae50:	6822      	ldr	r2, [r4, #0]
 800ae52:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 800ae56:	4013      	ands	r3, r2
 800ae58:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800ae5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae64:	6023      	str	r3, [r4, #0]
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 800ae66:	4b07      	ldr	r3, [pc, #28]	; (800ae84 <Standard_ClearFeature+0xd0>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	695b      	ldr	r3, [r3, #20]
 800ae6c:	4798      	blx	r3
    return USB_SUCCESS;
 800ae6e:	2000      	movs	r0, #0
 800ae70:	bd38      	pop	{r3, r4, r5, pc}
  }

  return USB_UNSUPPORT;
 800ae72:	2002      	movs	r0, #2
}
 800ae74:	bd38      	pop	{r3, r4, r5, pc}
 800ae76:	bf00      	nop
 800ae78:	200017e0 	.word	0x200017e0
 800ae7c:	20000174 	.word	0x20000174
 800ae80:	200000d0 	.word	0x200000d0
 800ae84:	200017dc 	.word	0x200017dc

0800ae88 <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 800ae88:	b538      	push	{r3, r4, r5, lr}
  uint32_t    wIndex0;
  uint32_t    Related_Endpoint;
  uint32_t    rEP;
  uint32_t    Status;

  wIndex0 = pInformation->USBwIndex0;
 800ae8a:	4b1d      	ldr	r3, [pc, #116]	; (800af00 <Standard_SetEndPointFeature+0x78>)
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 800ae8c:	4d1d      	ldr	r5, [pc, #116]	; (800af04 <Standard_SetEndPointFeature+0x7c>)
  uint32_t    wIndex0;
  uint32_t    Related_Endpoint;
  uint32_t    rEP;
  uint32_t    Status;

  wIndex0 = pInformation->USBwIndex0;
 800ae8e:	6819      	ldr	r1, [r3, #0]
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 800ae90:	782d      	ldrb	r5, [r5, #0]
  uint32_t    wIndex0;
  uint32_t    Related_Endpoint;
  uint32_t    rEP;
  uint32_t    Status;

  wIndex0 = pInformation->USBwIndex0;
 800ae92:	794a      	ldrb	r2, [r1, #5]
  rEP = wIndex0 & ~0x80;
 800ae94:	f022 0480 	bic.w	r4, r2, #128	; 0x80
 800ae98:	00a3      	lsls	r3, r4, #2

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 800ae9a:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 800ae9e:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800aea2:	6800      	ldr	r0, [r0, #0]

  wIndex0 = pInformation->USBwIndex0;
  rEP = wIndex0 & ~0x80;
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 800aea4:	f012 0f80 	tst.w	r2, #128	; 0x80
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 800aea8:	bf14      	ite	ne
 800aeaa:	f000 0030 	andne.w	r0, r0, #48	; 0x30
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 800aeae:	f400 5040 	andeq.w	r0, r0, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 800aeb2:	42ac      	cmp	r4, r5
 800aeb4:	d221      	bcs.n	800aefa <Standard_SetEndPointFeature+0x72>
      || pInformation->USBwValue != 0 || Status == 0
 800aeb6:	884c      	ldrh	r4, [r1, #2]
 800aeb8:	b9fc      	cbnz	r4, 800aefa <Standard_SetEndPointFeature+0x72>
 800aeba:	b1f0      	cbz	r0, 800aefa <Standard_SetEndPointFeature+0x72>
      || pInformation->Current_Configuration == 0)
 800aebc:	7a89      	ldrb	r1, [r1, #10]
 800aebe:	b1e1      	cbz	r1, 800aefa <Standard_SetEndPointFeature+0x72>
  else
  {
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 800aec0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800aec4:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 800aec8:	0612      	lsls	r2, r2, #24
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 800aeca:	6819      	ldr	r1, [r3, #0]
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 800aecc:	d505      	bpl.n	800aeda <Standard_SetEndPointFeature+0x52>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 800aece:	f648 72bf 	movw	r2, #36799	; 0x8fbf
 800aed2:	400a      	ands	r2, r1
 800aed4:	f082 0210 	eor.w	r2, r2, #16
 800aed8:	e004      	b.n	800aee4 <Standard_SetEndPointFeature+0x5c>
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 800aeda:	f64b 728f 	movw	r2, #49039	; 0xbf8f
 800aede:	400a      	ands	r2, r1
 800aee0:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 800aee4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aee8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800aeec:	601a      	str	r2, [r3, #0]
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 800aeee:	4b06      	ldr	r3, [pc, #24]	; (800af08 <Standard_SetEndPointFeature+0x80>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	699b      	ldr	r3, [r3, #24]
 800aef4:	4798      	blx	r3
  return USB_SUCCESS;
 800aef6:	2000      	movs	r0, #0
 800aef8:	bd38      	pop	{r3, r4, r5, pc}

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 800aefa:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 800aefc:	bd38      	pop	{r3, r4, r5, pc}
 800aefe:	bf00      	nop
 800af00:	200017e0 	.word	0x200017e0
 800af04:	20000174 	.word	0x20000174
 800af08:	200017dc 	.word	0x200017dc

0800af0c <Standard_SetDeviceFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
 800af0c:	b508      	push	{r3, lr}
  SetBit(pInformation->Current_Feature, 5);
 800af0e:	4b06      	ldr	r3, [pc, #24]	; (800af28 <Standard_SetDeviceFeature+0x1c>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	7a5a      	ldrb	r2, [r3, #9]
 800af14:	f042 0220 	orr.w	r2, r2, #32
 800af18:	725a      	strb	r2, [r3, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 800af1a:	4b04      	ldr	r3, [pc, #16]	; (800af2c <Standard_SetDeviceFeature+0x20>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	69db      	ldr	r3, [r3, #28]
 800af20:	4798      	blx	r3
  return USB_SUCCESS;
}
 800af22:	2000      	movs	r0, #0
 800af24:	bd08      	pop	{r3, pc}
 800af26:	bf00      	nop
 800af28:	200017e0 	.word	0x200017e0
 800af2c:	200017dc 	.word	0x200017dc

0800af30 <Standard_GetDescriptorData>:
*******************************************************************************/
uint8_t *Standard_GetDescriptorData(uint16_t Length, ONE_DESCRIPTOR *pDesc)
{
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 800af30:	4b05      	ldr	r3, [pc, #20]	; (800af48 <Standard_GetDescriptorData+0x18>)
 800af32:	681a      	ldr	r2, [r3, #0]
 800af34:	8a53      	ldrh	r3, [r2, #18]
  if (Length == 0)
 800af36:	b918      	cbnz	r0, 800af40 <Standard_GetDescriptorData+0x10>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 800af38:	8889      	ldrh	r1, [r1, #4]
 800af3a:	1acb      	subs	r3, r1, r3
 800af3c:	8213      	strh	r3, [r2, #16]
    return 0;
 800af3e:	4770      	bx	lr
  }

  return pDesc->Descriptor + wOffset;
 800af40:	6808      	ldr	r0, [r1, #0]
 800af42:	4418      	add	r0, r3
}
 800af44:	4770      	bx	lr
 800af46:	bf00      	nop
 800af48:	200017e0 	.word	0x200017e0

0800af4c <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
uint8_t Post0_Process(void)
{
 800af4c:	b508      	push	{r3, lr}
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800af4e:	4b0b      	ldr	r3, [pc, #44]	; (800af7c <Post0_Process+0x30>)
 800af50:	2000      	movs	r0, #0
 800af52:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 800af56:	f001 fb0b 	bl	800c570 <SetEPRxCount>

  if (pInformation->ControlState == STALLED)
 800af5a:	4b09      	ldr	r3, [pc, #36]	; (800af80 <Post0_Process+0x34>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	7a18      	ldrb	r0, [r3, #8]
 800af60:	2808      	cmp	r0, #8
 800af62:	d106      	bne.n	800af72 <Post0_Process+0x26>
  {
    vSetEPRxStatus(EP_RX_STALL);
 800af64:	4b07      	ldr	r3, [pc, #28]	; (800af84 <Post0_Process+0x38>)
 800af66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800af6a:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 800af6c:	4b06      	ldr	r3, [pc, #24]	; (800af88 <Post0_Process+0x3c>)
 800af6e:	2210      	movs	r2, #16
 800af70:	801a      	strh	r2, [r3, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 800af72:	f1b0 0109 	subs.w	r1, r0, #9
 800af76:	4248      	negs	r0, r1
 800af78:	4148      	adcs	r0, r1
 800af7a:	bd08      	pop	{r3, pc}
 800af7c:	200000d0 	.word	0x200000d0
 800af80:	200017e0 	.word	0x200017e0
 800af84:	200017e6 	.word	0x200017e6
 800af88:	200017e8 	.word	0x200017e8

0800af8c <Setup0_Process>:
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800af8c:	4b96      	ldr	r3, [pc, #600]	; (800b1e8 <Setup0_Process+0x25c>)
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 800af8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800af90:	681a      	ldr	r2, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 800af92:	4d96      	ldr	r5, [pc, #600]	; (800b1ec <Setup0_Process+0x260>)
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800af94:	4b96      	ldr	r3, [pc, #600]	; (800b1f0 <Setup0_Process+0x264>)
 800af96:	b292      	uxth	r2, r2
 800af98:	4413      	add	r3, r2

  if (pInformation->ControlState != PAUSE)
 800af9a:	682e      	ldr	r6, [r5, #0]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800af9c:	005b      	lsls	r3, r3, #1
 800af9e:	681c      	ldr	r4, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 800afa0:	7a33      	ldrb	r3, [r6, #8]
 800afa2:	2b09      	cmp	r3, #9
 800afa4:	d015      	beq.n	800afd2 <Setup0_Process+0x46>
 800afa6:	b2a4      	uxth	r4, r4
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800afa8:	0064      	lsls	r4, r4, #1
 800afaa:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800afae:	f504 44c0 	add.w	r4, r4, #24576	; 0x6000

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 800afb2:	7823      	ldrb	r3, [r4, #0]
 800afb4:	7033      	strb	r3, [r6, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 800afb6:	7863      	ldrb	r3, [r4, #1]
 800afb8:	7073      	strb	r3, [r6, #1]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 800afba:	88a0      	ldrh	r0, [r4, #4]
 800afbc:	f001 fc8e 	bl	800c8dc <ByteSwap>
 800afc0:	8070      	strh	r0, [r6, #2]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 800afc2:	8920      	ldrh	r0, [r4, #8]
 800afc4:	682e      	ldr	r6, [r5, #0]
 800afc6:	f001 fc89 	bl	800c8dc <ByteSwap>
 800afca:	80b0      	strh	r0, [r6, #4]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 800afcc:	89a2      	ldrh	r2, [r4, #12]
 800afce:	682b      	ldr	r3, [r5, #0]
 800afd0:	80da      	strh	r2, [r3, #6]
  }

  pInformation->ControlState = SETTING_UP;
 800afd2:	682b      	ldr	r3, [r5, #0]
 800afd4:	2201      	movs	r2, #1
 800afd6:	721a      	strb	r2, [r3, #8]
  if (pInformation->USBwLength == 0)
 800afd8:	88da      	ldrh	r2, [r3, #6]
 800afda:	785c      	ldrb	r4, [r3, #1]
 800afdc:	2a00      	cmp	r2, #0
 800afde:	d15f      	bne.n	800b0a0 <Setup0_Process+0x114>
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800afe0:	781a      	ldrb	r2, [r3, #0]
 800afe2:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 800afe6:	d137      	bne.n	800b058 <Setup0_Process+0xcc>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 800afe8:	2c09      	cmp	r4, #9
 800afea:	d102      	bne.n	800aff2 <Setup0_Process+0x66>
    {
      Result = Standard_SetConfiguration();
 800afec:	f7ff fea2 	bl	800ad34 <Standard_SetConfiguration>
 800aff0:	e041      	b.n	800b076 <Setup0_Process+0xea>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 800aff2:	2c05      	cmp	r4, #5
 800aff4:	d10f      	bne.n	800b016 <Setup0_Process+0x8a>
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 800aff6:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800affa:	2a00      	cmp	r2, #0
 800affc:	da01      	bge.n	800b002 <Setup0_Process+0x76>
          || (pInformation->USBwIndex != 0)
          || (pInformation->Current_Configuration != 0))
        /* Device Address should be 127 or less*/
      {
        ControlState = STALLED;
 800affe:	2308      	movs	r3, #8
 800b000:	e04b      	b.n	800b09a <Setup0_Process+0x10e>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 800b002:	789a      	ldrb	r2, [r3, #2]
 800b004:	2a00      	cmp	r2, #0
 800b006:	d1fa      	bne.n	800affe <Setup0_Process+0x72>
          || (pInformation->USBwIndex != 0)
 800b008:	889a      	ldrh	r2, [r3, #4]
 800b00a:	2a00      	cmp	r2, #0
 800b00c:	d1f7      	bne.n	800affe <Setup0_Process+0x72>
          || (pInformation->Current_Configuration != 0))
 800b00e:	7a9b      	ldrb	r3, [r3, #10]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d034      	beq.n	800b07e <Setup0_Process+0xf2>
 800b014:	e7f3      	b.n	800affe <Setup0_Process+0x72>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 800b016:	2c03      	cmp	r4, #3
 800b018:	d110      	bne.n	800b03c <Setup0_Process+0xb0>
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP) \
 800b01a:	78da      	ldrb	r2, [r3, #3]
 800b01c:	2a01      	cmp	r2, #1
 800b01e:	d007      	beq.n	800b030 <Setup0_Process+0xa4>
  }


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 800b020:	4b74      	ldr	r3, [pc, #464]	; (800b1f4 <Setup0_Process+0x268>)
 800b022:	4620      	mov	r0, r4
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	695b      	ldr	r3, [r3, #20]
 800b028:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 800b02a:	2803      	cmp	r0, #3
 800b02c:	d125      	bne.n	800b07a <Setup0_Process+0xee>
 800b02e:	e033      	b.n	800b098 <Setup0_Process+0x10c>
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP) \
          && (pInformation->USBwIndex == 0))
 800b030:	889b      	ldrh	r3, [r3, #4]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d1f4      	bne.n	800b020 <Setup0_Process+0x94>
      {
        Result = Standard_SetDeviceFeature();
 800b036:	f7ff ff69 	bl	800af0c <Standard_SetDeviceFeature>
 800b03a:	e01c      	b.n	800b076 <Setup0_Process+0xea>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 800b03c:	2c01      	cmp	r4, #1
 800b03e:	d1ef      	bne.n	800b020 <Setup0_Process+0x94>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 800b040:	78da      	ldrb	r2, [r3, #3]
 800b042:	2a01      	cmp	r2, #1
 800b044:	d1ec      	bne.n	800b020 <Setup0_Process+0x94>
          && pInformation->USBwIndex == 0
 800b046:	889a      	ldrh	r2, [r3, #4]
 800b048:	2a00      	cmp	r2, #0
 800b04a:	d1e9      	bne.n	800b020 <Setup0_Process+0x94>
          && ValBit(pInformation->Current_Feature, 5))
 800b04c:	7a5b      	ldrb	r3, [r3, #9]
 800b04e:	069e      	lsls	r6, r3, #26
 800b050:	d5e6      	bpl.n	800b020 <Setup0_Process+0x94>
      {
        Result = Standard_ClearFeature();
 800b052:	f7ff feaf 	bl	800adb4 <Standard_ClearFeature>
 800b056:	e00e      	b.n	800b076 <Setup0_Process+0xea>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800b058:	2a01      	cmp	r2, #1
 800b05a:	d104      	bne.n	800b066 <Setup0_Process+0xda>
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 800b05c:	2c0b      	cmp	r4, #11
 800b05e:	d1df      	bne.n	800b020 <Setup0_Process+0x94>
    {
      Result = Standard_SetInterface();
 800b060:	f7ff fe84 	bl	800ad6c <Standard_SetInterface>
 800b064:	e007      	b.n	800b076 <Setup0_Process+0xea>
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800b066:	2a02      	cmp	r2, #2
 800b068:	d1da      	bne.n	800b020 <Setup0_Process+0x94>
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 800b06a:	2c01      	cmp	r4, #1
 800b06c:	d0f1      	beq.n	800b052 <Setup0_Process+0xc6>
    {
      Result = Standard_ClearFeature();
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 800b06e:	2c03      	cmp	r4, #3
 800b070:	d1d6      	bne.n	800b020 <Setup0_Process+0x94>
    {
      Result = Standard_SetEndPointFeature();
 800b072:	f7ff ff09 	bl	800ae88 <Standard_SetEndPointFeature>
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 800b076:	b110      	cbz	r0, 800b07e <Setup0_Process+0xf2>
 800b078:	e7d2      	b.n	800b020 <Setup0_Process+0x94>
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 800b07a:	2800      	cmp	r0, #0
 800b07c:	d1bf      	bne.n	800affe <Setup0_Process+0x72>
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 800b07e:	4b5a      	ldr	r3, [pc, #360]	; (800b1e8 <Setup0_Process+0x25c>)
 800b080:	681a      	ldr	r2, [r3, #0]
 800b082:	4b5d      	ldr	r3, [pc, #372]	; (800b1f8 <Setup0_Process+0x26c>)
 800b084:	b292      	uxth	r2, r2
 800b086:	4413      	add	r3, r2
 800b088:	005b      	lsls	r3, r3, #1
 800b08a:	2200      	movs	r2, #0
 800b08c:	601a      	str	r2, [r3, #0]
 800b08e:	4b5b      	ldr	r3, [pc, #364]	; (800b1fc <Setup0_Process+0x270>)
 800b090:	2230      	movs	r2, #48	; 0x30
 800b092:	801a      	strh	r2, [r3, #0]
  {
    ControlState = STALLED;
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */
 800b094:	2306      	movs	r3, #6
 800b096:	e000      	b.n	800b09a <Setup0_Process+0x10e>
  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
    {
      ControlState = PAUSE;
 800b098:	2309      	movs	r3, #9
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 800b09a:	682a      	ldr	r2, [r5, #0]
 800b09c:	7213      	strb	r3, [r2, #8]
 800b09e:	e0cf      	b.n	800b240 <Setup0_Process+0x2b4>

  CopyRoutine = NULL;
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
 800b0a0:	2c06      	cmp	r4, #6
 800b0a2:	d113      	bne.n	800b0cc <Setup0_Process+0x140>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800b0a4:	781a      	ldrb	r2, [r3, #0]
 800b0a6:	0654      	lsls	r4, r2, #25
 800b0a8:	d178      	bne.n	800b19c <Setup0_Process+0x210>
    {
      uint8_t wValue1 = pInformation->USBwValue1;
 800b0aa:	789a      	ldrb	r2, [r3, #2]
 800b0ac:	4b51      	ldr	r3, [pc, #324]	; (800b1f4 <Setup0_Process+0x268>)
      if (wValue1 == DEVICE_DESCRIPTOR)
 800b0ae:	2a01      	cmp	r2, #1
 800b0b0:	d102      	bne.n	800b0b8 <Setup0_Process+0x12c>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	69db      	ldr	r3, [r3, #28]
 800b0b6:	e068      	b.n	800b18a <Setup0_Process+0x1fe>
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 800b0b8:	2a02      	cmp	r2, #2
 800b0ba:	d102      	bne.n	800b0c2 <Setup0_Process+0x136>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	6a1b      	ldr	r3, [r3, #32]
 800b0c0:	e063      	b.n	800b18a <Setup0_Process+0x1fe>
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 800b0c2:	2a03      	cmp	r2, #3
 800b0c4:	d16a      	bne.n	800b19c <Setup0_Process+0x210>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ca:	e05e      	b.n	800b18a <Setup0_Process+0x1fe>
      }  /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 800b0cc:	2c00      	cmp	r4, #0
 800b0ce:	d13d      	bne.n	800b14c <Setup0_Process+0x1c0>
 800b0d0:	8859      	ldrh	r1, [r3, #2]
 800b0d2:	2900      	cmp	r1, #0
 800b0d4:	d162      	bne.n	800b19c <Setup0_Process+0x210>
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 800b0d6:	685a      	ldr	r2, [r3, #4]
 800b0d8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800b0dc:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 800b0e0:	d15c      	bne.n	800b19c <Setup0_Process+0x210>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800b0e2:	781a      	ldrb	r2, [r3, #0]
 800b0e4:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 800b0e8:	d104      	bne.n	800b0f4 <Setup0_Process+0x168>
        && (pInformation->USBwIndex == 0))
 800b0ea:	889b      	ldrh	r3, [r3, #4]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	f000 80ab 	beq.w	800b248 <Setup0_Process+0x2bc>
 800b0f2:	e053      	b.n	800b19c <Setup0_Process+0x210>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800b0f4:	2a01      	cmp	r2, #1
 800b0f6:	d10d      	bne.n	800b114 <Setup0_Process+0x188>
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 800b0f8:	4a3e      	ldr	r2, [pc, #248]	; (800b1f4 <Setup0_Process+0x268>)
 800b0fa:	7958      	ldrb	r0, [r3, #5]
 800b0fc:	6812      	ldr	r2, [r2, #0]
 800b0fe:	6992      	ldr	r2, [r2, #24]
 800b100:	4790      	blx	r2
 800b102:	2800      	cmp	r0, #0
 800b104:	d14a      	bne.n	800b19c <Setup0_Process+0x210>
          && (pInformation->Current_Configuration != 0))
 800b106:	4b39      	ldr	r3, [pc, #228]	; (800b1ec <Setup0_Process+0x260>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	7a9b      	ldrb	r3, [r3, #10]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	f040 809b 	bne.w	800b248 <Setup0_Process+0x2bc>
 800b112:	e043      	b.n	800b19c <Setup0_Process+0x210>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800b114:	2a02      	cmp	r2, #2
 800b116:	d141      	bne.n	800b19c <Setup0_Process+0x210>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 800b118:	795b      	ldrb	r3, [r3, #5]
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800b11a:	4839      	ldr	r0, [pc, #228]	; (800b200 <Setup0_Process+0x274>)
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 800b11c:	f003 010f 	and.w	r1, r3, #15
 800b120:	008a      	lsls	r2, r1, #2

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 800b122:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800b126:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800b12a:	6812      	ldr	r2, [r2, #0]
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800b12c:	7800      	ldrb	r0, [r0, #0]
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 800b12e:	f013 0f80 	tst.w	r3, #128	; 0x80
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 800b132:	bf14      	ite	ne
 800b134:	f002 0230 	andne.w	r2, r2, #48	; 0x30
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 800b138:	f402 5240 	andeq.w	r2, r2, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800b13c:	4281      	cmp	r1, r0
 800b13e:	d22d      	bcs.n	800b19c <Setup0_Process+0x210>
 800b140:	f013 0f70 	tst.w	r3, #112	; 0x70
 800b144:	d12a      	bne.n	800b19c <Setup0_Process+0x210>
          && (Status != 0))
 800b146:	2a00      	cmp	r2, #0
 800b148:	d17e      	bne.n	800b248 <Setup0_Process+0x2bc>
 800b14a:	e027      	b.n	800b19c <Setup0_Process+0x210>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 800b14c:	2c08      	cmp	r4, #8
 800b14e:	d103      	bne.n	800b158 <Setup0_Process+0x1cc>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800b150:	781b      	ldrb	r3, [r3, #0]
 800b152:	0658      	lsls	r0, r3, #25
 800b154:	d07a      	beq.n	800b24c <Setup0_Process+0x2c0>
 800b156:	e021      	b.n	800b19c <Setup0_Process+0x210>
    {
      CopyRoutine = Standard_GetConfiguration;
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 800b158:	2c0a      	cmp	r4, #10
 800b15a:	d11f      	bne.n	800b19c <Setup0_Process+0x210>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800b15c:	781a      	ldrb	r2, [r3, #0]
 800b15e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b162:	2a01      	cmp	r2, #1
 800b164:	d11a      	bne.n	800b19c <Setup0_Process+0x210>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 800b166:	7a9a      	ldrb	r2, [r3, #10]
 800b168:	b1c2      	cbz	r2, 800b19c <Setup0_Process+0x210>
 800b16a:	8859      	ldrh	r1, [r3, #2]
 800b16c:	b9b1      	cbnz	r1, 800b19c <Setup0_Process+0x210>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 800b16e:	685a      	ldr	r2, [r3, #4]
 800b170:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800b174:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800b178:	d110      	bne.n	800b19c <Setup0_Process+0x210>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 800b17a:	4a1e      	ldr	r2, [pc, #120]	; (800b1f4 <Setup0_Process+0x268>)
 800b17c:	7958      	ldrb	r0, [r3, #5]
 800b17e:	6812      	ldr	r2, [r2, #0]
 800b180:	6992      	ldr	r2, [r2, #24]
 800b182:	4790      	blx	r2
 800b184:	2800      	cmp	r0, #0
 800b186:	d063      	beq.n	800b250 <Setup0_Process+0x2c4>
 800b188:	e008      	b.n	800b19c <Setup0_Process+0x210>
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 800b18a:	b13b      	cbz	r3, 800b19c <Setup0_Process+0x210>
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 800b18c:	682a      	ldr	r2, [r5, #0]
 800b18e:	2400      	movs	r4, #0
 800b190:	8254      	strh	r4, [r2, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 800b192:	6193      	str	r3, [r2, #24]
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 800b194:	4620      	mov	r0, r4
 800b196:	4798      	blx	r3
    Result = USB_SUCCESS;
 800b198:	4620      	mov	r0, r4
 800b19a:	e00a      	b.n	800b1b2 <Setup0_Process+0x226>
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 800b19c:	4b15      	ldr	r3, [pc, #84]	; (800b1f4 <Setup0_Process+0x268>)
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	682b      	ldr	r3, [r5, #0]
 800b1a2:	6912      	ldr	r2, [r2, #16]
 800b1a4:	7858      	ldrb	r0, [r3, #1]
 800b1a6:	4790      	blx	r2
    if (Result == USB_NOT_READY)
 800b1a8:	2803      	cmp	r0, #3
 800b1aa:	d102      	bne.n	800b1b2 <Setup0_Process+0x226>
    {
      pInformation->ControlState = PAUSE;
 800b1ac:	4b0f      	ldr	r3, [pc, #60]	; (800b1ec <Setup0_Process+0x260>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	e005      	b.n	800b1be <Setup0_Process+0x232>
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 800b1b2:	682b      	ldr	r3, [r5, #0]
 800b1b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b1b8:	8a1a      	ldrh	r2, [r3, #16]
 800b1ba:	428a      	cmp	r2, r1
 800b1bc:	d101      	bne.n	800b1c2 <Setup0_Process+0x236>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 800b1be:	2209      	movs	r2, #9
 800b1c0:	e003      	b.n	800b1ca <Setup0_Process+0x23e>
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 800b1c2:	2802      	cmp	r0, #2
 800b1c4:	d000      	beq.n	800b1c8 <Setup0_Process+0x23c>
 800b1c6:	b912      	cbnz	r2, 800b1ce <Setup0_Process+0x242>
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 800b1c8:	2208      	movs	r2, #8
 800b1ca:	721a      	strb	r2, [r3, #8]
 800b1cc:	e038      	b.n	800b240 <Setup0_Process+0x2b4>
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 800b1ce:	f993 1000 	ldrsb.w	r1, [r3]
 800b1d2:	2900      	cmp	r1, #0
 800b1d4:	da2e      	bge.n	800b234 <Setup0_Process+0x2a8>
  {
    /* Device ==> Host */
    __IO uint32_t wLength = pInformation->USBwLength;
 800b1d6:	88d9      	ldrh	r1, [r3, #6]
 800b1d8:	9101      	str	r1, [sp, #4]
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 800b1da:	9801      	ldr	r0, [sp, #4]
 800b1dc:	4282      	cmp	r2, r0
 800b1de:	4805      	ldr	r0, [pc, #20]	; (800b1f4 <Setup0_Process+0x268>)
 800b1e0:	d910      	bls.n	800b204 <Setup0_Process+0x278>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 800b1e2:	9a01      	ldr	r2, [sp, #4]
 800b1e4:	821a      	strh	r2, [r3, #16]
 800b1e6:	e01e      	b.n	800b226 <Setup0_Process+0x29a>
 800b1e8:	40005c50 	.word	0x40005c50
 800b1ec:	200017e0 	.word	0x200017e0
 800b1f0:	20003004 	.word	0x20003004
 800b1f4:	200017b8 	.word	0x200017b8
 800b1f8:	20003002 	.word	0x20003002
 800b1fc:	200017e8 	.word	0x200017e8
 800b200:	20000174 	.word	0x20000174
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 800b204:	428a      	cmp	r2, r1
 800b206:	d20e      	bcs.n	800b226 <Setup0_Process+0x29a>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 800b208:	6801      	ldr	r1, [r0, #0]
 800b20a:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
 800b20e:	428a      	cmp	r2, r1
 800b210:	d201      	bcs.n	800b216 <Setup0_Process+0x28a>
      {
        Data_Mul_MaxPacketSize = FALSE;
 800b212:	2100      	movs	r1, #0
 800b214:	e005      	b.n	800b222 <Setup0_Process+0x296>
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 800b216:	fb92 f4f1 	sdiv	r4, r2, r1
 800b21a:	fb01 2214 	mls	r2, r1, r4, r2
 800b21e:	b912      	cbnz	r2, 800b226 <Setup0_Process+0x29a>
      {
        Data_Mul_MaxPacketSize = TRUE;
 800b220:	2101      	movs	r1, #1
 800b222:	4a0c      	ldr	r2, [pc, #48]	; (800b254 <Setup0_Process+0x2c8>)
 800b224:	7011      	strb	r1, [r2, #0]
      }
    }   

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 800b226:	6802      	ldr	r2, [r0, #0]
 800b228:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800b22c:	829a      	strh	r2, [r3, #20]
    DataStageIn();
 800b22e:	f7ff fd2d 	bl	800ac8c <DataStageIn>
 800b232:	e005      	b.n	800b240 <Setup0_Process+0x2b4>
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 800b234:	2203      	movs	r2, #3
 800b236:	721a      	strb	r2, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 800b238:	4b07      	ldr	r3, [pc, #28]	; (800b258 <Setup0_Process+0x2cc>)
 800b23a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800b23e:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 800b240:	f7ff fe84 	bl	800af4c <Post0_Process>
}
 800b244:	b002      	add	sp, #8
 800b246:	bd70      	pop	{r4, r5, r6, pc}
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
        && (pInformation->USBwIndex == 0))
    {
      CopyRoutine = Standard_GetStatus;
 800b248:	4b04      	ldr	r3, [pc, #16]	; (800b25c <Setup0_Process+0x2d0>)
 800b24a:	e79f      	b.n	800b18c <Setup0_Process+0x200>
  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      CopyRoutine = Standard_GetConfiguration;
 800b24c:	4b04      	ldr	r3, [pc, #16]	; (800b260 <Setup0_Process+0x2d4>)
 800b24e:	e79d      	b.n	800b18c <Setup0_Process+0x200>
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
    {
      CopyRoutine = Standard_GetInterface;
 800b250:	4b04      	ldr	r3, [pc, #16]	; (800b264 <Setup0_Process+0x2d8>)
 800b252:	e79b      	b.n	800b18c <Setup0_Process+0x200>
 800b254:	20000c1c 	.word	0x20000c1c
 800b258:	200017e6 	.word	0x200017e6
 800b25c:	0800abfd 	.word	0x0800abfd
 800b260:	0800abb5 	.word	0x0800abb5
 800b264:	0800abd9 	.word	0x0800abd9

0800b268 <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Out0_Process(void)
{
 800b268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t ControlState = pInformation->ControlState;
 800b26a:	4d2d      	ldr	r5, [pc, #180]	; (800b320 <Out0_Process+0xb8>)
 800b26c:	682c      	ldr	r4, [r5, #0]
 800b26e:	7a23      	ldrb	r3, [r4, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800b270:	2b02      	cmp	r3, #2
 800b272:	d04d      	beq.n	800b310 <Out0_Process+0xa8>
 800b274:	2b04      	cmp	r3, #4
 800b276:	d04b      	beq.n	800b310 <Out0_Process+0xa8>
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 800b278:	2b03      	cmp	r3, #3
 800b27a:	d001      	beq.n	800b280 <Out0_Process+0x18>
 800b27c:	2b05      	cmp	r3, #5
 800b27e:	d141      	bne.n	800b304 <Out0_Process+0x9c>
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;

  if (pEPinfo->CopyData && save_rLength)
 800b280:	69a3      	ldr	r3, [r4, #24]
void DataStageOut(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 800b282:	8a22      	ldrh	r2, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 800b284:	b1ab      	cbz	r3, 800b2b2 <Out0_Process+0x4a>
 800b286:	b1a2      	cbz	r2, 800b2b2 <Out0_Process+0x4a>
  {
    uint8_t *Buffer;
    uint32_t Length;

    Length = pEPinfo->PacketSize;
 800b288:	8aa6      	ldrh	r6, [r4, #20]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 800b28a:	4296      	cmp	r6, r2
 800b28c:	bf28      	it	cs
 800b28e:	4616      	movcs	r6, r2
 800b290:	4630      	mov	r0, r6
 800b292:	4798      	blx	r3
    pEPinfo->Usb_rLength -= Length;
 800b294:	8a23      	ldrh	r3, [r4, #16]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 800b296:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
 800b298:	1b9b      	subs	r3, r3, r6
 800b29a:	8223      	strh	r3, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 800b29c:	8a63      	ldrh	r3, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 800b29e:	2000      	movs	r0, #0
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
    pEPinfo->Usb_rOffset += Length;
 800b2a0:	4433      	add	r3, r6
 800b2a2:	8263      	strh	r3, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 800b2a4:	f001 f934 	bl	800c510 <GetEPRxAddr>
 800b2a8:	4632      	mov	r2, r6
 800b2aa:	4601      	mov	r1, r0
 800b2ac:	4638      	mov	r0, r7
 800b2ae:	f000 fc75 	bl	800bb9c <PMAToUserBufferCopy>

  }

  if (pEPinfo->Usb_rLength != 0)
 800b2b2:	8a23      	ldrh	r3, [r4, #16]
 800b2b4:	b153      	cbz	r3, 800b2cc <Out0_Process+0x64>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800b2b6:	4b1b      	ldr	r3, [pc, #108]	; (800b324 <Out0_Process+0xbc>)
    SetEPTxCount(ENDP0, 0);
 800b2b8:	2000      	movs	r0, #0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800b2ba:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    SetEPTxCount(ENDP0, 0);
 800b2be:	4601      	mov	r1, r0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800b2c0:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 800b2c2:	f001 f933 	bl	800c52c <SetEPTxCount>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 800b2c6:	4b18      	ldr	r3, [pc, #96]	; (800b328 <Out0_Process+0xc0>)
 800b2c8:	2230      	movs	r2, #48	; 0x30
 800b2ca:	801a      	strh	r2, [r3, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800b2cc:	8a23      	ldrh	r3, [r4, #16]
 800b2ce:	8aa2      	ldrh	r2, [r4, #20]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d802      	bhi.n	800b2da <Out0_Process+0x72>
  {
    pInformation->ControlState = OUT_DATA;
 800b2d4:	682b      	ldr	r3, [r5, #0]
 800b2d6:	2203      	movs	r2, #3
 800b2d8:	e002      	b.n	800b2e0 <Out0_Process+0x78>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 800b2da:	b11b      	cbz	r3, 800b2e4 <Out0_Process+0x7c>
    {
      pInformation->ControlState = LAST_OUT_DATA;
 800b2dc:	682b      	ldr	r3, [r5, #0]
 800b2de:	2205      	movs	r2, #5
 800b2e0:	721a      	strb	r2, [r3, #8]
 800b2e2:	e00c      	b.n	800b2fe <Out0_Process+0x96>
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 800b2e4:	682a      	ldr	r2, [r5, #0]
 800b2e6:	2106      	movs	r1, #6
 800b2e8:	7211      	strb	r1, [r2, #8]
      USB_StatusIn();
 800b2ea:	4a10      	ldr	r2, [pc, #64]	; (800b32c <Out0_Process+0xc4>)
 800b2ec:	6811      	ldr	r1, [r2, #0]
 800b2ee:	4a10      	ldr	r2, [pc, #64]	; (800b330 <Out0_Process+0xc8>)
 800b2f0:	b289      	uxth	r1, r1
 800b2f2:	440a      	add	r2, r1
 800b2f4:	0052      	lsls	r2, r2, #1
 800b2f6:	6013      	str	r3, [r2, #0]
 800b2f8:	4b0b      	ldr	r3, [pc, #44]	; (800b328 <Out0_Process+0xc0>)
 800b2fa:	2230      	movs	r2, #48	; 0x30
 800b2fc:	801a      	strh	r2, [r3, #0]
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 800b2fe:	682b      	ldr	r3, [r5, #0]
 800b300:	7a1b      	ldrb	r3, [r3, #8]
 800b302:	e006      	b.n	800b312 <Out0_Process+0xaa>
  }

  else if (ControlState == WAIT_STATUS_OUT)
 800b304:	2b07      	cmp	r3, #7
 800b306:	d103      	bne.n	800b310 <Out0_Process+0xa8>
  {
    (*pProperty->Process_Status_OUT)();
 800b308:	4b0a      	ldr	r3, [pc, #40]	; (800b334 <Out0_Process+0xcc>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	68db      	ldr	r3, [r3, #12]
 800b30e:	4798      	blx	r3
  uint32_t ControlState = pInformation->ControlState;

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
 800b310:	2308      	movs	r3, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 800b312:	682a      	ldr	r2, [r5, #0]
 800b314:	7213      	strb	r3, [r2, #8]

  return Post0_Process();
}
 800b316:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;

  return Post0_Process();
 800b31a:	f7ff be17 	b.w	800af4c <Post0_Process>
 800b31e:	bf00      	nop
 800b320:	200017e0 	.word	0x200017e0
 800b324:	200017e6 	.word	0x200017e6
 800b328:	200017e8 	.word	0x200017e8
 800b32c:	40005c50 	.word	0x40005c50
 800b330:	20003002 	.word	0x20003002
 800b334:	200017b8 	.word	0x200017b8

0800b338 <SetDeviceAddress>:
* Input          : - Val: device address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(uint8_t Val)
{
 800b338:	b570      	push	{r4, r5, r6, lr}
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 800b33a:	4b0d      	ldr	r3, [pc, #52]	; (800b370 <SetDeviceAddress+0x38>)
 800b33c:	781c      	ldrb	r4, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800b33e:	2300      	movs	r3, #0
 800b340:	42a3      	cmp	r3, r4
 800b342:	d210      	bcs.n	800b366 <SetDeviceAddress+0x2e>
 800b344:	f103 5180 	add.w	r1, r3, #268435456	; 0x10000000
 800b348:	f501 51b8 	add.w	r1, r1, #5888	; 0x1700
 800b34c:	0089      	lsls	r1, r1, #2
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800b34e:	680e      	ldr	r6, [r1, #0]
 800b350:	f443 4500 	orr.w	r5, r3, #32768	; 0x8000
 800b354:	f640 720f 	movw	r2, #3855	; 0xf0f
 800b358:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800b35c:	4032      	ands	r2, r6
 800b35e:	432a      	orrs	r2, r5
 800b360:	600a      	str	r2, [r1, #0]
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800b362:	3301      	adds	r3, #1
 800b364:	e7ec      	b.n	800b340 <SetDeviceAddress+0x8>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */ 
 800b366:	4b03      	ldr	r3, [pc, #12]	; (800b374 <SetDeviceAddress+0x3c>)
 800b368:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800b36c:	6018      	str	r0, [r3, #0]
 800b36e:	bd70      	pop	{r4, r5, r6, pc}
 800b370:	20000174 	.word	0x20000174
 800b374:	40005c4c 	.word	0x40005c4c

0800b378 <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t In0_Process(void)
{
 800b378:	b510      	push	{r4, lr}
  uint32_t ControlState = pInformation->ControlState;
 800b37a:	4c13      	ldr	r4, [pc, #76]	; (800b3c8 <In0_Process+0x50>)
 800b37c:	6823      	ldr	r3, [r4, #0]
 800b37e:	7a1a      	ldrb	r2, [r3, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800b380:	2a02      	cmp	r2, #2
 800b382:	d001      	beq.n	800b388 <In0_Process+0x10>
 800b384:	2a04      	cmp	r2, #4
 800b386:	d104      	bne.n	800b392 <In0_Process+0x1a>
  {
    DataStageIn();
 800b388:	f7ff fc80 	bl	800ac8c <DataStageIn>
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 800b38c:	6823      	ldr	r3, [r4, #0]
 800b38e:	7a1b      	ldrb	r3, [r3, #8]
 800b390:	e013      	b.n	800b3ba <In0_Process+0x42>
  }

  else if (ControlState == WAIT_STATUS_IN)
 800b392:	2a06      	cmp	r2, #6
 800b394:	d110      	bne.n	800b3b8 <In0_Process+0x40>
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 800b396:	785a      	ldrb	r2, [r3, #1]
 800b398:	2a05      	cmp	r2, #5
 800b39a:	d109      	bne.n	800b3b0 <In0_Process+0x38>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 800b39c:	781a      	ldrb	r2, [r3, #0]
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 800b39e:	0652      	lsls	r2, r2, #25
 800b3a0:	d106      	bne.n	800b3b0 <In0_Process+0x38>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 800b3a2:	78d8      	ldrb	r0, [r3, #3]
 800b3a4:	f7ff ffc8 	bl	800b338 <SetDeviceAddress>
      pUser_Standard_Requests->User_SetDeviceAddress();
 800b3a8:	4b08      	ldr	r3, [pc, #32]	; (800b3cc <In0_Process+0x54>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	6a1b      	ldr	r3, [r3, #32]
 800b3ae:	4798      	blx	r3
    }
    (*pProperty->Process_Status_IN)();
 800b3b0:	4b07      	ldr	r3, [pc, #28]	; (800b3d0 <In0_Process+0x58>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	689b      	ldr	r3, [r3, #8]
 800b3b6:	4798      	blx	r3
    ControlState = STALLED;
  }

  else
  {
    ControlState = STALLED;
 800b3b8:	2308      	movs	r3, #8
  }

  pInformation->ControlState = ControlState;
 800b3ba:	6822      	ldr	r2, [r4, #0]
 800b3bc:	7213      	strb	r3, [r2, #8]

  return Post0_Process();
}
 800b3be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;

  return Post0_Process();
 800b3c2:	f7ff bdc3 	b.w	800af4c <Post0_Process>
 800b3c6:	bf00      	nop
 800b3c8:	200017e0 	.word	0x200017e0
 800b3cc:	200017dc 	.word	0x200017dc
 800b3d0:	200017b8 	.word	0x200017b8

0800b3d4 <NOP_Process>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
 800b3d4:	4770      	bx	lr
 800b3d6:	bf00      	nop

0800b3d8 <EP1_IN_Callback>:

#endif

//keyboard
void EP1_IN_Callback(void)
{
 800b3d8:	b508      	push	{r3, lr}
  /* Set the transfer complete token to inform upper layer that the current 
  transfer has been complete */
  kb_tx_complete = 1;
 800b3da:	4b04      	ldr	r3, [pc, #16]	; (800b3ec <EP1_IN_Callback+0x14>)
 800b3dc:	2201      	movs	r2, #1
 800b3de:	701a      	strb	r2, [r3, #0]
  if (kb_report_ready_cb) kb_report_ready_cb();
 800b3e0:	4b03      	ldr	r3, [pc, #12]	; (800b3f0 <EP1_IN_Callback+0x18>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	b103      	cbz	r3, 800b3e8 <EP1_IN_Callback+0x10>
 800b3e6:	4798      	blx	r3
 800b3e8:	bd08      	pop	{r3, pc}
 800b3ea:	bf00      	nop
 800b3ec:	2000008a 	.word	0x2000008a
 800b3f0:	20000c24 	.word	0x20000c24

0800b3f4 <EP2_IN_Callback>:
}

//mouse
void EP2_IN_Callback(void)
{
 800b3f4:	b508      	push	{r3, lr}
  /* Set the transfer complete token to inform upper layer that the current
  transfer has been complete */
  mouse_tx_complete = 1;
 800b3f6:	4b04      	ldr	r3, [pc, #16]	; (800b408 <EP2_IN_Callback+0x14>)
 800b3f8:	2201      	movs	r2, #1
 800b3fa:	701a      	strb	r2, [r3, #0]
  if (mouse_report_ready_cb) mouse_report_ready_cb();
 800b3fc:	4b03      	ldr	r3, [pc, #12]	; (800b40c <EP2_IN_Callback+0x18>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	b103      	cbz	r3, 800b404 <EP2_IN_Callback+0x10>
 800b402:	4798      	blx	r3
 800b404:	bd08      	pop	{r3, pc}
 800b406:	bf00      	nop
 800b408:	2000008b 	.word	0x2000008b
 800b40c:	20000c28 	.word	0x20000c28

0800b410 <EP3_IN_Callback>:


#ifndef CONFIG_ANNOYATRON
//joystick1
void EP3_IN_Callback(void)
{
 800b410:	b508      	push	{r3, lr}
  /* Set the transfer complete token to inform upper layer that the current
  transfer has been complete */
  joy1_tx_complete = 1;
 800b412:	4b04      	ldr	r3, [pc, #16]	; (800b424 <EP3_IN_Callback+0x14>)
 800b414:	2201      	movs	r2, #1
 800b416:	701a      	strb	r2, [r3, #0]
  if (joy_report_ready_cb) joy_report_ready_cb(JOYSTICK1);
 800b418:	4b03      	ldr	r3, [pc, #12]	; (800b428 <EP3_IN_Callback+0x18>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	b10b      	cbz	r3, 800b422 <EP3_IN_Callback+0x12>
 800b41e:	2000      	movs	r0, #0
 800b420:	4798      	blx	r3
 800b422:	bd08      	pop	{r3, pc}
 800b424:	2000008c 	.word	0x2000008c
 800b428:	20000c2c 	.word	0x20000c2c

0800b42c <EP4_IN_Callback>:
}

//joystick2
void EP4_IN_Callback(void)
{
 800b42c:	b508      	push	{r3, lr}
  /* Set the transfer complete token to inform upper layer that the current
  transfer has been complete */
  joy2_tx_complete = 1;
 800b42e:	4b04      	ldr	r3, [pc, #16]	; (800b440 <EP4_IN_Callback+0x14>)
 800b430:	2001      	movs	r0, #1
 800b432:	7018      	strb	r0, [r3, #0]
  if (joy_report_ready_cb) joy_report_ready_cb(JOYSTICK2);
 800b434:	4b03      	ldr	r3, [pc, #12]	; (800b444 <EP4_IN_Callback+0x18>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	b103      	cbz	r3, 800b43c <EP4_IN_Callback+0x10>
 800b43a:	4798      	blx	r3
 800b43c:	bd08      	pop	{r3, pc}
 800b43e:	bf00      	nop
 800b440:	2000008d 	.word	0x2000008d
 800b444:	20000c2c 	.word	0x20000c2c

0800b448 <EP7_IN_Callback>:
}

#ifdef CONFIG_ARCHID_VCD

void EP7_IN_Callback (void)
{
 800b448:	b513      	push	{r0, r1, r4, lr}
  if (USB_Tx_State == 1)
 800b44a:	4c12      	ldr	r4, [pc, #72]	; (800b494 <EP7_IN_Callback+0x4c>)
 800b44c:	7823      	ldrb	r3, [r4, #0]
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d11d      	bne.n	800b48e <EP7_IN_Callback+0x46>
  {
    u8_t *buf;
    int avail = ringbuf_available_linear(&tx_rb, &buf);
 800b452:	4811      	ldr	r0, [pc, #68]	; (800b498 <EP7_IN_Callback+0x50>)
 800b454:	a901      	add	r1, sp, #4
 800b456:	f7f7 f8d9 	bl	800260c <ringbuf_available_linear>
    if (avail  == 0) {
 800b45a:	b908      	cbnz	r0, 800b460 <EP7_IN_Callback+0x18>
      USB_Tx_State = 0;
 800b45c:	7020      	strb	r0, [r4, #0]
 800b45e:	e016      	b.n	800b48e <EP7_IN_Callback+0x46>
 800b460:	2840      	cmp	r0, #64	; 0x40
 800b462:	bfb4      	ite	lt
 800b464:	4604      	movlt	r4, r0
 800b466:	2440      	movge	r4, #64	; 0x40
    if (avail > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      avail = VIRTUAL_COM_PORT_DATA_SIZE;
    }

    UserToPMABufferCopy(buf, ENDP7_TXADDR, avail);
 800b468:	b2a4      	uxth	r4, r4
 800b46a:	9801      	ldr	r0, [sp, #4]
 800b46c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800b470:	4622      	mov	r2, r4
 800b472:	f000 fb7b 	bl	800bb6c <UserToPMABufferCopy>
    ringbuf_get(&tx_rb, 0, avail);
 800b476:	2100      	movs	r1, #0
 800b478:	4622      	mov	r2, r4
 800b47a:	4807      	ldr	r0, [pc, #28]	; (800b498 <EP7_IN_Callback+0x50>)
 800b47c:	f7f7 f962 	bl	8002744 <ringbuf_get>
    SetEPTxCount(ENDP7, avail);
 800b480:	2007      	movs	r0, #7
 800b482:	4621      	mov	r1, r4
 800b484:	f001 f852 	bl	800c52c <SetEPTxCount>
    SetEPTxValid(ENDP7);
 800b488:	2007      	movs	r0, #7
 800b48a:	f000 ff09 	bl	800c2a0 <SetEPTxValid>
  }
}
 800b48e:	b002      	add	sp, #8
 800b490:	bd10      	pop	{r4, pc}
 800b492:	bf00      	nop
 800b494:	20000c34 	.word	0x20000c34
 800b498:	2000119c 	.word	0x2000119c

0800b49c <EP6_OUT_Callback>:

void EP6_OUT_Callback(void)
{
 800b49c:	b510      	push	{r4, lr}
  uint16_t USB_Rx_Cnt;

  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = USB_SIL_Read(EP6_OUT, USB_Rx_Buffer);
 800b49e:	490b      	ldr	r1, [pc, #44]	; (800b4cc <EP6_OUT_Callback+0x30>)
 800b4a0:	2006      	movs	r0, #6
 800b4a2:	f001 fa45 	bl	800c930 <USB_SIL_Read>

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the USART Xfer */

  ringbuf_put(&rx_rb, USB_Rx_Buffer, USB_Rx_Cnt);
 800b4a6:	4909      	ldr	r1, [pc, #36]	; (800b4cc <EP6_OUT_Callback+0x30>)
 800b4a8:	b282      	uxth	r2, r0
 800b4aa:	4809      	ldr	r0, [pc, #36]	; (800b4d0 <EP6_OUT_Callback+0x34>)
 800b4ac:	f7f7 f8d4 	bl	8002658 <ringbuf_put>

  /* Enable the receive of data on EP4 */
  SetEPRxValid(ENDP6);
 800b4b0:	2006      	movs	r0, #6
 800b4b2:	f000 ff06 	bl	800c2c2 <SetEPRxValid>

  if (rx_cb != NULL) {
 800b4b6:	4b07      	ldr	r3, [pc, #28]	; (800b4d4 <EP6_OUT_Callback+0x38>)
 800b4b8:	681c      	ldr	r4, [r3, #0]
 800b4ba:	b12c      	cbz	r4, 800b4c8 <EP6_OUT_Callback+0x2c>
    rx_cb(ringbuf_available(&rx_rb), NULL);
 800b4bc:	4804      	ldr	r0, [pc, #16]	; (800b4d0 <EP6_OUT_Callback+0x34>)
 800b4be:	f7f7 f889 	bl	80025d4 <ringbuf_available>
 800b4c2:	2100      	movs	r1, #0
 800b4c4:	b280      	uxth	r0, r0
 800b4c6:	47a0      	blx	r4
 800b4c8:	bd10      	pop	{r4, pc}
 800b4ca:	bf00      	nop
 800b4cc:	20001156 	.word	0x20001156
 800b4d0:	200017a8 	.word	0x200017a8
 800b4d4:	20000c30 	.word	0x20000c30

0800b4d8 <SOF_Callback>:
*******************************************************************************/
void SOF_Callback(void)
{
  static uint32_t FrameCount = 0;

  if(bDeviceState == CONFIGURED)
 800b4d8:	4b07      	ldr	r3, [pc, #28]	; (800b4f8 <SOF_Callback+0x20>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	2b05      	cmp	r3, #5
 800b4de:	d109      	bne.n	800b4f4 <SOF_Callback+0x1c>
  {
    if (FrameCount++ == VCOMPORT_IN_FRAME_INTERVAL)
 800b4e0:	4b06      	ldr	r3, [pc, #24]	; (800b4fc <SOF_Callback+0x24>)
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	1c51      	adds	r1, r2, #1
 800b4e6:	2a05      	cmp	r2, #5
 800b4e8:	6019      	str	r1, [r3, #0]
 800b4ea:	d103      	bne.n	800b4f4 <SOF_Callback+0x1c>
    {
      /* Reset the frame counter */
      FrameCount = 0;
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	601a      	str	r2, [r3, #0]

      /* Check the data to be sent through IN pipe */
      Handle_USBAsynchXfer();
 800b4f0:	f000 b947 	b.w	800b782 <Handle_USBAsynchXfer>
 800b4f4:	4770      	bx	lr
 800b4f6:	bf00      	nop
 800b4f8:	20000c4c 	.word	0x20000c4c
 800b4fc:	20000c20 	.word	0x20000c20

0800b500 <IntToUnicode>:
}

static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len) {
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++) {
 800b500:	2300      	movs	r3, #0
    IntToUnicode (Device_Serial0, &ARC_string_serial[2] , 8);
    IntToUnicode (Device_Serial1, &ARC_string_serial[18], 4);
  }
}

static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len) {
 800b502:	b530      	push	{r4, r5, lr}
 800b504:	3101      	adds	r1, #1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800b506:	461d      	mov	r5, r3
}

static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len) {
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++) {
 800b508:	4293      	cmp	r3, r2
 800b50a:	d00c      	beq.n	800b526 <IntToUnicode+0x26>
    if (((value >> 28)) < 0xA) {
 800b50c:	0f04      	lsrs	r4, r0, #28
 800b50e:	2c09      	cmp	r4, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800b510:	bf94      	ite	ls
 800b512:	3430      	addls	r4, #48	; 0x30
    } else {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b514:	3437      	addhi	r4, #55	; 0x37
}

static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len) {
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++) {
 800b516:	3301      	adds	r3, #1
    if (((value >> 28)) < 0xA) {
      pbuf[2 * idx] = (value >> 28) + '0';
    } else {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b518:	f801 4c01 	strb.w	r4, [r1, #-1]
    }

    value = value << 4;
 800b51c:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 800b51e:	f801 5b02 	strb.w	r5, [r1], #2
}

static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len) {
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++) {
 800b522:	b2db      	uxtb	r3, r3
 800b524:	e7f0      	b.n	800b508 <IntToUnicode+0x8>

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
  }
}
 800b526:	bd30      	pop	{r4, r5, pc}

0800b528 <USB_Cable_Config>:

#endif

static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len);

void USB_Cable_Config(FunctionalState NewState) {
 800b528:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    GPIO_ResetBits(GPIOC, GPIO_Pin_13);
  } else {
    GPIO_SetBits(GPIOC, GPIO_Pin_13);
  }
#else
  if (NewState != DISABLE) {
 800b52a:	4602      	mov	r2, r0
 800b52c:	b178      	cbz	r0, 800b54e <USB_Cable_Config+0x26>
    gpio_config(PORTB, PIN9, CLK_2MHZ, OUT, AF0, PUSHPULL, NOPULL);
 800b52e:	2200      	movs	r2, #0
 800b530:	2001      	movs	r0, #1
 800b532:	4603      	mov	r3, r0
 800b534:	9200      	str	r2, [sp, #0]
 800b536:	9201      	str	r2, [sp, #4]
 800b538:	9202      	str	r2, [sp, #8]
 800b53a:	2109      	movs	r1, #9
 800b53c:	f7f7 f9e4 	bl	8002908 <gpio_config>
    gpio_enable(PORTB, PIN9);
 800b540:	2001      	movs	r0, #1
 800b542:	2109      	movs	r1, #9
  } else {
    gpio_config(PORTB, PIN9, CLK_2MHZ, IN, AF0, OPENDRAIN, NOPULL);
  }
#endif
}
 800b544:	b005      	add	sp, #20
 800b546:	f85d eb04 	ldr.w	lr, [sp], #4
    GPIO_SetBits(GPIOC, GPIO_Pin_13);
  }
#else
  if (NewState != DISABLE) {
    gpio_config(PORTB, PIN9, CLK_2MHZ, OUT, AF0, PUSHPULL, NOPULL);
    gpio_enable(PORTB, PIN9);
 800b54a:	f7f7 ba3d 	b.w	80029c8 <gpio_enable>
  } else {
    gpio_config(PORTB, PIN9, CLK_2MHZ, IN, AF0, OPENDRAIN, NOPULL);
 800b54e:	9000      	str	r0, [sp, #0]
 800b550:	2001      	movs	r0, #1
 800b552:	9001      	str	r0, [sp, #4]
 800b554:	9202      	str	r2, [sp, #8]
 800b556:	2109      	movs	r1, #9
 800b558:	4613      	mov	r3, r2
 800b55a:	f7f7 f9d5 	bl	8002908 <gpio_config>
  }
#endif
}
 800b55e:	b005      	add	sp, #20
 800b560:	f85d fb04 	ldr.w	pc, [sp], #4

0800b564 <USB_ARC_set_kb_callback>:

void USB_ARC_set_kb_callback(usb_kb_report_ready_cb_f cb) {
  kb_report_ready_cb = cb;
 800b564:	4b01      	ldr	r3, [pc, #4]	; (800b56c <USB_ARC_set_kb_callback+0x8>)
 800b566:	6018      	str	r0, [r3, #0]
 800b568:	4770      	bx	lr
 800b56a:	bf00      	nop
 800b56c:	20000c24 	.word	0x20000c24

0800b570 <USB_ARC_set_mouse_callback>:
}

void USB_ARC_set_mouse_callback(usb_mouse_report_ready_cb_f cb) {
  mouse_report_ready_cb = cb;
 800b570:	4b01      	ldr	r3, [pc, #4]	; (800b578 <USB_ARC_set_mouse_callback+0x8>)
 800b572:	6058      	str	r0, [r3, #4]
 800b574:	4770      	bx	lr
 800b576:	bf00      	nop
 800b578:	20000c24 	.word	0x20000c24

0800b57c <USB_ARC_set_joystick_callback>:
}

void USB_ARC_set_joystick_callback(usb_joy_report_ready_cb_f cb) {
  joy_report_ready_cb = cb;
 800b57c:	4b01      	ldr	r3, [pc, #4]	; (800b584 <USB_ARC_set_joystick_callback+0x8>)
 800b57e:	6098      	str	r0, [r3, #8]
 800b580:	4770      	bx	lr
 800b582:	bf00      	nop
 800b584:	20000c24 	.word	0x20000c24

0800b588 <USB_ARC_KB_can_tx>:
}

bool USB_ARC_KB_can_tx(void) {
  return kb_tx_complete != 0;
 800b588:	4b02      	ldr	r3, [pc, #8]	; (800b594 <USB_ARC_KB_can_tx+0xc>)
 800b58a:	7818      	ldrb	r0, [r3, #0]
}
 800b58c:	3000      	adds	r0, #0
 800b58e:	bf18      	it	ne
 800b590:	2001      	movne	r0, #1
 800b592:	4770      	bx	lr
 800b594:	2000008a 	.word	0x2000008a

0800b598 <USB_ARC_MOUSE_can_tx>:

bool USB_ARC_MOUSE_can_tx(void) {
  return mouse_tx_complete != 0;
 800b598:	4b02      	ldr	r3, [pc, #8]	; (800b5a4 <USB_ARC_MOUSE_can_tx+0xc>)
 800b59a:	7858      	ldrb	r0, [r3, #1]
}
 800b59c:	3000      	adds	r0, #0
 800b59e:	bf18      	it	ne
 800b5a0:	2001      	movne	r0, #1
 800b5a2:	4770      	bx	lr
 800b5a4:	2000008a 	.word	0x2000008a

0800b5a8 <USB_ARC_JOYSTICK_can_tx>:

bool USB_ARC_JOYSTICK_can_tx(usb_joystick j) {
 800b5a8:	4b03      	ldr	r3, [pc, #12]	; (800b5b8 <USB_ARC_JOYSTICK_can_tx+0x10>)
  return j == JOYSTICK1 ? joy1_tx_complete : joy2_tx_complete;
 800b5aa:	b908      	cbnz	r0, 800b5b0 <USB_ARC_JOYSTICK_can_tx+0x8>
 800b5ac:	7898      	ldrb	r0, [r3, #2]
 800b5ae:	e000      	b.n	800b5b2 <USB_ARC_JOYSTICK_can_tx+0xa>
 800b5b0:	78d8      	ldrb	r0, [r3, #3]
 800b5b2:	b2c0      	uxtb	r0, r0
}
 800b5b4:	4770      	bx	lr
 800b5b6:	bf00      	nop
 800b5b8:	2000008a 	.word	0x2000008a

0800b5bc <USB_ARC_KB_tx>:
void USB_ARC_KB_tx(usb_kb_report *report)
{
  // byte 0:   modifiers
  // byte 1:   reserved (0x00)
  // byte 2-x: keypresses
  report->reserved = 0;
 800b5bc:	2300      	movs	r3, #0
bool USB_ARC_JOYSTICK_can_tx(usb_joystick j) {
  return j == JOYSTICK1 ? joy1_tx_complete : joy2_tx_complete;
}

void USB_ARC_KB_tx(usb_kb_report *report)
{
 800b5be:	b510      	push	{r4, lr}
  // byte 1:   reserved (0x00)
  // byte 2-x: keypresses
  report->reserved = 0;

  uint32_t spoon_guard = 1000000;
  while(kb_tx_complete==0 && --spoon_guard);
 800b5c0:	4a0d      	ldr	r2, [pc, #52]	; (800b5f8 <USB_ARC_KB_tx+0x3c>)
void USB_ARC_KB_tx(usb_kb_report *report)
{
  // byte 0:   modifiers
  // byte 1:   reserved (0x00)
  // byte 2-x: keypresses
  report->reserved = 0;
 800b5c2:	7043      	strb	r3, [r0, #1]

  uint32_t spoon_guard = 1000000;
 800b5c4:	4b0d      	ldr	r3, [pc, #52]	; (800b5fc <USB_ARC_KB_tx+0x40>)
bool USB_ARC_JOYSTICK_can_tx(usb_joystick j) {
  return j == JOYSTICK1 ? joy1_tx_complete : joy2_tx_complete;
}

void USB_ARC_KB_tx(usb_kb_report *report)
{
 800b5c6:	4604      	mov	r4, r0
  // byte 1:   reserved (0x00)
  // byte 2-x: keypresses
  report->reserved = 0;

  uint32_t spoon_guard = 1000000;
  while(kb_tx_complete==0 && --spoon_guard);
 800b5c8:	7811      	ldrb	r1, [r2, #0]
 800b5ca:	b911      	cbnz	r1, 800b5d2 <USB_ARC_KB_tx+0x16>
 800b5cc:	3b01      	subs	r3, #1
 800b5ce:	d1fb      	bne.n	800b5c8 <USB_ARC_KB_tx+0xc>
 800b5d0:	e000      	b.n	800b5d4 <USB_ARC_KB_tx+0x18>
  ASSERT(spoon_guard > 0);
 800b5d2:	b91b      	cbnz	r3, 800b5dc <USB_ARC_KB_tx+0x20>
 800b5d4:	480a      	ldr	r0, [pc, #40]	; (800b600 <USB_ARC_KB_tx+0x44>)
 800b5d6:	215b      	movs	r1, #91	; 0x5b
 800b5d8:	f7f5 f902 	bl	80007e0 <SYS_assert>

  /* Reset the control token to inform upper layer that a transfer is ongoing */
  kb_tx_complete = 0;
 800b5dc:	4b06      	ldr	r3, [pc, #24]	; (800b5f8 <USB_ARC_KB_tx+0x3c>)
 800b5de:	2200      	movs	r2, #0
 800b5e0:	701a      	strb	r2, [r3, #0]

  /* Copy keyboard vector info in ENDP1 Tx Packet Memory Area*/
  USB_SIL_Write(EP1_IN, report->raw, sizeof(report->raw));
 800b5e2:	4621      	mov	r1, r4
 800b5e4:	2081      	movs	r0, #129	; 0x81
 800b5e6:	2222      	movs	r2, #34	; 0x22
 800b5e8:	f001 f98e 	bl	800c908 <USB_SIL_Write>

  /* Enable endpoint for transmission */
  SetEPTxValid(ENDP1);

}
 800b5ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  /* Copy keyboard vector info in ENDP1 Tx Packet Memory Area*/
  USB_SIL_Write(EP1_IN, report->raw, sizeof(report->raw));

  /* Enable endpoint for transmission */
  SetEPTxValid(ENDP1);
 800b5f0:	2001      	movs	r0, #1
 800b5f2:	f000 be55 	b.w	800c2a0 <SetEPTxValid>
 800b5f6:	bf00      	nop
 800b5f8:	2000008a 	.word	0x2000008a
 800b5fc:	000f4240 	.word	0x000f4240
 800b600:	08012d5b 	.word	0x08012d5b

0800b604 <USB_ARC_MOUSE_tx>:

}

void USB_ARC_MOUSE_tx(usb_mouse_report *report)
{
  uint32_t spoon_guard = 1000000;
 800b604:	4b0d      	ldr	r3, [pc, #52]	; (800b63c <USB_ARC_MOUSE_tx+0x38>)
  while(mouse_tx_complete==0 && --spoon_guard);
 800b606:	4a0e      	ldr	r2, [pc, #56]	; (800b640 <USB_ARC_MOUSE_tx+0x3c>)
  SetEPTxValid(ENDP1);

}

void USB_ARC_MOUSE_tx(usb_mouse_report *report)
{
 800b608:	b510      	push	{r4, lr}
 800b60a:	4604      	mov	r4, r0
  uint32_t spoon_guard = 1000000;
  while(mouse_tx_complete==0 && --spoon_guard);
 800b60c:	7851      	ldrb	r1, [r2, #1]
 800b60e:	b911      	cbnz	r1, 800b616 <USB_ARC_MOUSE_tx+0x12>
 800b610:	3b01      	subs	r3, #1
 800b612:	d1fb      	bne.n	800b60c <USB_ARC_MOUSE_tx+0x8>
 800b614:	e000      	b.n	800b618 <USB_ARC_MOUSE_tx+0x14>
  ASSERT(spoon_guard > 0);
 800b616:	b91b      	cbnz	r3, 800b620 <USB_ARC_MOUSE_tx+0x1c>
 800b618:	480a      	ldr	r0, [pc, #40]	; (800b644 <USB_ARC_MOUSE_tx+0x40>)
 800b61a:	216c      	movs	r1, #108	; 0x6c
 800b61c:	f7f5 f8e0 	bl	80007e0 <SYS_assert>

  /* Reset the control token to inform upper layer that a transfer is ongoing */
  mouse_tx_complete = 0;
 800b620:	4b07      	ldr	r3, [pc, #28]	; (800b640 <USB_ARC_MOUSE_tx+0x3c>)
 800b622:	2200      	movs	r2, #0
 800b624:	705a      	strb	r2, [r3, #1]

  /* Copy mouse position info in ENDP2 Tx Packet Memory Area*/
  USB_SIL_Write(EP2_IN, report->raw, sizeof(report->raw));
 800b626:	4621      	mov	r1, r4
 800b628:	2082      	movs	r0, #130	; 0x82
 800b62a:	2204      	movs	r2, #4
 800b62c:	f001 f96c 	bl	800c908 <USB_SIL_Write>

  /* Enable endpoint for transmission */
  SetEPTxValid(ENDP2);

}
 800b630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  /* Copy mouse position info in ENDP2 Tx Packet Memory Area*/
  USB_SIL_Write(EP2_IN, report->raw, sizeof(report->raw));

  /* Enable endpoint for transmission */
  SetEPTxValid(ENDP2);
 800b634:	2002      	movs	r0, #2
 800b636:	f000 be33 	b.w	800c2a0 <SetEPTxValid>
 800b63a:	bf00      	nop
 800b63c:	000f4240 	.word	0x000f4240
 800b640:	2000008a 	.word	0x2000008a
 800b644:	08012d5b 	.word	0x08012d5b

0800b648 <USB_ARC_JOYSTICK_tx>:

}

void USB_ARC_JOYSTICK_tx(usb_joystick j, usb_joystick_report *report)
{
 800b648:	b570      	push	{r4, r5, r6, lr}
  uint32_t spoon_guard = 1000000;
  if (j == JOYSTICK1) {
 800b64a:	4b13      	ldr	r3, [pc, #76]	; (800b698 <USB_ARC_JOYSTICK_tx+0x50>)
  SetEPTxValid(ENDP2);

}

void USB_ARC_JOYSTICK_tx(usb_joystick j, usb_joystick_report *report)
{
 800b64c:	460e      	mov	r6, r1
  uint32_t spoon_guard = 1000000;
  if (j == JOYSTICK1) {
 800b64e:	4604      	mov	r4, r0
 800b650:	4d12      	ldr	r5, [pc, #72]	; (800b69c <USB_ARC_JOYSTICK_tx+0x54>)
 800b652:	b930      	cbnz	r0, 800b662 <USB_ARC_JOYSTICK_tx+0x1a>
    while(joy1_tx_complete==0 && --spoon_guard);
 800b654:	78aa      	ldrb	r2, [r5, #2]
 800b656:	b93a      	cbnz	r2, 800b668 <USB_ARC_JOYSTICK_tx+0x20>
 800b658:	3b01      	subs	r3, #1
 800b65a:	d1fb      	bne.n	800b654 <USB_ARC_JOYSTICK_tx+0xc>
 800b65c:	e005      	b.n	800b66a <USB_ARC_JOYSTICK_tx+0x22>
  } else {
    while(joy2_tx_complete==0 && --spoon_guard);
 800b65e:	3b01      	subs	r3, #1
 800b660:	d003      	beq.n	800b66a <USB_ARC_JOYSTICK_tx+0x22>
 800b662:	78ea      	ldrb	r2, [r5, #3]
 800b664:	2a00      	cmp	r2, #0
 800b666:	d0fa      	beq.n	800b65e <USB_ARC_JOYSTICK_tx+0x16>
  }
  ASSERT(spoon_guard > 0);
 800b668:	b91b      	cbnz	r3, 800b672 <USB_ARC_JOYSTICK_tx+0x2a>
 800b66a:	480d      	ldr	r0, [pc, #52]	; (800b6a0 <USB_ARC_JOYSTICK_tx+0x58>)
 800b66c:	2181      	movs	r1, #129	; 0x81
 800b66e:	f7f5 f8b7 	bl	80007e0 <SYS_assert>

  /* Reset the control token to inform upper layer that a transfer is ongoing */
  if (j == JOYSTICK1) {
 800b672:	b914      	cbnz	r4, 800b67a <USB_ARC_JOYSTICK_tx+0x32>
    joy1_tx_complete= 0;
 800b674:	70ac      	strb	r4, [r5, #2]
  } else {
    joy2_tx_complete = 0;
  }

  /* Copy joystick info in ENDP3/4 Tx Packet Memory Area*/
  USB_SIL_Write(j == JOYSTICK1 ? EP3_IN : EP4_IN, report->raw, sizeof(report->raw));
 800b676:	2083      	movs	r0, #131	; 0x83
 800b678:	e002      	b.n	800b680 <USB_ARC_JOYSTICK_tx+0x38>

  /* Reset the control token to inform upper layer that a transfer is ongoing */
  if (j == JOYSTICK1) {
    joy1_tx_complete= 0;
  } else {
    joy2_tx_complete = 0;
 800b67a:	2300      	movs	r3, #0
 800b67c:	70eb      	strb	r3, [r5, #3]
  }

  /* Copy joystick info in ENDP3/4 Tx Packet Memory Area*/
  USB_SIL_Write(j == JOYSTICK1 ? EP3_IN : EP4_IN, report->raw, sizeof(report->raw));
 800b67e:	2084      	movs	r0, #132	; 0x84
 800b680:	4631      	mov	r1, r6
 800b682:	2204      	movs	r2, #4
 800b684:	f001 f940 	bl	800c908 <USB_SIL_Write>

  /* Enable endpoint for transmission */
  SetEPTxValid(j == JOYSTICK1 ? ENDP3 : ENDP4);
 800b688:	2c00      	cmp	r4, #0
 800b68a:	bf14      	ite	ne
 800b68c:	2004      	movne	r0, #4
 800b68e:	2003      	moveq	r0, #3
}
 800b690:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  /* Copy joystick info in ENDP3/4 Tx Packet Memory Area*/
  USB_SIL_Write(j == JOYSTICK1 ? EP3_IN : EP4_IN, report->raw, sizeof(report->raw));

  /* Enable endpoint for transmission */
  SetEPTxValid(j == JOYSTICK1 ? ENDP3 : ENDP4);
 800b694:	f000 be04 	b.w	800c2a0 <SetEPTxValid>
 800b698:	000f4240 	.word	0x000f4240
 800b69c:	2000008a 	.word	0x2000008a
 800b6a0:	08012d5b 	.word	0x08012d5b

0800b6a4 <Get_SerialNum>:

void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 800b6a4:	4b09      	ldr	r3, [pc, #36]	; (800b6cc <Get_SerialNum+0x28>)
  /* Enable endpoint for transmission */
  SetEPTxValid(j == JOYSTICK1 ? ENDP3 : ENDP4);
}

void Get_SerialNum(void)
{
 800b6a6:	b510      	push	{r4, lr}
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 800b6a8:	e893 0014 	ldmia.w	r3, {r2, r4}
  Device_Serial2 = *(uint32_t*)ID3;
 800b6ac:	3308      	adds	r3, #8

  Device_Serial0 += Device_Serial2;
 800b6ae:	681b      	ldr	r3, [r3, #0]

  if (Device_Serial0 != 0)
 800b6b0:	18d0      	adds	r0, r2, r3
 800b6b2:	d00a      	beq.n	800b6ca <Get_SerialNum+0x26>
  {
    IntToUnicode (Device_Serial0, &ARC_string_serial[2] , 8);
 800b6b4:	4906      	ldr	r1, [pc, #24]	; (800b6d0 <Get_SerialNum+0x2c>)
 800b6b6:	2208      	movs	r2, #8
 800b6b8:	f7ff ff22 	bl	800b500 <IntToUnicode>
    IntToUnicode (Device_Serial1, &ARC_string_serial[18], 4);
 800b6bc:	4620      	mov	r0, r4
 800b6be:	4905      	ldr	r1, [pc, #20]	; (800b6d4 <Get_SerialNum+0x30>)
 800b6c0:	2204      	movs	r2, #4
  }
}
 800b6c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
  {
    IntToUnicode (Device_Serial0, &ARC_string_serial[2] , 8);
    IntToUnicode (Device_Serial1, &ARC_string_serial[18], 4);
 800b6c6:	f7ff bf1b 	b.w	800b500 <IntToUnicode>
 800b6ca:	bd10      	pop	{r4, pc}
 800b6cc:	1ffff7e8 	.word	0x1ffff7e8
 800b6d0:	20000072 	.word	0x20000072
 800b6d4:	20000082 	.word	0x20000082

0800b6d8 <USB_ARC_init>:

    pbuf[2 * idx + 1] = 0;
  }
}

void USB_ARC_init(void) {
 800b6d8:	b508      	push	{r3, lr}
#ifdef CONFIG_ARCHID_VCD
  ringbuf_init(&tx_rb, tx_buf, sizeof(tx_buf));
 800b6da:	4807      	ldr	r0, [pc, #28]	; (800b6f8 <USB_ARC_init+0x20>)
 800b6dc:	4907      	ldr	r1, [pc, #28]	; (800b6fc <USB_ARC_init+0x24>)
 800b6de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b6e2:	f7f6 ff3d 	bl	8002560 <ringbuf_init>
  ringbuf_init(&rx_rb, rx_buf, sizeof(rx_buf));
#endif
}
 800b6e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void USB_ARC_init(void) {
#ifdef CONFIG_ARCHID_VCD
  ringbuf_init(&tx_rb, tx_buf, sizeof(tx_buf));
  ringbuf_init(&rx_rb, rx_buf, sizeof(rx_buf));
 800b6ea:	4805      	ldr	r0, [pc, #20]	; (800b700 <USB_ARC_init+0x28>)
 800b6ec:	4905      	ldr	r1, [pc, #20]	; (800b704 <USB_ARC_init+0x2c>)
 800b6ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b6f2:	f7f6 bf35 	b.w	8002560 <ringbuf_init>
 800b6f6:	bf00      	nop
 800b6f8:	2000119c 	.word	0x2000119c
 800b6fc:	200013a8 	.word	0x200013a8
 800b700:	200017a8 	.word	0x200017a8
 800b704:	200011a8 	.word	0x200011a8

0800b708 <USB_ARC_start>:
#endif
}

void USB_ARC_start(void) {
  USB_Init();
 800b708:	f000 b866 	b.w	800b7d8 <USB_Init>

0800b70c <USB_SER_rx_avail>:
}

#ifdef CONFIG_ARCHID_VCD
u16_t USB_SER_rx_avail(void) {
 800b70c:	b508      	push	{r3, lr}
  return ringbuf_available(&rx_rb);
 800b70e:	4802      	ldr	r0, [pc, #8]	; (800b718 <USB_SER_rx_avail+0xc>)
 800b710:	f7f6 ff60 	bl	80025d4 <ringbuf_available>
}
 800b714:	b280      	uxth	r0, r0
 800b716:	bd08      	pop	{r3, pc}
 800b718:	200017a8 	.word	0x200017a8

0800b71c <USB_SER_rx_char>:

s32_t USB_SER_rx_char(u8_t *c) {
 800b71c:	4601      	mov	r1, r0
  return ringbuf_getc(&rx_rb, c);
 800b71e:	4801      	ldr	r0, [pc, #4]	; (800b724 <USB_SER_rx_char+0x8>)
 800b720:	f7f6 bf24 	b.w	800256c <ringbuf_getc>
 800b724:	200017a8 	.word	0x200017a8

0800b728 <USB_SER_rx_buf>:
}

s32_t USB_SER_rx_buf(u8_t *buf, u16_t len) {
 800b728:	4603      	mov	r3, r0
 800b72a:	460a      	mov	r2, r1
  return ringbuf_get(&rx_rb, buf, len);
 800b72c:	4801      	ldr	r0, [pc, #4]	; (800b734 <USB_SER_rx_buf+0xc>)
 800b72e:	4619      	mov	r1, r3
 800b730:	f7f7 b808 	b.w	8002744 <ringbuf_get>
 800b734:	200017a8 	.word	0x200017a8

0800b738 <USB_SER_tx_char>:
}

s32_t USB_SER_tx_char(u8_t c) {
 800b738:	4601      	mov	r1, r0
  return ringbuf_putc(&tx_rb, c);
 800b73a:	4801      	ldr	r0, [pc, #4]	; (800b740 <USB_SER_tx_char+0x8>)
 800b73c:	f7f6 bf2e 	b.w	800259c <ringbuf_putc>
 800b740:	2000119c 	.word	0x2000119c

0800b744 <USB_SER_tx_buf>:
}

s32_t USB_SER_tx_buf(u8_t *buf, u16_t len) {
 800b744:	4603      	mov	r3, r0
 800b746:	460a      	mov	r2, r1
  return ringbuf_put(&tx_rb, buf, len);
 800b748:	4801      	ldr	r0, [pc, #4]	; (800b750 <USB_SER_tx_buf+0xc>)
 800b74a:	4619      	mov	r1, r3
 800b74c:	f7f6 bf84 	b.w	8002658 <ringbuf_put>
 800b750:	2000119c 	.word	0x2000119c

0800b754 <USB_SER_set_rx_callback>:
}

void USB_SER_set_rx_callback(usb_serial_rx_cb cb, void *arg) {
  rx_cb = cb;
 800b754:	4b01      	ldr	r3, [pc, #4]	; (800b75c <USB_SER_set_rx_callback+0x8>)
 800b756:	60d8      	str	r0, [r3, #12]
 800b758:	4770      	bx	lr
 800b75a:	bf00      	nop
 800b75c:	20000c24 	.word	0x20000c24

0800b760 <USB_SER_get_rx_callback>:
}

void USB_SER_get_rx_callback(usb_serial_rx_cb *cb, void **arg) {
  if (cb) *cb = rx_cb;
 800b760:	b110      	cbz	r0, 800b768 <USB_SER_get_rx_callback+0x8>
 800b762:	4b02      	ldr	r3, [pc, #8]	; (800b76c <USB_SER_get_rx_callback+0xc>)
 800b764:	68db      	ldr	r3, [r3, #12]
 800b766:	6003      	str	r3, [r0, #0]
 800b768:	4770      	bx	lr
 800b76a:	bf00      	nop
 800b76c:	20000c24 	.word	0x20000c24

0800b770 <USB_SER_assure_tx>:
}

bool USB_SER_assure_tx(bool on) {
  return FALSE;
}
 800b770:	2000      	movs	r0, #0
 800b772:	4770      	bx	lr

0800b774 <USB_SER_tx_drain>:

void USB_SER_tx_drain(void) {
  ringbuf_clear(&tx_rb);
 800b774:	4801      	ldr	r0, [pc, #4]	; (800b77c <USB_SER_tx_drain+0x8>)
 800b776:	f7f6 bf3a 	b.w	80025ee <ringbuf_clear>
 800b77a:	bf00      	nop
 800b77c:	2000119c 	.word	0x2000119c

0800b780 <USB_SER_tx_flush>:
}

void USB_SER_tx_flush(void) {
 800b780:	4770      	bx	lr

0800b782 <Handle_USBAsynchXfer>:
}

void Handle_USBAsynchXfer(void) {
 800b782:	b537      	push	{r0, r1, r2, r4, r5, lr}

  if (USB_Tx_State != 1) {
 800b784:	4d12      	ldr	r5, [pc, #72]	; (800b7d0 <Handle_USBAsynchXfer+0x4e>)
 800b786:	7c2b      	ldrb	r3, [r5, #16]
 800b788:	2b01      	cmp	r3, #1
 800b78a:	d01f      	beq.n	800b7cc <Handle_USBAsynchXfer+0x4a>
    u8_t *buf;
    int avail = ringbuf_available_linear(&tx_rb, &buf);
 800b78c:	4811      	ldr	r0, [pc, #68]	; (800b7d4 <Handle_USBAsynchXfer+0x52>)
 800b78e:	a901      	add	r1, sp, #4
 800b790:	f7f6 ff3c 	bl	800260c <ringbuf_available_linear>
    if (avail == 0) {
 800b794:	b908      	cbnz	r0, 800b79a <Handle_USBAsynchXfer+0x18>
      USB_Tx_State = 0;
 800b796:	7428      	strb	r0, [r5, #16]
 800b798:	e018      	b.n	800b7cc <Handle_USBAsynchXfer+0x4a>
 800b79a:	2840      	cmp	r0, #64	; 0x40
 800b79c:	bfb4      	ite	lt
 800b79e:	4604      	movlt	r4, r0
 800b7a0:	2440      	movge	r4, #64	; 0x40
    if (avail > VIRTUAL_COM_PORT_DATA_SIZE) {
      avail = VIRTUAL_COM_PORT_DATA_SIZE;
    }

    USB_Tx_State = 1;
    UserToPMABufferCopy(buf, ENDP7_TXADDR, avail);
 800b7a2:	b2a4      	uxth	r4, r4

    if (avail > VIRTUAL_COM_PORT_DATA_SIZE) {
      avail = VIRTUAL_COM_PORT_DATA_SIZE;
    }

    USB_Tx_State = 1;
 800b7a4:	2301      	movs	r3, #1
    UserToPMABufferCopy(buf, ENDP7_TXADDR, avail);
 800b7a6:	9801      	ldr	r0, [sp, #4]
 800b7a8:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800b7ac:	4622      	mov	r2, r4

    if (avail > VIRTUAL_COM_PORT_DATA_SIZE) {
      avail = VIRTUAL_COM_PORT_DATA_SIZE;
    }

    USB_Tx_State = 1;
 800b7ae:	742b      	strb	r3, [r5, #16]
    UserToPMABufferCopy(buf, ENDP7_TXADDR, avail);
 800b7b0:	f000 f9dc 	bl	800bb6c <UserToPMABufferCopy>
    ringbuf_get(&tx_rb, 0, avail);
 800b7b4:	2100      	movs	r1, #0
 800b7b6:	4622      	mov	r2, r4
 800b7b8:	4806      	ldr	r0, [pc, #24]	; (800b7d4 <Handle_USBAsynchXfer+0x52>)
 800b7ba:	f7f6 ffc3 	bl	8002744 <ringbuf_get>
    SetEPTxCount(ENDP7, avail);
 800b7be:	2007      	movs	r0, #7
 800b7c0:	4621      	mov	r1, r4
 800b7c2:	f000 feb3 	bl	800c52c <SetEPTxCount>
    SetEPTxValid(ENDP7 );
 800b7c6:	2007      	movs	r0, #7
 800b7c8:	f000 fd6a 	bl	800c2a0 <SetEPTxValid>
  }

}
 800b7cc:	b003      	add	sp, #12
 800b7ce:	bd30      	pop	{r4, r5, pc}
 800b7d0:	20000c24 	.word	0x20000c24
 800b7d4:	2000119c 	.word	0x2000119c

0800b7d8 <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 800b7d8:	b508      	push	{r3, lr}
  pInformation = &Device_Info;
 800b7da:	4a07      	ldr	r2, [pc, #28]	; (800b7f8 <USB_Init+0x20>)
 800b7dc:	4b07      	ldr	r3, [pc, #28]	; (800b7fc <USB_Init+0x24>)
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
  pUser_Standard_Requests = &User_Standard_Requests;
 800b7de:	4908      	ldr	r1, [pc, #32]	; (800b800 <USB_Init+0x28>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
 800b7e0:	6013      	str	r3, [r2, #0]
  pInformation->ControlState = 2;
 800b7e2:	2202      	movs	r2, #2
 800b7e4:	721a      	strb	r2, [r3, #8]
  pProperty = &Device_Property;
 800b7e6:	4b07      	ldr	r3, [pc, #28]	; (800b804 <USB_Init+0x2c>)
 800b7e8:	4a07      	ldr	r2, [pc, #28]	; (800b808 <USB_Init+0x30>)
 800b7ea:	6013      	str	r3, [r2, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 800b7ec:	4a07      	ldr	r2, [pc, #28]	; (800b80c <USB_Init+0x34>)
  /* Initialize devices one by one */
  pProperty->Init();
 800b7ee:	681b      	ldr	r3, [r3, #0]
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
  pUser_Standard_Requests = &User_Standard_Requests;
 800b7f0:	6011      	str	r1, [r2, #0]
  /* Initialize devices one by one */
  pProperty->Init();
 800b7f2:	4798      	blx	r3
 800b7f4:	bd08      	pop	{r3, pc}
 800b7f6:	bf00      	nop
 800b7f8:	200017e0 	.word	0x200017e0
 800b7fc:	200017c0 	.word	0x200017c0
 800b800:	20000150 	.word	0x20000150
 800b804:	200000d0 	.word	0x200000d0
 800b808:	200017b8 	.word	0x200017b8
 800b80c:	200017dc 	.word	0x200017dc

0800b810 <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 800b810:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800b814:	4f53      	ldr	r7, [pc, #332]	; (800b964 <CTR_LP+0x154>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 800b816:	2300      	movs	r3, #0
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800b818:	f8df 8168 	ldr.w	r8, [pc, #360]	; 800b984 <CTR_LP+0x174>
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 800b81c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b820:	46b9      	mov	r9, r7
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800b822:	f8d8 3000 	ldr.w	r3, [r8]
 800b826:	4a50      	ldr	r2, [pc, #320]	; (800b968 <CTR_LP+0x158>)
 800b828:	b299      	uxth	r1, r3
 800b82a:	041b      	lsls	r3, r3, #16
 800b82c:	8011      	strh	r1, [r2, #0]
 800b82e:	f140 8095 	bpl.w	800b95c <CTR_LP+0x14c>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800b832:	8813      	ldrh	r3, [r2, #0]
 800b834:	f003 030f 	and.w	r3, r3, #15
 800b838:	703b      	strb	r3, [r7, #0]
    if (EPindex == 0)
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d15f      	bne.n	800b8fe <CTR_LP+0xee>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 800b83e:	4c4b      	ldr	r4, [pc, #300]	; (800b96c <CTR_LP+0x15c>)
 800b840:	4e4b      	ldr	r6, [pc, #300]	; (800b970 <CTR_LP+0x160>)
 800b842:	6823      	ldr	r3, [r4, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 800b844:	4d4b      	ldr	r5, [pc, #300]	; (800b974 <CTR_LP+0x164>)
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 800b846:	b29b      	uxth	r3, r3
 800b848:	8033      	strh	r3, [r6, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 800b84a:	8833      	ldrh	r3, [r6, #0]
 800b84c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b850:	802b      	strh	r3, [r5, #0]
	    SaveRState &=  EPRX_STAT;	
 800b852:	8833      	ldrh	r3, [r6, #0]
 800b854:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b858:	8033      	strh	r3, [r6, #0]

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 800b85a:	6821      	ldr	r1, [r4, #0]
 800b85c:	f64b 73bf 	movw	r3, #49087	; 0xbfbf
 800b860:	400b      	ands	r3, r1
 800b862:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b866:	f083 0320 	eor.w	r3, r3, #32
 800b86a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b86e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b872:	6023      	str	r3, [r4, #0]

      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 800b874:	8813      	ldrh	r3, [r2, #0]
 800b876:	06da      	lsls	r2, r3, #27
 800b878:	d407      	bmi.n	800b88a <CTR_LP+0x7a>
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 800b87a:	6822      	ldr	r2, [r4, #0]
 800b87c:	f648 730f 	movw	r3, #36623	; 0x8f0f
 800b880:	4013      	ands	r3, r2
 800b882:	6023      	str	r3, [r4, #0]
        In0_Process();
 800b884:	f7ff fd78 	bl	800b378 <In0_Process>
 800b888:	e01b      	b.n	800b8c2 <CTR_LP+0xb2>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 800b88a:	6823      	ldr	r3, [r4, #0]
 800b88c:	b29b      	uxth	r3, r3
 800b88e:	f8ad 3006 	strh.w	r3, [sp, #6]
        
        if ((wEPVal &EP_SETUP) != 0)
 800b892:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b896:	051b      	lsls	r3, r3, #20
 800b898:	d507      	bpl.n	800b8aa <CTR_LP+0x9a>
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 800b89a:	6822      	ldr	r2, [r4, #0]
 800b89c:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b8a0:	4013      	ands	r3, r2
 800b8a2:	6023      	str	r3, [r4, #0]
          Setup0_Process();
 800b8a4:	f7ff fb72 	bl	800af8c <Setup0_Process>
 800b8a8:	e00b      	b.n	800b8c2 <CTR_LP+0xb2>

		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 800b8aa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b8ae:	b21b      	sxth	r3, r3
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	dab6      	bge.n	800b822 <CTR_LP+0x12>
        {
          _ClearEP_CTR_RX(ENDP0);
 800b8b4:	6822      	ldr	r2, [r4, #0]
 800b8b6:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b8ba:	4013      	ands	r3, r2
 800b8bc:	6023      	str	r3, [r4, #0]
          Out0_Process();
 800b8be:	f7ff fcd3 	bl	800b268 <Out0_Process>
          /* before terminate set Tx & Rx status */
     
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 800b8c2:	6822      	ldr	r2, [r4, #0]
 800b8c4:	f64b 73bf 	movw	r3, #49087	; 0xbfbf
 800b8c8:	4013      	ands	r3, r2
 800b8ca:	8832      	ldrh	r2, [r6, #0]
 800b8cc:	04d7      	lsls	r7, r2, #19
 800b8ce:	8832      	ldrh	r2, [r6, #0]
 800b8d0:	bf48      	it	mi
 800b8d2:	f483 5380 	eormi.w	r3, r3, #4096	; 0x1000
 800b8d6:	0494      	lsls	r4, r2, #18
 800b8d8:	882a      	ldrh	r2, [r5, #0]
 800b8da:	bf48      	it	mi
 800b8dc:	f483 5300 	eormi.w	r3, r3, #8192	; 0x2000
 800b8e0:	06d0      	lsls	r0, r2, #27
 800b8e2:	882a      	ldrh	r2, [r5, #0]
 800b8e4:	bf48      	it	mi
 800b8e6:	f083 0310 	eormi.w	r3, r3, #16
 800b8ea:	0691      	lsls	r1, r2, #26
 800b8ec:	4a22      	ldr	r2, [pc, #136]	; (800b978 <CTR_LP+0x168>)
 800b8ee:	bf48      	it	mi
 800b8f0:	f083 0320 	eormi.w	r3, r3, #32
 800b8f4:	431a      	orrs	r2, r3
 800b8f6:	4b1d      	ldr	r3, [pc, #116]	; (800b96c <CTR_LP+0x15c>)
 800b8f8:	b292      	uxth	r2, r2
 800b8fa:	601a      	str	r2, [r3, #0]
          return;
 800b8fc:	e02e      	b.n	800b95c <CTR_LP+0x14c>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 800b8fe:	009a      	lsls	r2, r3, #2
 800b900:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800b904:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800b908:	6811      	ldr	r1, [r2, #0]
 800b90a:	b289      	uxth	r1, r1
 800b90c:	f8ad 1006 	strh.w	r1, [sp, #6]
      if ((wEPVal & EP_CTR_RX) != 0)
 800b910:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800b914:	b209      	sxth	r1, r1
 800b916:	2900      	cmp	r1, #0
 800b918:	da09      	bge.n	800b92e <CTR_LP+0x11e>
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 800b91a:	6810      	ldr	r0, [r2, #0]
 800b91c:	f640 718f 	movw	r1, #3983	; 0xf8f
 800b920:	4001      	ands	r1, r0
 800b922:	6011      	str	r1, [r2, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 800b924:	4a15      	ldr	r2, [pc, #84]	; (800b97c <CTR_LP+0x16c>)
 800b926:	3b01      	subs	r3, #1
 800b928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b92c:	4798      	blx	r3

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 800b92e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b932:	061a      	lsls	r2, r3, #24
 800b934:	f57f af75 	bpl.w	800b822 <CTR_LP+0x12>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 800b938:	f899 2000 	ldrb.w	r2, [r9]
 800b93c:	f648 730f 	movw	r3, #36623	; 0x8f0f
 800b940:	0091      	lsls	r1, r2, #2
 800b942:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800b946:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 800b94a:	6808      	ldr	r0, [r1, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 800b94c:	3a01      	subs	r2, #1
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 800b94e:	4003      	ands	r3, r0
 800b950:	600b      	str	r3, [r1, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 800b952:	4b0b      	ldr	r3, [pc, #44]	; (800b980 <CTR_LP+0x170>)
 800b954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b958:	4798      	blx	r3
 800b95a:	e762      	b.n	800b822 <CTR_LP+0x12>
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 800b95c:	b003      	add	sp, #12
 800b95e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b962:	bf00      	nop
 800b964:	200017bc 	.word	0x200017bc
 800b968:	200017ea 	.word	0x200017ea
 800b96c:	40005c00 	.word	0x40005c00
 800b970:	200017e6 	.word	0x200017e6
 800b974:	200017e8 	.word	0x200017e8
 800b978:	ffff8080 	.word	0xffff8080
 800b97c:	20000090 	.word	0x20000090
 800b980:	200000ac 	.word	0x200000ac
 800b984:	40005c44 	.word	0x40005c44

0800b988 <CTR_HP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_HP(void)
{
 800b988:	b570      	push	{r4, r5, r6, lr}
  uint32_t wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800b98a:	4c16      	ldr	r4, [pc, #88]	; (800b9e4 <CTR_HP+0x5c>)
 800b98c:	4d16      	ldr	r5, [pc, #88]	; (800b9e8 <CTR_HP+0x60>)
  {
    _SetISTR((uint16_t)CLR_CTR); /* clear CTR flag */
 800b98e:	f647 76ff 	movw	r6, #32767	; 0x7fff
*******************************************************************************/
void CTR_HP(void)
{
  uint32_t wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800b992:	6823      	ldr	r3, [r4, #0]
 800b994:	b29a      	uxth	r2, r3
 800b996:	041b      	lsls	r3, r3, #16
 800b998:	802a      	strh	r2, [r5, #0]
 800b99a:	d522      	bpl.n	800b9e2 <CTR_HP+0x5a>
  {
    _SetISTR((uint16_t)CLR_CTR); /* clear CTR flag */
 800b99c:	6026      	str	r6, [r4, #0]
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800b99e:	882a      	ldrh	r2, [r5, #0]
 800b9a0:	4b12      	ldr	r3, [pc, #72]	; (800b9ec <CTR_HP+0x64>)
 800b9a2:	f002 020f 	and.w	r2, r2, #15
 800b9a6:	701a      	strb	r2, [r3, #0]
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
 800b9a8:	0093      	lsls	r3, r2, #2
 800b9aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b9ae:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800b9b2:	6819      	ldr	r1, [r3, #0]
    if ((wEPVal & EP_CTR_RX) != 0)
 800b9b4:	0408      	lsls	r0, r1, #16
 800b9b6:	d507      	bpl.n	800b9c8 <CTR_HP+0x40>
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
 800b9b8:	6818      	ldr	r0, [r3, #0]
 800b9ba:	f640 718f 	movw	r1, #3983	; 0xf8f
 800b9be:	4001      	ands	r1, r0
 800b9c0:	6019      	str	r1, [r3, #0]

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
 800b9c2:	3a01      	subs	r2, #1
 800b9c4:	4b0a      	ldr	r3, [pc, #40]	; (800b9f0 <CTR_HP+0x68>)
 800b9c6:	e008      	b.n	800b9da <CTR_HP+0x52>

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
 800b9c8:	0609      	lsls	r1, r1, #24
 800b9ca:	d5e2      	bpl.n	800b992 <CTR_HP+0xa>
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
 800b9cc:	6818      	ldr	r0, [r3, #0]
 800b9ce:	f648 710f 	movw	r1, #36623	; 0x8f0f
 800b9d2:	4001      	ands	r1, r0
 800b9d4:	6019      	str	r1, [r3, #0]

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
 800b9d6:	4b07      	ldr	r3, [pc, #28]	; (800b9f4 <CTR_HP+0x6c>)
 800b9d8:	3a01      	subs	r2, #1
 800b9da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9de:	4798      	blx	r3
 800b9e0:	e7d7      	b.n	800b992 <CTR_HP+0xa>
 800b9e2:	bd70      	pop	{r4, r5, r6, pc}
 800b9e4:	40005c44 	.word	0x40005c44
 800b9e8:	200017ea 	.word	0x200017ea
 800b9ec:	200017bc 	.word	0x200017bc
 800b9f0:	20000090 	.word	0x20000090
 800b9f4:	200000ac 	.word	0x200000ac

0800b9f8 <USB_Istr>:
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 800b9f8:	4b55      	ldr	r3, [pc, #340]	; (800bb50 <USB_Istr+0x158>)
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 800b9fa:	b530      	push	{r4, r5, lr}
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	4c55      	ldr	r4, [pc, #340]	; (800bb54 <USB_Istr+0x15c>)
 800ba00:	b29b      	uxth	r3, r3

#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 800ba02:	4d55      	ldr	r5, [pc, #340]	; (800bb58 <USB_Istr+0x160>)
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 800ba04:	8023      	strh	r3, [r4, #0]

#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 800ba06:	8822      	ldrh	r2, [r4, #0]
 800ba08:	882b      	ldrh	r3, [r5, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 800ba0a:	b089      	sub	sp, #36	; 0x24
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();

#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 800ba0c:	4013      	ands	r3, r2
 800ba0e:	041b      	lsls	r3, r3, #16
 800ba10:	d501      	bpl.n	800ba16 <USB_Istr+0x1e>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR_LP();
 800ba12:	f7ff fefd 	bl	800b810 <CTR_LP>
#endif
  }
#endif  
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 800ba16:	8822      	ldrh	r2, [r4, #0]
 800ba18:	882b      	ldrh	r3, [r5, #0]
 800ba1a:	4013      	ands	r3, r2
 800ba1c:	0558      	lsls	r0, r3, #21
 800ba1e:	d506      	bpl.n	800ba2e <USB_Istr+0x36>
  {
    _SetISTR((uint16_t)CLR_RESET);
 800ba20:	4b4b      	ldr	r3, [pc, #300]	; (800bb50 <USB_Istr+0x158>)
 800ba22:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 800ba26:	601a      	str	r2, [r3, #0]
    Device_Property.Reset();
 800ba28:	4b4c      	ldr	r3, [pc, #304]	; (800bb5c <USB_Istr+0x164>)
 800ba2a:	685b      	ldr	r3, [r3, #4]
 800ba2c:	4798      	blx	r3
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ERR)
  if (wIstr & ISTR_ERR & wInterrupt_Mask)
 800ba2e:	8822      	ldrh	r2, [r4, #0]
 800ba30:	882b      	ldrh	r3, [r5, #0]
 800ba32:	401a      	ands	r2, r3
 800ba34:	0491      	lsls	r1, r2, #18
 800ba36:	d503      	bpl.n	800ba40 <USB_Istr+0x48>
  {
    _SetISTR((uint16_t)CLR_ERR);
 800ba38:	4a45      	ldr	r2, [pc, #276]	; (800bb50 <USB_Istr+0x158>)
 800ba3a:	f64d 71ff 	movw	r1, #57343	; 0xdfff
 800ba3e:	6011      	str	r1, [r2, #0]
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
 800ba40:	8822      	ldrh	r2, [r4, #0]
 800ba42:	4013      	ands	r3, r2
 800ba44:	04da      	lsls	r2, r3, #19
 800ba46:	d506      	bpl.n	800ba56 <USB_Istr+0x5e>
  {
    _SetISTR((uint16_t)CLR_WKUP);
 800ba48:	4b41      	ldr	r3, [pc, #260]	; (800bb50 <USB_Istr+0x158>)
 800ba4a:	f64e 72ff 	movw	r2, #61439	; 0xefff
 800ba4e:	601a      	str	r2, [r3, #0]
    Resume(RESUME_EXTERNAL);
 800ba50:	2000      	movs	r0, #0
 800ba52:	f000 fb23 	bl	800c09c <Resume>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_SUSP)
  if (wIstr & ISTR_SUSP & wInterrupt_Mask)
 800ba56:	8822      	ldrh	r2, [r4, #0]
 800ba58:	882b      	ldrh	r3, [r5, #0]
 800ba5a:	4013      	ands	r3, r2
 800ba5c:	051b      	lsls	r3, r3, #20
 800ba5e:	d50c      	bpl.n	800ba7a <USB_Istr+0x82>
  {

    /* check if SUSPEND is possible */
    if (fSuspendEnabled)
 800ba60:	4b3f      	ldr	r3, [pc, #252]	; (800bb60 <USB_Istr+0x168>)
 800ba62:	781b      	ldrb	r3, [r3, #0]
 800ba64:	b113      	cbz	r3, 800ba6c <USB_Istr+0x74>
    {
      Suspend();
 800ba66:	f000 fabb 	bl	800bfe0 <Suspend>
 800ba6a:	e002      	b.n	800ba72 <USB_Istr+0x7a>
    }
    else
    {
      /* if not possible then resume after xx ms */
      Resume(RESUME_LATER);
 800ba6c:	2002      	movs	r0, #2
 800ba6e:	f000 fb15 	bl	800c09c <Resume>
    }
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    _SetISTR((uint16_t)CLR_SUSP);
 800ba72:	4b37      	ldr	r3, [pc, #220]	; (800bb50 <USB_Istr+0x158>)
 800ba74:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 800ba78:	601a      	str	r2, [r3, #0]
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 800ba7a:	8822      	ldrh	r2, [r4, #0]
 800ba7c:	882b      	ldrh	r3, [r5, #0]
 800ba7e:	4013      	ands	r3, r2
 800ba80:	0598      	lsls	r0, r3, #22
 800ba82:	d50a      	bpl.n	800ba9a <USB_Istr+0xa2>
  {
    _SetISTR((uint16_t)CLR_SOF);
 800ba84:	4b32      	ldr	r3, [pc, #200]	; (800bb50 <USB_Istr+0x158>)
 800ba86:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 800ba8a:	601a      	str	r2, [r3, #0]
    bIntPackSOF++;
 800ba8c:	4b35      	ldr	r3, [pc, #212]	; (800bb64 <USB_Istr+0x16c>)
 800ba8e:	781a      	ldrb	r2, [r3, #0]
 800ba90:	3201      	adds	r2, #1
 800ba92:	b2d2      	uxtb	r2, r2
 800ba94:	701a      	strb	r2, [r3, #0]

#ifdef SOF_CALLBACK
    SOF_Callback();
 800ba96:	f7ff fd1f 	bl	800b4d8 <SOF_Callback>
  }
#endif

  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
 800ba9a:	8822      	ldrh	r2, [r4, #0]
 800ba9c:	882b      	ldrh	r3, [r5, #0]
 800ba9e:	4013      	ands	r3, r2
 800baa0:	05d9      	lsls	r1, r3, #23
 800baa2:	d552      	bpl.n	800bb4a <USB_Istr+0x152>
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 800baa4:	4b2a      	ldr	r3, [pc, #168]	; (800bb50 <USB_Istr+0x158>)
 800baa6:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800baaa:	601a      	str	r2, [r3, #0]
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 800baac:	3304      	adds	r3, #4
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800bab4:	4b2b      	ldr	r3, [pc, #172]	; (800bb64 <USB_Istr+0x16c>)
 800bab6:	d043      	beq.n	800bb40 <USB_Istr+0x148>
    {
      /* increment ESOF counter */
      esof_counter ++;
 800bab8:	685a      	ldr	r2, [r3, #4]
 800baba:	3201      	adds	r2, #1
 800babc:	605a      	str	r2, [r3, #4]
      
      /* test if we enter in ESOF more than 3 times with FSUSP =0 and RXDP =1=>> possible missing SUSP flag*/
      if ((esof_counter >3)&&((_GetCNTR()&CNTR_FSUSP)==0))
 800babe:	685a      	ldr	r2, [r3, #4]
 800bac0:	2a03      	cmp	r2, #3
 800bac2:	d93f      	bls.n	800bb44 <USB_Istr+0x14c>
 800bac4:	4928      	ldr	r1, [pc, #160]	; (800bb68 <USB_Istr+0x170>)
 800bac6:	680a      	ldr	r2, [r1, #0]
 800bac8:	f012 0208 	ands.w	r2, r2, #8
 800bacc:	d13a      	bne.n	800bb44 <USB_Istr+0x14c>
      {           
        /* this a sequence to apply a force RESET*/
      
        /*Store CNTR value */
        wCNTR = _GetCNTR(); 
 800bace:	6809      	ldr	r1, [r1, #0]
 800bad0:	b289      	uxth	r1, r1
 800bad2:	6099      	str	r1, [r3, #8]
 800bad4:	f102 5180 	add.w	r1, r2, #268435456	; 0x10000000
 800bad8:	f501 51b8 	add.w	r1, r1, #5888	; 0x1700
 800badc:	0089      	lsls	r1, r1, #2
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 800bade:	6808      	ldr	r0, [r1, #0]
 800bae0:	ac08      	add	r4, sp, #32
 800bae2:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800bae6:	3201      	adds	r2, #1
 800bae8:	b280      	uxth	r0, r0
 800baea:	2a08      	cmp	r2, #8
 800baec:	f841 0c20 	str.w	r0, [r1, #-32]
 800baf0:	d1f0      	bne.n	800bad4 <USB_Istr+0xdc>
      
        /*apply FRES */
        wCNTR|=CNTR_FRES;
 800baf2:	689a      	ldr	r2, [r3, #8]
 800baf4:	f042 0201 	orr.w	r2, r2, #1
 800baf8:	609a      	str	r2, [r3, #8]
        _SetCNTR(wCNTR);
 800bafa:	6899      	ldr	r1, [r3, #8]
 800bafc:	4a1a      	ldr	r2, [pc, #104]	; (800bb68 <USB_Istr+0x170>)
 800bafe:	b289      	uxth	r1, r1
 800bb00:	6011      	str	r1, [r2, #0]
 
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
 800bb02:	6899      	ldr	r1, [r3, #8]
 800bb04:	f021 0101 	bic.w	r1, r1, #1
 800bb08:	6099      	str	r1, [r3, #8]
        _SetCNTR(wCNTR);
 800bb0a:	6899      	ldr	r1, [r3, #8]
 800bb0c:	b289      	uxth	r1, r1
 800bb0e:	6011      	str	r1, [r2, #0]
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 800bb10:	490f      	ldr	r1, [pc, #60]	; (800bb50 <USB_Istr+0x158>)
 800bb12:	680a      	ldr	r2, [r1, #0]
 800bb14:	0552      	lsls	r2, r2, #21
 800bb16:	d5fc      	bpl.n	800bb12 <USB_Istr+0x11a>
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
 800bb18:	4a0d      	ldr	r2, [pc, #52]	; (800bb50 <USB_Istr+0x158>)
 800bb1a:	f64f 31ff 	movw	r1, #64511	; 0xfbff
 800bb1e:	6011      	str	r1, [r2, #0]
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 800bb20:	2200      	movs	r2, #0
        _SetENDPOINT(i, EP[i]);
 800bb22:	ac08      	add	r4, sp, #32
 800bb24:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 800bb28:	f102 5180 	add.w	r1, r2, #268435456	; 0x10000000
 800bb2c:	f850 0c20 	ldr.w	r0, [r0, #-32]
 800bb30:	f501 51b8 	add.w	r1, r1, #5888	; 0x1700
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 800bb34:	3201      	adds	r2, #1
 800bb36:	0089      	lsls	r1, r1, #2
        _SetENDPOINT(i, EP[i]);
 800bb38:	b280      	uxth	r0, r0
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 800bb3a:	2a08      	cmp	r2, #8
        _SetENDPOINT(i, EP[i]);
 800bb3c:	6008      	str	r0, [r1, #0]
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 800bb3e:	d1f0      	bne.n	800bb22 <USB_Istr+0x12a>
        esof_counter = 0;
      }
    }
    else
    {
        esof_counter = 0;
 800bb40:	2200      	movs	r2, #0
 800bb42:	605a      	str	r2, [r3, #4]
    }
    
    /* resume handling timing is made with ESOFs */
    Resume(RESUME_ESOF); /* request without change of the machine state */
 800bb44:	2007      	movs	r0, #7
 800bb46:	f000 faa9 	bl	800c09c <Resume>
    ESOF_Callback();
#endif
    
  }
#endif
} /* USB_Istr */
 800bb4a:	b009      	add	sp, #36	; 0x24
 800bb4c:	bd30      	pop	{r4, r5, pc}
 800bb4e:	bf00      	nop
 800bb50:	40005c44 	.word	0x40005c44
 800bb54:	200017ea 	.word	0x200017ea
 800bb58:	200017e4 	.word	0x200017e4
 800bb5c:	200000d0 	.word	0x200000d0
 800bb60:	20000178 	.word	0x20000178
 800bb64:	20000c38 	.word	0x20000c38
 800bb68:	40005c40 	.word	0x40005c40

0800bb6c <UserToPMABufferCopy>:
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bb6c:	b530      	push	{r4, r5, lr}
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 800bb6e:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 800bb72:	3201      	adds	r2, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 800bb74:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 800bb78:	1052      	asrs	r2, r2, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 800bb7a:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	f100 0002 	add.w	r0, r0, #2
 800bb84:	d009      	beq.n	800bb9a <UserToPMABufferCopy+0x2e>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 800bb86:	f810 5c01 	ldrb.w	r5, [r0, #-1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 800bb8a:	f810 4c02 	ldrb.w	r4, [r0, #-2]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 800bb8e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    *pdwVal++ = temp2;
 800bb92:	f821 4023 	strh.w	r4, [r1, r3, lsl #2]
 800bb96:	3301      	adds	r3, #1
 800bb98:	e7f1      	b.n	800bb7e <UserToPMABufferCopy+0x12>
    pdwVal++;
    pbUsrBuf++;
  }
}
 800bb9a:	bd30      	pop	{r4, r5, pc}

0800bb9c <PMAToUserBufferCopy>:
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 800bb9c:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bba0:	b510      	push	{r4, lr}
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 800bba2:	3201      	adds	r2, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 800bba4:	f501 5440 	add.w	r4, r1, #12288	; 0x3000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 800bba8:	1052      	asrs	r2, r2, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 800bbaa:	0064      	lsls	r4, r4, #1
  for (i = n; i != 0; i--)
 800bbac:	2300      	movs	r3, #0
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	d005      	beq.n	800bbbe <PMAToUserBufferCopy+0x22>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800bbb2:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800bbb6:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
 800bbba:	3301      	adds	r3, #1
 800bbbc:	e7f7      	b.n	800bbae <PMAToUserBufferCopy+0x12>
    pbUsrBuf++;
  }
}
 800bbbe:	bd10      	pop	{r4, pc}

0800bbc0 <ARC_SetConfiguration>:
*******************************************************************************/
void ARC_SetConfiguration(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  if (pInfo->Current_Configuration != 0)
 800bbc0:	4b03      	ldr	r3, [pc, #12]	; (800bbd0 <ARC_SetConfiguration+0x10>)
 800bbc2:	7a9b      	ldrb	r3, [r3, #10]
 800bbc4:	b113      	cbz	r3, 800bbcc <ARC_SetConfiguration+0xc>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 800bbc6:	4b03      	ldr	r3, [pc, #12]	; (800bbd4 <ARC_SetConfiguration+0x14>)
 800bbc8:	2205      	movs	r2, #5
 800bbca:	601a      	str	r2, [r3, #0]
 800bbcc:	4770      	bx	lr
 800bbce:	bf00      	nop
 800bbd0:	200017c0 	.word	0x200017c0
 800bbd4:	20000c4c 	.word	0x20000c4c

0800bbd8 <ARC_SetDeviceAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ARC_SetDeviceAddress (void)
{
  bDeviceState = ADDRESSED;
 800bbd8:	4b01      	ldr	r3, [pc, #4]	; (800bbe0 <ARC_SetDeviceAddress+0x8>)
 800bbda:	2204      	movs	r2, #4
 800bbdc:	601a      	str	r2, [r3, #0]
 800bbde:	4770      	bx	lr
 800bbe0:	20000c4c 	.word	0x20000c4c

0800bbe4 <ARC_Status_In>:
* Return         : None.
*******************************************************************************/
void ARC_Status_In(void)
{
  static uint8_t old_led_state = 0;
  if (old_led_state != kb_led_state) {
 800bbe4:	4b06      	ldr	r3, [pc, #24]	; (800bc00 <ARC_Status_In+0x1c>)
 800bbe6:	781a      	ldrb	r2, [r3, #0]
 800bbe8:	4b06      	ldr	r3, [pc, #24]	; (800bc04 <ARC_Status_In+0x20>)
 800bbea:	7819      	ldrb	r1, [r3, #0]
 800bbec:	4291      	cmp	r1, r2
    //print("led state:%s %s\n", kb_led_state & 1 ? "NUM":"", kb_led_state & 2 ? "CAPS":"");
    old_led_state = kb_led_state;
 800bbee:	bf18      	it	ne
 800bbf0:	701a      	strbne	r2, [r3, #0]
  }
#ifdef CONFIG_ARCHID_VCD
  if (Request == SET_LINE_CODING)
 800bbf2:	785b      	ldrb	r3, [r3, #1]
 800bbf4:	2b20      	cmp	r3, #32
 800bbf6:	d102      	bne.n	800bbfe <ARC_Status_In+0x1a>
  {
    Request = 0;
 800bbf8:	4b02      	ldr	r3, [pc, #8]	; (800bc04 <ARC_Status_In+0x20>)
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	705a      	strb	r2, [r3, #1]
 800bbfe:	4770      	bx	lr
 800bc00:	20000c35 	.word	0x20000c35
 800bc04:	20000c44 	.word	0x20000c44

0800bc08 <ARC_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void ARC_Status_Out (void)
{
 800bc08:	4770      	bx	lr

0800bc0a <ARC_set_configuration>:
}

uint8_t *ARC_set_configuration(uint16_t Length)
{
  pInformation->Ctrl_Info.Usb_wLength = 1;
 800bc0a:	4b03      	ldr	r3, [pc, #12]	; (800bc18 <ARC_set_configuration+0xe>)
 800bc0c:	2201      	movs	r2, #1
 800bc0e:	681b      	ldr	r3, [r3, #0]
  return &kb_led_state;
}
 800bc10:	4802      	ldr	r0, [pc, #8]	; (800bc1c <ARC_set_configuration+0x12>)
{
}

uint8_t *ARC_set_configuration(uint16_t Length)
{
  pInformation->Ctrl_Info.Usb_wLength = 1;
 800bc12:	821a      	strh	r2, [r3, #16]
  return &kb_led_state;
}
 800bc14:	4770      	bx	lr
 800bc16:	bf00      	nop
 800bc18:	200017e0 	.word	0x200017e0
 800bc1c:	20000c35 	.word	0x20000c35

0800bc20 <ARC_VCP_GetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *ARC_VCP_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
 800bc20:	b920      	cbnz	r0, 800bc2c <ARC_VCP_GetLineCoding+0xc>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 800bc22:	4b03      	ldr	r3, [pc, #12]	; (800bc30 <ARC_VCP_GetLineCoding+0x10>)
 800bc24:	2208      	movs	r2, #8
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	821a      	strh	r2, [r3, #16]
    return NULL;
 800bc2a:	4770      	bx	lr
  }
  return(uint8_t *)&linecoding;
 800bc2c:	4801      	ldr	r0, [pc, #4]	; (800bc34 <ARC_VCP_GetLineCoding+0x14>)
}
 800bc2e:	4770      	bx	lr
 800bc30:	200017e0 	.word	0x200017e0
 800bc34:	200000c8 	.word	0x200000c8

0800bc38 <ARC_VCP_SetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *ARC_VCP_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
 800bc38:	b920      	cbnz	r0, 800bc44 <ARC_VCP_SetLineCoding+0xc>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 800bc3a:	4b03      	ldr	r3, [pc, #12]	; (800bc48 <ARC_VCP_SetLineCoding+0x10>)
 800bc3c:	2208      	movs	r2, #8
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	821a      	strh	r2, [r3, #16]
    return NULL;
 800bc42:	4770      	bx	lr
  }
  return(uint8_t *)&linecoding;
 800bc44:	4801      	ldr	r0, [pc, #4]	; (800bc4c <ARC_VCP_SetLineCoding+0x14>)
}
 800bc46:	4770      	bx	lr
 800bc48:	200017e0 	.word	0x200017e0
 800bc4c:	200000c8 	.word	0x200000c8

0800bc50 <ARC_Data_Setup>:
RESULT ARC_Data_Setup(uint8_t RequestNo)
{
  uint8_t *(*CopyRoutine)(uint16_t);
  CopyRoutine = NULL;

  if ((RequestNo == GET_DESCRIPTOR)
 800bc50:	2806      	cmp	r0, #6
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT ARC_Data_Setup(uint8_t RequestNo)
{
 800bc52:	b510      	push	{r4, lr}
 800bc54:	4a21      	ldr	r2, [pc, #132]	; (800bcdc <ARC_Data_Setup+0x8c>)
  uint8_t *(*CopyRoutine)(uint16_t);
  CopyRoutine = NULL;

  if ((RequestNo == GET_DESCRIPTOR)
 800bc56:	d114      	bne.n	800bc82 <ARC_Data_Setup+0x32>
      && (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800bc58:	6813      	ldr	r3, [r2, #0]
 800bc5a:	7819      	ldrb	r1, [r3, #0]
      && (pInformation->USBwIndex0 >= 0 || pInformation->USBwIndex0 <= 3))
 800bc5c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800bc60:	2901      	cmp	r1, #1
 800bc62:	d10e      	bne.n	800bc82 <ARC_Data_Setup+0x32>
  {
    if (pInformation->USBwValue1 == REPORT_DESCRIPTOR)
 800bc64:	7899      	ldrb	r1, [r3, #2]
 800bc66:	2922      	cmp	r1, #34	; 0x22
 800bc68:	d107      	bne.n	800bc7a <ARC_Data_Setup+0x2a>
    {
      if (pInformation->USBwIndex0 == 0) {
 800bc6a:	7959      	ldrb	r1, [r3, #5]
 800bc6c:	b1d1      	cbz	r1, 800bca4 <ARC_Data_Setup+0x54>
        CopyRoutine = ARC_GetKBReportDescriptor;
      } else if (pInformation->USBwIndex0 == 1) {
        CopyRoutine = ARC_GetMouseReportDescriptor;
 800bc6e:	4b1c      	ldr	r3, [pc, #112]	; (800bce0 <ARC_Data_Setup+0x90>)
 800bc70:	481c      	ldr	r0, [pc, #112]	; (800bce4 <ARC_Data_Setup+0x94>)
 800bc72:	2901      	cmp	r1, #1
 800bc74:	bf18      	it	ne
 800bc76:	4603      	movne	r3, r0
 800bc78:	e00c      	b.n	800bc94 <ARC_Data_Setup+0x44>
      } else { // ix 2 | | 3
        CopyRoutine = ARC_GetJoystickReportDescriptor;
      }
    }
    else if (pInformation->USBwValue1 == HID_DESCRIPTOR_TYPE)
 800bc7a:	2921      	cmp	r1, #33	; 0x21
 800bc7c:	d014      	beq.n	800bca8 <ARC_Data_Setup+0x58>



  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 800bc7e:	2002      	movs	r0, #2
 800bc80:	bd10      	pop	{r4, pc}
    }

  } /* End of GET_DESCRIPTOR */

  /*** GET_PROTOCOL ***/
  else if ((Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800bc82:	6813      	ldr	r3, [r2, #0]
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc8a:	2b21      	cmp	r3, #33	; 0x21
 800bc8c:	d112      	bne.n	800bcb4 <ARC_Data_Setup+0x64>
           && RequestNo == GET_PROTOCOL)
 800bc8e:	2803      	cmp	r0, #3
 800bc90:	d10c      	bne.n	800bcac <ARC_Data_Setup+0x5c>
  {
    CopyRoutine = ARC_GetProtocolValue;
 800bc92:	4b15      	ldr	r3, [pc, #84]	; (800bce8 <ARC_Data_Setup+0x98>)

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }
  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 800bc94:	6812      	ldr	r2, [r2, #0]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 800bc96:	2400      	movs	r4, #0
  (*CopyRoutine)(0);
 800bc98:	4620      	mov	r0, r4

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }
  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 800bc9a:	6193      	str	r3, [r2, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 800bc9c:	8254      	strh	r4, [r2, #18]
  (*CopyRoutine)(0);
 800bc9e:	4798      	blx	r3
  return USB_SUCCESS;
 800bca0:	4620      	mov	r0, r4
 800bca2:	bd10      	pop	{r4, pc}
      && (pInformation->USBwIndex0 >= 0 || pInformation->USBwIndex0 <= 3))
  {
    if (pInformation->USBwValue1 == REPORT_DESCRIPTOR)
    {
      if (pInformation->USBwIndex0 == 0) {
        CopyRoutine = ARC_GetKBReportDescriptor;
 800bca4:	4b11      	ldr	r3, [pc, #68]	; (800bcec <ARC_Data_Setup+0x9c>)
 800bca6:	e7f5      	b.n	800bc94 <ARC_Data_Setup+0x44>
        CopyRoutine = ARC_GetJoystickReportDescriptor;
      }
    }
    else if (pInformation->USBwValue1 == HID_DESCRIPTOR_TYPE)
    {
      CopyRoutine = ARC_GetHIDDescriptor;
 800bca8:	4b11      	ldr	r3, [pc, #68]	; (800bcf0 <ARC_Data_Setup+0xa0>)
 800bcaa:	e7f3      	b.n	800bc94 <ARC_Data_Setup+0x44>
           && RequestNo == GET_PROTOCOL)
  {
    CopyRoutine = ARC_GetProtocolValue;
  }
  /*** SET_CONFIGURATION ***/
  else if (RequestNo == SET_CONFIGURATION) {
 800bcac:	2809      	cmp	r0, #9
 800bcae:	d111      	bne.n	800bcd4 <ARC_Data_Setup+0x84>
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = ARC_set_configuration;
 800bcb0:	4b10      	ldr	r3, [pc, #64]	; (800bcf4 <ARC_Data_Setup+0xa4>)
 800bcb2:	e7ef      	b.n	800bc94 <ARC_Data_Setup+0x44>
           && RequestNo == GET_PROTOCOL)
  {
    CopyRoutine = ARC_GetProtocolValue;
  }
  /*** SET_CONFIGURATION ***/
  else if (RequestNo == SET_CONFIGURATION) {
 800bcb4:	2809      	cmp	r0, #9
 800bcb6:	d0e2      	beq.n	800bc7e <ARC_Data_Setup+0x2e>
      CopyRoutine = ARC_set_configuration;
    }
  }
#ifdef CONFIG_ARCHID_VCD

  else if (RequestNo == GET_LINE_CODING)
 800bcb8:	2821      	cmp	r0, #33	; 0x21
 800bcba:	d0e0      	beq.n	800bc7e <ARC_Data_Setup+0x2e>
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = ARC_VCP_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 800bcbc:	2820      	cmp	r0, #32
 800bcbe:	d1de      	bne.n	800bc7e <ARC_Data_Setup+0x2e>
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT ARC_Data_Setup(uint8_t RequestNo)
{
  uint8_t *(*CopyRoutine)(uint16_t);
  CopyRoutine = NULL;
 800bcc0:	490d      	ldr	r1, [pc, #52]	; (800bcf8 <ARC_Data_Setup+0xa8>)
 800bcc2:	2b21      	cmp	r3, #33	; 0x21
 800bcc4:	bf0c      	ite	eq
 800bcc6:	460b      	moveq	r3, r1
 800bcc8:	2300      	movne	r3, #0
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = ARC_VCP_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 800bcca:	490c      	ldr	r1, [pc, #48]	; (800bcfc <ARC_Data_Setup+0xac>)
 800bccc:	7048      	strb	r0, [r1, #1]
  }
#endif



  if (CopyRoutine == NULL)
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d1e0      	bne.n	800bc94 <ARC_Data_Setup+0x44>
 800bcd2:	e7d4      	b.n	800bc7e <ARC_Data_Setup+0x2e>
      CopyRoutine = ARC_set_configuration;
    }
  }
#ifdef CONFIG_ARCHID_VCD

  else if (RequestNo == GET_LINE_CODING)
 800bcd4:	2821      	cmp	r0, #33	; 0x21
 800bcd6:	d1f1      	bne.n	800bcbc <ARC_Data_Setup+0x6c>
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = ARC_VCP_GetLineCoding;
 800bcd8:	4b09      	ldr	r3, [pc, #36]	; (800bd00 <ARC_Data_Setup+0xb0>)
 800bcda:	e7db      	b.n	800bc94 <ARC_Data_Setup+0x44>
 800bcdc:	200017e0 	.word	0x200017e0
 800bce0:	0800bf25 	.word	0x0800bf25
 800bce4:	0800bf31 	.word	0x0800bf31
 800bce8:	0800bd13 	.word	0x0800bd13
 800bcec:	0800bf19 	.word	0x0800bf19
 800bcf0:	0800bf3d 	.word	0x0800bf3d
 800bcf4:	0800bc0b 	.word	0x0800bc0b
 800bcf8:	0800bc39 	.word	0x0800bc39
 800bcfc:	20000c44 	.word	0x20000c44
 800bd00:	0800bc21 	.word	0x0800bc21

0800bd04 <ARC_Get_Interface_Setting>:
* Output         : None.
* Return         : USB_SUCCESS or USB_UNSUPPORT.
*******************************************************************************/
RESULT ARC_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
 800bd04:	b109      	cbz	r1, 800bd0a <ARC_Get_Interface_Setting+0x6>
  {
    return USB_UNSUPPORT;
 800bd06:	2002      	movs	r0, #2
 800bd08:	4770      	bx	lr
  }
#if defined(CONFIG_ARCHID_VCD) && !defined(CONFIG_ANNOYATRON)
  else if (Interface > 1)
 800bd0a:	2801      	cmp	r0, #1
 800bd0c:	d8fb      	bhi.n	800bd06 <ARC_Get_Interface_Setting+0x2>
    else if (Interface > 0)
#endif
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
 800bd0e:	4608      	mov	r0, r1
}
 800bd10:	4770      	bx	lr

0800bd12 <ARC_GetProtocolValue>:
* Output         : None.
* Return         : address of the protocol value.
*******************************************************************************/
uint8_t *ARC_GetProtocolValue(uint16_t Length)
{
  if (Length == 0)
 800bd12:	b920      	cbnz	r0, 800bd1e <ARC_GetProtocolValue+0xc>
  {
    pInformation->Ctrl_Info.Usb_wLength = 1;
 800bd14:	4b03      	ldr	r3, [pc, #12]	; (800bd24 <ARC_GetProtocolValue+0x12>)
 800bd16:	2201      	movs	r2, #1
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	821a      	strh	r2, [r3, #16]
    return NULL;
 800bd1c:	4770      	bx	lr
  }
  else
  {
    return (uint8_t *)(&ProtocolValue);
 800bd1e:	4802      	ldr	r0, [pc, #8]	; (800bd28 <ARC_GetProtocolValue+0x16>)
  }
}
 800bd20:	4770      	bx	lr
 800bd22:	bf00      	nop
 800bd24:	200017e0 	.word	0x200017e0
 800bd28:	200017ec 	.word	0x200017ec

0800bd2c <ARC_init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void ARC_init(void)
{
 800bd2c:	b510      	push	{r4, lr}
  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 800bd2e:	f7ff fcb9 	bl	800b6a4 <Get_SerialNum>

  pInformation->Current_Configuration = 0;
 800bd32:	4b05      	ldr	r3, [pc, #20]	; (800bd48 <ARC_init+0x1c>)
 800bd34:	2400      	movs	r4, #0
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	729c      	strb	r4, [r3, #10]
  /* Connect the device */
  PowerOn();
 800bd3a:	f000 f927 	bl	800bf8c <PowerOn>

  /* Perform basic device initialization operations */
  USB_SIL_Init();
 800bd3e:	f000 fdd3 	bl	800c8e8 <USB_SIL_Init>

  bDeviceState = UNCONNECTED;
 800bd42:	4b02      	ldr	r3, [pc, #8]	; (800bd4c <ARC_init+0x20>)
 800bd44:	601c      	str	r4, [r3, #0]
 800bd46:	bd10      	pop	{r4, pc}
 800bd48:	200017e0 	.word	0x200017e0
 800bd4c:	20000c4c 	.word	0x20000c4c

0800bd50 <ARC_Reset>:
* Return         : None.
*******************************************************************************/
void ARC_Reset(void)
{
  /* Set ARC_DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 800bd50:	4b5f      	ldr	r3, [pc, #380]	; (800bed0 <ARC_Reset+0x180>)
  pInformation->Current_Interface = 0;/*the default Interface*/

  /* Current Feature initialization */
  pInformation->Current_Feature = ARC_config_descriptor[7];
 800bd52:	4a60      	ldr	r2, [pc, #384]	; (800bed4 <ARC_Reset+0x184>)
* Return         : None.
*******************************************************************************/
void ARC_Reset(void)
{
  /* Set ARC_DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 800bd54:	681b      	ldr	r3, [r3, #0]
  pInformation->Current_Interface = 0;/*the default Interface*/

  /* Current Feature initialization */
  pInformation->Current_Feature = ARC_config_descriptor[7];
 800bd56:	79d2      	ldrb	r2, [r2, #7]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void ARC_Reset(void)
{
 800bd58:	b510      	push	{r4, lr}
  /* Set ARC_DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 800bd5a:	2400      	movs	r4, #0
  pInformation->Current_Interface = 0;/*the default Interface*/

  /* Current Feature initialization */
  pInformation->Current_Feature = ARC_config_descriptor[7];
 800bd5c:	725a      	strb	r2, [r3, #9]
* Return         : None.
*******************************************************************************/
void ARC_Reset(void)
{
  /* Set ARC_DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 800bd5e:	729c      	strb	r4, [r3, #10]
  pInformation->Current_Interface = 0;/*the default Interface*/
 800bd60:	72dc      	strb	r4, [r3, #11]

  /* Current Feature initialization */
  pInformation->Current_Feature = ARC_config_descriptor[7];
  SetBTABLE(BTABLE_ADDRESS);
 800bd62:	4620      	mov	r0, r4
 800bd64:	f000 fa18 	bl	800c198 <SetBTABLE>
  /* Initialize Endpoint 0 */

  SetEPType(ENDP0, EP_CONTROL);
 800bd68:	4620      	mov	r0, r4
 800bd6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bd6e:	f000 fa30 	bl	800c1d2 <SetEPType>
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 800bd72:	4620      	mov	r0, r4
 800bd74:	2110      	movs	r1, #16
 800bd76:	f000 fa41 	bl	800c1fc <SetEPTxStatus>
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	2140      	movs	r1, #64	; 0x40
 800bd7e:	f000 fba9 	bl	800c4d4 <SetEPRxAddr>
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 800bd82:	2180      	movs	r1, #128	; 0x80
 800bd84:	4620      	mov	r0, r4
 800bd86:	f000 fb94 	bl	800c4b2 <SetEPTxAddr>
  Clear_Status_Out(ENDP0);
 800bd8a:	4620      	mov	r0, r4
 800bd8c:	f000 fac8 	bl	800c320 <Clear_Status_Out>
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800bd90:	4b51      	ldr	r3, [pc, #324]	; (800bed8 <ARC_Reset+0x188>)
 800bd92:	4620      	mov	r0, r4
 800bd94:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 800bd98:	f000 fbea 	bl	800c570 <SetEPRxCount>
  SetEPRxValid(ENDP0);
 800bd9c:	4620      	mov	r0, r4
 800bd9e:	f000 fa90 	bl	800c2c2 <SetEPRxValid>

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_INTERRUPT);
 800bda2:	2001      	movs	r0, #1
 800bda4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800bda8:	f000 fa13 	bl	800c1d2 <SetEPType>
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 800bdac:	2001      	movs	r0, #1
 800bdae:	21c0      	movs	r1, #192	; 0xc0
 800bdb0:	f000 fb7f 	bl	800c4b2 <SetEPTxAddr>
  SetEPTxCount(ENDP1, USB_KB_REPORT_KEYMAP_SIZE);
 800bdb4:	2001      	movs	r0, #1
 800bdb6:	2120      	movs	r1, #32
 800bdb8:	f000 fbb8 	bl	800c52c <SetEPTxCount>
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 800bdbc:	2001      	movs	r0, #1
 800bdbe:	4621      	mov	r1, r4
 800bdc0:	f000 fa33 	bl	800c22a <SetEPRxStatus>
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 800bdc4:	2001      	movs	r0, #1
 800bdc6:	2120      	movs	r1, #32
 800bdc8:	f000 fa18 	bl	800c1fc <SetEPTxStatus>

  /* Initialize Endpoint 2 */
  SetEPType(ENDP2, EP_INTERRUPT);
 800bdcc:	2002      	movs	r0, #2
 800bdce:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800bdd2:	f000 f9fe 	bl	800c1d2 <SetEPType>
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 800bdd6:	2002      	movs	r0, #2
 800bdd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bddc:	f000 fb69 	bl	800c4b2 <SetEPTxAddr>
  SetEPTxCount(ENDP2, 8);
 800bde0:	2002      	movs	r0, #2
 800bde2:	2108      	movs	r1, #8
 800bde4:	f000 fba2 	bl	800c52c <SetEPTxCount>
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 800bde8:	2002      	movs	r0, #2
 800bdea:	4621      	mov	r1, r4
 800bdec:	f000 fa1d 	bl	800c22a <SetEPRxStatus>
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 800bdf0:	2002      	movs	r0, #2
 800bdf2:	2120      	movs	r1, #32
 800bdf4:	f000 fa02 	bl	800c1fc <SetEPTxStatus>

#ifndef CONFIG_ANNOYATRON

  /* Initialize Endpoint 3 */
  SetEPType(ENDP3, EP_INTERRUPT);
 800bdf8:	2003      	movs	r0, #3
 800bdfa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800bdfe:	f000 f9e8 	bl	800c1d2 <SetEPType>
  SetEPTxAddr(ENDP3, ENDP3_TXADDR);
 800be02:	2003      	movs	r0, #3
 800be04:	f44f 7184 	mov.w	r1, #264	; 0x108
 800be08:	f000 fb53 	bl	800c4b2 <SetEPTxAddr>
  SetEPTxCount(ENDP3, 8);
 800be0c:	2003      	movs	r0, #3
 800be0e:	2108      	movs	r1, #8
 800be10:	f000 fb8c 	bl	800c52c <SetEPTxCount>
  SetEPRxStatus(ENDP3, EP_RX_DIS);
 800be14:	2003      	movs	r0, #3
 800be16:	4621      	mov	r1, r4
 800be18:	f000 fa07 	bl	800c22a <SetEPRxStatus>
  SetEPTxStatus(ENDP3, EP_TX_NAK);
 800be1c:	2003      	movs	r0, #3
 800be1e:	2120      	movs	r1, #32
 800be20:	f000 f9ec 	bl	800c1fc <SetEPTxStatus>

  /* Initialize Endpoint 4 */
  SetEPType(ENDP4, EP_INTERRUPT);
 800be24:	2004      	movs	r0, #4
 800be26:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800be2a:	f000 f9d2 	bl	800c1d2 <SetEPType>
  SetEPTxAddr(ENDP4, ENDP4_TXADDR);
 800be2e:	2004      	movs	r0, #4
 800be30:	f44f 7188 	mov.w	r1, #272	; 0x110
 800be34:	f000 fb3d 	bl	800c4b2 <SetEPTxAddr>
  SetEPTxCount(ENDP4, 8);
 800be38:	2004      	movs	r0, #4
 800be3a:	2108      	movs	r1, #8
 800be3c:	f000 fb76 	bl	800c52c <SetEPTxCount>
  SetEPRxStatus(ENDP4, EP_RX_DIS);
 800be40:	2004      	movs	r0, #4
 800be42:	4621      	mov	r1, r4
 800be44:	f000 f9f1 	bl	800c22a <SetEPRxStatus>
  SetEPTxStatus(ENDP4, EP_TX_NAK);
 800be48:	2004      	movs	r0, #4
 800be4a:	2120      	movs	r1, #32
 800be4c:	f000 f9d6 	bl	800c1fc <SetEPTxStatus>

#ifdef CONFIG_ARCHID_VCD

  /* Initialize Endpoint 7 */
  SetEPType(ENDP7, EP_BULK);
 800be50:	2007      	movs	r0, #7
 800be52:	4621      	mov	r1, r4
 800be54:	f000 f9bd 	bl	800c1d2 <SetEPType>
  SetEPTxAddr(ENDP7, ENDP7_TXADDR);
 800be58:	2007      	movs	r0, #7
 800be5a:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800be5e:	f000 fb28 	bl	800c4b2 <SetEPTxAddr>
  SetEPTxStatus(ENDP7, EP_TX_NAK);
 800be62:	2007      	movs	r0, #7
 800be64:	2120      	movs	r1, #32
 800be66:	f000 f9c9 	bl	800c1fc <SetEPTxStatus>
  SetEPRxStatus(ENDP7, EP_RX_DIS);
 800be6a:	2007      	movs	r0, #7
 800be6c:	4621      	mov	r1, r4
 800be6e:	f000 f9dc 	bl	800c22a <SetEPRxStatus>

  /* Initialize Endpoint 5 */
  SetEPType(ENDP5, EP_INTERRUPT);
 800be72:	2005      	movs	r0, #5
 800be74:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800be78:	f000 f9ab 	bl	800c1d2 <SetEPType>
  SetEPTxAddr(ENDP5, ENDP5_TXADDR);
 800be7c:	2005      	movs	r0, #5
 800be7e:	f44f 718c 	mov.w	r1, #280	; 0x118
 800be82:	f000 fb16 	bl	800c4b2 <SetEPTxAddr>
  SetEPRxStatus(ENDP5, EP_RX_DIS);
 800be86:	2005      	movs	r0, #5
 800be88:	4621      	mov	r1, r4
 800be8a:	f000 f9ce 	bl	800c22a <SetEPRxStatus>
  SetEPTxStatus(ENDP5, EP_TX_NAK);
 800be8e:	2005      	movs	r0, #5
 800be90:	2120      	movs	r1, #32
 800be92:	f000 f9b3 	bl	800c1fc <SetEPTxStatus>

  /* Initialize Endpoint 6 */
  SetEPType(ENDP6, EP_BULK);
 800be96:	2006      	movs	r0, #6
 800be98:	4621      	mov	r1, r4
 800be9a:	f000 f99a 	bl	800c1d2 <SetEPType>
  SetEPRxAddr(ENDP6, ENDP6_RXADDR);
 800be9e:	2006      	movs	r0, #6
 800bea0:	f44f 7190 	mov.w	r1, #288	; 0x120
 800bea4:	f000 fb16 	bl	800c4d4 <SetEPRxAddr>
  SetEPRxCount(ENDP6, VIRTUAL_COM_PORT_DATA_SIZE);
 800bea8:	2006      	movs	r0, #6
 800beaa:	2140      	movs	r1, #64	; 0x40
 800beac:	f000 fb60 	bl	800c570 <SetEPRxCount>
  SetEPRxStatus(ENDP6, EP_RX_VALID);
 800beb0:	2006      	movs	r0, #6
 800beb2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800beb6:	f000 f9b8 	bl	800c22a <SetEPRxStatus>
  SetEPTxStatus(ENDP6, EP_TX_DIS);
 800beba:	2006      	movs	r0, #6
 800bebc:	4621      	mov	r1, r4
 800bebe:	f000 f99d 	bl	800c1fc <SetEPTxStatus>

#endif
#endif // CONFIG_ANNOYATRON

  /* Set this device to response on default address */
  SetDeviceAddress(0);
 800bec2:	4620      	mov	r0, r4
 800bec4:	f7ff fa38 	bl	800b338 <SetDeviceAddress>
  bDeviceState = ATTACHED;
 800bec8:	4b04      	ldr	r3, [pc, #16]	; (800bedc <ARC_Reset+0x18c>)
 800beca:	2201      	movs	r2, #1
 800becc:	601a      	str	r2, [r3, #0]
 800bece:	bd10      	pop	{r4, pc}
 800bed0:	200017e0 	.word	0x200017e0
 800bed4:	0800eebb 	.word	0x0800eebb
 800bed8:	200000c8 	.word	0x200000c8
 800bedc:	20000c4c 	.word	0x20000c4c

0800bee0 <ARC_GetDeviceDescriptor>:
* Output         : None.
* Return         : The address of the device descriptor.
*******************************************************************************/
uint8_t *ARC_GetDeviceDescriptor(uint16_t Length)
{
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 800bee0:	4901      	ldr	r1, [pc, #4]	; (800bee8 <ARC_GetDeviceDescriptor+0x8>)
 800bee2:	f7ff b825 	b.w	800af30 <Standard_GetDescriptorData>
 800bee6:	bf00      	nop
 800bee8:	20000100 	.word	0x20000100

0800beec <ARC_GetConfigDescriptor>:
* Output         : None.
* Return         : The address of the configuration descriptor.
*******************************************************************************/
uint8_t *ARC_GetConfigDescriptor(uint16_t Length)
{
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 800beec:	4901      	ldr	r1, [pc, #4]	; (800bef4 <ARC_GetConfigDescriptor+0x8>)
 800beee:	f7ff b81f 	b.w	800af30 <Standard_GetDescriptorData>
 800bef2:	bf00      	nop
 800bef4:	20000108 	.word	0x20000108

0800bef8 <ARC_GetStringDescriptor>:
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
uint8_t *ARC_GetStringDescriptor(uint16_t Length)
{
  uint8_t wValue0 = pInformation->USBwValue0;
 800bef8:	4b05      	ldr	r3, [pc, #20]	; (800bf10 <ARC_GetStringDescriptor+0x18>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	78db      	ldrb	r3, [r3, #3]
  if (wValue0 > 4)
 800befe:	2b04      	cmp	r3, #4
 800bf00:	d804      	bhi.n	800bf0c <ARC_GetStringDescriptor+0x14>
  {
    return NULL;
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 800bf02:	4904      	ldr	r1, [pc, #16]	; (800bf14 <ARC_GetStringDescriptor+0x1c>)
 800bf04:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bf08:	f7ff b812 	b.w	800af30 <Standard_GetDescriptorData>
  }
}
 800bf0c:	2000      	movs	r0, #0
 800bf0e:	4770      	bx	lr
 800bf10:	200017e0 	.word	0x200017e0
 800bf14:	20000110 	.word	0x20000110

0800bf18 <ARC_GetKBReportDescriptor>:
* Output         : None.
* Return         : The address of the configuration descriptor.
*******************************************************************************/
uint8_t *ARC_GetKBReportDescriptor(uint16_t Length)
{
  return Standard_GetDescriptorData(Length, &ARC_KB_Report_Descriptor);
 800bf18:	4901      	ldr	r1, [pc, #4]	; (800bf20 <ARC_GetKBReportDescriptor+0x8>)
 800bf1a:	f7ff b809 	b.w	800af30 <Standard_GetDescriptorData>
 800bf1e:	bf00      	nop
 800bf20:	20000130 	.word	0x20000130

0800bf24 <ARC_GetMouseReportDescriptor>:
}
uint8_t *ARC_GetMouseReportDescriptor(uint16_t Length)
{
  return Standard_GetDescriptorData(Length, &ARC_MOUSE_Report_Descriptor);
 800bf24:	4901      	ldr	r1, [pc, #4]	; (800bf2c <ARC_GetMouseReportDescriptor+0x8>)
 800bf26:	f7ff b803 	b.w	800af30 <Standard_GetDescriptorData>
 800bf2a:	bf00      	nop
 800bf2c:	20000138 	.word	0x20000138

0800bf30 <ARC_GetJoystickReportDescriptor>:
}
uint8_t *ARC_GetJoystickReportDescriptor(uint16_t Length)
{
  return Standard_GetDescriptorData(Length, &ARC_JOYSTICK_Report_Descriptor);
 800bf30:	4901      	ldr	r1, [pc, #4]	; (800bf38 <ARC_GetJoystickReportDescriptor+0x8>)
 800bf32:	f7fe bffd 	b.w	800af30 <Standard_GetDescriptorData>
 800bf36:	bf00      	nop
 800bf38:	20000140 	.word	0x20000140

0800bf3c <ARC_GetHIDDescriptor>:
* Output         : None.
* Return         : The address of the configuration descriptor.
*******************************************************************************/
uint8_t *ARC_GetHIDDescriptor(uint16_t Length)
{
  return Standard_GetDescriptorData(Length, &ARC_Hid_Descriptor);
 800bf3c:	4901      	ldr	r1, [pc, #4]	; (800bf44 <ARC_GetHIDDescriptor+0x8>)
 800bf3e:	f7fe bff7 	b.w	800af30 <Standard_GetDescriptorData>
 800bf42:	bf00      	nop
 800bf44:	20000148 	.word	0x20000148

0800bf48 <ARC_SetProtocol>:
* Output         : None.
* Return         : USB SUCCESS.
*******************************************************************************/
RESULT ARC_SetProtocol(void)
{
  uint8_t wValue0 = pInformation->USBwValue0;
 800bf48:	4b03      	ldr	r3, [pc, #12]	; (800bf58 <ARC_SetProtocol+0x10>)
  ProtocolValue = wValue0;
  return USB_SUCCESS;
}
 800bf4a:	2000      	movs	r0, #0
* Output         : None.
* Return         : USB SUCCESS.
*******************************************************************************/
RESULT ARC_SetProtocol(void)
{
  uint8_t wValue0 = pInformation->USBwValue0;
 800bf4c:	681b      	ldr	r3, [r3, #0]
  ProtocolValue = wValue0;
 800bf4e:	78da      	ldrb	r2, [r3, #3]
 800bf50:	4b02      	ldr	r3, [pc, #8]	; (800bf5c <ARC_SetProtocol+0x14>)
 800bf52:	601a      	str	r2, [r3, #0]
  return USB_SUCCESS;
}
 800bf54:	4770      	bx	lr
 800bf56:	bf00      	nop
 800bf58:	200017e0 	.word	0x200017e0
 800bf5c:	200017ec 	.word	0x200017ec

0800bf60 <ARC_NoData_Setup>:
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT ARC_NoData_Setup(uint8_t RequestNo)
{
  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
 800bf60:	4b09      	ldr	r3, [pc, #36]	; (800bf88 <ARC_NoData_Setup+0x28>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf6a:	2b21      	cmp	r3, #33	; 0x21
 800bf6c:	d10a      	bne.n	800bf84 <ARC_NoData_Setup+0x24>
    if (RequestNo == SET_PROTOCOL)
 800bf6e:	280b      	cmp	r0, #11
 800bf70:	d101      	bne.n	800bf76 <ARC_NoData_Setup+0x16>
    {
      return ARC_SetProtocol();
 800bf72:	f7ff bfe9 	b.w	800bf48 <ARC_SetProtocol>
    }
#ifdef CONFIG_ARCHID_VCD
    else if (RequestNo == SET_COMM_FEATURE)
 800bf76:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    {
      return USB_SUCCESS;
 800bf7a:	2802      	cmp	r0, #2
 800bf7c:	bf14      	ite	ne
 800bf7e:	2002      	movne	r0, #2
 800bf80:	2000      	moveq	r0, #0
 800bf82:	4770      	bx	lr
    {
      return USB_SUCCESS;
    }
#endif
  }
  return USB_UNSUPPORT;
 800bf84:	2002      	movs	r0, #2
}
 800bf86:	4770      	bx	lr
 800bf88:	200017e0 	.word	0x200017e0

0800bf8c <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 800bf8c:	b508      	push	{r3, lr}
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 800bf8e:	2001      	movs	r0, #1
 800bf90:	f7ff faca 	bl	800b528 <USB_Cable_Config>

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 800bf94:	4b06      	ldr	r3, [pc, #24]	; (800bfb0 <PowerOn+0x24>)
 800bf96:	2201      	movs	r2, #1
 800bf98:	601a      	str	r2, [r3, #0]

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 800bf9a:	4a06      	ldr	r2, [pc, #24]	; (800bfb4 <PowerOn+0x28>)
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 800bf9c:	2000      	movs	r0, #0
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800bf9e:	4906      	ldr	r1, [pc, #24]	; (800bfb8 <PowerOn+0x2c>)
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 800bfa0:	6018      	str	r0, [r3, #0]
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 800bfa2:	6010      	str	r0, [r2, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800bfa4:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800bfa8:	800a      	strh	r2, [r1, #0]
  _SetCNTR(wInterrupt_Mask);
 800bfaa:	601a      	str	r2, [r3, #0]
  
  return USB_SUCCESS;
}
 800bfac:	bd08      	pop	{r3, pc}
 800bfae:	bf00      	nop
 800bfb0:	40005c40 	.word	0x40005c40
 800bfb4:	40005c44 	.word	0x40005c44
 800bfb8:	200017e4 	.word	0x200017e4

0800bfbc <PowerOff>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOff()
{
 800bfbc:	b538      	push	{r3, r4, r5, lr}
  /* disable all interrupts and force USB reset */
  _SetCNTR(CNTR_FRES);
 800bfbe:	4d06      	ldr	r5, [pc, #24]	; (800bfd8 <PowerOff+0x1c>)
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	602b      	str	r3, [r5, #0]
  /* clear interrupt status register */
  _SetISTR(0);
 800bfc4:	4b05      	ldr	r3, [pc, #20]	; (800bfdc <PowerOff+0x20>)
 800bfc6:	2400      	movs	r4, #0
 800bfc8:	601c      	str	r4, [r3, #0]
  /* Disable the Pull-Up*/
  USB_Cable_Config(DISABLE);
 800bfca:	4620      	mov	r0, r4
 800bfcc:	f7ff faac 	bl	800b528 <USB_Cable_Config>
  /* switch-off device */
  _SetCNTR(CNTR_FRES + CNTR_PDWN);
 800bfd0:	2303      	movs	r3, #3
 800bfd2:	602b      	str	r3, [r5, #0]
  /* sw variables reset */
  /* ... */

  return USB_SUCCESS;
}
 800bfd4:	4620      	mov	r0, r4
 800bfd6:	bd38      	pop	{r3, r4, r5, pc}
 800bfd8:	40005c40 	.word	0x40005c40
 800bfdc:	40005c44 	.word	0x40005c44

0800bfe0 <Suspend>:
	uint32_t i =0;
	uint16_t wCNTR;
	//uint32_t tmpreg = 0;
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 800bfe0:	4b25      	ldr	r3, [pc, #148]	; (800c078 <Suspend+0x98>)
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 800bfe2:	b510      	push	{r4, lr}
	uint32_t i =0;
	uint16_t wCNTR;
	//uint32_t tmpreg = 0;
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 800bfe4:	681a      	ldr	r2, [r3, #0]

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 800bfe6:	4925      	ldr	r1, [pc, #148]	; (800c07c <Suspend+0x9c>)
	uint32_t i =0;
	uint16_t wCNTR;
	//uint32_t tmpreg = 0;
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 800bfe8:	b292      	uxth	r2, r2

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 800bfea:	2300      	movs	r3, #0
 800bfec:	f103 5080 	add.w	r0, r3, #268435456	; 0x10000000
 800bff0:	f500 50b8 	add.w	r0, r0, #5888	; 0x1700
 800bff4:	0080      	lsls	r0, r0, #2
 800bff6:	6800      	ldr	r0, [r0, #0]
 800bff8:	4c20      	ldr	r4, [pc, #128]	; (800c07c <Suspend+0x9c>)
 800bffa:	b280      	uxth	r0, r0
 800bffc:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800c000:	3301      	adds	r3, #1
 800c002:	2b08      	cmp	r3, #8
 800c004:	d1f2      	bne.n	800bfec <Suspend+0xc>
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
 800c006:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
	_SetCNTR(wCNTR);
 800c00a:	4b1b      	ldr	r3, [pc, #108]	; (800c078 <Suspend+0x98>)
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 800c00c:	f022 0201 	bic.w	r2, r2, #1
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 800c010:	b288      	uxth	r0, r1
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 800c012:	b292      	uxth	r2, r2
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 800c014:	f041 0101 	orr.w	r1, r1, #1
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 800c018:	6018      	str	r0, [r3, #0]
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 800c01a:	6019      	str	r1, [r3, #0]
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
 800c01c:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
 800c020:	6019      	str	r1, [r3, #0]
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 800c022:	4917      	ldr	r1, [pc, #92]	; (800c080 <Suspend+0xa0>)
 800c024:	680b      	ldr	r3, [r1, #0]
 800c026:	0558      	lsls	r0, r3, #21
 800c028:	d5fc      	bpl.n	800c024 <Suspend+0x44>
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
 800c02a:	4b15      	ldr	r3, [pc, #84]	; (800c080 <Suspend+0xa0>)
 800c02c:	f64f 31ff 	movw	r1, #64511	; 0xfbff
 800c030:	6019      	str	r1, [r3, #0]
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 800c032:	2300      	movs	r3, #0
	_SetENDPOINT(i, EP[i]);
 800c034:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800c038:	f103 5180 	add.w	r1, r3, #268435456	; 0x10000000
 800c03c:	f501 51b8 	add.w	r1, r1, #5888	; 0x1700
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 800c040:	3301      	adds	r3, #1
 800c042:	0089      	lsls	r1, r1, #2
	_SetENDPOINT(i, EP[i]);
 800c044:	b280      	uxth	r0, r0
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 800c046:	2b08      	cmp	r3, #8
	_SetENDPOINT(i, EP[i]);
 800c048:	6008      	str	r0, [r1, #0]
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 800c04a:	d1f3      	bne.n	800c034 <Suspend+0x54>
	_SetENDPOINT(i, EP[i]);
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 800c04c:	4b0a      	ldr	r3, [pc, #40]	; (800c078 <Suspend+0x98>)
 800c04e:	f442 6281 	orr.w	r2, r2, #1032	; 0x408
 800c052:	601a      	str	r2, [r3, #0]
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
 800c054:	681a      	ldr	r2, [r3, #0]
 800c056:	b292      	uxth	r2, r2
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
 800c058:	f042 0204 	orr.w	r2, r2, #4
 800c05c:	601a      	str	r2, [r3, #0]
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
 800c05e:	4a08      	ldr	r2, [pc, #32]	; (800c080 <Suspend+0xa0>)
 800c060:	6811      	ldr	r1, [r2, #0]
 800c062:	04c9      	lsls	r1, r1, #19
 800c064:	d507      	bpl.n	800c076 <Suspend+0x96>
	{
	}
	else
	{
		/* Clear Wakeup flag */
		_SetISTR(CLR_WKUP);
 800c066:	f64e 71ff 	movw	r1, #61439	; 0xefff
 800c06a:	6011      	str	r1, [r2, #0]
		/* clear FSUSP to abort entry in suspend mode  */
        wCNTR = _GetCNTR();
 800c06c:	6819      	ldr	r1, [r3, #0]
        wCNTR&=~CNTR_FSUSP;
        _SetCNTR(wCNTR);
 800c06e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800c072:	400a      	ands	r2, r1
 800c074:	601a      	str	r2, [r3, #0]
 800c076:	bd10      	pop	{r4, pc}
 800c078:	40005c40 	.word	0x40005c40
 800c07c:	200017f4 	.word	0x200017f4
 800c080:	40005c44 	.word	0x40005c44

0800c084 <Resume_Init>:
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 800c084:	4b04      	ldr	r3, [pc, #16]	; (800c098 <Resume_Init+0x14>)
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
 800c086:	f64f 72fb 	movw	r2, #65531	; 0xfffb
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 800c08a:	6819      	ldr	r1, [r3, #0]
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
 800c08c:	400a      	ands	r2, r1
 800c08e:	601a      	str	r2, [r3, #0]
  /* restore full power */
  /* ... on connected devices */
  //Leave_LowPowerMode();

  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 800c090:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
 800c094:	601a      	str	r2, [r3, #0]
 800c096:	4770      	bx	lr
 800c098:	40005c40 	.word	0x40005c40

0800c09c <Resume>:
*                  decrementing of the ESOF counter in different states.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
 800c09c:	b510      	push	{r4, lr}
 800c09e:	4c26      	ldr	r4, [pc, #152]	; (800c138 <Resume+0x9c>)
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
 800c0a0:	2807      	cmp	r0, #7
    ResumeS.eState = eResumeSetVal;
 800c0a2:	bf18      	it	ne
 800c0a4:	7020      	strbne	r0, [r4, #0]
  switch (ResumeS.eState)
 800c0a6:	7823      	ldrb	r3, [r4, #0]
 800c0a8:	2b05      	cmp	r3, #5
 800c0aa:	d841      	bhi.n	800c130 <Resume+0x94>
 800c0ac:	e8df f003 	tbb	[pc, r3]
 800c0b0:	17130b03 	.word	0x17130b03
 800c0b4:	2c21      	.short	0x2c21
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
 800c0b6:	4b21      	ldr	r3, [pc, #132]	; (800c13c <Resume+0xa0>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	b913      	cbnz	r3, 800c0c2 <Resume+0x26>
      {
        Resume_Init();
 800c0bc:	f7ff ffe2 	bl	800c084 <Resume_Init>
 800c0c0:	e036      	b.n	800c130 <Resume+0x94>
        ResumeS.eState = RESUME_OFF;
      }
      else /* RESUME detected during the RemoteWAkeup signalling => keep RemoteWakeup handling*/
      {
        ResumeS.eState = RESUME_ON;
 800c0c2:	2305      	movs	r3, #5
 800c0c4:	e035      	b.n	800c132 <Resume+0x96>
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
 800c0c6:	f7ff ffdd 	bl	800c084 <Resume_Init>
      ResumeS.eState = RESUME_START;
 800c0ca:	2304      	movs	r3, #4
 800c0cc:	7023      	strb	r3, [r4, #0]
      remotewakeupon = 1;
 800c0ce:	4b1b      	ldr	r3, [pc, #108]	; (800c13c <Resume+0xa0>)
 800c0d0:	2201      	movs	r2, #1
 800c0d2:	601a      	str	r2, [r3, #0]
      break;
 800c0d4:	bd10      	pop	{r4, pc}
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 800c0d6:	2302      	movs	r3, #2
 800c0d8:	7063      	strb	r3, [r4, #1]
      ResumeS.eState = RESUME_WAIT;
 800c0da:	2303      	movs	r3, #3
 800c0dc:	e029      	b.n	800c132 <Resume+0x96>
      break;
    case RESUME_WAIT:
      ResumeS.bESOFcnt--;
 800c0de:	7863      	ldrb	r3, [r4, #1]
 800c0e0:	3b01      	subs	r3, #1
 800c0e2:	b2db      	uxtb	r3, r3
 800c0e4:	7063      	strb	r3, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 800c0e6:	7863      	ldrb	r3, [r4, #1]
 800c0e8:	bb23      	cbnz	r3, 800c134 <Resume+0x98>
        ResumeS.eState = RESUME_START;
 800c0ea:	4b13      	ldr	r3, [pc, #76]	; (800c138 <Resume+0x9c>)
 800c0ec:	2204      	movs	r2, #4
 800c0ee:	701a      	strb	r2, [r3, #0]
 800c0f0:	bd10      	pop	{r4, pc}
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
 800c0f2:	4b13      	ldr	r3, [pc, #76]	; (800c140 <Resume+0xa4>)
 800c0f4:	681a      	ldr	r2, [r3, #0]
 800c0f6:	b292      	uxth	r2, r2
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
 800c0f8:	f042 0210 	orr.w	r2, r2, #16
 800c0fc:	601a      	str	r2, [r3, #0]
      ResumeS.eState = RESUME_ON;
 800c0fe:	2305      	movs	r3, #5
 800c100:	7023      	strb	r3, [r4, #0]
      ResumeS.bESOFcnt = 10;
 800c102:	230a      	movs	r3, #10
 800c104:	7063      	strb	r3, [r4, #1]
      break;
 800c106:	bd10      	pop	{r4, pc}
    case RESUME_ON:    
      ResumeS.bESOFcnt--;
 800c108:	7863      	ldrb	r3, [r4, #1]
 800c10a:	3b01      	subs	r3, #1
 800c10c:	b2db      	uxtb	r3, r3
 800c10e:	7063      	strb	r3, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 800c110:	7863      	ldrb	r3, [r4, #1]
 800c112:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 800c116:	b96b      	cbnz	r3, 800c134 <Resume+0x98>
      {
        wCNTR = _GetCNTR();
 800c118:	4a09      	ldr	r2, [pc, #36]	; (800c140 <Resume+0xa4>)
        wCNTR &= (~CNTR_RESUME);
        _SetCNTR(wCNTR);
 800c11a:	f64f 73ef 	movw	r3, #65519	; 0xffef
      break;
    case RESUME_ON:    
      ResumeS.bESOFcnt--;
      if (ResumeS.bESOFcnt == 0)
      {
        wCNTR = _GetCNTR();
 800c11e:	6810      	ldr	r0, [r2, #0]
        wCNTR &= (~CNTR_RESUME);
        _SetCNTR(wCNTR);
 800c120:	4003      	ands	r3, r0
 800c122:	6013      	str	r3, [r2, #0]
        ResumeS.eState = RESUME_OFF;
 800c124:	4b04      	ldr	r3, [pc, #16]	; (800c138 <Resume+0x9c>)
 800c126:	2206      	movs	r2, #6
 800c128:	701a      	strb	r2, [r3, #0]
        remotewakeupon = 0;
 800c12a:	4b04      	ldr	r3, [pc, #16]	; (800c13c <Resume+0xa0>)
 800c12c:	6019      	str	r1, [r3, #0]
 800c12e:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
      ResumeS.eState = RESUME_OFF;
 800c130:	2306      	movs	r3, #6
 800c132:	7023      	strb	r3, [r4, #0]
 800c134:	bd10      	pop	{r4, pc}
 800c136:	bf00      	nop
 800c138:	200017f0 	.word	0x200017f0
 800c13c:	20000c48 	.word	0x20000c48
 800c140:	40005c40 	.word	0x40005c40

0800c144 <SetCNTR>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetCNTR(uint16_t wRegValue)
{
  _SetCNTR(wRegValue);
 800c144:	4b01      	ldr	r3, [pc, #4]	; (800c14c <SetCNTR+0x8>)
 800c146:	6018      	str	r0, [r3, #0]
 800c148:	4770      	bx	lr
 800c14a:	bf00      	nop
 800c14c:	40005c40 	.word	0x40005c40

0800c150 <GetCNTR>:
* Output         : None.
* Return         : CNTR register Value.
*******************************************************************************/
uint16_t GetCNTR(void)
{
  return(_GetCNTR());
 800c150:	4b01      	ldr	r3, [pc, #4]	; (800c158 <GetCNTR+0x8>)
 800c152:	6818      	ldr	r0, [r3, #0]
}
 800c154:	b280      	uxth	r0, r0
 800c156:	4770      	bx	lr
 800c158:	40005c40 	.word	0x40005c40

0800c15c <SetISTR>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetISTR(uint16_t wRegValue)
{
  _SetISTR(wRegValue);
 800c15c:	4b01      	ldr	r3, [pc, #4]	; (800c164 <SetISTR+0x8>)
 800c15e:	6018      	str	r0, [r3, #0]
 800c160:	4770      	bx	lr
 800c162:	bf00      	nop
 800c164:	40005c44 	.word	0x40005c44

0800c168 <GetISTR>:
* Output         : None.
* Return         : ISTR register Value
*******************************************************************************/
uint16_t GetISTR(void)
{
  return(_GetISTR());
 800c168:	4b01      	ldr	r3, [pc, #4]	; (800c170 <GetISTR+0x8>)
 800c16a:	6818      	ldr	r0, [r3, #0]
}
 800c16c:	b280      	uxth	r0, r0
 800c16e:	4770      	bx	lr
 800c170:	40005c44 	.word	0x40005c44

0800c174 <GetFNR>:
* Output         : None.
* Return         : FNR register Value
*******************************************************************************/
uint16_t GetFNR(void)
{
  return(_GetFNR());
 800c174:	4b01      	ldr	r3, [pc, #4]	; (800c17c <GetFNR+0x8>)
 800c176:	6818      	ldr	r0, [r3, #0]
}
 800c178:	b280      	uxth	r0, r0
 800c17a:	4770      	bx	lr
 800c17c:	40005c48 	.word	0x40005c48

0800c180 <SetDADDR>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDADDR(uint16_t wRegValue)
{
  _SetDADDR(wRegValue);
 800c180:	4b01      	ldr	r3, [pc, #4]	; (800c188 <SetDADDR+0x8>)
 800c182:	6018      	str	r0, [r3, #0]
 800c184:	4770      	bx	lr
 800c186:	bf00      	nop
 800c188:	40005c4c 	.word	0x40005c4c

0800c18c <GetDADDR>:
* Output         : None.
* Return         : DADDR register Value
*******************************************************************************/
uint16_t GetDADDR(void)
{
  return(_GetDADDR());
 800c18c:	4b01      	ldr	r3, [pc, #4]	; (800c194 <GetDADDR+0x8>)
 800c18e:	6818      	ldr	r0, [r3, #0]
}
 800c190:	b280      	uxth	r0, r0
 800c192:	4770      	bx	lr
 800c194:	40005c4c 	.word	0x40005c4c

0800c198 <SetBTABLE>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
  _SetBTABLE(wRegValue);
 800c198:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800c19c:	4a01      	ldr	r2, [pc, #4]	; (800c1a4 <SetBTABLE+0xc>)
 800c19e:	4003      	ands	r3, r0
 800c1a0:	6013      	str	r3, [r2, #0]
 800c1a2:	4770      	bx	lr
 800c1a4:	40005c50 	.word	0x40005c50

0800c1a8 <GetBTABLE>:
* Output         : None.
* Return         : BTABLE address.
*******************************************************************************/
uint16_t GetBTABLE(void)
{
  return(_GetBTABLE());
 800c1a8:	4b01      	ldr	r3, [pc, #4]	; (800c1b0 <GetBTABLE+0x8>)
 800c1aa:	6818      	ldr	r0, [r3, #0]
}
 800c1ac:	b280      	uxth	r0, r0
 800c1ae:	4770      	bx	lr
 800c1b0:	40005c50 	.word	0x40005c50

0800c1b4 <SetENDPOINT>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetENDPOINT(uint8_t bEpNum, uint16_t wRegValue)
{
  _SetENDPOINT(bEpNum, wRegValue);
 800c1b4:	0080      	lsls	r0, r0, #2
 800c1b6:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 800c1ba:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800c1be:	6019      	str	r1, [r3, #0]
 800c1c0:	4770      	bx	lr

0800c1c2 <GetENDPOINT>:
* Output         : None.
* Return         : Endpoint register value.
*******************************************************************************/
uint16_t GetENDPOINT(uint8_t bEpNum)
{
  return(_GetENDPOINT(bEpNum));
 800c1c2:	0080      	lsls	r0, r0, #2
 800c1c4:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 800c1c8:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800c1cc:	6818      	ldr	r0, [r3, #0]
}
 800c1ce:	b280      	uxth	r0, r0
 800c1d0:	4770      	bx	lr

0800c1d2 <SetEPType>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
  _SetEPType(bEpNum, wType);
 800c1d2:	0080      	lsls	r0, r0, #2
 800c1d4:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800c1d8:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800c1dc:	6810      	ldr	r0, [r2, #0]
 800c1de:	f648 138f 	movw	r3, #35215	; 0x898f
 800c1e2:	4003      	ands	r3, r0
 800c1e4:	4319      	orrs	r1, r3
 800c1e6:	6011      	str	r1, [r2, #0]
 800c1e8:	4770      	bx	lr

0800c1ea <GetEPType>:
* Output         : None.
* Return         : Endpoint Type
*******************************************************************************/
uint16_t GetEPType(uint8_t bEpNum)
{
  return(_GetEPType(bEpNum));
 800c1ea:	0080      	lsls	r0, r0, #2
 800c1ec:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 800c1f0:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800c1f4:	6818      	ldr	r0, [r3, #0]
}
 800c1f6:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 800c1fa:	4770      	bx	lr

0800c1fc <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 800c1fc:	0080      	lsls	r0, r0, #2
 800c1fe:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800c202:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800c206:	6810      	ldr	r0, [r2, #0]
 800c208:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 800c20c:	4003      	ands	r3, r0
 800c20e:	06c8      	lsls	r0, r1, #27
 800c210:	bf48      	it	mi
 800c212:	f083 0310 	eormi.w	r3, r3, #16
 800c216:	0689      	lsls	r1, r1, #26
 800c218:	bf48      	it	mi
 800c21a:	f083 0320 	eormi.w	r3, r3, #32
 800c21e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c226:	6013      	str	r3, [r2, #0]
 800c228:	4770      	bx	lr

0800c22a <SetEPRxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 800c22a:	0080      	lsls	r0, r0, #2
 800c22c:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800c230:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800c234:	6810      	ldr	r0, [r2, #0]
 800c236:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 800c23a:	4003      	ands	r3, r0
 800c23c:	04c8      	lsls	r0, r1, #19
 800c23e:	bf48      	it	mi
 800c240:	f483 5380 	eormi.w	r3, r3, #4096	; 0x1000
 800c244:	0489      	lsls	r1, r1, #18
 800c246:	bf48      	it	mi
 800c248:	f483 5300 	eormi.w	r3, r3, #8192	; 0x2000
 800c24c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c254:	6013      	str	r3, [r2, #0]
 800c256:	4770      	bx	lr

0800c258 <SetDouBleBuffEPStall>:
* Output         : None.
* Return         : Endpoint register value.
*******************************************************************************/
uint16_t GetENDPOINT(uint8_t bEpNum)
{
  return(_GetENDPOINT(bEpNum));
 800c258:	0080      	lsls	r0, r0, #2
 800c25a:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 800c25e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
*******************************************************************************/
void SetDouBleBuffEPStall(uint8_t bEpNum, uint8_t bDir)
{
  uint16_t Endpoint_DTOG_Status;
  Endpoint_DTOG_Status = GetENDPOINT(bEpNum);
  if (bDir == EP_DBUF_OUT)
 800c262:	2901      	cmp	r1, #1
* Output         : None.
* Return         : Endpoint register value.
*******************************************************************************/
uint16_t GetENDPOINT(uint8_t bEpNum)
{
  return(_GetENDPOINT(bEpNum));
 800c264:	6818      	ldr	r0, [r3, #0]
*******************************************************************************/
void SetDouBleBuffEPStall(uint8_t bEpNum, uint8_t bDir)
{
  uint16_t Endpoint_DTOG_Status;
  Endpoint_DTOG_Status = GetENDPOINT(bEpNum);
  if (bDir == EP_DBUF_OUT)
 800c266:	d102      	bne.n	800c26e <SetDouBleBuffEPStall+0x16>
  { /* OUT double buffered endpoint */
    _SetENDPOINT(bEpNum, Endpoint_DTOG_Status & ~EPRX_DTOG1);
 800c268:	f64e 72ff 	movw	r2, #61439	; 0xefff
 800c26c:	e003      	b.n	800c276 <SetDouBleBuffEPStall+0x1e>
  }
  else if (bDir == EP_DBUF_IN)
 800c26e:	2902      	cmp	r1, #2
 800c270:	d103      	bne.n	800c27a <SetDouBleBuffEPStall+0x22>
  { /* IN double buffered endpoint */
    _SetENDPOINT(bEpNum, Endpoint_DTOG_Status & ~EPTX_DTOG1);
 800c272:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800c276:	4002      	ands	r2, r0
 800c278:	601a      	str	r2, [r3, #0]
 800c27a:	4770      	bx	lr

0800c27c <GetEPTxStatus>:
* Output         : None.
* Return         : Endpoint TX Status
*******************************************************************************/
uint16_t GetEPTxStatus(uint8_t bEpNum)
{
  return(_GetEPTxStatus(bEpNum));
 800c27c:	0080      	lsls	r0, r0, #2
 800c27e:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 800c282:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800c286:	6818      	ldr	r0, [r3, #0]
}
 800c288:	f000 0030 	and.w	r0, r0, #48	; 0x30
 800c28c:	4770      	bx	lr

0800c28e <GetEPRxStatus>:
* Output         : None.
* Return         : Endpoint RX Status
*******************************************************************************/
uint16_t GetEPRxStatus(uint8_t bEpNum)
{
  return(_GetEPRxStatus(bEpNum));
 800c28e:	0080      	lsls	r0, r0, #2
 800c290:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 800c294:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800c298:	6818      	ldr	r0, [r3, #0]
}
 800c29a:	f400 5040 	and.w	r0, r0, #12288	; 0x3000
 800c29e:	4770      	bx	lr

0800c2a0 <SetEPTxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 800c2a0:	0080      	lsls	r0, r0, #2
 800c2a2:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800c2a6:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800c2aa:	6811      	ldr	r1, [r2, #0]
 800c2ac:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 800c2b0:	400b      	ands	r3, r1
 800c2b2:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800c2b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c2ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2be:	6013      	str	r3, [r2, #0]
 800c2c0:	4770      	bx	lr

0800c2c2 <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 800c2c2:	0080      	lsls	r0, r0, #2
 800c2c4:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800c2c8:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800c2cc:	6811      	ldr	r1, [r2, #0]
 800c2ce:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 800c2d2:	400b      	ands	r3, r1
 800c2d4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800c2d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c2dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2e0:	6013      	str	r3, [r2, #0]
 800c2e2:	4770      	bx	lr

0800c2e4 <SetEP_KIND>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEP_KIND(uint8_t bEpNum)
{
  _SetEP_KIND(bEpNum);
 800c2e4:	0080      	lsls	r0, r0, #2
 800c2e6:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800c2ea:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800c2ee:	6811      	ldr	r1, [r2, #0]
 800c2f0:	f640 630f 	movw	r3, #3599	; 0xe0f
 800c2f4:	400b      	ands	r3, r1
 800c2f6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800c2fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2fe:	6013      	str	r3, [r2, #0]
 800c300:	4770      	bx	lr

0800c302 <ClearEP_KIND>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearEP_KIND(uint8_t bEpNum)
{
  _ClearEP_KIND(bEpNum);
 800c302:	0080      	lsls	r0, r0, #2
 800c304:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800c308:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800c30c:	6811      	ldr	r1, [r2, #0]
 800c30e:	f640 630f 	movw	r3, #3599	; 0xe0f
 800c312:	400b      	ands	r3, r1
 800c314:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c31c:	6013      	str	r3, [r2, #0]
 800c31e:	4770      	bx	lr

0800c320 <Clear_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(uint8_t bEpNum)
{
  _ClearEP_KIND(bEpNum);
 800c320:	0080      	lsls	r0, r0, #2
 800c322:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800c326:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800c32a:	6811      	ldr	r1, [r2, #0]
 800c32c:	f640 630f 	movw	r3, #3599	; 0xe0f
 800c330:	400b      	ands	r3, r1
 800c332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c33a:	6013      	str	r3, [r2, #0]
 800c33c:	4770      	bx	lr

0800c33e <Set_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Set_Status_Out(uint8_t bEpNum)
{
  _SetEP_KIND(bEpNum);
 800c33e:	0080      	lsls	r0, r0, #2
 800c340:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800c344:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800c348:	6811      	ldr	r1, [r2, #0]
 800c34a:	f640 630f 	movw	r3, #3599	; 0xe0f
 800c34e:	400b      	ands	r3, r1
 800c350:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800c354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c358:	6013      	str	r3, [r2, #0]
 800c35a:	4770      	bx	lr

0800c35c <SetEPDoubleBuff>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDoubleBuff(uint8_t bEpNum)
{
  _SetEP_KIND(bEpNum);
 800c35c:	0080      	lsls	r0, r0, #2
 800c35e:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800c362:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800c366:	6811      	ldr	r1, [r2, #0]
 800c368:	f640 630f 	movw	r3, #3599	; 0xe0f
 800c36c:	400b      	ands	r3, r1
 800c36e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800c372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c376:	6013      	str	r3, [r2, #0]
 800c378:	4770      	bx	lr

0800c37a <ClearEPDoubleBuff>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearEPDoubleBuff(uint8_t bEpNum)
{
  _ClearEP_KIND(bEpNum);
 800c37a:	0080      	lsls	r0, r0, #2
 800c37c:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800c380:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800c384:	6811      	ldr	r1, [r2, #0]
 800c386:	f640 630f 	movw	r3, #3599	; 0xe0f
 800c38a:	400b      	ands	r3, r1
 800c38c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c394:	6013      	str	r3, [r2, #0]
 800c396:	4770      	bx	lr

0800c398 <GetTxStallStatus>:
* Output         : None.
* Return         : Tx Stall status.
*******************************************************************************/
uint16_t GetTxStallStatus(uint8_t bEpNum)
{
  return(_GetTxStallStatus(bEpNum));
 800c398:	0080      	lsls	r0, r0, #2
 800c39a:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 800c39e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800c3a2:	6818      	ldr	r0, [r3, #0]
 800c3a4:	f000 0030 	and.w	r0, r0, #48	; 0x30
}
 800c3a8:	f1b0 0c10 	subs.w	ip, r0, #16
 800c3ac:	f1dc 0000 	rsbs	r0, ip, #0
 800c3b0:	eb50 000c 	adcs.w	r0, r0, ip
 800c3b4:	4770      	bx	lr

0800c3b6 <GetRxStallStatus>:
* Output         : None.
* Return         : Rx Stall status.
*******************************************************************************/
uint16_t GetRxStallStatus(uint8_t bEpNum)
{
  return(_GetRxStallStatus(bEpNum));
 800c3b6:	0080      	lsls	r0, r0, #2
 800c3b8:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 800c3bc:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800c3c0:	6818      	ldr	r0, [r3, #0]
 800c3c2:	f400 5040 	and.w	r0, r0, #12288	; 0x3000
}
 800c3c6:	f5b0 5380 	subs.w	r3, r0, #4096	; 0x1000
 800c3ca:	4258      	negs	r0, r3
 800c3cc:	4158      	adcs	r0, r3
 800c3ce:	4770      	bx	lr

0800c3d0 <ClearEP_CTR_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearEP_CTR_RX(uint8_t bEpNum)
{
  _ClearEP_CTR_RX(bEpNum);
 800c3d0:	0080      	lsls	r0, r0, #2
 800c3d2:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800c3d6:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800c3da:	6811      	ldr	r1, [r2, #0]
 800c3dc:	f640 738f 	movw	r3, #3983	; 0xf8f
 800c3e0:	400b      	ands	r3, r1
 800c3e2:	6013      	str	r3, [r2, #0]
 800c3e4:	4770      	bx	lr

0800c3e6 <ClearEP_CTR_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearEP_CTR_TX(uint8_t bEpNum)
{
  _ClearEP_CTR_TX(bEpNum);
 800c3e6:	0080      	lsls	r0, r0, #2
 800c3e8:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800c3ec:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800c3f0:	6811      	ldr	r1, [r2, #0]
 800c3f2:	f648 730f 	movw	r3, #36623	; 0x8f0f
 800c3f6:	400b      	ands	r3, r1
 800c3f8:	6013      	str	r3, [r2, #0]
 800c3fa:	4770      	bx	lr

0800c3fc <ToggleDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ToggleDTOG_RX(uint8_t bEpNum)
{
  _ToggleDTOG_RX(bEpNum);
 800c3fc:	0080      	lsls	r0, r0, #2
 800c3fe:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800c402:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800c406:	6811      	ldr	r1, [r2, #0]
 800c408:	f640 730f 	movw	r3, #3855	; 0xf0f
 800c40c:	400b      	ands	r3, r1
 800c40e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c416:	6013      	str	r3, [r2, #0]
 800c418:	4770      	bx	lr

0800c41a <ToggleDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ToggleDTOG_TX(uint8_t bEpNum)
{
  _ToggleDTOG_TX(bEpNum);
 800c41a:	0080      	lsls	r0, r0, #2
 800c41c:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800c420:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800c424:	6811      	ldr	r1, [r2, #0]
 800c426:	f640 730f 	movw	r3, #3855	; 0xf0f
 800c42a:	400b      	ands	r3, r1
 800c42c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c430:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c434:	6013      	str	r3, [r2, #0]
 800c436:	4770      	bx	lr

0800c438 <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 800c438:	0080      	lsls	r0, r0, #2
 800c43a:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 800c43e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800c442:	681a      	ldr	r2, [r3, #0]
 800c444:	0452      	lsls	r2, r2, #17
 800c446:	d508      	bpl.n	800c45a <ClearDTOG_RX+0x22>
 800c448:	6819      	ldr	r1, [r3, #0]
 800c44a:	f640 720f 	movw	r2, #3855	; 0xf0f
 800c44e:	400a      	ands	r2, r1
 800c450:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800c454:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c458:	601a      	str	r2, [r3, #0]
 800c45a:	4770      	bx	lr

0800c45c <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 800c45c:	0080      	lsls	r0, r0, #2
 800c45e:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 800c462:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800c466:	681a      	ldr	r2, [r3, #0]
 800c468:	0651      	lsls	r1, r2, #25
 800c46a:	d508      	bpl.n	800c47e <ClearDTOG_TX+0x22>
 800c46c:	6819      	ldr	r1, [r3, #0]
 800c46e:	f640 720f 	movw	r2, #3855	; 0xf0f
 800c472:	400a      	ands	r2, r1
 800c474:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c478:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800c47c:	601a      	str	r2, [r3, #0]
 800c47e:	4770      	bx	lr

0800c480 <SetEPAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPAddress(uint8_t bEpNum, uint8_t bAddr)
{
  _SetEPAddress(bEpNum, bAddr);
 800c480:	0080      	lsls	r0, r0, #2
 800c482:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800c486:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800c48a:	6810      	ldr	r0, [r2, #0]
 800c48c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800c490:	f640 730f 	movw	r3, #3855	; 0xf0f
 800c494:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800c498:	4003      	ands	r3, r0
 800c49a:	430b      	orrs	r3, r1
 800c49c:	6013      	str	r3, [r2, #0]
 800c49e:	4770      	bx	lr

0800c4a0 <GetEPAddress>:
* Output         : None.
* Return         : Endpoint address.
*******************************************************************************/
uint8_t GetEPAddress(uint8_t bEpNum)
{
  return(_GetEPAddress(bEpNum));
 800c4a0:	0080      	lsls	r0, r0, #2
 800c4a2:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 800c4a6:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800c4aa:	6818      	ldr	r0, [r3, #0]
}
 800c4ac:	f000 000f 	and.w	r0, r0, #15
 800c4b0:	4770      	bx	lr

0800c4b2 <SetEPTxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 800c4b2:	4b07      	ldr	r3, [pc, #28]	; (800c4d0 <SetEPTxAddr+0x1e>)
 800c4b4:	0849      	lsrs	r1, r1, #1
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	0049      	lsls	r1, r1, #1
 800c4ba:	b29b      	uxth	r3, r3
 800c4bc:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800c4c0:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
 800c4c4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800c4c8:	005b      	lsls	r3, r3, #1
 800c4ca:	6019      	str	r1, [r3, #0]
 800c4cc:	4770      	bx	lr
 800c4ce:	bf00      	nop
 800c4d0:	40005c50 	.word	0x40005c50

0800c4d4 <SetEPRxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 800c4d4:	4b05      	ldr	r3, [pc, #20]	; (800c4ec <SetEPRxAddr+0x18>)
 800c4d6:	0849      	lsrs	r1, r1, #1
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	0049      	lsls	r1, r1, #1
 800c4dc:	b29b      	uxth	r3, r3
 800c4de:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800c4e2:	4b03      	ldr	r3, [pc, #12]	; (800c4f0 <SetEPRxAddr+0x1c>)
 800c4e4:	4403      	add	r3, r0
 800c4e6:	005b      	lsls	r3, r3, #1
 800c4e8:	6019      	str	r1, [r3, #0]
 800c4ea:	4770      	bx	lr
 800c4ec:	40005c50 	.word	0x40005c50
 800c4f0:	20003004 	.word	0x20003004

0800c4f4 <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 800c4f4:	4b05      	ldr	r3, [pc, #20]	; (800c50c <GetEPTxAddr+0x18>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	b29b      	uxth	r3, r3
 800c4fa:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800c4fe:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
 800c502:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800c506:	005b      	lsls	r3, r3, #1
}
 800c508:	8818      	ldrh	r0, [r3, #0]
 800c50a:	4770      	bx	lr
 800c50c:	40005c50 	.word	0x40005c50

0800c510 <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 800c510:	4b04      	ldr	r3, [pc, #16]	; (800c524 <GetEPRxAddr+0x14>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	b29b      	uxth	r3, r3
 800c516:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800c51a:	4b03      	ldr	r3, [pc, #12]	; (800c528 <GetEPRxAddr+0x18>)
 800c51c:	4403      	add	r3, r0
 800c51e:	005b      	lsls	r3, r3, #1
}
 800c520:	8818      	ldrh	r0, [r3, #0]
 800c522:	4770      	bx	lr
 800c524:	40005c50 	.word	0x40005c50
 800c528:	20003004 	.word	0x20003004

0800c52c <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 800c52c:	4b04      	ldr	r3, [pc, #16]	; (800c540 <SetEPTxCount+0x14>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	b29b      	uxth	r3, r3
 800c532:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800c536:	4b03      	ldr	r3, [pc, #12]	; (800c544 <SetEPTxCount+0x18>)
 800c538:	4403      	add	r3, r0
 800c53a:	005b      	lsls	r3, r3, #1
 800c53c:	6019      	str	r1, [r3, #0]
 800c53e:	4770      	bx	lr
 800c540:	40005c50 	.word	0x40005c50
 800c544:	20003002 	.word	0x20003002

0800c548 <SetEPCountRxReg>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPCountRxReg(uint32_t *pdwReg, uint16_t wCount)
{
  _SetEPCountRxReg(dwReg, wCount);
 800c548:	293e      	cmp	r1, #62	; 0x3e
 800c54a:	d909      	bls.n	800c560 <SetEPCountRxReg+0x18>
 800c54c:	094b      	lsrs	r3, r1, #5
 800c54e:	06c9      	lsls	r1, r1, #27
 800c550:	bf04      	itt	eq
 800c552:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
 800c556:	b29b      	uxtheq	r3, r3
 800c558:	029b      	lsls	r3, r3, #10
 800c55a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c55e:	e005      	b.n	800c56c <SetEPCountRxReg+0x24>
 800c560:	084b      	lsrs	r3, r1, #1
 800c562:	07ca      	lsls	r2, r1, #31
 800c564:	bf44      	itt	mi
 800c566:	3301      	addmi	r3, #1
 800c568:	b29b      	uxthmi	r3, r3
 800c56a:	029b      	lsls	r3, r3, #10
 800c56c:	6003      	str	r3, [r0, #0]
 800c56e:	4770      	bx	lr

0800c570 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 800c570:	4b0e      	ldr	r3, [pc, #56]	; (800c5ac <SetEPRxCount+0x3c>)
 800c572:	293e      	cmp	r1, #62	; 0x3e
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	b29b      	uxth	r3, r3
 800c578:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800c57c:	4b0c      	ldr	r3, [pc, #48]	; (800c5b0 <SetEPRxCount+0x40>)
 800c57e:	4403      	add	r3, r0
 800c580:	ea4f 0243 	mov.w	r2, r3, lsl #1
 800c584:	d909      	bls.n	800c59a <SetEPRxCount+0x2a>
 800c586:	094b      	lsrs	r3, r1, #5
 800c588:	06c9      	lsls	r1, r1, #27
 800c58a:	bf04      	itt	eq
 800c58c:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
 800c590:	b29b      	uxtheq	r3, r3
 800c592:	029b      	lsls	r3, r3, #10
 800c594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c598:	e005      	b.n	800c5a6 <SetEPRxCount+0x36>
 800c59a:	084b      	lsrs	r3, r1, #1
 800c59c:	07c8      	lsls	r0, r1, #31
 800c59e:	bf44      	itt	mi
 800c5a0:	3301      	addmi	r3, #1
 800c5a2:	b29b      	uxthmi	r3, r3
 800c5a4:	029b      	lsls	r3, r3, #10
 800c5a6:	6013      	str	r3, [r2, #0]
 800c5a8:	4770      	bx	lr
 800c5aa:	bf00      	nop
 800c5ac:	40005c50 	.word	0x40005c50
 800c5b0:	20003006 	.word	0x20003006

0800c5b4 <GetEPTxCount>:
* Output         : None
* Return         : Tx count value.
*******************************************************************************/
uint16_t GetEPTxCount(uint8_t bEpNum)
{
  return(_GetEPTxCount(bEpNum));
 800c5b4:	4b05      	ldr	r3, [pc, #20]	; (800c5cc <GetEPTxCount+0x18>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	b29b      	uxth	r3, r3
 800c5ba:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800c5be:	4b04      	ldr	r3, [pc, #16]	; (800c5d0 <GetEPTxCount+0x1c>)
 800c5c0:	4403      	add	r3, r0
 800c5c2:	005b      	lsls	r3, r3, #1
 800c5c4:	6818      	ldr	r0, [r3, #0]
 800c5c6:	f3c0 0009 	ubfx	r0, r0, #0, #10
}
 800c5ca:	4770      	bx	lr
 800c5cc:	40005c50 	.word	0x40005c50
 800c5d0:	20003002 	.word	0x20003002

0800c5d4 <GetEPRxCount>:
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 800c5d4:	4b05      	ldr	r3, [pc, #20]	; (800c5ec <GetEPRxCount+0x18>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	b29b      	uxth	r3, r3
 800c5da:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800c5de:	4b04      	ldr	r3, [pc, #16]	; (800c5f0 <GetEPRxCount+0x1c>)
 800c5e0:	4403      	add	r3, r0
 800c5e2:	005b      	lsls	r3, r3, #1
 800c5e4:	6818      	ldr	r0, [r3, #0]
 800c5e6:	f3c0 0009 	ubfx	r0, r0, #0, #10
}
 800c5ea:	4770      	bx	lr
 800c5ec:	40005c50 	.word	0x40005c50
 800c5f0:	20003006 	.word	0x20003006

0800c5f4 <SetEPDblBuffAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuffAddr(uint8_t bEpNum, uint16_t wBuf0Addr, uint16_t wBuf1Addr)
{
  _SetEPDblBuffAddr(bEpNum, wBuf0Addr, wBuf1Addr);
 800c5f4:	4b0b      	ldr	r3, [pc, #44]	; (800c624 <SetEPDblBuffAddr+0x30>)
*                  wBuf1Addr: new address of buffer 1.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuffAddr(uint8_t bEpNum, uint16_t wBuf0Addr, uint16_t wBuf1Addr)
{
 800c5f6:	b510      	push	{r4, lr}
  _SetEPDblBuffAddr(bEpNum, wBuf0Addr, wBuf1Addr);
 800c5f8:	681c      	ldr	r4, [r3, #0]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	00c0      	lsls	r0, r0, #3
 800c5fe:	b29b      	uxth	r3, r3
 800c600:	b2a4      	uxth	r4, r4
 800c602:	4404      	add	r4, r0
 800c604:	4418      	add	r0, r3
 800c606:	4b08      	ldr	r3, [pc, #32]	; (800c628 <SetEPDblBuffAddr+0x34>)
 800c608:	f104 5400 	add.w	r4, r4, #536870912	; 0x20000000
 800c60c:	0849      	lsrs	r1, r1, #1
 800c60e:	f504 5440 	add.w	r4, r4, #12288	; 0x3000
 800c612:	0852      	lsrs	r2, r2, #1
 800c614:	4403      	add	r3, r0
 800c616:	0049      	lsls	r1, r1, #1
 800c618:	0064      	lsls	r4, r4, #1
 800c61a:	0052      	lsls	r2, r2, #1
 800c61c:	005b      	lsls	r3, r3, #1
 800c61e:	6021      	str	r1, [r4, #0]
 800c620:	601a      	str	r2, [r3, #0]
 800c622:	bd10      	pop	{r4, pc}
 800c624:	40005c50 	.word	0x40005c50
 800c628:	20003004 	.word	0x20003004

0800c62c <SetEPDblBuf0Addr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuf0Addr(uint8_t bEpNum, uint16_t wBuf0Addr)
{
  _SetEPDblBuf0Addr(bEpNum, wBuf0Addr);
 800c62c:	4b06      	ldr	r3, [pc, #24]	; (800c648 <SetEPDblBuf0Addr+0x1c>)
 800c62e:	0849      	lsrs	r1, r1, #1
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	0049      	lsls	r1, r1, #1
 800c634:	b29b      	uxth	r3, r3
 800c636:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800c63a:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
 800c63e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800c642:	005b      	lsls	r3, r3, #1
 800c644:	6019      	str	r1, [r3, #0]
 800c646:	4770      	bx	lr
 800c648:	40005c50 	.word	0x40005c50

0800c64c <SetEPDblBuf1Addr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuf1Addr(uint8_t bEpNum, uint16_t wBuf1Addr)
{
  _SetEPDblBuf1Addr(bEpNum, wBuf1Addr);
 800c64c:	4b05      	ldr	r3, [pc, #20]	; (800c664 <SetEPDblBuf1Addr+0x18>)
 800c64e:	0849      	lsrs	r1, r1, #1
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	0049      	lsls	r1, r1, #1
 800c654:	b29b      	uxth	r3, r3
 800c656:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800c65a:	4b03      	ldr	r3, [pc, #12]	; (800c668 <SetEPDblBuf1Addr+0x1c>)
 800c65c:	4403      	add	r3, r0
 800c65e:	005b      	lsls	r3, r3, #1
 800c660:	6019      	str	r1, [r3, #0]
 800c662:	4770      	bx	lr
 800c664:	40005c50 	.word	0x40005c50
 800c668:	20003004 	.word	0x20003004

0800c66c <GetEPDblBuf0Addr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
uint16_t GetEPDblBuf0Addr(uint8_t bEpNum)
{
  return(_GetEPDblBuf0Addr(bEpNum));
 800c66c:	4b05      	ldr	r3, [pc, #20]	; (800c684 <GetEPDblBuf0Addr+0x18>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	b29b      	uxth	r3, r3
 800c672:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800c676:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
 800c67a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800c67e:	005b      	lsls	r3, r3, #1
}
 800c680:	8818      	ldrh	r0, [r3, #0]
 800c682:	4770      	bx	lr
 800c684:	40005c50 	.word	0x40005c50

0800c688 <GetEPDblBuf1Addr>:
* Output         : None.
* Return         : Address of the Buffer 1.
*******************************************************************************/
uint16_t GetEPDblBuf1Addr(uint8_t bEpNum)
{
  return(_GetEPDblBuf1Addr(bEpNum));
 800c688:	4b04      	ldr	r3, [pc, #16]	; (800c69c <GetEPDblBuf1Addr+0x14>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	b29b      	uxth	r3, r3
 800c68e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800c692:	4b03      	ldr	r3, [pc, #12]	; (800c6a0 <GetEPDblBuf1Addr+0x18>)
 800c694:	4403      	add	r3, r0
 800c696:	005b      	lsls	r3, r3, #1
}
 800c698:	8818      	ldrh	r0, [r3, #0]
 800c69a:	4770      	bx	lr
 800c69c:	40005c50 	.word	0x40005c50
 800c6a0:	20003004 	.word	0x20003004

0800c6a4 <SetEPDblBuffCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuffCount(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
{
  _SetEPDblBuffCount(bEpNum, bDir, wCount);
 800c6a4:	2901      	cmp	r1, #1
* Input          : bEpNum,bDir, wCount
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuffCount(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
{
 800c6a6:	b510      	push	{r4, lr}
  _SetEPDblBuffCount(bEpNum, bDir, wCount);
 800c6a8:	d12f      	bne.n	800c70a <SetEPDblBuffCount+0x66>
 800c6aa:	4b26      	ldr	r3, [pc, #152]	; (800c744 <SetEPDblBuffCount+0xa0>)
 800c6ac:	00c0      	lsls	r0, r0, #3
 800c6ae:	6819      	ldr	r1, [r3, #0]
 800c6b0:	4b25      	ldr	r3, [pc, #148]	; (800c748 <SetEPDblBuffCount+0xa4>)
 800c6b2:	b289      	uxth	r1, r1
 800c6b4:	4401      	add	r1, r0
 800c6b6:	440b      	add	r3, r1
 800c6b8:	2a3e      	cmp	r2, #62	; 0x3e
 800c6ba:	ea4f 0143 	mov.w	r1, r3, lsl #1
 800c6be:	d909      	bls.n	800c6d4 <SetEPDblBuffCount+0x30>
 800c6c0:	0953      	lsrs	r3, r2, #5
 800c6c2:	06d4      	lsls	r4, r2, #27
 800c6c4:	bf04      	itt	eq
 800c6c6:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
 800c6ca:	b29b      	uxtheq	r3, r3
 800c6cc:	029b      	lsls	r3, r3, #10
 800c6ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c6d2:	e005      	b.n	800c6e0 <SetEPDblBuffCount+0x3c>
 800c6d4:	0853      	lsrs	r3, r2, #1
 800c6d6:	07d4      	lsls	r4, r2, #31
 800c6d8:	bf44      	itt	mi
 800c6da:	3301      	addmi	r3, #1
 800c6dc:	b29b      	uxthmi	r3, r3
 800c6de:	029b      	lsls	r3, r3, #10
 800c6e0:	600b      	str	r3, [r1, #0]
 800c6e2:	4b18      	ldr	r3, [pc, #96]	; (800c744 <SetEPDblBuffCount+0xa0>)
 800c6e4:	2a3e      	cmp	r2, #62	; 0x3e
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	b29b      	uxth	r3, r3
 800c6ea:	4418      	add	r0, r3
 800c6ec:	4b17      	ldr	r3, [pc, #92]	; (800c74c <SetEPDblBuffCount+0xa8>)
 800c6ee:	4403      	add	r3, r0
 800c6f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c6f4:	d91c      	bls.n	800c730 <SetEPDblBuffCount+0x8c>
 800c6f6:	0951      	lsrs	r1, r2, #5
 800c6f8:	06d4      	lsls	r4, r2, #27
 800c6fa:	bf04      	itt	eq
 800c6fc:	f101 31ff 	addeq.w	r1, r1, #4294967295	; 0xffffffff
 800c700:	b289      	uxtheq	r1, r1
 800c702:	0289      	lsls	r1, r1, #10
 800c704:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800c708:	e018      	b.n	800c73c <SetEPDblBuffCount+0x98>
 800c70a:	2902      	cmp	r1, #2
 800c70c:	d118      	bne.n	800c740 <SetEPDblBuffCount+0x9c>
 800c70e:	490d      	ldr	r1, [pc, #52]	; (800c744 <SetEPDblBuffCount+0xa0>)
 800c710:	00c0      	lsls	r0, r0, #3
 800c712:	680c      	ldr	r4, [r1, #0]
 800c714:	4b0c      	ldr	r3, [pc, #48]	; (800c748 <SetEPDblBuffCount+0xa4>)
 800c716:	b2a4      	uxth	r4, r4
 800c718:	4404      	add	r4, r0
 800c71a:	4423      	add	r3, r4
 800c71c:	005b      	lsls	r3, r3, #1
 800c71e:	601a      	str	r2, [r3, #0]
 800c720:	680b      	ldr	r3, [r1, #0]
 800c722:	b29b      	uxth	r3, r3
 800c724:	4418      	add	r0, r3
 800c726:	4b09      	ldr	r3, [pc, #36]	; (800c74c <SetEPDblBuffCount+0xa8>)
 800c728:	4403      	add	r3, r0
 800c72a:	005b      	lsls	r3, r3, #1
 800c72c:	601a      	str	r2, [r3, #0]
 800c72e:	bd10      	pop	{r4, pc}
 800c730:	0851      	lsrs	r1, r2, #1
 800c732:	07d0      	lsls	r0, r2, #31
 800c734:	bf44      	itt	mi
 800c736:	3101      	addmi	r1, #1
 800c738:	b289      	uxthmi	r1, r1
 800c73a:	0289      	lsls	r1, r1, #10
 800c73c:	6019      	str	r1, [r3, #0]
 800c73e:	bd10      	pop	{r4, pc}
 800c740:	bd10      	pop	{r4, pc}
 800c742:	bf00      	nop
 800c744:	40005c50 	.word	0x40005c50
 800c748:	20003002 	.word	0x20003002
 800c74c:	20003006 	.word	0x20003006

0800c750 <SetEPDblBuf0Count>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuf0Count(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
{
  _SetEPDblBuf0Count(bEpNum, bDir, wCount);
 800c750:	2901      	cmp	r1, #1
 800c752:	d11c      	bne.n	800c78e <SetEPDblBuf0Count+0x3e>
 800c754:	4b14      	ldr	r3, [pc, #80]	; (800c7a8 <SetEPDblBuf0Count+0x58>)
 800c756:	2a3e      	cmp	r2, #62	; 0x3e
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	b29b      	uxth	r3, r3
 800c75c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800c760:	4b12      	ldr	r3, [pc, #72]	; (800c7ac <SetEPDblBuf0Count+0x5c>)
 800c762:	4403      	add	r3, r0
 800c764:	ea4f 0143 	mov.w	r1, r3, lsl #1
 800c768:	d909      	bls.n	800c77e <SetEPDblBuf0Count+0x2e>
 800c76a:	0953      	lsrs	r3, r2, #5
 800c76c:	06d0      	lsls	r0, r2, #27
 800c76e:	bf04      	itt	eq
 800c770:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
 800c774:	b29b      	uxtheq	r3, r3
 800c776:	029b      	lsls	r3, r3, #10
 800c778:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c77c:	e005      	b.n	800c78a <SetEPDblBuf0Count+0x3a>
 800c77e:	0853      	lsrs	r3, r2, #1
 800c780:	07d2      	lsls	r2, r2, #31
 800c782:	bf44      	itt	mi
 800c784:	3301      	addmi	r3, #1
 800c786:	b29b      	uxthmi	r3, r3
 800c788:	029b      	lsls	r3, r3, #10
 800c78a:	600b      	str	r3, [r1, #0]
 800c78c:	4770      	bx	lr
 800c78e:	2902      	cmp	r1, #2
 800c790:	d108      	bne.n	800c7a4 <SetEPDblBuf0Count+0x54>
 800c792:	4b05      	ldr	r3, [pc, #20]	; (800c7a8 <SetEPDblBuf0Count+0x58>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	b29b      	uxth	r3, r3
 800c798:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800c79c:	4b03      	ldr	r3, [pc, #12]	; (800c7ac <SetEPDblBuf0Count+0x5c>)
 800c79e:	4403      	add	r3, r0
 800c7a0:	005b      	lsls	r3, r3, #1
 800c7a2:	601a      	str	r2, [r3, #0]
 800c7a4:	4770      	bx	lr
 800c7a6:	bf00      	nop
 800c7a8:	40005c50 	.word	0x40005c50
 800c7ac:	20003002 	.word	0x20003002

0800c7b0 <SetEPDblBuf1Count>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuf1Count(uint8_t bEpNum, uint8_t bDir, uint16_t wCount)
{
  _SetEPDblBuf1Count(bEpNum, bDir, wCount);
 800c7b0:	2901      	cmp	r1, #1
 800c7b2:	d11c      	bne.n	800c7ee <SetEPDblBuf1Count+0x3e>
 800c7b4:	4b14      	ldr	r3, [pc, #80]	; (800c808 <SetEPDblBuf1Count+0x58>)
 800c7b6:	2a3e      	cmp	r2, #62	; 0x3e
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	b29b      	uxth	r3, r3
 800c7bc:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800c7c0:	4b12      	ldr	r3, [pc, #72]	; (800c80c <SetEPDblBuf1Count+0x5c>)
 800c7c2:	4403      	add	r3, r0
 800c7c4:	ea4f 0143 	mov.w	r1, r3, lsl #1
 800c7c8:	d909      	bls.n	800c7de <SetEPDblBuf1Count+0x2e>
 800c7ca:	0953      	lsrs	r3, r2, #5
 800c7cc:	06d0      	lsls	r0, r2, #27
 800c7ce:	bf04      	itt	eq
 800c7d0:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
 800c7d4:	b29b      	uxtheq	r3, r3
 800c7d6:	029b      	lsls	r3, r3, #10
 800c7d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c7dc:	e005      	b.n	800c7ea <SetEPDblBuf1Count+0x3a>
 800c7de:	0853      	lsrs	r3, r2, #1
 800c7e0:	07d2      	lsls	r2, r2, #31
 800c7e2:	bf44      	itt	mi
 800c7e4:	3301      	addmi	r3, #1
 800c7e6:	b29b      	uxthmi	r3, r3
 800c7e8:	029b      	lsls	r3, r3, #10
 800c7ea:	600b      	str	r3, [r1, #0]
 800c7ec:	4770      	bx	lr
 800c7ee:	2902      	cmp	r1, #2
 800c7f0:	d108      	bne.n	800c804 <SetEPDblBuf1Count+0x54>
 800c7f2:	4b05      	ldr	r3, [pc, #20]	; (800c808 <SetEPDblBuf1Count+0x58>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	b29b      	uxth	r3, r3
 800c7f8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800c7fc:	4b03      	ldr	r3, [pc, #12]	; (800c80c <SetEPDblBuf1Count+0x5c>)
 800c7fe:	4403      	add	r3, r0
 800c800:	005b      	lsls	r3, r3, #1
 800c802:	601a      	str	r2, [r3, #0]
 800c804:	4770      	bx	lr
 800c806:	bf00      	nop
 800c808:	40005c50 	.word	0x40005c50
 800c80c:	20003006 	.word	0x20003006

0800c810 <GetEPDblBuf0Count>:
* Output         : None.
* Return         : Endpoint Buffer 0 count
*******************************************************************************/
uint16_t GetEPDblBuf0Count(uint8_t bEpNum)
{
  return(_GetEPDblBuf0Count(bEpNum));
 800c810:	4b05      	ldr	r3, [pc, #20]	; (800c828 <GetEPDblBuf0Count+0x18>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	b29b      	uxth	r3, r3
 800c816:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800c81a:	4b04      	ldr	r3, [pc, #16]	; (800c82c <GetEPDblBuf0Count+0x1c>)
 800c81c:	4403      	add	r3, r0
 800c81e:	005b      	lsls	r3, r3, #1
 800c820:	6818      	ldr	r0, [r3, #0]
 800c822:	f3c0 0009 	ubfx	r0, r0, #0, #10
}
 800c826:	4770      	bx	lr
 800c828:	40005c50 	.word	0x40005c50
 800c82c:	20003002 	.word	0x20003002

0800c830 <GetEPDblBuf1Count>:
* Output         : None.
* Return         : Endpoint Buffer 1 count.
*******************************************************************************/
uint16_t GetEPDblBuf1Count(uint8_t bEpNum)
{
  return(_GetEPDblBuf1Count(bEpNum));
 800c830:	4b05      	ldr	r3, [pc, #20]	; (800c848 <GetEPDblBuf1Count+0x18>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	b29b      	uxth	r3, r3
 800c836:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800c83a:	4b04      	ldr	r3, [pc, #16]	; (800c84c <GetEPDblBuf1Count+0x1c>)
 800c83c:	4403      	add	r3, r0
 800c83e:	005b      	lsls	r3, r3, #1
 800c840:	6818      	ldr	r0, [r3, #0]
 800c842:	f3c0 0009 	ubfx	r0, r0, #0, #10
}
 800c846:	4770      	bx	lr
 800c848:	40005c50 	.word	0x40005c50
 800c84c:	20003006 	.word	0x20003006

0800c850 <GetEPDblBufDir>:
* Return         : EP_DBUF_OUT, EP_DBUF_IN,
*                  EP_DBUF_ERR if the endpoint counter not yet programmed.
*******************************************************************************/
EP_DBUF_DIR GetEPDblBufDir(uint8_t bEpNum)
{
  if ((uint16_t)(*_pEPRxCount(bEpNum) & 0xFC00) != 0)
 800c850:	4a0d      	ldr	r2, [pc, #52]	; (800c888 <GetEPDblBufDir+0x38>)
 800c852:	00c0      	lsls	r0, r0, #3
 800c854:	6813      	ldr	r3, [r2, #0]
 800c856:	b29b      	uxth	r3, r3
 800c858:	18c1      	adds	r1, r0, r3
 800c85a:	4b0c      	ldr	r3, [pc, #48]	; (800c88c <GetEPDblBufDir+0x3c>)
 800c85c:	440b      	add	r3, r1
 800c85e:	005b      	lsls	r3, r3, #1
 800c860:	881b      	ldrh	r3, [r3, #0]
 800c862:	f413 4f7c 	tst.w	r3, #64512	; 0xfc00
 800c866:	d10d      	bne.n	800c884 <GetEPDblBufDir+0x34>
    return(EP_DBUF_OUT);
  else if (((uint16_t)(*_pEPTxCount(bEpNum)) & 0x03FF) != 0)
 800c868:	6813      	ldr	r3, [r2, #0]
 800c86a:	b29b      	uxth	r3, r3
 800c86c:	4418      	add	r0, r3
 800c86e:	4b08      	ldr	r3, [pc, #32]	; (800c890 <GetEPDblBufDir+0x40>)
 800c870:	4403      	add	r3, r0
 800c872:	005b      	lsls	r3, r3, #1
 800c874:	8818      	ldrh	r0, [r3, #0]
 800c876:	f3c0 0009 	ubfx	r0, r0, #0, #10
    return(EP_DBUF_IN);
 800c87a:	2800      	cmp	r0, #0
 800c87c:	bf14      	ite	ne
 800c87e:	2002      	movne	r0, #2
 800c880:	2000      	moveq	r0, #0
 800c882:	4770      	bx	lr
*                  EP_DBUF_ERR if the endpoint counter not yet programmed.
*******************************************************************************/
EP_DBUF_DIR GetEPDblBufDir(uint8_t bEpNum)
{
  if ((uint16_t)(*_pEPRxCount(bEpNum) & 0xFC00) != 0)
    return(EP_DBUF_OUT);
 800c884:	2001      	movs	r0, #1
  else if (((uint16_t)(*_pEPTxCount(bEpNum)) & 0x03FF) != 0)
    return(EP_DBUF_IN);
  else
    return(EP_DBUF_ERR);
}
 800c886:	4770      	bx	lr
 800c888:	40005c50 	.word	0x40005c50
 800c88c:	20003006 	.word	0x20003006
 800c890:	20003002 	.word	0x20003002

0800c894 <FreeUserBuffer>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void FreeUserBuffer(uint8_t bEpNum, uint8_t bDir)
{
  if (bDir == EP_DBUF_OUT)
 800c894:	2901      	cmp	r1, #1
 800c896:	d10d      	bne.n	800c8b4 <FreeUserBuffer+0x20>
  { /* OUT double buffered endpoint */
    _ToggleDTOG_TX(bEpNum);
 800c898:	0080      	lsls	r0, r0, #2
 800c89a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800c89e:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800c8a2:	6802      	ldr	r2, [r0, #0]
 800c8a4:	f640 730f 	movw	r3, #3855	; 0xf0f
 800c8a8:	4013      	ands	r3, r2
 800c8aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c8ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c8b2:	e00e      	b.n	800c8d2 <FreeUserBuffer+0x3e>
  }
  else if (bDir == EP_DBUF_IN)
 800c8b4:	2902      	cmp	r1, #2
 800c8b6:	d10d      	bne.n	800c8d4 <FreeUserBuffer+0x40>
  { /* IN double buffered endpoint */
    _ToggleDTOG_RX(bEpNum);
 800c8b8:	0080      	lsls	r0, r0, #2
 800c8ba:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800c8be:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800c8c2:	6802      	ldr	r2, [r0, #0]
 800c8c4:	f640 730f 	movw	r3, #3855	; 0xf0f
 800c8c8:	4013      	ands	r3, r2
 800c8ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c8ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8d2:	6003      	str	r3, [r0, #0]
 800c8d4:	4770      	bx	lr

0800c8d6 <ToWord>:
uint16_t ToWord(uint8_t bh, uint8_t bl)
{
  uint16_t wRet;
  wRet = (uint16_t)bl | ((uint16_t)bh << 8);
  return(wRet);
}
 800c8d6:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 800c8da:	4770      	bx	lr

0800c8dc <ByteSwap>:
uint16_t ByteSwap(uint16_t wSwW)
{
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 800c8dc:	b2c3      	uxtb	r3, r0
 800c8de:	0a00      	lsrs	r0, r0, #8
  return(wRet);
}
 800c8e0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800c8e4:	4770      	bx	lr
 800c8e6:	bf00      	nop

0800c8e8 <USB_SIL_Init>:
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 800c8e8:	4b04      	ldr	r3, [pc, #16]	; (800c8fc <USB_SIL_Init+0x14>)
 800c8ea:	2000      	movs	r0, #0
  wInterrupt_Mask = IMR_MSK;
 800c8ec:	4a04      	ldr	r2, [pc, #16]	; (800c900 <USB_SIL_Init+0x18>)
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 800c8ee:	6018      	str	r0, [r3, #0]
  wInterrupt_Mask = IMR_MSK;
 800c8f0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800c8f4:	8013      	strh	r3, [r2, #0]
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 800c8f6:	4a03      	ldr	r2, [pc, #12]	; (800c904 <USB_SIL_Init+0x1c>)
 800c8f8:	6013      	str	r3, [r2, #0]
  return 0;
}
 800c8fa:	4770      	bx	lr
 800c8fc:	40005c44 	.word	0x40005c44
 800c900:	200017e4 	.word	0x200017e4
 800c904:	40005c40 	.word	0x40005c40

0800c908 <USB_SIL_Write>:
*                  - wBufferSize: Number of data to be written (in bytes).
* Output         : None.
* Return         : Status.
*******************************************************************************/
uint32_t USB_SIL_Write(uint8_t bEpAddr, uint8_t* pBufferPointer, uint32_t wBufferSize)
{
 800c908:	b570      	push	{r4, r5, r6, lr}
  /* Use the memory interface function to write to the selected endpoint */
  UserToPMABufferCopy(pBufferPointer, GetEPTxAddr(bEpAddr & 0x7F), wBufferSize);
 800c90a:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 800c90e:	4628      	mov	r0, r5
*                  - wBufferSize: Number of data to be written (in bytes).
* Output         : None.
* Return         : Status.
*******************************************************************************/
uint32_t USB_SIL_Write(uint8_t bEpAddr, uint8_t* pBufferPointer, uint32_t wBufferSize)
{
 800c910:	460e      	mov	r6, r1
 800c912:	4614      	mov	r4, r2
  /* Use the memory interface function to write to the selected endpoint */
  UserToPMABufferCopy(pBufferPointer, GetEPTxAddr(bEpAddr & 0x7F), wBufferSize);
 800c914:	f7ff fdee 	bl	800c4f4 <GetEPTxAddr>
 800c918:	b2a4      	uxth	r4, r4
 800c91a:	4601      	mov	r1, r0
 800c91c:	4622      	mov	r2, r4
 800c91e:	4630      	mov	r0, r6
 800c920:	f7ff f924 	bl	800bb6c <UserToPMABufferCopy>

  /* Update the data length in the control register */
  SetEPTxCount((bEpAddr & 0x7F), wBufferSize);
 800c924:	4628      	mov	r0, r5
 800c926:	4621      	mov	r1, r4
 800c928:	f7ff fe00 	bl	800c52c <SetEPTxCount>
  
  return 0;
}
 800c92c:	2000      	movs	r0, #0
 800c92e:	bd70      	pop	{r4, r5, r6, pc}

0800c930 <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 800c930:	b570      	push	{r4, r5, r6, lr}
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 800c932:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 800c936:	4628      	mov	r0, r5
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 800c938:	460e      	mov	r6, r1
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 800c93a:	f7ff fe4b 	bl	800c5d4 <GetEPRxCount>
 800c93e:	4604      	mov	r4, r0
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 800c940:	4628      	mov	r0, r5
 800c942:	f7ff fde5 	bl	800c510 <GetEPRxAddr>
 800c946:	4622      	mov	r2, r4
 800c948:	4601      	mov	r1, r0
 800c94a:	4630      	mov	r0, r6
 800c94c:	f7ff f926 	bl	800bb9c <PMAToUserBufferCopy>

  /* Return the number of received data */
  return DataLength;
}
 800c950:	4620      	mov	r0, r4
 800c952:	bd70      	pop	{r4, r5, r6, pc}

0800c954 <USB_ARC_get_keymap>:
    {.name="MOUSE_WHEEL", .keys=NULL, .numerator=TRUE},
};

const keymap *USB_ARC_get_keymap(enum kb_hid_code code) {
  return &keycode_map[code];
}
 800c954:	4b02      	ldr	r3, [pc, #8]	; (800c960 <USB_ARC_get_keymap+0xc>)
 800c956:	220c      	movs	r2, #12
 800c958:	fb02 3000 	mla	r0, r2, r0, r3
 800c95c:	4770      	bx	lr
 800c95e:	bf00      	nop
 800c960:	0800ef74 	.word	0x0800ef74

0800c964 <USB_ARC_get_mousemap>:
const keymap *USB_ARC_get_mousemap(enum mouse_code code) {
  return &mousecode_map[code];
}
 800c964:	4b02      	ldr	r3, [pc, #8]	; (800c970 <USB_ARC_get_mousemap+0xc>)
 800c966:	220c      	movs	r2, #12
 800c968:	fb02 3000 	mla	r0, r2, r0, r3
 800c96c:	4770      	bx	lr
 800c96e:	bf00      	nop
 800c970:	0800f8b0 	.word	0x0800f8b0

0800c974 <USB_ARC_get_joystickmap>:
    {.name="JOY2_BUTTON14", .keys=NULL, .numerator=FALSE},
};

const keymap *USB_ARC_get_joystickmap(enum joystick_code code) {
  return &joystickcode_map[code];
}
 800c974:	4b02      	ldr	r3, [pc, #8]	; (800c980 <USB_ARC_get_joystickmap+0xc>)
 800c976:	220c      	movs	r2, #12
 800c978:	fb02 3000 	mla	r0, r2, r0, r3
 800c97c:	4770      	bx	lr
 800c97e:	bf00      	nop
 800c980:	0800f8f8 	.word	0x0800f8f8

0800c984 <DBGMCU_GetREVID>:
  * @param  None
  * @retval Device revision identifier
  */
uint32_t DBGMCU_GetREVID(void)
{
   return(DBGMCU->IDCODE >> 16);
 800c984:	4b01      	ldr	r3, [pc, #4]	; (800c98c <DBGMCU_GetREVID+0x8>)
 800c986:	6818      	ldr	r0, [r3, #0]
}
 800c988:	0c00      	lsrs	r0, r0, #16
 800c98a:	4770      	bx	lr
 800c98c:	e0042000 	.word	0xe0042000

0800c990 <DBGMCU_GetDEVID>:
  * @param  None
  * @retval Device identifier
  */
uint32_t DBGMCU_GetDEVID(void)
{
   return(DBGMCU->IDCODE & IDCODE_DEVID_MASK);
 800c990:	4b02      	ldr	r3, [pc, #8]	; (800c99c <DBGMCU_GetDEVID+0xc>)
 800c992:	6818      	ldr	r0, [r3, #0]
 800c994:	f3c0 000b 	ubfx	r0, r0, #0, #12
}
 800c998:	4770      	bx	lr
 800c99a:	bf00      	nop
 800c99c:	e0042000 	.word	0xe0042000

0800c9a0 <DBGMCU_Config>:
  * @param  NewState: new state of the specified peripheral in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 800c9a0:	4b04      	ldr	r3, [pc, #16]	; (800c9b4 <DBGMCU_Config+0x14>)
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    DBGMCU->CR |= DBGMCU_Periph;
 800c9a2:	685a      	ldr	r2, [r3, #4]
{
  /* Check the parameters */
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800c9a4:	b109      	cbz	r1, 800c9aa <DBGMCU_Config+0xa>
  {
    DBGMCU->CR |= DBGMCU_Periph;
 800c9a6:	4310      	orrs	r0, r2
 800c9a8:	e001      	b.n	800c9ae <DBGMCU_Config+0xe>
  }
  else
  {
    DBGMCU->CR &= ~DBGMCU_Periph;
 800c9aa:	ea22 0000 	bic.w	r0, r2, r0
 800c9ae:	6058      	str	r0, [r3, #4]
 800c9b0:	4770      	bx	lr
 800c9b2:	bf00      	nop
 800c9b4:	e0042000 	.word	0xe0042000

0800c9b8 <EXTI_DeInit>:
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR = 0x00000000;
 800c9b8:	4b04      	ldr	r3, [pc, #16]	; (800c9cc <EXTI_DeInit+0x14>)
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 800c9be:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000; 
 800c9c0:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000; 
 800c9c2:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
 800c9c4:	4a02      	ldr	r2, [pc, #8]	; (800c9d0 <EXTI_DeInit+0x18>)
 800c9c6:	615a      	str	r2, [r3, #20]
 800c9c8:	4770      	bx	lr
 800c9ca:	bf00      	nop
 800c9cc:	40010400 	.word	0x40010400
 800c9d0:	000fffff 	.word	0x000fffff

0800c9d4 <EXTI_Init>:
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800c9d4:	7983      	ldrb	r3, [r0, #6]
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800c9d6:	b530      	push	{r4, r5, lr}
 800c9d8:	6802      	ldr	r2, [r0, #0]
 800c9da:	7901      	ldrb	r1, [r0, #4]
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800c9dc:	b33b      	cbz	r3, 800ca2e <EXTI_Init+0x5a>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800c9de:	4b18      	ldr	r3, [pc, #96]	; (800ca40 <EXTI_Init+0x6c>)
 800c9e0:	43d4      	mvns	r4, r2
 800c9e2:	681d      	ldr	r5, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 800c9e4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800c9e8:	4025      	ands	r5, r4
 800c9ea:	601d      	str	r5, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 800c9ec:	685d      	ldr	r5, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 800c9ee:	f501 3182 	add.w	r1, r1, #66560	; 0x10400
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 800c9f2:	402c      	ands	r4, r5
 800c9f4:	605c      	str	r4, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800c9f6:	680c      	ldr	r4, [r1, #0]
 800c9f8:	4322      	orrs	r2, r4
 800c9fa:	600a      	str	r2, [r1, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800c9fc:	6802      	ldr	r2, [r0, #0]
 800c9fe:	689c      	ldr	r4, [r3, #8]
 800ca00:	43d1      	mvns	r1, r2
 800ca02:	400c      	ands	r4, r1
 800ca04:	609c      	str	r4, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800ca06:	68dc      	ldr	r4, [r3, #12]
 800ca08:	4021      	ands	r1, r4
 800ca0a:	60d9      	str	r1, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800ca0c:	7941      	ldrb	r1, [r0, #5]
 800ca0e:	2910      	cmp	r1, #16
 800ca10:	d106      	bne.n	800ca20 <EXTI_Init+0x4c>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800ca12:	6899      	ldr	r1, [r3, #8]
 800ca14:	4311      	orrs	r1, r2
 800ca16:	6099      	str	r1, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 800ca18:	68d9      	ldr	r1, [r3, #12]
 800ca1a:	430a      	orrs	r2, r1
 800ca1c:	60da      	str	r2, [r3, #12]
 800ca1e:	bd30      	pop	{r4, r5, pc}
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
      tmp += EXTI_InitStruct->EXTI_Trigger;
 800ca20:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 800ca24:	f503 3382 	add.w	r3, r3, #66560	; 0x10400

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800ca28:	6819      	ldr	r1, [r3, #0]
 800ca2a:	430a      	orrs	r2, r1
 800ca2c:	e006      	b.n	800ca3c <EXTI_Init+0x68>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 800ca2e:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 800ca32:	f503 3382 	add.w	r3, r3, #66560	; 0x10400

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 800ca36:	6819      	ldr	r1, [r3, #0]
 800ca38:	ea21 0202 	bic.w	r2, r1, r2
 800ca3c:	601a      	str	r2, [r3, #0]
 800ca3e:	bd30      	pop	{r4, r5, pc}
 800ca40:	40010400 	.word	0x40010400

0800ca44 <EXTI_StructInit>:
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 800ca44:	2300      	movs	r3, #0
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 800ca46:	220c      	movs	r2, #12
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 800ca48:	6003      	str	r3, [r0, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 800ca4a:	7103      	strb	r3, [r0, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 800ca4c:	7142      	strb	r2, [r0, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 800ca4e:	7183      	strb	r3, [r0, #6]
 800ca50:	4770      	bx	lr

0800ca52 <EXTI_GenerateSWInterrupt>:
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 800ca52:	4b02      	ldr	r3, [pc, #8]	; (800ca5c <EXTI_GenerateSWInterrupt+0xa>)
 800ca54:	691a      	ldr	r2, [r3, #16]
 800ca56:	4310      	orrs	r0, r2
 800ca58:	6118      	str	r0, [r3, #16]
 800ca5a:	4770      	bx	lr
 800ca5c:	40010400 	.word	0x40010400

0800ca60 <EXTI_GetFlagStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 800ca60:	4b03      	ldr	r3, [pc, #12]	; (800ca70 <EXTI_GetFlagStatus+0x10>)
 800ca62:	695b      	ldr	r3, [r3, #20]
 800ca64:	4218      	tst	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 800ca66:	bf0c      	ite	eq
 800ca68:	2000      	moveq	r0, #0
 800ca6a:	2001      	movne	r0, #1
 800ca6c:	4770      	bx	lr
 800ca6e:	bf00      	nop
 800ca70:	40010400 	.word	0x40010400

0800ca74 <EXTI_ClearFlag>:
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 800ca74:	4b01      	ldr	r3, [pc, #4]	; (800ca7c <EXTI_ClearFlag+0x8>)
 800ca76:	6158      	str	r0, [r3, #20]
 800ca78:	4770      	bx	lr
 800ca7a:	bf00      	nop
 800ca7c:	40010400 	.word	0x40010400

0800ca80 <EXTI_GetITStatus>:
  ITStatus bitstatus = RESET;
  uint32_t enablestatus = 0;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 800ca80:	4b05      	ldr	r3, [pc, #20]	; (800ca98 <EXTI_GetITStatus+0x18>)
 800ca82:	681a      	ldr	r2, [r3, #0]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800ca84:	695b      	ldr	r3, [r3, #20]
 800ca86:	4003      	ands	r3, r0
 800ca88:	d004      	beq.n	800ca94 <EXTI_GetITStatus+0x14>
 800ca8a:	4210      	tst	r0, r2
  {
    bitstatus = SET;
 800ca8c:	bf0c      	ite	eq
 800ca8e:	2000      	moveq	r0, #0
 800ca90:	2001      	movne	r0, #1
 800ca92:	4770      	bx	lr
  }
  else
  {
    bitstatus = RESET;
 800ca94:	4618      	mov	r0, r3
  }
  return bitstatus;
}
 800ca96:	4770      	bx	lr
 800ca98:	40010400 	.word	0x40010400

0800ca9c <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 800ca9c:	4b01      	ldr	r3, [pc, #4]	; (800caa4 <EXTI_ClearITPendingBit+0x8>)
 800ca9e:	6158      	str	r0, [r3, #20]
 800caa0:	4770      	bx	lr
 800caa2:	bf00      	nop
 800caa4:	40010400 	.word	0x40010400

0800caa8 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 800caa8:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  if (GPIOx == GPIOA)
 800caaa:	4b23      	ldr	r3, [pc, #140]	; (800cb38 <GPIO_DeInit+0x90>)
 800caac:	4298      	cmp	r0, r3
 800caae:	d105      	bne.n	800cabc <GPIO_DeInit+0x14>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
 800cab0:	2004      	movs	r0, #4
 800cab2:	2101      	movs	r1, #1
 800cab4:	f000 fa6c 	bl	800cf90 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
 800cab8:	2004      	movs	r0, #4
 800caba:	e036      	b.n	800cb2a <GPIO_DeInit+0x82>
  }
  else if (GPIOx == GPIOB)
 800cabc:	4b1f      	ldr	r3, [pc, #124]	; (800cb3c <GPIO_DeInit+0x94>)
 800cabe:	4298      	cmp	r0, r3
 800cac0:	d105      	bne.n	800cace <GPIO_DeInit+0x26>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
 800cac2:	2008      	movs	r0, #8
 800cac4:	2101      	movs	r1, #1
 800cac6:	f000 fa63 	bl	800cf90 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
 800caca:	2008      	movs	r0, #8
 800cacc:	e02d      	b.n	800cb2a <GPIO_DeInit+0x82>
  }
  else if (GPIOx == GPIOC)
 800cace:	4b1c      	ldr	r3, [pc, #112]	; (800cb40 <GPIO_DeInit+0x98>)
 800cad0:	4298      	cmp	r0, r3
 800cad2:	d105      	bne.n	800cae0 <GPIO_DeInit+0x38>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
 800cad4:	2010      	movs	r0, #16
 800cad6:	2101      	movs	r1, #1
 800cad8:	f000 fa5a 	bl	800cf90 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
 800cadc:	2010      	movs	r0, #16
 800cade:	e024      	b.n	800cb2a <GPIO_DeInit+0x82>
  }
  else if (GPIOx == GPIOD)
 800cae0:	4b18      	ldr	r3, [pc, #96]	; (800cb44 <GPIO_DeInit+0x9c>)
 800cae2:	4298      	cmp	r0, r3
 800cae4:	d105      	bne.n	800caf2 <GPIO_DeInit+0x4a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
 800cae6:	2020      	movs	r0, #32
 800cae8:	2101      	movs	r1, #1
 800caea:	f000 fa51 	bl	800cf90 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
 800caee:	2020      	movs	r0, #32
 800caf0:	e01b      	b.n	800cb2a <GPIO_DeInit+0x82>
  }    
  else if (GPIOx == GPIOE)
 800caf2:	4b15      	ldr	r3, [pc, #84]	; (800cb48 <GPIO_DeInit+0xa0>)
 800caf4:	4298      	cmp	r0, r3
 800caf6:	d105      	bne.n	800cb04 <GPIO_DeInit+0x5c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
 800caf8:	2040      	movs	r0, #64	; 0x40
 800cafa:	2101      	movs	r1, #1
 800cafc:	f000 fa48 	bl	800cf90 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
 800cb00:	2040      	movs	r0, #64	; 0x40
 800cb02:	e012      	b.n	800cb2a <GPIO_DeInit+0x82>
  } 
  else if (GPIOx == GPIOF)
 800cb04:	4b11      	ldr	r3, [pc, #68]	; (800cb4c <GPIO_DeInit+0xa4>)
 800cb06:	4298      	cmp	r0, r3
 800cb08:	d105      	bne.n	800cb16 <GPIO_DeInit+0x6e>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
 800cb0a:	2080      	movs	r0, #128	; 0x80
 800cb0c:	2101      	movs	r1, #1
 800cb0e:	f000 fa3f 	bl	800cf90 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
 800cb12:	2080      	movs	r0, #128	; 0x80
 800cb14:	e009      	b.n	800cb2a <GPIO_DeInit+0x82>
  }
  else
  {
    if (GPIOx == GPIOG)
 800cb16:	4b0e      	ldr	r3, [pc, #56]	; (800cb50 <GPIO_DeInit+0xa8>)
 800cb18:	4298      	cmp	r0, r3
 800cb1a:	d10b      	bne.n	800cb34 <GPIO_DeInit+0x8c>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
 800cb1c:	f44f 7080 	mov.w	r0, #256	; 0x100
 800cb20:	2101      	movs	r1, #1
 800cb22:	f000 fa35 	bl	800cf90 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 800cb26:	f44f 7080 	mov.w	r0, #256	; 0x100
 800cb2a:	2100      	movs	r1, #0
    }
  }
}
 800cb2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOG)
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 800cb30:	f000 ba2e 	b.w	800cf90 <RCC_APB2PeriphResetCmd>
 800cb34:	bd08      	pop	{r3, pc}
 800cb36:	bf00      	nop
 800cb38:	40010800 	.word	0x40010800
 800cb3c:	40010c00 	.word	0x40010c00
 800cb40:	40011000 	.word	0x40011000
 800cb44:	40011400 	.word	0x40011400
 800cb48:	40011800 	.word	0x40011800
 800cb4c:	40011c00 	.word	0x40011c00
 800cb50:	40012000 	.word	0x40012000

0800cb54 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
 800cb54:	b508      	push	{r3, lr}
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 800cb56:	2001      	movs	r0, #1
 800cb58:	4601      	mov	r1, r0
 800cb5a:	f000 fa19 	bl	800cf90 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
}
 800cb5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
 800cb62:	2001      	movs	r0, #1
 800cb64:	2100      	movs	r1, #0
 800cb66:	f000 ba13 	b.w	800cf90 <RCC_APB2PeriphResetCmd>

0800cb6a <GPIO_Init>:
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800cb6a:	78cb      	ldrb	r3, [r1, #3]
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800cb6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 800cb70:	06da      	lsls	r2, r3, #27
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 800cb72:	bf48      	it	mi
 800cb74:	788a      	ldrbmi	r2, [r1, #2]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 800cb76:	8809      	ldrh	r1, [r1, #0]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800cb78:	f003 050f 	and.w	r5, r3, #15
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 800cb7c:	bf48      	it	mi
 800cb7e:	4315      	orrmi	r5, r2
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 800cb80:	f011 0fff 	tst.w	r1, #255	; 0xff
 800cb84:	d01f      	beq.n	800cbc6 <GPIO_Init+0x5c>
  {
    tmpreg = GPIOx->CRL;
 800cb86:	6804      	ldr	r4, [r0, #0]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800cb88:	2200      	movs	r2, #0
    {
      pos = ((uint32_t)0x01) << pinpos;
 800cb8a:	f04f 0c01 	mov.w	ip, #1
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800cb8e:	f04f 080f 	mov.w	r8, #15
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
 800cb92:	fa0c f702 	lsl.w	r7, ip, r2
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800cb96:	ea07 0601 	and.w	r6, r7, r1
      if (currentpin == pos)
 800cb9a:	42be      	cmp	r6, r7
 800cb9c:	d10f      	bne.n	800cbbe <GPIO_Init+0x54>
      {
        pos = pinpos << 2;
 800cb9e:	0097      	lsls	r7, r2, #2
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800cba0:	fa08 f907 	lsl.w	r9, r8, r7
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800cba4:	fa05 f707 	lsl.w	r7, r5, r7
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 800cba8:	ea24 0409 	bic.w	r4, r4, r9
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800cbac:	2b28      	cmp	r3, #40	; 0x28
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800cbae:	ea44 0407 	orr.w	r4, r4, r7
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800cbb2:	d101      	bne.n	800cbb8 <GPIO_Init+0x4e>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800cbb4:	6146      	str	r6, [r0, #20]
 800cbb6:	e002      	b.n	800cbbe <GPIO_Init+0x54>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800cbb8:	2b48      	cmp	r3, #72	; 0x48
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800cbba:	bf08      	it	eq
 800cbbc:	6106      	streq	r6, [r0, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800cbbe:	3201      	adds	r2, #1
 800cbc0:	2a08      	cmp	r2, #8
 800cbc2:	d1e6      	bne.n	800cb92 <GPIO_Init+0x28>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800cbc4:	6004      	str	r4, [r0, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 800cbc6:	29ff      	cmp	r1, #255	; 0xff
 800cbc8:	d921      	bls.n	800cc0e <GPIO_Init+0xa4>
  {
    tmpreg = GPIOx->CRH;
 800cbca:	6844      	ldr	r4, [r0, #4]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800cbcc:	2200      	movs	r2, #0
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 800cbce:	f04f 0c01 	mov.w	ip, #1
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800cbd2:	f04f 080f 	mov.w	r8, #15
 800cbd6:	f102 0708 	add.w	r7, r2, #8
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 800cbda:	fa0c f707 	lsl.w	r7, ip, r7
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 800cbde:	ea07 0601 	and.w	r6, r7, r1
      if (currentpin == pos)
 800cbe2:	42be      	cmp	r6, r7
 800cbe4:	d10f      	bne.n	800cc06 <GPIO_Init+0x9c>
      {
        pos = pinpos << 2;
 800cbe6:	0097      	lsls	r7, r2, #2
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800cbe8:	fa08 f907 	lsl.w	r9, r8, r7
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800cbec:	fa05 f707 	lsl.w	r7, r5, r7
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 800cbf0:	ea24 0409 	bic.w	r4, r4, r9
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800cbf4:	2b28      	cmp	r3, #40	; 0x28
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800cbf6:	ea44 0407 	orr.w	r4, r4, r7
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800cbfa:	d101      	bne.n	800cc00 <GPIO_Init+0x96>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800cbfc:	6146      	str	r6, [r0, #20]
 800cbfe:	e002      	b.n	800cc06 <GPIO_Init+0x9c>
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800cc00:	2b48      	cmp	r3, #72	; 0x48
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800cc02:	bf08      	it	eq
 800cc04:	6106      	streq	r6, [r0, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800cc06:	3201      	adds	r2, #1
 800cc08:	2a08      	cmp	r2, #8
 800cc0a:	d1e4      	bne.n	800cbd6 <GPIO_Init+0x6c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 800cc0c:	6044      	str	r4, [r0, #4]
 800cc0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800cc12 <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 800cc12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cc16:	8003      	strh	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 800cc18:	2302      	movs	r3, #2
 800cc1a:	7083      	strb	r3, [r0, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800cc1c:	2304      	movs	r3, #4
 800cc1e:	70c3      	strb	r3, [r0, #3]
 800cc20:	4770      	bx	lr

0800cc22 <GPIO_ReadInputDataBit>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800cc22:	6883      	ldr	r3, [r0, #8]
 800cc24:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 800cc26:	bf0c      	ite	eq
 800cc28:	2000      	moveq	r0, #0
 800cc2a:	2001      	movne	r0, #1
 800cc2c:	4770      	bx	lr

0800cc2e <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
 800cc2e:	6880      	ldr	r0, [r0, #8]
}
 800cc30:	b280      	uxth	r0, r0
 800cc32:	4770      	bx	lr

0800cc34 <GPIO_ReadOutputDataBit>:
  uint8_t bitstatus = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800cc34:	68c3      	ldr	r3, [r0, #12]
 800cc36:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 800cc38:	bf0c      	ite	eq
 800cc3a:	2000      	moveq	r0, #0
 800cc3c:	2001      	movne	r0, #1
 800cc3e:	4770      	bx	lr

0800cc40 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
 800cc40:	68c0      	ldr	r0, [r0, #12]
}
 800cc42:	b280      	uxth	r0, r0
 800cc44:	4770      	bx	lr

0800cc46 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 800cc46:	6101      	str	r1, [r0, #16]
 800cc48:	4770      	bx	lr

0800cc4a <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 800cc4a:	6141      	str	r1, [r0, #20]
 800cc4c:	4770      	bx	lr

0800cc4e <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 800cc4e:	b10a      	cbz	r2, 800cc54 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800cc50:	6101      	str	r1, [r0, #16]
 800cc52:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 800cc54:	6141      	str	r1, [r0, #20]
 800cc56:	4770      	bx	lr

0800cc58 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 800cc58:	60c1      	str	r1, [r0, #12]
 800cc5a:	4770      	bx	lr

0800cc5c <GPIO_PinLockConfig>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 800cc5c:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800cc60:	6183      	str	r3, [r0, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 800cc62:	6181      	str	r1, [r0, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800cc64:	6183      	str	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800cc66:	6983      	ldr	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800cc68:	6983      	ldr	r3, [r0, #24]
 800cc6a:	4770      	bx	lr

0800cc6c <GPIO_EventOutputConfig>:
  uint32_t tmpreg = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 800cc6c:	4a05      	ldr	r2, [pc, #20]	; (800cc84 <GPIO_EventOutputConfig+0x18>)
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 800cc6e:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 800cc70:	6814      	ldr	r4, [r2, #0]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 800cc72:	f64f 7380 	movw	r3, #65408	; 0xff80
 800cc76:	4023      	ands	r3, r4
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
 800cc78:	4319      	orrs	r1, r3
  tmpreg |= GPIO_PinSource;
 800cc7a:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
  AFIO->EVCR = tmpreg;
 800cc7e:	6010      	str	r0, [r2, #0]
 800cc80:	bd10      	pop	{r4, pc}
 800cc82:	bf00      	nop
 800cc84:	40010000 	.word	0x40010000

0800cc88 <GPIO_EventOutputCmd>:
void GPIO_EventOutputCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
 800cc88:	4b01      	ldr	r3, [pc, #4]	; (800cc90 <GPIO_EventOutputCmd+0x8>)
 800cc8a:	6018      	str	r0, [r3, #0]
 800cc8c:	4770      	bx	lr
 800cc8e:	bf00      	nop
 800cc90:	4220001c 	.word	0x4220001c

0800cc94 <GPIO_PinRemapConfig>:

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 800cc94:	2800      	cmp	r0, #0
 800cc96:	4a16      	ldr	r2, [pc, #88]	; (800ccf0 <GPIO_PinRemapConfig+0x5c>)
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 800cc98:	b530      	push	{r4, r5, lr}
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 800cc9a:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
  {
    tmpreg = AFIO->MAPR2;
 800cc9e:	bfb4      	ite	lt
 800cca0:	69d3      	ldrlt	r3, [r2, #28]
  }
  else
  {
    tmpreg = AFIO->MAPR;
 800cca2:	6853      	ldrge	r3, [r2, #4]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 800cca4:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000
  {
    tmpreg = AFIO->MAPR;
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;
 800cca8:	b284      	uxth	r4, r0

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 800ccaa:	d106      	bne.n	800ccba <GPIO_PinRemapConfig+0x26>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 800ccac:	6855      	ldr	r5, [r2, #4]
  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 800ccae:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 800ccb2:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 800ccb6:	6055      	str	r5, [r2, #4]
 800ccb8:	e00f      	b.n	800ccda <GPIO_PinRemapConfig+0x46>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 800ccba:	02c5      	lsls	r5, r0, #11
 800ccbc:	d505      	bpl.n	800ccca <GPIO_PinRemapConfig+0x36>
  else
  {
    tmpreg = AFIO->MAPR;
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 800ccbe:	f3c0 4203 	ubfx	r2, r0, #16, #4
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 800ccc2:	2503      	movs	r5, #3
 800ccc4:	fa05 f202 	lsl.w	r2, r5, r2
 800ccc8:	e003      	b.n	800ccd2 <GPIO_PinRemapConfig+0x3e>
    tmpreg &= ~tmp1;
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 800ccca:	0d42      	lsrs	r2, r0, #21
 800cccc:	0112      	lsls	r2, r2, #4
 800ccce:	fa04 f202 	lsl.w	r2, r4, r2
 800ccd2:	ea23 0302 	bic.w	r3, r3, r2
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 800ccd6:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
  }

  if (NewState != DISABLE)
 800ccda:	b119      	cbz	r1, 800cce4 <GPIO_PinRemapConfig+0x50>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 800ccdc:	0d42      	lsrs	r2, r0, #21
 800ccde:	0112      	lsls	r2, r2, #4
 800cce0:	4094      	lsls	r4, r2
 800cce2:	4323      	orrs	r3, r4
 800cce4:	4a02      	ldr	r2, [pc, #8]	; (800ccf0 <GPIO_PinRemapConfig+0x5c>)
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 800cce6:	2800      	cmp	r0, #0
  {
    AFIO->MAPR2 = tmpreg;
 800cce8:	bfb4      	ite	lt
 800ccea:	61d3      	strlt	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
 800ccec:	6053      	strge	r3, [r2, #4]
 800ccee:	bd30      	pop	{r4, r5, pc}
 800ccf0:	40010000 	.word	0x40010000

0800ccf4 <GPIO_EXTILineConfig>:
  uint32_t tmp = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 800ccf4:	f001 0303 	and.w	r3, r1, #3
 800ccf8:	009b      	lsls	r3, r3, #2
 800ccfa:	220f      	movs	r2, #15
 800ccfc:	409a      	lsls	r2, r3
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 800ccfe:	4098      	lsls	r0, r3
 800cd00:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 800cd04:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800cd08:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 800cd0c:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 800cd0e:	688c      	ldr	r4, [r1, #8]
 800cd10:	ea24 0202 	bic.w	r2, r4, r2
 800cd14:	608a      	str	r2, [r1, #8]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 800cd16:	688a      	ldr	r2, [r1, #8]
 800cd18:	4302      	orrs	r2, r0
 800cd1a:	608a      	str	r2, [r1, #8]
 800cd1c:	bd10      	pop	{r4, pc}

0800cd1e <GPIO_ETH_MediaInterfaceConfig>:
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
{ 
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 

  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
 800cd1e:	4b01      	ldr	r3, [pc, #4]	; (800cd24 <GPIO_ETH_MediaInterfaceConfig+0x6>)
 800cd20:	6018      	str	r0, [r3, #0]
 800cd22:	4770      	bx	lr
 800cd24:	422000dc 	.word	0x422000dc

0800cd28 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800cd28:	4b0d      	ldr	r3, [pc, #52]	; (800cd60 <RCC_DeInit+0x38>)
 800cd2a:	681a      	ldr	r2, [r3, #0]
 800cd2c:	f042 0201 	orr.w	r2, r2, #1
 800cd30:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800cd32:	6859      	ldr	r1, [r3, #4]
 800cd34:	4a0b      	ldr	r2, [pc, #44]	; (800cd64 <RCC_DeInit+0x3c>)
 800cd36:	400a      	ands	r2, r1
 800cd38:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800cd3a:	681a      	ldr	r2, [r3, #0]
 800cd3c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800cd40:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800cd44:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800cd46:	681a      	ldr	r2, [r3, #0]
 800cd48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800cd4c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800cd4e:	685a      	ldr	r2, [r3, #4]
 800cd50:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800cd54:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800cd56:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800cd5a:	609a      	str	r2, [r3, #8]
 800cd5c:	4770      	bx	lr
 800cd5e:	bf00      	nop
 800cd60:	40021000 	.word	0x40021000
 800cd64:	f8ff0000 	.word	0xf8ff0000

0800cd68 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 800cd68:	4b0c      	ldr	r3, [pc, #48]	; (800cd9c <RCC_HSEConfig+0x34>)
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 800cd6a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 800cd6e:	681a      	ldr	r2, [r3, #0]
 800cd70:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800cd74:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 800cd76:	681a      	ldr	r2, [r3, #0]
 800cd78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800cd7c:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 800cd7e:	d003      	beq.n	800cd88 <RCC_HSEConfig+0x20>
 800cd80:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 800cd84:	d004      	beq.n	800cd90 <RCC_HSEConfig+0x28>
 800cd86:	4770      	bx	lr
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 800cd88:	681a      	ldr	r2, [r3, #0]
 800cd8a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800cd8e:	e002      	b.n	800cd96 <RCC_HSEConfig+0x2e>
      break;
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 800cd90:	681a      	ldr	r2, [r3, #0]
 800cd92:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 800cd96:	601a      	str	r2, [r3, #0]
 800cd98:	4770      	bx	lr
 800cd9a:	bf00      	nop
 800cd9c:	40021000 	.word	0x40021000

0800cda0 <RCC_AdjustHSICalibrationValue>:
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
 800cda0:	4b03      	ldr	r3, [pc, #12]	; (800cdb0 <RCC_AdjustHSICalibrationValue+0x10>)
 800cda2:	681a      	ldr	r2, [r3, #0]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
 800cda4:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 800cda8:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
  /* Store the new value */
  RCC->CR = tmpreg;
 800cdac:	6018      	str	r0, [r3, #0]
 800cdae:	4770      	bx	lr
 800cdb0:	40021000 	.word	0x40021000

0800cdb4 <RCC_HSICmd>:
  */
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 800cdb4:	4b01      	ldr	r3, [pc, #4]	; (800cdbc <RCC_HSICmd+0x8>)
 800cdb6:	6018      	str	r0, [r3, #0]
 800cdb8:	4770      	bx	lr
 800cdba:	bf00      	nop
 800cdbc:	42420000 	.word	0x42420000

0800cdc0 <RCC_PLLConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 800cdc0:	4b03      	ldr	r3, [pc, #12]	; (800cdd0 <RCC_PLLConfig+0x10>)
 800cdc2:	685a      	ldr	r2, [r3, #4]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 800cdc4:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 800cdc8:	4311      	orrs	r1, r2
 800cdca:	4308      	orrs	r0, r1
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800cdcc:	6058      	str	r0, [r3, #4]
 800cdce:	4770      	bx	lr
 800cdd0:	40021000 	.word	0x40021000

0800cdd4 <RCC_PLLCmd>:
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 800cdd4:	4b01      	ldr	r3, [pc, #4]	; (800cddc <RCC_PLLCmd+0x8>)
 800cdd6:	6018      	str	r0, [r3, #0]
 800cdd8:	4770      	bx	lr
 800cdda:	bf00      	nop
 800cddc:	42420060 	.word	0x42420060

0800cde0 <RCC_SYSCLKConfig>:
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 800cde0:	4b03      	ldr	r3, [pc, #12]	; (800cdf0 <RCC_SYSCLKConfig+0x10>)
 800cde2:	685a      	ldr	r2, [r3, #4]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 800cde4:	f022 0203 	bic.w	r2, r2, #3
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 800cde8:	4310      	orrs	r0, r2
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800cdea:	6058      	str	r0, [r3, #4]
 800cdec:	4770      	bx	lr
 800cdee:	bf00      	nop
 800cdf0:	40021000 	.word	0x40021000

0800cdf4 <RCC_GetSYSCLKSource>:
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 800cdf4:	4b02      	ldr	r3, [pc, #8]	; (800ce00 <RCC_GetSYSCLKSource+0xc>)
 800cdf6:	6858      	ldr	r0, [r3, #4]
}
 800cdf8:	f000 000c 	and.w	r0, r0, #12
 800cdfc:	4770      	bx	lr
 800cdfe:	bf00      	nop
 800ce00:	40021000 	.word	0x40021000

0800ce04 <RCC_HCLKConfig>:
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 800ce04:	4b03      	ldr	r3, [pc, #12]	; (800ce14 <RCC_HCLKConfig+0x10>)
 800ce06:	685a      	ldr	r2, [r3, #4]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 800ce08:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 800ce0c:	4310      	orrs	r0, r2
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800ce0e:	6058      	str	r0, [r3, #4]
 800ce10:	4770      	bx	lr
 800ce12:	bf00      	nop
 800ce14:	40021000 	.word	0x40021000

0800ce18 <RCC_PCLK1Config>:
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 800ce18:	4b03      	ldr	r3, [pc, #12]	; (800ce28 <RCC_PCLK1Config+0x10>)
 800ce1a:	685a      	ldr	r2, [r3, #4]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 800ce1c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 800ce20:	4310      	orrs	r0, r2
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800ce22:	6058      	str	r0, [r3, #4]
 800ce24:	4770      	bx	lr
 800ce26:	bf00      	nop
 800ce28:	40021000 	.word	0x40021000

0800ce2c <RCC_PCLK2Config>:
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 800ce2c:	4b03      	ldr	r3, [pc, #12]	; (800ce3c <RCC_PCLK2Config+0x10>)
 800ce2e:	685a      	ldr	r2, [r3, #4]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 800ce30:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 800ce34:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800ce38:	6058      	str	r0, [r3, #4]
 800ce3a:	4770      	bx	lr
 800ce3c:	40021000 	.word	0x40021000

0800ce40 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 800ce40:	4b04      	ldr	r3, [pc, #16]	; (800ce54 <RCC_ITConfig+0x14>)
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 800ce42:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ce44:	b109      	cbz	r1, 800ce4a <RCC_ITConfig+0xa>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 800ce46:	4310      	orrs	r0, r2
 800ce48:	e001      	b.n	800ce4e <RCC_ITConfig+0xe>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 800ce4a:	ea22 0000 	bic.w	r0, r2, r0
 800ce4e:	7018      	strb	r0, [r3, #0]
 800ce50:	4770      	bx	lr
 800ce52:	bf00      	nop
 800ce54:	40021009 	.word	0x40021009

0800ce58 <RCC_USBCLKConfig>:
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 800ce58:	4b01      	ldr	r3, [pc, #4]	; (800ce60 <RCC_USBCLKConfig+0x8>)
 800ce5a:	6018      	str	r0, [r3, #0]
 800ce5c:	4770      	bx	lr
 800ce5e:	bf00      	nop
 800ce60:	424200d8 	.word	0x424200d8

0800ce64 <RCC_ADCCLKConfig>:
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 800ce64:	4b03      	ldr	r3, [pc, #12]	; (800ce74 <RCC_ADCCLKConfig+0x10>)
 800ce66:	685a      	ldr	r2, [r3, #4]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 800ce68:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 800ce6c:	4310      	orrs	r0, r2
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800ce6e:	6058      	str	r0, [r3, #4]
 800ce70:	4770      	bx	lr
 800ce72:	bf00      	nop
 800ce74:	40021000 	.word	0x40021000

0800ce78 <RCC_LSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800ce78:	4b06      	ldr	r3, [pc, #24]	; (800ce94 <RCC_LSEConfig+0x1c>)
 800ce7a:	2200      	movs	r2, #0
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 800ce7c:	2801      	cmp	r0, #1
{
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800ce7e:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800ce80:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 800ce82:	d002      	beq.n	800ce8a <RCC_LSEConfig+0x12>
 800ce84:	2804      	cmp	r0, #4
 800ce86:	d002      	beq.n	800ce8e <RCC_LSEConfig+0x16>
 800ce88:	4770      	bx	lr
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 800ce8a:	7018      	strb	r0, [r3, #0]
      break;
 800ce8c:	4770      	bx	lr
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 800ce8e:	2205      	movs	r2, #5
 800ce90:	701a      	strb	r2, [r3, #0]
 800ce92:	4770      	bx	lr
 800ce94:	40021020 	.word	0x40021020

0800ce98 <RCC_LSICmd>:
  */
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 800ce98:	4b01      	ldr	r3, [pc, #4]	; (800cea0 <RCC_LSICmd+0x8>)
 800ce9a:	6018      	str	r0, [r3, #0]
 800ce9c:	4770      	bx	lr
 800ce9e:	bf00      	nop
 800cea0:	42420480 	.word	0x42420480

0800cea4 <RCC_RTCCLKConfig>:
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 800cea4:	4b02      	ldr	r3, [pc, #8]	; (800ceb0 <RCC_RTCCLKConfig+0xc>)
 800cea6:	6a1a      	ldr	r2, [r3, #32]
 800cea8:	4310      	orrs	r0, r2
 800ceaa:	6218      	str	r0, [r3, #32]
 800ceac:	4770      	bx	lr
 800ceae:	bf00      	nop
 800ceb0:	40021000 	.word	0x40021000

0800ceb4 <RCC_RTCCLKCmd>:
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 800ceb4:	4b01      	ldr	r3, [pc, #4]	; (800cebc <RCC_RTCCLKCmd+0x8>)
 800ceb6:	6018      	str	r0, [r3, #0]
 800ceb8:	4770      	bx	lr
 800ceba:	bf00      	nop
 800cebc:	4242043c 	.word	0x4242043c

0800cec0 <RCC_GetClocksFreq>:
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 800cec0:	4b1d      	ldr	r3, [pc, #116]	; (800cf38 <RCC_GetClocksFreq+0x78>)
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800cec2:	b510      	push	{r4, lr}
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 800cec4:	685a      	ldr	r2, [r3, #4]
 800cec6:	f002 020c 	and.w	r2, r2, #12
  
  switch (tmp)
 800ceca:	2a04      	cmp	r2, #4
 800cecc:	d001      	beq.n	800ced2 <RCC_GetClocksFreq+0x12>
 800cece:	2a08      	cmp	r2, #8
 800ced0:	d002      	beq.n	800ced8 <RCC_GetClocksFreq+0x18>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800ced2:	4b1a      	ldr	r3, [pc, #104]	; (800cf3c <RCC_GetClocksFreq+0x7c>)
 800ced4:	6003      	str	r3, [r0, #0]
      break;
 800ced6:	e00f      	b.n	800cef8 <RCC_GetClocksFreq+0x38>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 800ced8:	685a      	ldr	r2, [r3, #4]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 800ceda:	6859      	ldr	r1, [r3, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 800cedc:	f3c2 4283 	ubfx	r2, r2, #18, #4
      
      if (pllsource == 0x00)
 800cee0:	03c9      	lsls	r1, r1, #15
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 800cee2:	f102 0202 	add.w	r2, r2, #2
      
      if (pllsource == 0x00)
 800cee6:	d502      	bpl.n	800ceee <RCC_GetClocksFreq+0x2e>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 800cee8:	685b      	ldr	r3, [r3, #4]
 800ceea:	039b      	lsls	r3, r3, #14
 800ceec:	d501      	bpl.n	800cef2 <RCC_GetClocksFreq+0x32>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 800ceee:	4b14      	ldr	r3, [pc, #80]	; (800cf40 <RCC_GetClocksFreq+0x80>)
 800cef0:	e000      	b.n	800cef4 <RCC_GetClocksFreq+0x34>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 800cef2:	4b12      	ldr	r3, [pc, #72]	; (800cf3c <RCC_GetClocksFreq+0x7c>)
 800cef4:	435a      	muls	r2, r3
 800cef6:	6002      	str	r2, [r0, #0]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 800cef8:	4a0f      	ldr	r2, [pc, #60]	; (800cf38 <RCC_GetClocksFreq+0x78>)
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 800cefa:	4b12      	ldr	r3, [pc, #72]	; (800cf44 <RCC_GetClocksFreq+0x84>)
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 800cefc:	6851      	ldr	r1, [r2, #4]
  tmp = tmp >> 4;
 800cefe:	f3c1 1103 	ubfx	r1, r1, #4, #4
  presc = APBAHBPrescTable[tmp];
 800cf02:	5c5c      	ldrb	r4, [r3, r1]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800cf04:	6801      	ldr	r1, [r0, #0]
 800cf06:	40e1      	lsrs	r1, r4
 800cf08:	6041      	str	r1, [r0, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 800cf0a:	6854      	ldr	r4, [r2, #4]
  tmp = tmp >> 8;
 800cf0c:	f3c4 2402 	ubfx	r4, r4, #8, #3
  presc = APBAHBPrescTable[tmp];
 800cf10:	5d1c      	ldrb	r4, [r3, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800cf12:	fa21 f404 	lsr.w	r4, r1, r4
 800cf16:	6084      	str	r4, [r0, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 800cf18:	6854      	ldr	r4, [r2, #4]
  tmp = tmp >> 11;
 800cf1a:	f3c4 24c2 	ubfx	r4, r4, #11, #3
  presc = APBAHBPrescTable[tmp];
 800cf1e:	5d1c      	ldrb	r4, [r3, r4]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800cf20:	40e1      	lsrs	r1, r4
 800cf22:	60c1      	str	r1, [r0, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 800cf24:	6852      	ldr	r2, [r2, #4]
  tmp = tmp >> 14;
 800cf26:	f3c2 3281 	ubfx	r2, r2, #14, #2
  presc = ADCPrescTable[tmp];
 800cf2a:	4413      	add	r3, r2
 800cf2c:	7c1b      	ldrb	r3, [r3, #16]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 800cf2e:	fbb1 f1f3 	udiv	r1, r1, r3
 800cf32:	6101      	str	r1, [r0, #16]
 800cf34:	bd10      	pop	{r4, pc}
 800cf36:	bf00      	nop
 800cf38:	40021000 	.word	0x40021000
 800cf3c:	007a1200 	.word	0x007a1200
 800cf40:	003d0900 	.word	0x003d0900
 800cf44:	20000179 	.word	0x20000179

0800cf48 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 800cf48:	4b04      	ldr	r3, [pc, #16]	; (800cf5c <RCC_AHBPeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800cf4a:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800cf4c:	b109      	cbz	r1, 800cf52 <RCC_AHBPeriphClockCmd+0xa>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800cf4e:	4310      	orrs	r0, r2
 800cf50:	e001      	b.n	800cf56 <RCC_AHBPeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 800cf52:	ea22 0000 	bic.w	r0, r2, r0
 800cf56:	6158      	str	r0, [r3, #20]
 800cf58:	4770      	bx	lr
 800cf5a:	bf00      	nop
 800cf5c:	40021000 	.word	0x40021000

0800cf60 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800cf60:	4b04      	ldr	r3, [pc, #16]	; (800cf74 <RCC_APB2PeriphClockCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800cf62:	699a      	ldr	r2, [r3, #24]
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800cf64:	b109      	cbz	r1, 800cf6a <RCC_APB2PeriphClockCmd+0xa>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800cf66:	4310      	orrs	r0, r2
 800cf68:	e001      	b.n	800cf6e <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800cf6a:	ea22 0000 	bic.w	r0, r2, r0
 800cf6e:	6198      	str	r0, [r3, #24]
 800cf70:	4770      	bx	lr
 800cf72:	bf00      	nop
 800cf74:	40021000 	.word	0x40021000

0800cf78 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800cf78:	4b04      	ldr	r3, [pc, #16]	; (800cf8c <RCC_APB1PeriphClockCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800cf7a:	69da      	ldr	r2, [r3, #28]
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800cf7c:	b109      	cbz	r1, 800cf82 <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800cf7e:	4310      	orrs	r0, r2
 800cf80:	e001      	b.n	800cf86 <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800cf82:	ea22 0000 	bic.w	r0, r2, r0
 800cf86:	61d8      	str	r0, [r3, #28]
 800cf88:	4770      	bx	lr
 800cf8a:	bf00      	nop
 800cf8c:	40021000 	.word	0x40021000

0800cf90 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800cf90:	4b04      	ldr	r3, [pc, #16]	; (800cfa4 <RCC_APB2PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800cf92:	68da      	ldr	r2, [r3, #12]
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800cf94:	b109      	cbz	r1, 800cf9a <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800cf96:	4310      	orrs	r0, r2
 800cf98:	e001      	b.n	800cf9e <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800cf9a:	ea22 0000 	bic.w	r0, r2, r0
 800cf9e:	60d8      	str	r0, [r3, #12]
 800cfa0:	4770      	bx	lr
 800cfa2:	bf00      	nop
 800cfa4:	40021000 	.word	0x40021000

0800cfa8 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800cfa8:	4b04      	ldr	r3, [pc, #16]	; (800cfbc <RCC_APB1PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800cfaa:	691a      	ldr	r2, [r3, #16]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800cfac:	b109      	cbz	r1, 800cfb2 <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800cfae:	4310      	orrs	r0, r2
 800cfb0:	e001      	b.n	800cfb6 <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 800cfb2:	ea22 0000 	bic.w	r0, r2, r0
 800cfb6:	6118      	str	r0, [r3, #16]
 800cfb8:	4770      	bx	lr
 800cfba:	bf00      	nop
 800cfbc:	40021000 	.word	0x40021000

0800cfc0 <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 800cfc0:	4b01      	ldr	r3, [pc, #4]	; (800cfc8 <RCC_BackupResetCmd+0x8>)
 800cfc2:	6018      	str	r0, [r3, #0]
 800cfc4:	4770      	bx	lr
 800cfc6:	bf00      	nop
 800cfc8:	42420440 	.word	0x42420440

0800cfcc <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 800cfcc:	4b01      	ldr	r3, [pc, #4]	; (800cfd4 <RCC_ClockSecuritySystemCmd+0x8>)
 800cfce:	6018      	str	r0, [r3, #0]
 800cfd0:	4770      	bx	lr
 800cfd2:	bf00      	nop
 800cfd4:	4242004c 	.word	0x4242004c

0800cfd8 <RCC_MCOConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 800cfd8:	4b01      	ldr	r3, [pc, #4]	; (800cfe0 <RCC_MCOConfig+0x8>)
 800cfda:	7018      	strb	r0, [r3, #0]
 800cfdc:	4770      	bx	lr
 800cfde:	bf00      	nop
 800cfe0:	40021007 	.word	0x40021007

0800cfe4 <RCC_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800cfe4:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 800cfe6:	2b01      	cmp	r3, #1
 800cfe8:	4a07      	ldr	r2, [pc, #28]	; (800d008 <RCC_GetFlagStatus+0x24>)
 800cfea:	d101      	bne.n	800cff0 <RCC_GetFlagStatus+0xc>
  {
    statusreg = RCC->CR;
 800cfec:	6813      	ldr	r3, [r2, #0]
 800cfee:	e003      	b.n	800cff8 <RCC_GetFlagStatus+0x14>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 800cff0:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 800cff2:	bf0c      	ite	eq
 800cff4:	6a13      	ldreq	r3, [r2, #32]
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 800cff6:	6a53      	ldrne	r3, [r2, #36]	; 0x24
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800cff8:	f000 001f 	and.w	r0, r0, #31
 800cffc:	fa23 f000 	lsr.w	r0, r3, r0
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
}
 800d000:	f000 0001 	and.w	r0, r0, #1
 800d004:	4770      	bx	lr
 800d006:	bf00      	nop
 800d008:	40021000 	.word	0x40021000

0800d00c <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 800d00c:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t StartUpCounter = 0;
 800d00e:	2300      	movs	r3, #0
 800d010:	9301      	str	r3, [sp, #4]
  FlagStatus HSEStatus = RESET;
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 800d012:	2031      	movs	r0, #49	; 0x31
 800d014:	f7ff ffe6 	bl	800cfe4 <RCC_GetFlagStatus>
    StartUpCounter++;  
 800d018:	9b01      	ldr	r3, [sp, #4]
 800d01a:	3301      	adds	r3, #1
 800d01c:	9301      	str	r3, [sp, #4]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 800d01e:	9b01      	ldr	r3, [sp, #4]
 800d020:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800d024:	d001      	beq.n	800d02a <RCC_WaitForHSEStartUp+0x1e>
 800d026:	2800      	cmp	r0, #0
 800d028:	d0f3      	beq.n	800d012 <RCC_WaitForHSEStartUp+0x6>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 800d02a:	2031      	movs	r0, #49	; 0x31
 800d02c:	f7ff ffda 	bl	800cfe4 <RCC_GetFlagStatus>
  else
  {
    status = ERROR;
  }  
  return (status);
}
 800d030:	3000      	adds	r0, #0
 800d032:	bf18      	it	ne
 800d034:	2001      	movne	r0, #1
 800d036:	b003      	add	sp, #12
 800d038:	f85d fb04 	ldr.w	pc, [sp], #4

0800d03c <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
 800d03c:	4b02      	ldr	r3, [pc, #8]	; (800d048 <RCC_ClearFlag+0xc>)
 800d03e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d040:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800d044:	625a      	str	r2, [r3, #36]	; 0x24
 800d046:	4770      	bx	lr
 800d048:	40021000 	.word	0x40021000

0800d04c <RCC_GetITStatus>:
  ITStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 800d04c:	4b03      	ldr	r3, [pc, #12]	; (800d05c <RCC_GetITStatus+0x10>)
 800d04e:	689b      	ldr	r3, [r3, #8]
 800d050:	4218      	tst	r0, r3
    bitstatus = RESET;
  }

  /* Return the RCC_IT status */
  return  bitstatus;
}
 800d052:	bf0c      	ite	eq
 800d054:	2000      	moveq	r0, #0
 800d056:	2001      	movne	r0, #1
 800d058:	4770      	bx	lr
 800d05a:	bf00      	nop
 800d05c:	40021000 	.word	0x40021000

0800d060 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 800d060:	4b01      	ldr	r3, [pc, #4]	; (800d068 <RCC_ClearITPendingBit+0x8>)
 800d062:	7018      	strb	r0, [r3, #0]
 800d064:	4770      	bx	lr
 800d066:	bf00      	nop
 800d068:	4002100a 	.word	0x4002100a

0800d06c <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800d06c:	b530      	push	{r4, r5, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 800d06e:	8c04      	ldrh	r4, [r0, #32]
 800d070:	f024 0401 	bic.w	r4, r4, #1
 800d074:	0424      	lsls	r4, r4, #16
 800d076:	0c24      	lsrs	r4, r4, #16
 800d078:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d07a:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 800d07c:	8c04      	ldrh	r4, [r0, #32]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  tmpccmr1 = TIMx->CCMR1;
 800d07e:	b2ad      	uxth	r5, r5
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 800d080:	f025 05f3 	bic.w	r5, r5, #243	; 0xf3
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800d084:	432a      	orrs	r2, r5
 800d086:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 800d08a:	b29d      	uxth	r5, r3
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 800d08c:	4b10      	ldr	r3, [pc, #64]	; (800d0d0 <TI1_Config+0x64>)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 800d08e:	b2a4      	uxth	r4, r4
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 800d090:	4298      	cmp	r0, r3
 800d092:	d015      	beq.n	800d0c0 <TI1_Config+0x54>
 800d094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d098:	4298      	cmp	r0, r3
 800d09a:	d011      	beq.n	800d0c0 <TI1_Config+0x54>
 800d09c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800d0a0:	d00e      	beq.n	800d0c0 <TI1_Config+0x54>
 800d0a2:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 800d0a6:	4298      	cmp	r0, r3
 800d0a8:	d00a      	beq.n	800d0c0 <TI1_Config+0x54>
 800d0aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d0ae:	4298      	cmp	r0, r3
 800d0b0:	d006      	beq.n	800d0c0 <TI1_Config+0x54>
     (TIMx == TIM4) ||(TIMx == TIM5))
 800d0b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d0b6:	4298      	cmp	r0, r3
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
  }
  else
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800d0b8:	bf18      	it	ne
 800d0ba:	f024 040a 	bicne.w	r4, r4, #10
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
     (TIMx == TIM4) ||(TIMx == TIM5))
 800d0be:	d101      	bne.n	800d0c4 <TI1_Config+0x58>
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
 800d0c0:	f024 0402 	bic.w	r4, r4, #2
  }
  else
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 800d0c4:	f044 0401 	orr.w	r4, r4, #1
 800d0c8:	4321      	orrs	r1, r4
  }

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d0ca:	8305      	strh	r5, [r0, #24]
  TIMx->CCER = tmpccer;
 800d0cc:	8401      	strh	r1, [r0, #32]
 800d0ce:	bd30      	pop	{r4, r5, pc}
 800d0d0:	40012c00 	.word	0x40012c00

0800d0d4 <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800d0d4:	b530      	push	{r4, r5, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 800d0d6:	8c04      	ldrh	r4, [r0, #32]
 800d0d8:	f024 0410 	bic.w	r4, r4, #16
 800d0dc:	0424      	lsls	r4, r4, #16
 800d0de:	0c24      	lsrs	r4, r4, #16
 800d0e0:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d0e2:	8b04      	ldrh	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800d0e4:	8c05      	ldrh	r5, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 800d0e6:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 800d0ea:	0524      	lsls	r4, r4, #20
 800d0ec:	0d24      	lsrs	r4, r4, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 800d0ee:	ea44 2202 	orr.w	r2, r4, r2, lsl #8
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 800d0f2:	ea42 3303 	orr.w	r3, r2, r3, lsl #12
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 800d0f6:	4a14      	ldr	r2, [pc, #80]	; (800d148 <TI2_Config+0x74>)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 800d0f8:	b2ad      	uxth	r5, r5
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 800d0fa:	4290      	cmp	r0, r2
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 800d0fc:	b29b      	uxth	r3, r3
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 800d0fe:	d012      	beq.n	800d126 <TI2_Config+0x52>
 800d100:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d104:	4290      	cmp	r0, r2
 800d106:	d00e      	beq.n	800d126 <TI2_Config+0x52>
 800d108:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800d10c:	d00b      	beq.n	800d126 <TI2_Config+0x52>
 800d10e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800d112:	4290      	cmp	r0, r2
 800d114:	d007      	beq.n	800d126 <TI2_Config+0x52>
 800d116:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d11a:	4290      	cmp	r0, r2
 800d11c:	d003      	beq.n	800d126 <TI2_Config+0x52>
     (TIMx == TIM4) ||(TIMx == TIM5))
 800d11e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d122:	4290      	cmp	r0, r2
 800d124:	d107      	bne.n	800d136 <TI2_Config+0x62>
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
 800d126:	f025 0520 	bic.w	r5, r5, #32
    tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800d12a:	f045 0510 	orr.w	r5, r5, #16
 800d12e:	ea45 1101 	orr.w	r1, r5, r1, lsl #4
 800d132:	b289      	uxth	r1, r1
 800d134:	e004      	b.n	800d140 <TI2_Config+0x6c>
  }
  else
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800d136:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
 800d13a:	f045 0510 	orr.w	r5, r5, #16
 800d13e:	4329      	orrs	r1, r5
  }
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d140:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800d142:	8401      	strh	r1, [r0, #32]
 800d144:	bd30      	pop	{r4, r5, pc}
 800d146:	bf00      	nop
 800d148:	40012c00 	.word	0x40012c00

0800d14c <TIM_DeInit>:
  * @brief  Deinitializes the TIMx peripheral registers to their default reset values.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval None
  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 800d14c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 800d14e:	4b5a      	ldr	r3, [pc, #360]	; (800d2b8 <TIM_DeInit+0x16c>)
 800d150:	4298      	cmp	r0, r3
 800d152:	d107      	bne.n	800d164 <TIM_DeInit+0x18>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 800d154:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800d158:	2101      	movs	r1, #1
 800d15a:	f7ff ff19 	bl	800cf90 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 800d15e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800d162:	e0a2      	b.n	800d2aa <TIM_DeInit+0x15e>
  }     
  else if (TIMx == TIM2)
 800d164:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800d168:	d105      	bne.n	800d176 <TIM_DeInit+0x2a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 800d16a:	2001      	movs	r0, #1
 800d16c:	4601      	mov	r1, r0
 800d16e:	f7ff ff1b 	bl	800cfa8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 800d172:	2001      	movs	r0, #1
 800d174:	e007      	b.n	800d186 <TIM_DeInit+0x3a>
  }
  else if (TIMx == TIM3)
 800d176:	4b51      	ldr	r3, [pc, #324]	; (800d2bc <TIM_DeInit+0x170>)
 800d178:	4298      	cmp	r0, r3
 800d17a:	d109      	bne.n	800d190 <TIM_DeInit+0x44>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 800d17c:	2002      	movs	r0, #2
 800d17e:	2101      	movs	r1, #1
 800d180:	f7ff ff12 	bl	800cfa8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 800d184:	2002      	movs	r0, #2
 800d186:	2100      	movs	r1, #0
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
    }  
  }
}
 800d188:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }
  else if (TIMx == TIM3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 800d18c:	f7ff bf0c 	b.w	800cfa8 <RCC_APB1PeriphResetCmd>
  }
  else if (TIMx == TIM4)
 800d190:	4b4b      	ldr	r3, [pc, #300]	; (800d2c0 <TIM_DeInit+0x174>)
 800d192:	4298      	cmp	r0, r3
 800d194:	d105      	bne.n	800d1a2 <TIM_DeInit+0x56>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 800d196:	2004      	movs	r0, #4
 800d198:	2101      	movs	r1, #1
 800d19a:	f7ff ff05 	bl	800cfa8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 800d19e:	2004      	movs	r0, #4
 800d1a0:	e7f1      	b.n	800d186 <TIM_DeInit+0x3a>
  } 
  else if (TIMx == TIM5)
 800d1a2:	4b48      	ldr	r3, [pc, #288]	; (800d2c4 <TIM_DeInit+0x178>)
 800d1a4:	4298      	cmp	r0, r3
 800d1a6:	d105      	bne.n	800d1b4 <TIM_DeInit+0x68>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 800d1a8:	2008      	movs	r0, #8
 800d1aa:	2101      	movs	r1, #1
 800d1ac:	f7ff fefc 	bl	800cfa8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 800d1b0:	2008      	movs	r0, #8
 800d1b2:	e7e8      	b.n	800d186 <TIM_DeInit+0x3a>
  } 
  else if (TIMx == TIM6)
 800d1b4:	4b44      	ldr	r3, [pc, #272]	; (800d2c8 <TIM_DeInit+0x17c>)
 800d1b6:	4298      	cmp	r0, r3
 800d1b8:	d105      	bne.n	800d1c6 <TIM_DeInit+0x7a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 800d1ba:	2010      	movs	r0, #16
 800d1bc:	2101      	movs	r1, #1
 800d1be:	f7ff fef3 	bl	800cfa8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 800d1c2:	2010      	movs	r0, #16
 800d1c4:	e7df      	b.n	800d186 <TIM_DeInit+0x3a>
  } 
  else if (TIMx == TIM7)
 800d1c6:	4b41      	ldr	r3, [pc, #260]	; (800d2cc <TIM_DeInit+0x180>)
 800d1c8:	4298      	cmp	r0, r3
 800d1ca:	d105      	bne.n	800d1d8 <TIM_DeInit+0x8c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 800d1cc:	2020      	movs	r0, #32
 800d1ce:	2101      	movs	r1, #1
 800d1d0:	f7ff feea 	bl	800cfa8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 800d1d4:	2020      	movs	r0, #32
 800d1d6:	e7d6      	b.n	800d186 <TIM_DeInit+0x3a>
  } 
  else if (TIMx == TIM8)
 800d1d8:	4b3d      	ldr	r3, [pc, #244]	; (800d2d0 <TIM_DeInit+0x184>)
 800d1da:	4298      	cmp	r0, r3
 800d1dc:	d107      	bne.n	800d1ee <TIM_DeInit+0xa2>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 800d1de:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800d1e2:	2101      	movs	r1, #1
 800d1e4:	f7ff fed4 	bl	800cf90 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
 800d1e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800d1ec:	e05d      	b.n	800d2aa <TIM_DeInit+0x15e>
  }
  else if (TIMx == TIM9)
 800d1ee:	4b39      	ldr	r3, [pc, #228]	; (800d2d4 <TIM_DeInit+0x188>)
 800d1f0:	4298      	cmp	r0, r3
 800d1f2:	d107      	bne.n	800d204 <TIM_DeInit+0xb8>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 800d1f4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800d1f8:	2101      	movs	r1, #1
 800d1fa:	f7ff fec9 	bl	800cf90 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 800d1fe:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800d202:	e052      	b.n	800d2aa <TIM_DeInit+0x15e>
   }  
  else if (TIMx == TIM10)
 800d204:	4b34      	ldr	r3, [pc, #208]	; (800d2d8 <TIM_DeInit+0x18c>)
 800d206:	4298      	cmp	r0, r3
 800d208:	d107      	bne.n	800d21a <TIM_DeInit+0xce>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 800d20a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800d20e:	2101      	movs	r1, #1
 800d210:	f7ff febe 	bl	800cf90 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 800d214:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800d218:	e047      	b.n	800d2aa <TIM_DeInit+0x15e>
  }  
  else if (TIMx == TIM11) 
 800d21a:	4b30      	ldr	r3, [pc, #192]	; (800d2dc <TIM_DeInit+0x190>)
 800d21c:	4298      	cmp	r0, r3
 800d21e:	d107      	bne.n	800d230 <TIM_DeInit+0xe4>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 800d220:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800d224:	2101      	movs	r1, #1
 800d226:	f7ff feb3 	bl	800cf90 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 800d22a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800d22e:	e03c      	b.n	800d2aa <TIM_DeInit+0x15e>
  }  
  else if (TIMx == TIM12)
 800d230:	4b2b      	ldr	r3, [pc, #172]	; (800d2e0 <TIM_DeInit+0x194>)
 800d232:	4298      	cmp	r0, r3
 800d234:	d105      	bne.n	800d242 <TIM_DeInit+0xf6>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 800d236:	2040      	movs	r0, #64	; 0x40
 800d238:	2101      	movs	r1, #1
 800d23a:	f7ff feb5 	bl	800cfa8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 800d23e:	2040      	movs	r0, #64	; 0x40
 800d240:	e7a1      	b.n	800d186 <TIM_DeInit+0x3a>
  }  
  else if (TIMx == TIM13) 
 800d242:	4b28      	ldr	r3, [pc, #160]	; (800d2e4 <TIM_DeInit+0x198>)
 800d244:	4298      	cmp	r0, r3
 800d246:	d105      	bne.n	800d254 <TIM_DeInit+0x108>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 800d248:	2080      	movs	r0, #128	; 0x80
 800d24a:	2101      	movs	r1, #1
 800d24c:	f7ff feac 	bl	800cfa8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 800d250:	2080      	movs	r0, #128	; 0x80
 800d252:	e798      	b.n	800d186 <TIM_DeInit+0x3a>
  }
  else if (TIMx == TIM14) 
 800d254:	4b24      	ldr	r3, [pc, #144]	; (800d2e8 <TIM_DeInit+0x19c>)
 800d256:	4298      	cmp	r0, r3
 800d258:	d107      	bne.n	800d26a <TIM_DeInit+0x11e>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 800d25a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800d25e:	2101      	movs	r1, #1
 800d260:	f7ff fea2 	bl	800cfa8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
 800d264:	f44f 7080 	mov.w	r0, #256	; 0x100
 800d268:	e78d      	b.n	800d186 <TIM_DeInit+0x3a>
  }        
  else if (TIMx == TIM15)
 800d26a:	4b20      	ldr	r3, [pc, #128]	; (800d2ec <TIM_DeInit+0x1a0>)
 800d26c:	4298      	cmp	r0, r3
 800d26e:	d107      	bne.n	800d280 <TIM_DeInit+0x134>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 800d270:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d274:	2101      	movs	r1, #1
 800d276:	f7ff fe8b 	bl	800cf90 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
 800d27a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d27e:	e014      	b.n	800d2aa <TIM_DeInit+0x15e>
  } 
  else if (TIMx == TIM16)
 800d280:	4b1b      	ldr	r3, [pc, #108]	; (800d2f0 <TIM_DeInit+0x1a4>)
 800d282:	4298      	cmp	r0, r3
 800d284:	d107      	bne.n	800d296 <TIM_DeInit+0x14a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 800d286:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800d28a:	2101      	movs	r1, #1
 800d28c:	f7ff fe80 	bl	800cf90 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
 800d290:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800d294:	e009      	b.n	800d2aa <TIM_DeInit+0x15e>
  } 
  else
  {
    if (TIMx == TIM17)
 800d296:	4b17      	ldr	r3, [pc, #92]	; (800d2f4 <TIM_DeInit+0x1a8>)
 800d298:	4298      	cmp	r0, r3
 800d29a:	d10b      	bne.n	800d2b4 <TIM_DeInit+0x168>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 800d29c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800d2a0:	2101      	movs	r1, #1
 800d2a2:	f7ff fe75 	bl	800cf90 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 800d2a6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800d2aa:	2100      	movs	r1, #0
    }  
  }
}
 800d2ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (TIMx == TIM17)
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 800d2b0:	f7ff be6e 	b.w	800cf90 <RCC_APB2PeriphResetCmd>
 800d2b4:	bd08      	pop	{r3, pc}
 800d2b6:	bf00      	nop
 800d2b8:	40012c00 	.word	0x40012c00
 800d2bc:	40000400 	.word	0x40000400
 800d2c0:	40000800 	.word	0x40000800
 800d2c4:	40000c00 	.word	0x40000c00
 800d2c8:	40001000 	.word	0x40001000
 800d2cc:	40001400 	.word	0x40001400
 800d2d0:	40013400 	.word	0x40013400
 800d2d4:	40014c00 	.word	0x40014c00
 800d2d8:	40015000 	.word	0x40015000
 800d2dc:	40015400 	.word	0x40015400
 800d2e0:	40001800 	.word	0x40001800
 800d2e4:	40001c00 	.word	0x40001c00
 800d2e8:	40002000 	.word	0x40002000
 800d2ec:	40014000 	.word	0x40014000
 800d2f0:	40014400 	.word	0x40014400
 800d2f4:	40014800 	.word	0x40014800

0800d2f8 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 800d2f8:	4a22      	ldr	r2, [pc, #136]	; (800d384 <TIM_TimeBaseInit+0x8c>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800d2fa:	8803      	ldrh	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 800d2fc:	4290      	cmp	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800d2fe:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 800d300:	d012      	beq.n	800d328 <TIM_TimeBaseInit+0x30>
 800d302:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d306:	4290      	cmp	r0, r2
 800d308:	d00e      	beq.n	800d328 <TIM_TimeBaseInit+0x30>
 800d30a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800d30e:	d00b      	beq.n	800d328 <TIM_TimeBaseInit+0x30>
 800d310:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800d314:	4290      	cmp	r0, r2
 800d316:	d007      	beq.n	800d328 <TIM_TimeBaseInit+0x30>
 800d318:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d31c:	4290      	cmp	r0, r2
 800d31e:	d003      	beq.n	800d328 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800d320:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d324:	4290      	cmp	r0, r2
 800d326:	d103      	bne.n	800d330 <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800d328:	884a      	ldrh	r2, [r1, #2]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 800d32a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800d32e:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800d330:	4a15      	ldr	r2, [pc, #84]	; (800d388 <TIM_TimeBaseInit+0x90>)
 800d332:	4290      	cmp	r0, r2
 800d334:	d008      	beq.n	800d348 <TIM_TimeBaseInit+0x50>
 800d336:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d33a:	4290      	cmp	r0, r2
 800d33c:	d004      	beq.n	800d348 <TIM_TimeBaseInit+0x50>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 800d33e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800d342:	88ca      	ldrh	r2, [r1, #6]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 800d344:	b29b      	uxth	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800d346:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 800d348:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800d34a:	888b      	ldrh	r3, [r1, #4]
 800d34c:	8583      	strh	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800d34e:	880b      	ldrh	r3, [r1, #0]
 800d350:	8503      	strh	r3, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 800d352:	4b0c      	ldr	r3, [pc, #48]	; (800d384 <TIM_TimeBaseInit+0x8c>)
 800d354:	4298      	cmp	r0, r3
 800d356:	d00f      	beq.n	800d378 <TIM_TimeBaseInit+0x80>
 800d358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d35c:	4298      	cmp	r0, r3
 800d35e:	d00b      	beq.n	800d378 <TIM_TimeBaseInit+0x80>
 800d360:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800d364:	4298      	cmp	r0, r3
 800d366:	d007      	beq.n	800d378 <TIM_TimeBaseInit+0x80>
 800d368:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d36c:	4298      	cmp	r0, r3
 800d36e:	d003      	beq.n	800d378 <TIM_TimeBaseInit+0x80>
 800d370:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d374:	4298      	cmp	r0, r3
 800d376:	d101      	bne.n	800d37c <TIM_TimeBaseInit+0x84>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800d378:	7a0b      	ldrb	r3, [r1, #8]
 800d37a:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 800d37c:	2301      	movs	r3, #1
 800d37e:	8283      	strh	r3, [r0, #20]
 800d380:	4770      	bx	lr
 800d382:	bf00      	nop
 800d384:	40012c00 	.word	0x40012c00
 800d388:	40001000 	.word	0x40001000

0800d38c <TIM_OC1Init>:
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 800d38c:	8c03      	ldrh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800d38e:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 800d390:	f023 0301 	bic.w	r3, r3, #1
 800d394:	041b      	lsls	r3, r3, #16
 800d396:	0c1b      	lsrs	r3, r3, #16
 800d398:	8403      	strh	r3, [r0, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d39a:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d39c:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d39e:	8b02      	ldrh	r2, [r0, #24]
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800d3a0:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 800d3a2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800d3a6:	0412      	lsls	r2, r2, #16
 800d3a8:	0c12      	lsrs	r2, r2, #16

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800d3aa:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 800d3ac:	884e      	ldrh	r6, [r1, #2]
 800d3ae:	890d      	ldrh	r5, [r1, #8]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 800d3b0:	f023 0302 	bic.w	r3, r3, #2
 800d3b4:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 800d3b6:	4335      	orrs	r5, r6
 800d3b8:	b2ad      	uxth	r5, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 800d3ba:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800d3bc:	432b      	orrs	r3, r5
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 800d3be:	4d14      	ldr	r5, [pc, #80]	; (800d410 <TIM_OC1Init+0x84>)
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3c0:	b2a4      	uxth	r4, r4
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 800d3c2:	42a8      	cmp	r0, r5
 800d3c4:	d00f      	beq.n	800d3e6 <TIM_OC1Init+0x5a>
 800d3c6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800d3ca:	42a8      	cmp	r0, r5
 800d3cc:	d00b      	beq.n	800d3e6 <TIM_OC1Init+0x5a>
 800d3ce:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800d3d2:	42a8      	cmp	r0, r5
 800d3d4:	d007      	beq.n	800d3e6 <TIM_OC1Init+0x5a>
 800d3d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800d3da:	42a8      	cmp	r0, r5
 800d3dc:	d003      	beq.n	800d3e6 <TIM_OC1Init+0x5a>
     (TIMx == TIM16)|| (TIMx == TIM17))
 800d3de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800d3e2:	42a8      	cmp	r0, r5
 800d3e4:	d10e      	bne.n	800d404 <TIM_OC1Init+0x78>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800d3e6:	894d      	ldrh	r5, [r1, #10]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 800d3e8:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800d3ec:	432b      	orrs	r3, r5
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800d3ee:	888d      	ldrh	r5, [r1, #4]
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 800d3f0:	f023 0304 	bic.w	r3, r3, #4
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800d3f4:	432b      	orrs	r3, r5
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 800d3f6:	89ce      	ldrh	r6, [r1, #14]
 800d3f8:	898d      	ldrh	r5, [r1, #12]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 800d3fa:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 800d3fe:	4335      	orrs	r5, r6
 800d400:	b2ad      	uxth	r5, r5
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 800d402:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d404:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d406:	8302      	strh	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 800d408:	88ca      	ldrh	r2, [r1, #6]
 800d40a:	8682      	strh	r2, [r0, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d40c:	8403      	strh	r3, [r0, #32]
 800d40e:	bd70      	pop	{r4, r5, r6, pc}
 800d410:	40012c00 	.word	0x40012c00

0800d414 <TIM_OC2Init>:
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 800d414:	8c03      	ldrh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800d416:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 800d418:	f023 0310 	bic.w	r3, r3, #16
 800d41c:	041b      	lsls	r3, r3, #16
 800d41e:	0c1b      	lsrs	r3, r3, #16
 800d420:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800d422:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d424:	8882      	ldrh	r2, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d426:	8b04      	ldrh	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800d428:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 800d42a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 800d42e:	0424      	lsls	r4, r4, #16
 800d430:	0c24      	lsrs	r4, r4, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 800d432:	f023 0320 	bic.w	r3, r3, #32
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800d436:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 800d43a:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 800d43c:	890d      	ldrh	r5, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 800d43e:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 800d440:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800d444:	884d      	ldrh	r5, [r1, #2]
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d446:	b292      	uxth	r2, r2
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800d448:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800d44c:	4d12      	ldr	r5, [pc, #72]	; (800d498 <TIM_OC2Init+0x84>)
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800d44e:	b2a4      	uxth	r4, r4
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800d450:	42a8      	cmp	r0, r5
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800d452:	b29b      	uxth	r3, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800d454:	d003      	beq.n	800d45e <TIM_OC2Init+0x4a>
 800d456:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800d45a:	42a8      	cmp	r0, r5
 800d45c:	d115      	bne.n	800d48a <TIM_OC2Init+0x76>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 800d45e:	894d      	ldrh	r5, [r1, #10]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 800d460:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d464:	b29b      	uxth	r3, r3
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 800d466:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 800d46a:	f64f 75bf 	movw	r5, #65471	; 0xffbf
 800d46e:	401d      	ands	r5, r3
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 800d470:	888b      	ldrh	r3, [r1, #4]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 800d472:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 800d476:	ea45 1303 	orr.w	r3, r5, r3, lsl #4
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800d47a:	898d      	ldrh	r5, [r1, #12]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 800d47c:	b29b      	uxth	r3, r3
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800d47e:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 800d482:	89cd      	ldrh	r5, [r1, #14]
 800d484:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 800d488:	b292      	uxth	r2, r2
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d48a:	8082      	strh	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 800d48c:	88ca      	ldrh	r2, [r1, #6]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d48e:	8304      	strh	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 800d490:	8702      	strh	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d492:	8403      	strh	r3, [r0, #32]
 800d494:	bd30      	pop	{r4, r5, pc}
 800d496:	bf00      	nop
 800d498:	40012c00 	.word	0x40012c00

0800d49c <TIM_OC3Init>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 800d49c:	8c03      	ldrh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800d49e:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 800d4a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d4a4:	041b      	lsls	r3, r3, #16
 800d4a6:	0c1b      	lsrs	r3, r3, #16
 800d4a8:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d4aa:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d4ac:	8882      	ldrh	r2, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d4ae:	8b84      	ldrh	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800d4b0:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 800d4b2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 800d4b6:	0424      	lsls	r4, r4, #16
 800d4b8:	0c24      	lsrs	r4, r4, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 800d4ba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800d4be:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 800d4c0:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800d4c2:	890d      	ldrh	r5, [r1, #8]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 800d4c4:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800d4c6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800d4ca:	884d      	ldrh	r5, [r1, #2]
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d4cc:	b292      	uxth	r2, r2
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800d4ce:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800d4d2:	4d12      	ldr	r5, [pc, #72]	; (800d51c <TIM_OC3Init+0x80>)
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800d4d4:	b29b      	uxth	r3, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800d4d6:	42a8      	cmp	r0, r5
 800d4d8:	d003      	beq.n	800d4e2 <TIM_OC3Init+0x46>
 800d4da:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800d4de:	42a8      	cmp	r0, r5
 800d4e0:	d115      	bne.n	800d50e <TIM_OC3Init+0x72>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800d4e2:	894d      	ldrh	r5, [r1, #10]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 800d4e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d4e8:	b29b      	uxth	r3, r3
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800d4ea:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 800d4ee:	f64f 35ff 	movw	r5, #64511	; 0xfbff
 800d4f2:	401d      	ands	r5, r3
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 800d4f4:	888b      	ldrh	r3, [r1, #4]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 800d4f6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 800d4fa:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 800d4fe:	898d      	ldrh	r5, [r1, #12]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 800d500:	b29b      	uxth	r3, r3
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 800d502:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800d506:	89cd      	ldrh	r5, [r1, #14]
 800d508:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 800d50c:	b292      	uxth	r2, r2
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d50e:	8082      	strh	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800d510:	88ca      	ldrh	r2, [r1, #6]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d512:	8384      	strh	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800d514:	8782      	strh	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d516:	8403      	strh	r3, [r0, #32]
 800d518:	bd30      	pop	{r4, r5, pc}
 800d51a:	bf00      	nop
 800d51c:	40012c00 	.word	0x40012c00

0800d520 <TIM_OC4Init>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 800d520:	8c03      	ldrh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800d522:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 800d524:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d528:	041b      	lsls	r3, r3, #16
 800d52a:	0c1b      	lsrs	r3, r3, #16
 800d52c:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d52e:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d530:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d532:	8b82      	ldrh	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800d534:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 800d536:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 800d53a:	0412      	lsls	r2, r2, #16
 800d53c:	0c12      	lsrs	r2, r2, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 800d53e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800d542:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 800d546:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800d548:	890d      	ldrh	r5, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 800d54a:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800d54c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 800d550:	884d      	ldrh	r5, [r1, #2]
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d552:	b2a4      	uxth	r4, r4
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 800d554:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800d558:	4d0a      	ldr	r5, [pc, #40]	; (800d584 <TIM_OC4Init+0x64>)
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800d55a:	b292      	uxth	r2, r2
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800d55c:	42a8      	cmp	r0, r5
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 800d55e:	b29b      	uxth	r3, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800d560:	d003      	beq.n	800d56a <TIM_OC4Init+0x4a>
 800d562:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800d566:	42a8      	cmp	r0, r5
 800d568:	d105      	bne.n	800d576 <TIM_OC4Init+0x56>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 800d56a:	898d      	ldrh	r5, [r1, #12]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
 800d56c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 800d570:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800d574:	b2a4      	uxth	r4, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d576:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800d578:	8382      	strh	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 800d57a:	88ca      	ldrh	r2, [r1, #6]
 800d57c:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d580:	8403      	strh	r3, [r0, #32]
 800d582:	bd30      	pop	{r4, r5, pc}
 800d584:	40012c00 	.word	0x40012c00

0800d588 <TIM_BDTRConfig>:
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800d588:	884a      	ldrh	r2, [r1, #2]
 800d58a:	880b      	ldrh	r3, [r1, #0]
 800d58c:	4313      	orrs	r3, r2
 800d58e:	888a      	ldrh	r2, [r1, #4]
 800d590:	4313      	orrs	r3, r2
 800d592:	88ca      	ldrh	r2, [r1, #6]
 800d594:	4313      	orrs	r3, r2
 800d596:	890a      	ldrh	r2, [r1, #8]
 800d598:	4313      	orrs	r3, r2
 800d59a:	894a      	ldrh	r2, [r1, #10]
 800d59c:	4313      	orrs	r3, r2
 800d59e:	898a      	ldrh	r2, [r1, #12]
 800d5a0:	4313      	orrs	r3, r2
 800d5a2:	b29b      	uxth	r3, r3
 800d5a4:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 800d5a8:	4770      	bx	lr

0800d5aa <TIM_TimeBaseStructInit>:
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
 800d5aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d5ae:	8083      	strh	r3, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 800d5b4:	80c3      	strh	r3, [r0, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 800d5b6:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 800d5b8:	7203      	strb	r3, [r0, #8]
 800d5ba:	4770      	bx	lr

0800d5bc <TIM_OCStructInit>:
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 800d5bc:	2300      	movs	r3, #0
 800d5be:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 800d5c0:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 800d5c2:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
 800d5c4:	80c3      	strh	r3, [r0, #6]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 800d5c6:	8103      	strh	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 800d5c8:	8143      	strh	r3, [r0, #10]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 800d5ca:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 800d5cc:	81c3      	strh	r3, [r0, #14]
 800d5ce:	4770      	bx	lr

0800d5d0 <TIM_ICStructInit>:
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 800d5d0:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 800d5d2:	2201      	movs	r2, #1
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 800d5d4:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 800d5d6:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 800d5d8:	8082      	strh	r2, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 800d5da:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 800d5dc:	8103      	strh	r3, [r0, #8]
 800d5de:	4770      	bx	lr

0800d5e0 <TIM_BDTRStructInit>:
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 800d5e4:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 800d5e6:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 800d5e8:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 800d5ea:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 800d5ec:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 800d5ee:	8183      	strh	r3, [r0, #12]
 800d5f0:	4770      	bx	lr

0800d5f2 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800d5f2:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800d5f4:	b119      	cbz	r1, 800d5fe <TIM_Cmd+0xc>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800d5f6:	b29b      	uxth	r3, r3
 800d5f8:	f043 0301 	orr.w	r3, r3, #1
 800d5fc:	e003      	b.n	800d606 <TIM_Cmd+0x14>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 800d5fe:	f023 0301 	bic.w	r3, r3, #1
 800d602:	041b      	lsls	r3, r3, #16
 800d604:	0c1b      	lsrs	r3, r3, #16
 800d606:	8003      	strh	r3, [r0, #0]
 800d608:	4770      	bx	lr

0800d60a <TIM_CtrlPWMOutputs>:
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 800d60a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800d60e:	b129      	cbz	r1, 800d61c <TIM_CtrlPWMOutputs+0x12>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 800d610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d618:	b29b      	uxth	r3, r3
 800d61a:	e001      	b.n	800d620 <TIM_CtrlPWMOutputs+0x16>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 800d61c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d620:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 800d624:	4770      	bx	lr

0800d626 <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800d626:	8983      	ldrh	r3, [r0, #12]
 800d628:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800d62a:	b10a      	cbz	r2, 800d630 <TIM_ITConfig+0xa>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800d62c:	4319      	orrs	r1, r3
 800d62e:	e001      	b.n	800d634 <TIM_ITConfig+0xe>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 800d630:	ea23 0101 	bic.w	r1, r3, r1
 800d634:	8181      	strh	r1, [r0, #12]
 800d636:	4770      	bx	lr

0800d638 <TIM_GenerateEvent>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
  
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 800d638:	8281      	strh	r1, [r0, #20]
 800d63a:	4770      	bx	lr

0800d63c <TIM_DMAConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 800d63c:	430a      	orrs	r2, r1
 800d63e:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
 800d642:	4770      	bx	lr

0800d644 <TIM_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 800d644:	8983      	ldrh	r3, [r0, #12]
 800d646:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_LIST9_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800d648:	b10a      	cbz	r2, 800d64e <TIM_DMACmd+0xa>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 800d64a:	4319      	orrs	r1, r3
 800d64c:	e001      	b.n	800d652 <TIM_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 800d64e:	ea23 0101 	bic.w	r1, r3, r1
 800d652:	8181      	strh	r1, [r0, #12]
 800d654:	4770      	bx	lr

0800d656 <TIM_InternalClockConfig>:
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 800d656:	8903      	ldrh	r3, [r0, #8]
 800d658:	f023 0307 	bic.w	r3, r3, #7
 800d65c:	041b      	lsls	r3, r3, #16
 800d65e:	0c1b      	lsrs	r3, r3, #16
 800d660:	8103      	strh	r3, [r0, #8]
 800d662:	4770      	bx	lr

0800d664 <TIM_ITRxExternalClockConfig>:
  uint16_t tmpsmcr = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d664:	8903      	ldrh	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 800d666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d66a:	041b      	lsls	r3, r3, #16
 800d66c:	0c1b      	lsrs	r3, r3, #16
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 800d66e:	4319      	orrs	r1, r3
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d670:	8101      	strh	r1, [r0, #8]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 800d672:	8903      	ldrh	r3, [r0, #8]
 800d674:	b29b      	uxth	r3, r3
 800d676:	f043 0307 	orr.w	r3, r3, #7
 800d67a:	8103      	strh	r3, [r0, #8]
 800d67c:	4770      	bx	lr

0800d67e <TIM_TIxExternalClockConfig>:
  *   This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 800d67e:	b538      	push	{r3, r4, r5, lr}
 800d680:	460d      	mov	r5, r1
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 800d682:	2d60      	cmp	r5, #96	; 0x60
  *   This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 800d684:	4611      	mov	r1, r2
 800d686:	4604      	mov	r4, r0
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 800d688:	f04f 0201 	mov.w	r2, #1
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 800d68c:	d102      	bne.n	800d694 <TIM_TIxExternalClockConfig+0x16>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 800d68e:	f7ff fd21 	bl	800d0d4 <TI2_Config>
 800d692:	e001      	b.n	800d698 <TIM_TIxExternalClockConfig+0x1a>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 800d694:	f7ff fcea 	bl	800d06c <TI1_Config>
  uint16_t tmpsmcr = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d698:	8923      	ldrh	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 800d69a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d69e:	041b      	lsls	r3, r3, #16
 800d6a0:	0c1b      	lsrs	r3, r3, #16
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 800d6a2:	432b      	orrs	r3, r5
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d6a4:	8123      	strh	r3, [r4, #8]
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 800d6a6:	8923      	ldrh	r3, [r4, #8]
 800d6a8:	b29b      	uxth	r3, r3
 800d6aa:	f043 0307 	orr.w	r3, r3, #7
 800d6ae:	8123      	strh	r3, [r4, #8]
 800d6b0:	bd38      	pop	{r3, r4, r5, pc}

0800d6b2 <TIM_ETRConfig>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                   uint16_t ExtTRGFilter)
{
 800d6b2:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  tmpsmcr = TIMx->SMCR;
 800d6b4:	8904      	ldrh	r4, [r0, #8]
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;
 800d6b6:	b2e4      	uxtb	r4, r4
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 800d6b8:	4321      	orrs	r1, r4
 800d6ba:	430a      	orrs	r2, r1
 800d6bc:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800d6c0:	b29c      	uxth	r4, r3
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d6c2:	8104      	strh	r4, [r0, #8]
 800d6c4:	bd10      	pop	{r4, pc}

0800d6c6 <TIM_ETRClockMode1Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                             uint16_t ExtTRGFilter)
{
 800d6c6:	b510      	push	{r4, lr}
 800d6c8:	4604      	mov	r4, r0
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 800d6ca:	f7ff fff2 	bl	800d6b2 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d6ce:	8923      	ldrh	r3, [r4, #8]
  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 800d6d0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d6d4:	041b      	lsls	r3, r3, #16
 800d6d6:	0c1b      	lsrs	r3, r3, #16
  tmpsmcr |= TIM_TS_ETRF;
 800d6d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d6dc:	8123      	strh	r3, [r4, #8]
 800d6de:	bd10      	pop	{r4, pc}

0800d6e0 <TIM_ETRClockMode2Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 800d6e0:	b510      	push	{r4, lr}
 800d6e2:	4604      	mov	r4, r0
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 800d6e4:	f7ff ffe5 	bl	800d6b2 <TIM_ETRConfig>
  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 800d6e8:	8923      	ldrh	r3, [r4, #8]
 800d6ea:	b29b      	uxth	r3, r3
 800d6ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d6f0:	8123      	strh	r3, [r4, #8]
 800d6f2:	bd10      	pop	{r4, pc}

0800d6f4 <TIM_PrescalerConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 800d6f4:	8501      	strh	r1, [r0, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 800d6f6:	8282      	strh	r2, [r0, #20]
 800d6f8:	4770      	bx	lr

0800d6fa <TIM_CounterModeConfig>:
{
  uint16_t tmpcr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
  tmpcr1 = TIMx->CR1;
 800d6fa:	8803      	ldrh	r3, [r0, #0]
  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 800d6fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d700:	041b      	lsls	r3, r3, #16
 800d702:	0c1b      	lsrs	r3, r3, #16
  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 800d704:	4319      	orrs	r1, r3
  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 800d706:	8001      	strh	r1, [r0, #0]
 800d708:	4770      	bx	lr

0800d70a <TIM_SelectInputTrigger>:
  uint16_t tmpsmcr = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d70a:	8903      	ldrh	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 800d70c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d710:	041b      	lsls	r3, r3, #16
 800d712:	0c1b      	lsrs	r3, r3, #16
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 800d714:	4319      	orrs	r1, r3
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d716:	8101      	strh	r1, [r0, #8]
 800d718:	4770      	bx	lr

0800d71a <TIM_EncoderInterfaceConfig>:
  *     @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 800d71a:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d71c:	8905      	ldrh	r5, [r0, #8]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800d71e:	8b04      	ldrh	r4, [r0, #24]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d720:	8c06      	ldrh	r6, [r0, #32]
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
  tmpsmcr |= TIM_EncoderMode;
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 800d722:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d726:	b2b6      	uxth	r6, r6
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
  tmpsmcr |= TIM_EncoderMode;
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 800d728:	f024 0403 	bic.w	r4, r4, #3
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
  
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
 800d72c:	f026 0622 	bic.w	r6, r6, #34	; 0x22
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 800d730:	f025 0507 	bic.w	r5, r5, #7
  tmpsmcr |= TIM_EncoderMode;
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 800d734:	0424      	lsls	r4, r4, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
  
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 800d736:	4332      	orrs	r2, r6
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 800d738:	042d      	lsls	r5, r5, #16
  tmpsmcr |= TIM_EncoderMode;
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 800d73a:	0c24      	lsrs	r4, r4, #16
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 800d73c:	0c2d      	lsrs	r5, r5, #16
  tmpsmcr |= TIM_EncoderMode;
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 800d73e:	f444 7480 	orr.w	r4, r4, #256	; 0x100
  
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 800d742:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
  tmpsmcr |= TIM_EncoderMode;
 800d746:	4329      	orrs	r1, r5
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 800d748:	f044 0401 	orr.w	r4, r4, #1
  
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 800d74c:	b29e      	uxth	r6, r3
  
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d74e:	8101      	strh	r1, [r0, #8]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800d750:	8304      	strh	r4, [r0, #24]
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d752:	8406      	strh	r6, [r0, #32]
 800d754:	bd70      	pop	{r4, r5, r6, pc}

0800d756 <TIM_ForcedOC1Config>:
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 800d756:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
 800d758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d75c:	041b      	lsls	r3, r3, #16
 800d75e:	0c1b      	lsrs	r3, r3, #16
  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 800d760:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800d762:	8301      	strh	r1, [r0, #24]
 800d764:	4770      	bx	lr

0800d766 <TIM_ForcedOC2Config>:
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 800d766:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
 800d768:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d76c:	041b      	lsls	r3, r3, #16
 800d76e:	0c1b      	lsrs	r3, r3, #16
  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 800d770:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800d774:	b28b      	uxth	r3, r1
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800d776:	8303      	strh	r3, [r0, #24]
 800d778:	4770      	bx	lr

0800d77a <TIM_ForcedOC3Config>:
{
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 800d77a:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
 800d77c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d780:	041b      	lsls	r3, r3, #16
 800d782:	0c1b      	lsrs	r3, r3, #16
  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 800d784:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800d786:	8381      	strh	r1, [r0, #28]
 800d788:	4770      	bx	lr

0800d78a <TIM_ForcedOC4Config>:
{
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 800d78a:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
 800d78c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d790:	041b      	lsls	r3, r3, #16
 800d792:	0c1b      	lsrs	r3, r3, #16
  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 800d794:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800d798:	b28b      	uxth	r3, r1
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800d79a:	8383      	strh	r3, [r0, #28]
 800d79c:	4770      	bx	lr

0800d79e <TIM_ARRPreloadConfig>:
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 800d79e:	8803      	ldrh	r3, [r0, #0]
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800d7a0:	b119      	cbz	r1, 800d7aa <TIM_ARRPreloadConfig+0xc>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 800d7a2:	b29b      	uxth	r3, r3
 800d7a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7a8:	e003      	b.n	800d7b2 <TIM_ARRPreloadConfig+0x14>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 800d7aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d7ae:	041b      	lsls	r3, r3, #16
 800d7b0:	0c1b      	lsrs	r3, r3, #16
 800d7b2:	8003      	strh	r3, [r0, #0]
 800d7b4:	4770      	bx	lr

0800d7b6 <TIM_SelectCOM>:
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 800d7b6:	8883      	ldrh	r3, [r0, #4]
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800d7b8:	b119      	cbz	r1, 800d7c2 <TIM_SelectCOM+0xc>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 800d7ba:	b29b      	uxth	r3, r3
 800d7bc:	f043 0304 	orr.w	r3, r3, #4
 800d7c0:	e003      	b.n	800d7ca <TIM_SelectCOM+0x14>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
 800d7c2:	f023 0304 	bic.w	r3, r3, #4
 800d7c6:	041b      	lsls	r3, r3, #16
 800d7c8:	0c1b      	lsrs	r3, r3, #16
 800d7ca:	8083      	strh	r3, [r0, #4]
 800d7cc:	4770      	bx	lr

0800d7ce <TIM_SelectCCDMA>:
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 800d7ce:	8883      	ldrh	r3, [r0, #4]
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800d7d0:	b119      	cbz	r1, 800d7da <TIM_SelectCCDMA+0xc>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 800d7d2:	b29b      	uxth	r3, r3
 800d7d4:	f043 0308 	orr.w	r3, r3, #8
 800d7d8:	e003      	b.n	800d7e2 <TIM_SelectCCDMA+0x14>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
 800d7da:	f023 0308 	bic.w	r3, r3, #8
 800d7de:	041b      	lsls	r3, r3, #16
 800d7e0:	0c1b      	lsrs	r3, r3, #16
 800d7e2:	8083      	strh	r3, [r0, #4]
 800d7e4:	4770      	bx	lr

0800d7e6 <TIM_CCPreloadControl>:
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 800d7e6:	8883      	ldrh	r3, [r0, #4]
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800d7e8:	b119      	cbz	r1, 800d7f2 <TIM_CCPreloadControl+0xc>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 800d7ea:	b29b      	uxth	r3, r3
 800d7ec:	f043 0301 	orr.w	r3, r3, #1
 800d7f0:	e003      	b.n	800d7fa <TIM_CCPreloadControl+0x14>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
 800d7f2:	f023 0301 	bic.w	r3, r3, #1
 800d7f6:	041b      	lsls	r3, r3, #16
 800d7f8:	0c1b      	lsrs	r3, r3, #16
 800d7fa:	8083      	strh	r3, [r0, #4]
 800d7fc:	4770      	bx	lr

0800d7fe <TIM_OC1PreloadConfig>:
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 800d7fe:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 800d800:	f023 0308 	bic.w	r3, r3, #8
 800d804:	041b      	lsls	r3, r3, #16
 800d806:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 800d808:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800d80a:	8301      	strh	r1, [r0, #24]
 800d80c:	4770      	bx	lr

0800d80e <TIM_OC2PreloadConfig>:
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 800d80e:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
 800d810:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d814:	041b      	lsls	r3, r3, #16
 800d816:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 800d818:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800d81c:	b28b      	uxth	r3, r1
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800d81e:	8303      	strh	r3, [r0, #24]
 800d820:	4770      	bx	lr

0800d822 <TIM_OC3PreloadConfig>:
{
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 800d822:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 800d824:	f023 0308 	bic.w	r3, r3, #8
 800d828:	041b      	lsls	r3, r3, #16
 800d82a:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 800d82c:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800d82e:	8381      	strh	r1, [r0, #28]
 800d830:	4770      	bx	lr

0800d832 <TIM_OC4PreloadConfig>:
{
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 800d832:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 800d834:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d838:	041b      	lsls	r3, r3, #16
 800d83a:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 800d83c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800d840:	b28b      	uxth	r3, r1
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800d842:	8383      	strh	r3, [r0, #28]
 800d844:	4770      	bx	lr

0800d846 <TIM_OC1FastConfig>:
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800d846:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
 800d848:	f023 0304 	bic.w	r3, r3, #4
 800d84c:	041b      	lsls	r3, r3, #16
 800d84e:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 800d850:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800d852:	8301      	strh	r1, [r0, #24]
 800d854:	4770      	bx	lr

0800d856 <TIM_OC2FastConfig>:
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800d856:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
 800d858:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d85c:	041b      	lsls	r3, r3, #16
 800d85e:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 800d860:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800d864:	b28b      	uxth	r3, r1
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800d866:	8303      	strh	r3, [r0, #24]
 800d868:	4770      	bx	lr

0800d86a <TIM_OC3FastConfig>:
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800d86a:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
 800d86c:	f023 0304 	bic.w	r3, r3, #4
 800d870:	041b      	lsls	r3, r3, #16
 800d872:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 800d874:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800d876:	8381      	strh	r1, [r0, #28]
 800d878:	4770      	bx	lr

0800d87a <TIM_OC4FastConfig>:
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800d87a:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
 800d87c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d880:	041b      	lsls	r3, r3, #16
 800d882:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 800d884:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800d888:	b28b      	uxth	r3, r1
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800d88a:	8383      	strh	r3, [r0, #28]
 800d88c:	4770      	bx	lr

0800d88e <TIM_ClearOC1Ref>:
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 800d88e:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
 800d890:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d894:	041b      	lsls	r3, r3, #16
 800d896:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 800d898:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800d89a:	8301      	strh	r1, [r0, #24]
 800d89c:	4770      	bx	lr

0800d89e <TIM_ClearOC2Ref>:
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr1 = TIMx->CCMR1;
 800d89e:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
 800d8a0:	f3c3 030e 	ubfx	r3, r3, #0, #15
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 800d8a4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800d8a8:	b28b      	uxth	r3, r1
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800d8aa:	8303      	strh	r3, [r0, #24]
 800d8ac:	4770      	bx	lr

0800d8ae <TIM_ClearOC3Ref>:
{
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
 800d8ae:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
 800d8b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d8b4:	041b      	lsls	r3, r3, #16
 800d8b6:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 800d8b8:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800d8ba:	8381      	strh	r1, [r0, #28]
 800d8bc:	4770      	bx	lr

0800d8be <TIM_ClearOC4Ref>:
{
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
 800d8be:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
 800d8c0:	f3c3 030e 	ubfx	r3, r3, #0, #15
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 800d8c4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800d8c8:	b28b      	uxth	r3, r1
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800d8ca:	8383      	strh	r3, [r0, #28]
 800d8cc:	4770      	bx	lr

0800d8ce <TIM_OC1PolarityConfig>:
{
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 800d8ce:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
 800d8d0:	f023 0302 	bic.w	r3, r3, #2
 800d8d4:	041b      	lsls	r3, r3, #16
 800d8d6:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCPolarity;
 800d8d8:	4319      	orrs	r1, r3
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800d8da:	8401      	strh	r1, [r0, #32]
 800d8dc:	4770      	bx	lr

0800d8de <TIM_OC1NPolarityConfig>:
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 800d8de:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
 800d8e0:	f023 0308 	bic.w	r3, r3, #8
 800d8e4:	041b      	lsls	r3, r3, #16
 800d8e6:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCNPolarity;
 800d8e8:	4319      	orrs	r1, r3
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800d8ea:	8401      	strh	r1, [r0, #32]
 800d8ec:	4770      	bx	lr

0800d8ee <TIM_OC2PolarityConfig>:
{
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 800d8ee:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
 800d8f0:	f023 0320 	bic.w	r3, r3, #32
 800d8f4:	041b      	lsls	r3, r3, #16
 800d8f6:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 800d8f8:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 800d8fc:	b28b      	uxth	r3, r1
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800d8fe:	8403      	strh	r3, [r0, #32]
 800d900:	4770      	bx	lr

0800d902 <TIM_OC2NPolarityConfig>:
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 800d902:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
 800d904:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d908:	041b      	lsls	r3, r3, #16
 800d90a:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 800d90c:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 800d910:	b28b      	uxth	r3, r1
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800d912:	8403      	strh	r3, [r0, #32]
 800d914:	4770      	bx	lr

0800d916 <TIM_OC3PolarityConfig>:
{
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 800d916:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
 800d918:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d91c:	041b      	lsls	r3, r3, #16
 800d91e:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 800d920:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800d924:	b28b      	uxth	r3, r1
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800d926:	8403      	strh	r3, [r0, #32]
 800d928:	4770      	bx	lr

0800d92a <TIM_OC3NPolarityConfig>:
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 800d92a:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
 800d92c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d930:	041b      	lsls	r3, r3, #16
 800d932:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 800d934:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800d938:	b28b      	uxth	r3, r1
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800d93a:	8403      	strh	r3, [r0, #32]
 800d93c:	4770      	bx	lr

0800d93e <TIM_OC4PolarityConfig>:
{
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 800d93e:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
 800d940:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d944:	041b      	lsls	r3, r3, #16
 800d946:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 800d948:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
 800d94c:	b28b      	uxth	r3, r1
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800d94e:	8403      	strh	r3, [r0, #32]
 800d950:	4770      	bx	lr

0800d952 <TIM_CCxCmd>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_Set << TIM_Channel;
 800d952:	2301      	movs	r3, #1
 800d954:	408b      	lsls	r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 800d956:	408a      	lsls	r2, r1
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *   This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 800d958:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_Set << TIM_Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 800d95a:	8c04      	ldrh	r4, [r0, #32]
 800d95c:	b2a4      	uxth	r4, r4
 800d95e:	ea24 0303 	bic.w	r3, r4, r3
 800d962:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 800d964:	8c03      	ldrh	r3, [r0, #32]
 800d966:	4313      	orrs	r3, r2
 800d968:	b29b      	uxth	r3, r3
 800d96a:	8403      	strh	r3, [r0, #32]
 800d96c:	bd10      	pop	{r4, pc}

0800d96e <TIM_CCxNCmd>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_Set << TIM_Channel;
 800d96e:	2304      	movs	r3, #4
 800d970:	408b      	lsls	r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 800d972:	408a      	lsls	r2, r1
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *   This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 800d974:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_Set << TIM_Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 800d976:	8c04      	ldrh	r4, [r0, #32]
 800d978:	b2a4      	uxth	r4, r4
 800d97a:	ea24 0303 	bic.w	r3, r4, r3
 800d97e:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 800d980:	8c03      	ldrh	r3, [r0, #32]
 800d982:	4313      	orrs	r3, r2
 800d984:	b29b      	uxth	r3, r3
 800d986:	8403      	strh	r3, [r0, #32]
 800d988:	bd10      	pop	{r4, pc}

0800d98a <TIM_SelectOCxM>:
  *     @arg TIM_ForcedAction_Active
  *     @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 800d98a:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_Offset;

  tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;
 800d98c:	2401      	movs	r4, #1
 800d98e:	408c      	lsls	r4, r1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 800d990:	8c05      	ldrh	r5, [r0, #32]
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_Offset;
 800d992:	f100 0318 	add.w	r3, r0, #24

  tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 800d996:	b2ad      	uxth	r5, r5
 800d998:	ea25 0404 	bic.w	r4, r5, r4
 800d99c:	8404      	strh	r4, [r0, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 800d99e:	f021 0008 	bic.w	r0, r1, #8
 800d9a2:	b930      	cbnz	r0, 800d9b2 <TIM_SelectOCxM+0x28>
  {
    tmp += (TIM_Channel>>1);
 800d9a4:	0849      	lsrs	r1, r1, #1

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
 800d9a6:	5858      	ldr	r0, [r3, r1]
 800d9a8:	f020 0070 	bic.w	r0, r0, #112	; 0x70
 800d9ac:	5058      	str	r0, [r3, r1]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 800d9ae:	5858      	ldr	r0, [r3, r1]
 800d9b0:	e009      	b.n	800d9c6 <TIM_SelectOCxM+0x3c>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 800d9b2:	3904      	subs	r1, #4
 800d9b4:	f3c1 014e 	ubfx	r1, r1, #1, #15

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
 800d9b8:	58c8      	ldr	r0, [r1, r3]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 800d9ba:	0212      	lsls	r2, r2, #8
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
 800d9bc:	f420 40e0 	bic.w	r0, r0, #28672	; 0x7000
 800d9c0:	50c8      	str	r0, [r1, r3]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 800d9c2:	58c8      	ldr	r0, [r1, r3]
 800d9c4:	b292      	uxth	r2, r2
 800d9c6:	4302      	orrs	r2, r0
 800d9c8:	50ca      	str	r2, [r1, r3]
 800d9ca:	bd30      	pop	{r4, r5, pc}

0800d9cc <TIM_UpdateDisableConfig>:
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 800d9cc:	8803      	ldrh	r3, [r0, #0]
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800d9ce:	b119      	cbz	r1, 800d9d8 <TIM_UpdateDisableConfig+0xc>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 800d9d0:	b29b      	uxth	r3, r3
 800d9d2:	f043 0302 	orr.w	r3, r3, #2
 800d9d6:	e003      	b.n	800d9e0 <TIM_UpdateDisableConfig+0x14>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
 800d9d8:	f023 0302 	bic.w	r3, r3, #2
 800d9dc:	041b      	lsls	r3, r3, #16
 800d9de:	0c1b      	lsrs	r3, r3, #16
 800d9e0:	8003      	strh	r3, [r0, #0]
 800d9e2:	4770      	bx	lr

0800d9e4 <TIM_UpdateRequestConfig>:
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 800d9e4:	8803      	ldrh	r3, [r0, #0]
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 800d9e6:	b119      	cbz	r1, 800d9f0 <TIM_UpdateRequestConfig+0xc>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 800d9e8:	b29b      	uxth	r3, r3
 800d9ea:	f043 0304 	orr.w	r3, r3, #4
 800d9ee:	e003      	b.n	800d9f8 <TIM_UpdateRequestConfig+0x14>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
 800d9f0:	f023 0304 	bic.w	r3, r3, #4
 800d9f4:	041b      	lsls	r3, r3, #16
 800d9f6:	0c1b      	lsrs	r3, r3, #16
 800d9f8:	8003      	strh	r3, [r0, #0]
 800d9fa:	4770      	bx	lr

0800d9fc <TIM_SelectHallSensor>:
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 800d9fc:	8883      	ldrh	r3, [r0, #4]
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800d9fe:	b119      	cbz	r1, 800da08 <TIM_SelectHallSensor+0xc>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 800da00:	b29b      	uxth	r3, r3
 800da02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da06:	e003      	b.n	800da10 <TIM_SelectHallSensor+0x14>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
 800da08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800da0c:	041b      	lsls	r3, r3, #16
 800da0e:	0c1b      	lsrs	r3, r3, #16
 800da10:	8083      	strh	r3, [r0, #4]
 800da12:	4770      	bx	lr

0800da14 <TIM_SelectOnePulseMode>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
 800da14:	8803      	ldrh	r3, [r0, #0]
 800da16:	f023 0308 	bic.w	r3, r3, #8
 800da1a:	041b      	lsls	r3, r3, #16
 800da1c:	0c1b      	lsrs	r3, r3, #16
 800da1e:	8003      	strh	r3, [r0, #0]
  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 800da20:	8803      	ldrh	r3, [r0, #0]
 800da22:	b29b      	uxth	r3, r3
 800da24:	4319      	orrs	r1, r3
 800da26:	8001      	strh	r1, [r0, #0]
 800da28:	4770      	bx	lr

0800da2a <TIM_SelectOutputTrigger>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST7_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
 800da2a:	8883      	ldrh	r3, [r0, #4]
 800da2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da30:	041b      	lsls	r3, r3, #16
 800da32:	0c1b      	lsrs	r3, r3, #16
 800da34:	8083      	strh	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 800da36:	8883      	ldrh	r3, [r0, #4]
 800da38:	b29b      	uxth	r3, r3
 800da3a:	4319      	orrs	r1, r3
 800da3c:	8081      	strh	r1, [r0, #4]
 800da3e:	4770      	bx	lr

0800da40 <TIM_SelectSlaveMode>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
 /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
 800da40:	8903      	ldrh	r3, [r0, #8]
 800da42:	f023 0307 	bic.w	r3, r3, #7
 800da46:	041b      	lsls	r3, r3, #16
 800da48:	0c1b      	lsrs	r3, r3, #16
 800da4a:	8103      	strh	r3, [r0, #8]
  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 800da4c:	8903      	ldrh	r3, [r0, #8]
 800da4e:	b29b      	uxth	r3, r3
 800da50:	4319      	orrs	r1, r3
 800da52:	8101      	strh	r1, [r0, #8]
 800da54:	4770      	bx	lr

0800da56 <TIM_SelectMasterSlaveMode>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
 800da56:	8903      	ldrh	r3, [r0, #8]
 800da58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800da5c:	041b      	lsls	r3, r3, #16
 800da5e:	0c1b      	lsrs	r3, r3, #16
 800da60:	8103      	strh	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 800da62:	8903      	ldrh	r3, [r0, #8]
 800da64:	b29b      	uxth	r3, r3
 800da66:	4319      	orrs	r1, r3
 800da68:	8101      	strh	r1, [r0, #8]
 800da6a:	4770      	bx	lr

0800da6c <TIM_SetCounter>:
void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 800da6c:	8481      	strh	r1, [r0, #36]	; 0x24
 800da6e:	4770      	bx	lr

0800da70 <TIM_SetAutoreload>:
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 800da70:	8581      	strh	r1, [r0, #44]	; 0x2c
 800da72:	4770      	bx	lr

0800da74 <TIM_SetCompare1>:
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 800da74:	8681      	strh	r1, [r0, #52]	; 0x34
 800da76:	4770      	bx	lr

0800da78 <TIM_SetCompare2>:
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 800da78:	8701      	strh	r1, [r0, #56]	; 0x38
 800da7a:	4770      	bx	lr

0800da7c <TIM_SetCompare3>:
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 800da7c:	8781      	strh	r1, [r0, #60]	; 0x3c
 800da7e:	4770      	bx	lr

0800da80 <TIM_SetCompare4>:
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 800da80:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 800da84:	4770      	bx	lr

0800da86 <TIM_SetIC1Prescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 800da86:	8b03      	ldrh	r3, [r0, #24]
 800da88:	f023 030c 	bic.w	r3, r3, #12
 800da8c:	041b      	lsls	r3, r3, #16
 800da8e:	0c1b      	lsrs	r3, r3, #16
 800da90:	8303      	strh	r3, [r0, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 800da92:	8b03      	ldrh	r3, [r0, #24]
 800da94:	b29b      	uxth	r3, r3
 800da96:	4319      	orrs	r1, r3
 800da98:	8301      	strh	r1, [r0, #24]
 800da9a:	4770      	bx	lr

0800da9c <TIM_SetIC2Prescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 800da9c:	8b03      	ldrh	r3, [r0, #24]
 800da9e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800daa2:	041b      	lsls	r3, r3, #16
 800daa4:	0c1b      	lsrs	r3, r3, #16
 800daa6:	8303      	strh	r3, [r0, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 800daa8:	8b03      	ldrh	r3, [r0, #24]
 800daaa:	b29b      	uxth	r3, r3
 800daac:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800dab0:	b28b      	uxth	r3, r1
 800dab2:	8303      	strh	r3, [r0, #24]
 800dab4:	4770      	bx	lr

0800dab6 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800dab6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dab8:	460c      	mov	r4, r1
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 800daba:	88a2      	ldrh	r2, [r4, #4]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 800dabc:	8849      	ldrh	r1, [r1, #2]
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800dabe:	f8b4 e000 	ldrh.w	lr, [r4]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800dac2:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 800dac4:	2900      	cmp	r1, #0
 800dac6:	bf0c      	ite	eq
 800dac8:	2702      	moveq	r7, #2
 800daca:	2700      	movne	r7, #0
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 800dacc:	2a01      	cmp	r2, #1
 800dace:	bf14      	ite	ne
 800dad0:	2601      	movne	r6, #1
 800dad2:	2602      	moveq	r6, #2
 800dad4:	8923      	ldrh	r3, [r4, #8]
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800dad6:	f1be 0f00 	cmp.w	lr, #0
 800dada:	d111      	bne.n	800db00 <TIM_PWMIConfig+0x4a>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800dadc:	f7ff fac6 	bl	800d06c <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800dae0:	4628      	mov	r0, r5
 800dae2:	88e1      	ldrh	r1, [r4, #6]
 800dae4:	f7ff ffcf 	bl	800da86 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 800dae8:	4628      	mov	r0, r5
 800daea:	4639      	mov	r1, r7
 800daec:	4632      	mov	r2, r6
 800daee:	8923      	ldrh	r3, [r4, #8]
 800daf0:	f7ff faf0 	bl	800d0d4 <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800daf4:	4628      	mov	r0, r5
 800daf6:	88e1      	ldrh	r1, [r4, #6]
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 800daf8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800dafc:	f7ff bfce 	b.w	800da9c <TIM_SetIC2Prescaler>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800db00:	f7ff fae8 	bl	800d0d4 <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800db04:	4628      	mov	r0, r5
 800db06:	88e1      	ldrh	r1, [r4, #6]
 800db08:	f7ff ffc8 	bl	800da9c <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 800db0c:	4628      	mov	r0, r5
 800db0e:	4639      	mov	r1, r7
 800db10:	4632      	mov	r2, r6
 800db12:	8923      	ldrh	r3, [r4, #8]
 800db14:	f7ff faaa 	bl	800d06c <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800db18:	4628      	mov	r0, r5
 800db1a:	88e1      	ldrh	r1, [r4, #6]
  }
}
 800db1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800db20:	f7ff bfb1 	b.w	800da86 <TIM_SetIC1Prescaler>

0800db24 <TIM_SetIC3Prescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 800db24:	8b83      	ldrh	r3, [r0, #28]
 800db26:	f023 030c 	bic.w	r3, r3, #12
 800db2a:	041b      	lsls	r3, r3, #16
 800db2c:	0c1b      	lsrs	r3, r3, #16
 800db2e:	8383      	strh	r3, [r0, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 800db30:	8b83      	ldrh	r3, [r0, #28]
 800db32:	b29b      	uxth	r3, r3
 800db34:	4319      	orrs	r1, r3
 800db36:	8381      	strh	r1, [r0, #28]
 800db38:	4770      	bx	lr

0800db3a <TIM_SetIC4Prescaler>:
{  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 800db3a:	8b83      	ldrh	r3, [r0, #28]
 800db3c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800db40:	041b      	lsls	r3, r3, #16
 800db42:	0c1b      	lsrs	r3, r3, #16
 800db44:	8383      	strh	r3, [r0, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 800db46:	8b83      	ldrh	r3, [r0, #28]
 800db48:	b29b      	uxth	r3, r3
 800db4a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800db4e:	b28b      	uxth	r3, r1
 800db50:	8383      	strh	r3, [r0, #28]
 800db52:	4770      	bx	lr

0800db54 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800db54:	b570      	push	{r4, r5, r6, lr}
  }
  else
  {
    assert_param(IS_TIM_IC_POLARITY_LITE(TIM_ICInitStruct->TIM_ICPolarity));
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800db56:	880e      	ldrh	r6, [r1, #0]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800db58:	460d      	mov	r5, r1
 800db5a:	4604      	mov	r4, r0
 800db5c:	8849      	ldrh	r1, [r1, #2]
 800db5e:	88aa      	ldrh	r2, [r5, #4]
 800db60:	892b      	ldrh	r3, [r5, #8]
  }
  else
  {
    assert_param(IS_TIM_IC_POLARITY_LITE(TIM_ICInitStruct->TIM_ICPolarity));
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800db62:	b93e      	cbnz	r6, 800db74 <TIM_ICInit+0x20>
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800db64:	f7ff fa82 	bl	800d06c <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800db68:	4620      	mov	r0, r4
 800db6a:	88e9      	ldrh	r1, [r5, #6]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 800db6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800db70:	f7ff bf89 	b.w	800da86 <TIM_SetIC1Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 800db74:	2e04      	cmp	r6, #4
 800db76:	d107      	bne.n	800db88 <TIM_ICInit+0x34>
  {
    assert_param(IS_TIM_LIST6_PERIPH(TIMx));
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800db78:	f7ff faac 	bl	800d0d4 <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800db7c:	4620      	mov	r0, r4
 800db7e:	88e9      	ldrh	r1, [r5, #6]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 800db80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800db84:	f7ff bf8a 	b.w	800da9c <TIM_SetIC2Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 800db88:	2e08      	cmp	r6, #8
 800db8a:	88ee      	ldrh	r6, [r5, #6]
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 800db8c:	8c05      	ldrh	r5, [r0, #32]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 800db8e:	d139      	bne.n	800dc04 <TIM_ICInit+0xb0>
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 800db90:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 800db94:	042d      	lsls	r5, r5, #16
 800db96:	0c2d      	lsrs	r5, r5, #16
 800db98:	8405      	strh	r5, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800db9a:	8b80      	ldrh	r0, [r0, #28]
  tmpccer = TIMx->CCER;
 800db9c:	8c25      	ldrh	r5, [r4, #32]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
  tmpccmr2 = TIMx->CCMR2;
 800db9e:	b280      	uxth	r0, r0
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
 800dba0:	f020 00f3 	bic.w	r0, r0, #243	; 0xf3
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800dba4:	ea40 1303 	orr.w	r3, r0, r3, lsl #4
 800dba8:	b29b      	uxth	r3, r3
 800dbaa:	431a      	orrs	r2, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 800dbac:	4b34      	ldr	r3, [pc, #208]	; (800dc80 <TIM_ICInit+0x12c>)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
 800dbae:	b2ad      	uxth	r5, r5
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 800dbb0:	429c      	cmp	r4, r3
 800dbb2:	d012      	beq.n	800dbda <TIM_ICInit+0x86>
 800dbb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbb8:	429c      	cmp	r4, r3
 800dbba:	d00e      	beq.n	800dbda <TIM_ICInit+0x86>
 800dbbc:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800dbc0:	d00b      	beq.n	800dbda <TIM_ICInit+0x86>
 800dbc2:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 800dbc6:	429c      	cmp	r4, r3
 800dbc8:	d007      	beq.n	800dbda <TIM_ICInit+0x86>
 800dbca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dbce:	429c      	cmp	r4, r3
 800dbd0:	d003      	beq.n	800dbda <TIM_ICInit+0x86>
     (TIMx == TIM4) ||(TIMx == TIM5))
 800dbd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dbd6:	429c      	cmp	r4, r3
 800dbd8:	d107      	bne.n	800dbea <TIM_ICInit+0x96>
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P));
 800dbda:	f425 7500 	bic.w	r5, r5, #512	; 0x200
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 800dbde:	ea45 2101 	orr.w	r1, r5, r1, lsl #8
 800dbe2:	b289      	uxth	r1, r1
 800dbe4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800dbe8:	e004      	b.n	800dbf4 <TIM_ICInit+0xa0>
  }
  else
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800dbea:	f425 6520 	bic.w	r5, r5, #2560	; 0xa00
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
 800dbee:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800dbf2:	4329      	orrs	r1, r5
  }
  
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800dbf4:	83a2      	strh	r2, [r4, #28]
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800dbf6:	4620      	mov	r0, r4
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
  }
  
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
  TIMx->CCER = tmpccer;
 800dbf8:	8421      	strh	r1, [r4, #32]
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800dbfa:	4631      	mov	r1, r6
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 800dbfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800dc00:	f7ff bf90 	b.w	800db24 <TIM_SetIC3Prescaler>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 800dc04:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 800dc08:	042d      	lsls	r5, r5, #16
 800dc0a:	0c2d      	lsrs	r5, r5, #16
 800dc0c:	8405      	strh	r5, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800dc0e:	8b80      	ldrh	r0, [r0, #28]
  tmpccer = TIMx->CCER;
 800dc10:	8c25      	ldrh	r5, [r4, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 800dc12:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800dc16:	0500      	lsls	r0, r0, #20
 800dc18:	0d00      	lsrs	r0, r0, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 800dc1a:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 800dc1e:	4a18      	ldr	r2, [pc, #96]	; (800dc80 <TIM_ICInit+0x12c>)
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 800dc20:	ea40 3303 	orr.w	r3, r0, r3, lsl #12
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 800dc24:	4294      	cmp	r4, r2
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
 800dc26:	b2ad      	uxth	r5, r5
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 800dc28:	b29b      	uxth	r3, r3
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 800dc2a:	d012      	beq.n	800dc52 <TIM_ICInit+0xfe>
 800dc2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dc30:	4294      	cmp	r4, r2
 800dc32:	d00e      	beq.n	800dc52 <TIM_ICInit+0xfe>
 800dc34:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800dc38:	d00b      	beq.n	800dc52 <TIM_ICInit+0xfe>
 800dc3a:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800dc3e:	4294      	cmp	r4, r2
 800dc40:	d007      	beq.n	800dc52 <TIM_ICInit+0xfe>
 800dc42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dc46:	4294      	cmp	r4, r2
 800dc48:	d003      	beq.n	800dc52 <TIM_ICInit+0xfe>
     (TIMx == TIM4) ||(TIMx == TIM5))
 800dc4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dc4e:	4294      	cmp	r4, r2
 800dc50:	d107      	bne.n	800dc62 <TIM_ICInit+0x10e>
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P));
 800dc52:	f425 5200 	bic.w	r2, r5, #8192	; 0x2000
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 800dc56:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 800dc5a:	b292      	uxth	r2, r2
 800dc5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dc60:	e005      	b.n	800dc6e <TIM_ICInit+0x11a>
  }
  else
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
 800dc62:	f647 52ff 	movw	r2, #32255	; 0x7dff
 800dc66:	402a      	ands	r2, r5
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
 800dc68:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800dc6c:	430a      	orrs	r2, r1
  }
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800dc6e:	83a3      	strh	r3, [r4, #28]
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800dc70:	4620      	mov	r0, r4
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
  }
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
  TIMx->CCER = tmpccer;
 800dc72:	8422      	strh	r2, [r4, #32]
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800dc74:	4631      	mov	r1, r6
  }
}
 800dc76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800dc7a:	f7ff bf5e 	b.w	800db3a <TIM_SetIC4Prescaler>
 800dc7e:	bf00      	nop
 800dc80:	40012c00 	.word	0x40012c00

0800dc84 <TIM_SetClockDivision>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));
  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
 800dc84:	8803      	ldrh	r3, [r0, #0]
 800dc86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dc8a:	041b      	lsls	r3, r3, #16
 800dc8c:	0c1b      	lsrs	r3, r3, #16
 800dc8e:	8003      	strh	r3, [r0, #0]
  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 800dc90:	8803      	ldrh	r3, [r0, #0]
 800dc92:	b29b      	uxth	r3, r3
 800dc94:	4319      	orrs	r1, r3
 800dc96:	8001      	strh	r1, [r0, #0]
 800dc98:	4770      	bx	lr

0800dc9a <TIM_GetCapture1>:
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 800dc9a:	8e80      	ldrh	r0, [r0, #52]	; 0x34
}
 800dc9c:	b280      	uxth	r0, r0
 800dc9e:	4770      	bx	lr

0800dca0 <TIM_GetCapture2>:
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 800dca0:	8f00      	ldrh	r0, [r0, #56]	; 0x38
}
 800dca2:	b280      	uxth	r0, r0
 800dca4:	4770      	bx	lr

0800dca6 <TIM_GetCapture3>:
uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 800dca6:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
}
 800dca8:	b280      	uxth	r0, r0
 800dcaa:	4770      	bx	lr

0800dcac <TIM_GetCapture4>:
uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 800dcac:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
}
 800dcb0:	b280      	uxth	r0, r0
 800dcb2:	4770      	bx	lr

0800dcb4 <TIM_GetCounter>:
uint16_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Counter Register value */
  return TIMx->CNT;
 800dcb4:	8c80      	ldrh	r0, [r0, #36]	; 0x24
}
 800dcb6:	b280      	uxth	r0, r0
 800dcb8:	4770      	bx	lr

0800dcba <TIM_GetPrescaler>:
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Prescaler Register value */
  return TIMx->PSC;
 800dcba:	8d00      	ldrh	r0, [r0, #40]	; 0x28
}
 800dcbc:	b280      	uxth	r0, r0
 800dcbe:	4770      	bx	lr

0800dcc0 <TIM_GetFlagStatus>:
  ITStatus bitstatus = RESET;  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 800dcc0:	8a03      	ldrh	r3, [r0, #16]
 800dcc2:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 800dcc4:	bf0c      	ite	eq
 800dcc6:	2000      	moveq	r0, #0
 800dcc8:	2001      	movne	r0, #1
 800dcca:	4770      	bx	lr

0800dccc <TIM_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 800dccc:	43c9      	mvns	r1, r1
 800dcce:	b289      	uxth	r1, r1
 800dcd0:	8201      	strh	r1, [r0, #16]
 800dcd2:	4770      	bx	lr

0800dcd4 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 800dcd4:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 800dcd6:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800dcd8:	ea11 0003 	ands.w	r0, r1, r3
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
  
  itenable = TIMx->DIER & TIM_IT;
 800dcdc:	b292      	uxth	r2, r2
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800dcde:	d003      	beq.n	800dce8 <TIM_GetITStatus+0x14>
 800dce0:	4211      	tst	r1, r2
  {
    bitstatus = SET;
 800dce2:	bf0c      	ite	eq
 800dce4:	2000      	moveq	r0, #0
 800dce6:	2001      	movne	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 800dce8:	4770      	bx	lr

0800dcea <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800dcea:	43c9      	mvns	r1, r1
 800dcec:	b289      	uxth	r1, r1
 800dcee:	8201      	strh	r1, [r0, #16]
 800dcf0:	4770      	bx	lr
 800dcf2:	bf00      	nop

0800dcf4 <USART_DeInit>:
  *   This parameter can be one of the following values: 
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 800dcf4:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 800dcf6:	4b20      	ldr	r3, [pc, #128]	; (800dd78 <USART_DeInit+0x84>)
 800dcf8:	4298      	cmp	r0, r3
 800dcfa:	d10b      	bne.n	800dd14 <USART_DeInit+0x20>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 800dcfc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800dd00:	2101      	movs	r1, #1
 800dd02:	f7ff f945 	bl	800cf90 <RCC_APB2PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    }
  }
}
 800dd06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 800dd0a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800dd0e:	2100      	movs	r1, #0
 800dd10:	f7ff b93e 	b.w	800cf90 <RCC_APB2PeriphResetCmd>
  }
  else if (USARTx == USART2)
 800dd14:	4b19      	ldr	r3, [pc, #100]	; (800dd7c <USART_DeInit+0x88>)
 800dd16:	4298      	cmp	r0, r3
 800dd18:	d107      	bne.n	800dd2a <USART_DeInit+0x36>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 800dd1a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800dd1e:	2101      	movs	r1, #1
 800dd20:	f7ff f942 	bl	800cfa8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 800dd24:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800dd28:	e01f      	b.n	800dd6a <USART_DeInit+0x76>
  }
  else if (USARTx == USART3)
 800dd2a:	4b15      	ldr	r3, [pc, #84]	; (800dd80 <USART_DeInit+0x8c>)
 800dd2c:	4298      	cmp	r0, r3
 800dd2e:	d107      	bne.n	800dd40 <USART_DeInit+0x4c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 800dd30:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800dd34:	2101      	movs	r1, #1
 800dd36:	f7ff f937 	bl	800cfa8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 800dd3a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800dd3e:	e014      	b.n	800dd6a <USART_DeInit+0x76>
  }    
  else if (USARTx == UART4)
 800dd40:	4b10      	ldr	r3, [pc, #64]	; (800dd84 <USART_DeInit+0x90>)
 800dd42:	4298      	cmp	r0, r3
 800dd44:	d107      	bne.n	800dd56 <USART_DeInit+0x62>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 800dd46:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800dd4a:	2101      	movs	r1, #1
 800dd4c:	f7ff f92c 	bl	800cfa8 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 800dd50:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800dd54:	e009      	b.n	800dd6a <USART_DeInit+0x76>
  }    
  else
  {
    if (USARTx == UART5)
 800dd56:	4b0c      	ldr	r3, [pc, #48]	; (800dd88 <USART_DeInit+0x94>)
 800dd58:	4298      	cmp	r0, r3
 800dd5a:	d10b      	bne.n	800dd74 <USART_DeInit+0x80>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 800dd5c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800dd60:	2101      	movs	r1, #1
 800dd62:	f7ff f921 	bl	800cfa8 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 800dd66:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800dd6a:	2100      	movs	r1, #0
    }
  }
}
 800dd6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == UART5)
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 800dd70:	f7ff b91a 	b.w	800cfa8 <RCC_APB1PeriphResetCmd>
 800dd74:	bd08      	pop	{r3, pc}
 800dd76:	bf00      	nop
 800dd78:	40013800 	.word	0x40013800
 800dd7c:	40004400 	.word	0x40004400
 800dd80:	40004800 	.word	0x40004800
 800dd84:	40004c00 	.word	0x40004c00
 800dd88:	40005000 	.word	0x40005000

0800dd8c <USART_Init>:
  }

  usartxbase = (uint32_t)USARTx;

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800dd8c:	8a03      	ldrh	r3, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800dd8e:	88ca      	ldrh	r2, [r1, #6]
  }

  usartxbase = (uint32_t)USARTx;

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800dd90:	b29b      	uxth	r3, r3
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 800dd92:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800dd96:	4313      	orrs	r3, r2
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800dd98:	b530      	push	{r4, r5, lr}
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800dd9a:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800dd9c:	8983      	ldrh	r3, [r0, #12]
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800dd9e:	460d      	mov	r5, r1
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800dda0:	88aa      	ldrh	r2, [r5, #4]
 800dda2:	8909      	ldrh	r1, [r1, #8]
  USARTx->CR2 = (uint16_t)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 800dda4:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800dda8:	430a      	orrs	r2, r1
  USARTx->CR2 = (uint16_t)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 800ddaa:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800ddae:	8969      	ldrh	r1, [r5, #10]
  USARTx->CR2 = (uint16_t)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 800ddb0:	041b      	lsls	r3, r3, #16
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800ddb2:	430a      	orrs	r2, r1
  USARTx->CR2 = (uint16_t)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 800ddb4:	0c1b      	lsrs	r3, r3, #16
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800ddb6:	4313      	orrs	r3, r2
 800ddb8:	b29b      	uxth	r3, r3
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800ddba:	8183      	strh	r3, [r0, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800ddbc:	8a83      	ldrh	r3, [r0, #20]
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800ddbe:	89aa      	ldrh	r2, [r5, #12]
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800ddc0:	b29b      	uxth	r3, r3
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 800ddc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800ddc6:	b087      	sub	sp, #28
  tmpreg = USARTx->CR3;
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800ddc8:	4313      	orrs	r3, r2
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800ddca:	4604      	mov	r4, r0
  tmpreg &= CR3_CLEAR_Mask;
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800ddcc:	8283      	strh	r3, [r0, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800ddce:	a801      	add	r0, sp, #4
 800ddd0:	f7ff f876 	bl	800cec0 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800ddd4:	4917      	ldr	r1, [pc, #92]	; (800de34 <USART_Init+0xa8>)
 800ddd6:	9a04      	ldr	r2, [sp, #16]
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800ddd8:	9b03      	ldr	r3, [sp, #12]
/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
  if (usartxbase == USART1_BASE)
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800ddda:	428c      	cmp	r4, r1
 800dddc:	bf08      	it	eq
 800ddde:	4613      	moveq	r3, r2
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 800dde0:	89a2      	ldrh	r2, [r4, #12]
 800dde2:	2119      	movs	r1, #25
 800dde4:	b212      	sxth	r2, r2
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800dde6:	4359      	muls	r1, r3
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 800dde8:	2a00      	cmp	r2, #0
 800ddea:	682a      	ldr	r2, [r5, #0]
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;
 800ddec:	f04f 0364 	mov.w	r3, #100	; 0x64
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800ddf0:	bfb4      	ite	lt
 800ddf2:	0052      	lsllt	r2, r2, #1
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800ddf4:	0092      	lslge	r2, r2, #2
 800ddf6:	fbb1 f1f2 	udiv	r1, r1, r2
  }
  tmpreg = (integerdivider / 100) << 4;
 800ddfa:	fbb1 f2f3 	udiv	r2, r1, r3
 800ddfe:	0112      	lsls	r2, r2, #4

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800de00:	0910      	lsrs	r0, r2, #4
 800de02:	fb03 1110 	mls	r1, r3, r0, r1

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 800de06:	89a0      	ldrh	r0, [r4, #12]
 800de08:	b200      	sxth	r0, r0
 800de0a:	2800      	cmp	r0, #0
 800de0c:	da06      	bge.n	800de1c <USART_Init+0x90>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800de0e:	00c9      	lsls	r1, r1, #3
 800de10:	3132      	adds	r1, #50	; 0x32
 800de12:	fbb1 f3f3 	udiv	r3, r1, r3
 800de16:	f003 0307 	and.w	r3, r3, #7
 800de1a:	e005      	b.n	800de28 <USART_Init+0x9c>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800de1c:	0109      	lsls	r1, r1, #4
 800de1e:	3132      	adds	r1, #50	; 0x32
 800de20:	fbb1 f3f3 	udiv	r3, r1, r3
 800de24:	f003 030f 	and.w	r3, r3, #15
 800de28:	431a      	orrs	r2, r3
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 800de2a:	b292      	uxth	r2, r2
 800de2c:	8122      	strh	r2, [r4, #8]
}
 800de2e:	b007      	add	sp, #28
 800de30:	bd30      	pop	{r4, r5, pc}
 800de32:	bf00      	nop
 800de34:	40013800 	.word	0x40013800

0800de38 <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 800de38:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800de3c:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800de3e:	220c      	movs	r2, #12
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 800de40:	2300      	movs	r3, #0
 800de42:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 800de44:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 800de46:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800de48:	8142      	strh	r2, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 800de4a:	8183      	strh	r3, [r0, #12]
 800de4c:	4770      	bx	lr

0800de4e <USART_ClockInit>:
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800de4e:	880b      	ldrh	r3, [r1, #0]
  *         USART peripheral.  
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 800de50:	b510      	push	{r4, lr}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800de52:	884c      	ldrh	r4, [r1, #2]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800de54:	8a02      	ldrh	r2, [r0, #16]
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800de56:	4323      	orrs	r3, r4
 800de58:	888c      	ldrh	r4, [r1, #4]
 800de5a:	88c9      	ldrh	r1, [r1, #6]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800de5c:	b292      	uxth	r2, r2
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800de5e:	4323      	orrs	r3, r4
 800de60:	430b      	orrs	r3, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
 800de62:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 800de66:	4313      	orrs	r3, r2
 800de68:	b29b      	uxth	r3, r3
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800de6a:	8203      	strh	r3, [r0, #16]
 800de6c:	bd10      	pop	{r4, pc}

0800de6e <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 800de6e:	2300      	movs	r3, #0
 800de70:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 800de72:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 800de74:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 800de76:	80c3      	strh	r3, [r0, #6]
 800de78:	4770      	bx	lr

0800de7a <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 800de7a:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800de7c:	b119      	cbz	r1, 800de86 <USART_Cmd+0xc>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 800de7e:	b29b      	uxth	r3, r3
 800de80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800de84:	e003      	b.n	800de8e <USART_Cmd+0x14>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 800de86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800de8a:	041b      	lsls	r3, r3, #16
 800de8c:	0c1b      	lsrs	r3, r3, #16
 800de8e:	8183      	strh	r3, [r0, #12]
 800de90:	4770      	bx	lr

0800de92 <USART_ITConfig>:
  }   
  
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800de92:	f3c1 1342 	ubfx	r3, r1, #5, #3
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 800de96:	b510      	push	{r4, lr}
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
  itmask = (((uint32_t)0x01) << itpos);
 800de98:	2401      	movs	r4, #1
 800de9a:	f001 011f 	and.w	r1, r1, #31
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800de9e:	42a3      	cmp	r3, r4
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
  itmask = (((uint32_t)0x01) << itpos);
 800dea0:	fa04 f101 	lsl.w	r1, r4, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800dea4:	d101      	bne.n	800deaa <USART_ITConfig+0x18>
  {
    usartxbase += 0x0C;
 800dea6:	300c      	adds	r0, #12
 800dea8:	e003      	b.n	800deb2 <USART_ITConfig+0x20>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800deaa:	2b02      	cmp	r3, #2
  {
    usartxbase += 0x10;
 800deac:	bf0c      	ite	eq
 800deae:	3010      	addeq	r0, #16
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 800deb0:	3014      	addne	r0, #20
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800deb2:	6803      	ldr	r3, [r0, #0]
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
 800deb4:	b10a      	cbz	r2, 800deba <USART_ITConfig+0x28>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800deb6:	4319      	orrs	r1, r3
 800deb8:	e001      	b.n	800debe <USART_ITConfig+0x2c>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800deba:	ea23 0101 	bic.w	r1, r3, r1
 800debe:	6001      	str	r1, [r0, #0]
 800dec0:	bd10      	pop	{r4, pc}

0800dec2 <USART_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 800dec2:	8a83      	ldrh	r3, [r0, #20]
 800dec4:	b29b      	uxth	r3, r3
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
 800dec6:	b10a      	cbz	r2, 800decc <USART_DMACmd+0xa>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 800dec8:	4319      	orrs	r1, r3
 800deca:	e001      	b.n	800ded0 <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 800decc:	ea23 0101 	bic.w	r1, r3, r1
 800ded0:	8281      	strh	r1, [r0, #20]
 800ded2:	4770      	bx	lr

0800ded4 <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
 800ded4:	8a03      	ldrh	r3, [r0, #16]
 800ded6:	f023 030f 	bic.w	r3, r3, #15
 800deda:	041b      	lsls	r3, r3, #16
 800dedc:	0c1b      	lsrs	r3, r3, #16
 800dede:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 800dee0:	8a03      	ldrh	r3, [r0, #16]
 800dee2:	b29b      	uxth	r3, r3
 800dee4:	4319      	orrs	r1, r3
 800dee6:	8201      	strh	r1, [r0, #16]
 800dee8:	4770      	bx	lr

0800deea <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
 800deea:	8983      	ldrh	r3, [r0, #12]
 800deec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800def0:	041b      	lsls	r3, r3, #16
 800def2:	0c1b      	lsrs	r3, r3, #16
 800def4:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 800def6:	8983      	ldrh	r3, [r0, #12]
 800def8:	b29b      	uxth	r3, r3
 800defa:	4319      	orrs	r1, r3
 800defc:	8181      	strh	r1, [r0, #12]
 800defe:	4770      	bx	lr

0800df00 <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
 800df00:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 800df02:	b119      	cbz	r1, 800df0c <USART_ReceiverWakeUpCmd+0xc>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
 800df04:	b29b      	uxth	r3, r3
 800df06:	f043 0302 	orr.w	r3, r3, #2
 800df0a:	e003      	b.n	800df14 <USART_ReceiverWakeUpCmd+0x14>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
 800df0c:	f023 0302 	bic.w	r3, r3, #2
 800df10:	041b      	lsls	r3, r3, #16
 800df12:	0c1b      	lsrs	r3, r3, #16
 800df14:	8183      	strh	r3, [r0, #12]
 800df16:	4770      	bx	lr

0800df18 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
 800df18:	8a03      	ldrh	r3, [r0, #16]
 800df1a:	f023 0320 	bic.w	r3, r3, #32
 800df1e:	041b      	lsls	r3, r3, #16
 800df20:	0c1b      	lsrs	r3, r3, #16
 800df22:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 800df24:	8a03      	ldrh	r3, [r0, #16]
 800df26:	b29b      	uxth	r3, r3
 800df28:	4319      	orrs	r1, r3
 800df2a:	8201      	strh	r1, [r0, #16]
 800df2c:	4770      	bx	lr

0800df2e <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
 800df2e:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800df30:	b119      	cbz	r1, 800df3a <USART_LINCmd+0xc>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
 800df32:	b29b      	uxth	r3, r3
 800df34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800df38:	e003      	b.n	800df42 <USART_LINCmd+0x14>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
 800df3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800df3e:	041b      	lsls	r3, r3, #16
 800df40:	0c1b      	lsrs	r3, r3, #16
 800df42:	8203      	strh	r3, [r0, #16]
 800df44:	4770      	bx	lr

0800df46 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800df46:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800df4a:	8081      	strh	r1, [r0, #4]
 800df4c:	4770      	bx	lr

0800df4e <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 800df4e:	8880      	ldrh	r0, [r0, #4]
}
 800df50:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800df54:	4770      	bx	lr

0800df56 <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
 800df56:	8983      	ldrh	r3, [r0, #12]
 800df58:	b29b      	uxth	r3, r3
 800df5a:	f043 0301 	orr.w	r3, r3, #1
 800df5e:	8183      	strh	r3, [r0, #12]
 800df60:	4770      	bx	lr

0800df62 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
 800df62:	8b03      	ldrh	r3, [r0, #24]
 800df64:	b2db      	uxtb	r3, r3
 800df66:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 800df68:	8b03      	ldrh	r3, [r0, #24]
 800df6a:	b29b      	uxth	r3, r3
 800df6c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800df70:	8301      	strh	r1, [r0, #24]
 800df72:	4770      	bx	lr

0800df74 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
 800df74:	8b03      	ldrh	r3, [r0, #24]
 800df76:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800df7a:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 800df7c:	8b03      	ldrh	r3, [r0, #24]
 800df7e:	b29b      	uxth	r3, r3
 800df80:	4319      	orrs	r1, r3
 800df82:	8301      	strh	r1, [r0, #24]
 800df84:	4770      	bx	lr

0800df86 <USART_SmartCardCmd>:
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
 800df86:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800df88:	b119      	cbz	r1, 800df92 <USART_SmartCardCmd+0xc>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
 800df8a:	b29b      	uxth	r3, r3
 800df8c:	f043 0320 	orr.w	r3, r3, #32
 800df90:	e003      	b.n	800df9a <USART_SmartCardCmd+0x14>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
 800df92:	f023 0320 	bic.w	r3, r3, #32
 800df96:	041b      	lsls	r3, r3, #16
 800df98:	0c1b      	lsrs	r3, r3, #16
 800df9a:	8283      	strh	r3, [r0, #20]
 800df9c:	4770      	bx	lr

0800df9e <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
 800df9e:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800dfa0:	b119      	cbz	r1, 800dfaa <USART_SmartCardNACKCmd+0xc>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
 800dfa2:	b29b      	uxth	r3, r3
 800dfa4:	f043 0310 	orr.w	r3, r3, #16
 800dfa8:	e003      	b.n	800dfb2 <USART_SmartCardNACKCmd+0x14>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
 800dfaa:	f023 0310 	bic.w	r3, r3, #16
 800dfae:	041b      	lsls	r3, r3, #16
 800dfb0:	0c1b      	lsrs	r3, r3, #16
 800dfb2:	8283      	strh	r3, [r0, #20]
 800dfb4:	4770      	bx	lr

0800dfb6 <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
 800dfb6:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800dfb8:	b119      	cbz	r1, 800dfc2 <USART_HalfDuplexCmd+0xc>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
 800dfba:	b29b      	uxth	r3, r3
 800dfbc:	f043 0308 	orr.w	r3, r3, #8
 800dfc0:	e003      	b.n	800dfca <USART_HalfDuplexCmd+0x14>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
 800dfc2:	f023 0308 	bic.w	r3, r3, #8
 800dfc6:	041b      	lsls	r3, r3, #16
 800dfc8:	0c1b      	lsrs	r3, r3, #16
 800dfca:	8283      	strh	r3, [r0, #20]
 800dfcc:	4770      	bx	lr

0800dfce <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
 800dfce:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800dfd0:	b129      	cbz	r1, 800dfde <USART_OverSampling8Cmd+0x10>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
 800dfd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dfd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dfda:	b29b      	uxth	r3, r3
 800dfdc:	e001      	b.n	800dfe2 <USART_OverSampling8Cmd+0x14>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
 800dfde:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800dfe2:	8183      	strh	r3, [r0, #12]
 800dfe4:	4770      	bx	lr

0800dfe6 <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
 800dfe6:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800dfe8:	b119      	cbz	r1, 800dff2 <USART_OneBitMethodCmd+0xc>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
 800dfea:	b29b      	uxth	r3, r3
 800dfec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800dff0:	e003      	b.n	800dffa <USART_OneBitMethodCmd+0x14>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
 800dff2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dff6:	041b      	lsls	r3, r3, #16
 800dff8:	0c1b      	lsrs	r3, r3, #16
 800dffa:	8283      	strh	r3, [r0, #20]
 800dffc:	4770      	bx	lr

0800dffe <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
 800dffe:	8a83      	ldrh	r3, [r0, #20]
 800e000:	f023 0304 	bic.w	r3, r3, #4
 800e004:	041b      	lsls	r3, r3, #16
 800e006:	0c1b      	lsrs	r3, r3, #16
 800e008:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 800e00a:	8a83      	ldrh	r3, [r0, #20]
 800e00c:	b29b      	uxth	r3, r3
 800e00e:	4319      	orrs	r1, r3
 800e010:	8281      	strh	r1, [r0, #20]
 800e012:	4770      	bx	lr

0800e014 <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
 800e014:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800e016:	b119      	cbz	r1, 800e020 <USART_IrDACmd+0xc>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
 800e018:	b29b      	uxth	r3, r3
 800e01a:	f043 0302 	orr.w	r3, r3, #2
 800e01e:	e003      	b.n	800e028 <USART_IrDACmd+0x14>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
 800e020:	f023 0302 	bic.w	r3, r3, #2
 800e024:	041b      	lsls	r3, r3, #16
 800e026:	0c1b      	lsrs	r3, r3, #16
 800e028:	8283      	strh	r3, [r0, #20]
 800e02a:	4770      	bx	lr

0800e02c <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800e02c:	8803      	ldrh	r3, [r0, #0]
 800e02e:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 800e030:	bf0c      	ite	eq
 800e032:	2000      	moveq	r0, #0
 800e034:	2001      	movne	r0, #1
 800e036:	4770      	bx	lr

0800e038 <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
 800e038:	43c9      	mvns	r1, r1
 800e03a:	b289      	uxth	r1, r1
 800e03c:	8001      	strh	r1, [r0, #0]
 800e03e:	4770      	bx	lr

0800e040 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800e040:	b510      	push	{r4, lr}
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800e042:	f3c1 1442 	ubfx	r4, r1, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
  itmask = (uint32_t)0x01 << itmask;
 800e046:	f001 031f 	and.w	r3, r1, #31
 800e04a:	2201      	movs	r2, #1
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800e04c:	2c01      	cmp	r4, #1
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
  itmask = (uint32_t)0x01 << itmask;
 800e04e:	fa02 f203 	lsl.w	r2, r2, r3
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800e052:	d101      	bne.n	800e058 <USART_GetITStatus+0x18>
  {
    itmask &= USARTx->CR1;
 800e054:	8983      	ldrh	r3, [r0, #12]
 800e056:	e003      	b.n	800e060 <USART_GetITStatus+0x20>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800e058:	2c02      	cmp	r4, #2
  {
    itmask &= USARTx->CR2;
 800e05a:	bf0c      	ite	eq
 800e05c:	8a03      	ldrheq	r3, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800e05e:	8a83      	ldrhne	r3, [r0, #20]
 800e060:	b29b      	uxth	r3, r3
 800e062:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 800e064:	8802      	ldrh	r2, [r0, #0]
 800e066:	b292      	uxth	r2, r2
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800e068:	b143      	cbz	r3, 800e07c <USART_GetITStatus+0x3c>
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
 800e06a:	2301      	movs	r3, #1
 800e06c:	0a09      	lsrs	r1, r1, #8
 800e06e:	fa03 f101 	lsl.w	r1, r3, r1
  bitpos &= USARTx->SR;
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800e072:	4211      	tst	r1, r2
  {
    bitstatus = SET;
 800e074:	bf0c      	ite	eq
 800e076:	2000      	moveq	r0, #0
 800e078:	2001      	movne	r0, #1
 800e07a:	bd10      	pop	{r4, pc}
  }
  else
  {
    bitstatus = RESET;
 800e07c:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
}
 800e07e:	bd10      	pop	{r4, pc}

0800e080 <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 800e080:	0a09      	lsrs	r1, r1, #8
 800e082:	2301      	movs	r3, #1
 800e084:	408b      	lsls	r3, r1
  USARTx->SR = (uint16_t)~itmask;
 800e086:	43db      	mvns	r3, r3
 800e088:	b29b      	uxth	r3, r3
 800e08a:	8003      	strh	r3, [r0, #0]
 800e08c:	4770      	bx	lr
 800e08e:	bf00      	nop

0800e090 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800e090:	4b39      	ldr	r3, [pc, #228]	; (800e178 <SystemInit+0xe8>)
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800e092:	b082      	sub	sp, #8
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800e094:	681a      	ldr	r2, [r3, #0]
 800e096:	f042 0201 	orr.w	r2, r2, #1
 800e09a:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800e09c:	6859      	ldr	r1, [r3, #4]
 800e09e:	4a37      	ldr	r2, [pc, #220]	; (800e17c <SystemInit+0xec>)
 800e0a0:	400a      	ands	r2, r1
 800e0a2:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800e0a4:	681a      	ldr	r2, [r3, #0]
 800e0a6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800e0aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e0ae:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800e0b0:	681a      	ldr	r2, [r3, #0]
 800e0b2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e0b6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800e0b8:	685a      	ldr	r2, [r3, #4]
 800e0ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800e0be:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800e0c0:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800e0c4:	609a      	str	r2, [r3, #8]
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	9200      	str	r2, [sp, #0]
 800e0ca:	9201      	str	r2, [sp, #4]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800e0cc:	681a      	ldr	r2, [r3, #0]
 800e0ce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800e0d2:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800e0d4:	681a      	ldr	r2, [r3, #0]
 800e0d6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800e0da:	9201      	str	r2, [sp, #4]
    StartUpCounter++;  
 800e0dc:	9a00      	ldr	r2, [sp, #0]
 800e0de:	3201      	adds	r2, #1
 800e0e0:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800e0e2:	9a01      	ldr	r2, [sp, #4]
 800e0e4:	b91a      	cbnz	r2, 800e0ee <SystemInit+0x5e>
 800e0e6:	9a00      	ldr	r2, [sp, #0]
 800e0e8:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800e0ec:	d1f2      	bne.n	800e0d4 <SystemInit+0x44>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800e0ee:	4b22      	ldr	r3, [pc, #136]	; (800e178 <SystemInit+0xe8>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 800e0f6:	bf18      	it	ne
 800e0f8:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800e0fa:	9301      	str	r3, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800e0fc:	9b01      	ldr	r3, [sp, #4]
 800e0fe:	2b01      	cmp	r3, #1
 800e100:	d005      	beq.n	800e10e <SystemInit+0x7e>
  SetSysClock();

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800e102:	4b1f      	ldr	r3, [pc, #124]	; (800e180 <SystemInit+0xf0>)
 800e104:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e108:	609a      	str	r2, [r3, #8]
#endif 
}
 800e10a:	b002      	add	sp, #8
 800e10c:	4770      	bx	lr
  }  

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800e10e:	4b1d      	ldr	r3, [pc, #116]	; (800e184 <SystemInit+0xf4>)
 800e110:	681a      	ldr	r2, [r3, #0]
 800e112:	f042 0210 	orr.w	r2, r2, #16
 800e116:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800e118:	681a      	ldr	r2, [r3, #0]
 800e11a:	f022 0203 	bic.w	r2, r2, #3
 800e11e:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 800e120:	681a      	ldr	r2, [r3, #0]
 800e122:	f042 0202 	orr.w	r2, r2, #2
 800e126:	601a      	str	r2, [r3, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800e128:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 800e12c:	685a      	ldr	r2, [r3, #4]
 800e12e:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800e130:	685a      	ldr	r2, [r3, #4]
 800e132:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800e134:	685a      	ldr	r2, [r3, #4]
 800e136:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e13a:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 800e13c:	685a      	ldr	r2, [r3, #4]
 800e13e:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800e142:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 800e144:	685a      	ldr	r2, [r3, #4]
 800e146:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 800e14a:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800e14c:	681a      	ldr	r2, [r3, #0]
 800e14e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800e152:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800e154:	6819      	ldr	r1, [r3, #0]
 800e156:	4a08      	ldr	r2, [pc, #32]	; (800e178 <SystemInit+0xe8>)
 800e158:	0189      	lsls	r1, r1, #6
 800e15a:	d5fb      	bpl.n	800e154 <SystemInit+0xc4>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800e15c:	6853      	ldr	r3, [r2, #4]
 800e15e:	f023 0303 	bic.w	r3, r3, #3
 800e162:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800e164:	6853      	ldr	r3, [r2, #4]
 800e166:	f043 0302 	orr.w	r3, r3, #2
 800e16a:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800e16c:	6853      	ldr	r3, [r2, #4]
 800e16e:	f003 030c 	and.w	r3, r3, #12
 800e172:	2b08      	cmp	r3, #8
 800e174:	d1fa      	bne.n	800e16c <SystemInit+0xdc>
 800e176:	e7c4      	b.n	800e102 <SystemInit+0x72>
 800e178:	40021000 	.word	0x40021000
 800e17c:	f8ff0000 	.word	0xf8ff0000
 800e180:	e000ed00 	.word	0xe000ed00
 800e184:	40022000 	.word	0x40022000

0800e188 <SystemCoreClockUpdate>:
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800e188:	4a12      	ldr	r2, [pc, #72]	; (800e1d4 <SystemCoreClockUpdate+0x4c>)
 800e18a:	4b13      	ldr	r3, [pc, #76]	; (800e1d8 <SystemCoreClockUpdate+0x50>)
 800e18c:	6851      	ldr	r1, [r2, #4]
 800e18e:	f001 010c 	and.w	r1, r1, #12
  
  switch (tmp)
 800e192:	2904      	cmp	r1, #4
 800e194:	d001      	beq.n	800e19a <SystemCoreClockUpdate+0x12>
 800e196:	2908      	cmp	r1, #8
 800e198:	d002      	beq.n	800e1a0 <SystemCoreClockUpdate+0x18>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 800e19a:	4a10      	ldr	r2, [pc, #64]	; (800e1dc <SystemCoreClockUpdate+0x54>)
 800e19c:	601a      	str	r2, [r3, #0]
      break;
 800e19e:	e00f      	b.n	800e1c0 <SystemCoreClockUpdate+0x38>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800e1a0:	6851      	ldr	r1, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800e1a2:	6850      	ldr	r0, [r2, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 800e1a4:	f3c1 4183 	ubfx	r1, r1, #18, #4
      
      if (pllsource == 0x00)
 800e1a8:	03c0      	lsls	r0, r0, #15
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 800e1aa:	f101 0102 	add.w	r1, r1, #2
      
      if (pllsource == 0x00)
 800e1ae:	d502      	bpl.n	800e1b6 <SystemCoreClockUpdate+0x2e>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 800e1b0:	6852      	ldr	r2, [r2, #4]
 800e1b2:	0390      	lsls	r0, r2, #14
 800e1b4:	d501      	bpl.n	800e1ba <SystemCoreClockUpdate+0x32>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 800e1b6:	4a0a      	ldr	r2, [pc, #40]	; (800e1e0 <SystemCoreClockUpdate+0x58>)
 800e1b8:	e000      	b.n	800e1bc <SystemCoreClockUpdate+0x34>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
 800e1ba:	4a08      	ldr	r2, [pc, #32]	; (800e1dc <SystemCoreClockUpdate+0x54>)
 800e1bc:	4351      	muls	r1, r2
 800e1be:	6019      	str	r1, [r3, #0]
      break;
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800e1c0:	4a04      	ldr	r2, [pc, #16]	; (800e1d4 <SystemCoreClockUpdate+0x4c>)
 800e1c2:	6852      	ldr	r2, [r2, #4]
 800e1c4:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800e1c8:	441a      	add	r2, r3
 800e1ca:	7911      	ldrb	r1, [r2, #4]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 800e1cc:	681a      	ldr	r2, [r3, #0]
 800e1ce:	40ca      	lsrs	r2, r1
 800e1d0:	601a      	str	r2, [r3, #0]
 800e1d2:	4770      	bx	lr
 800e1d4:	40021000 	.word	0x40021000
 800e1d8:	20000190 	.word	0x20000190
 800e1dc:	007a1200 	.word	0x007a1200
 800e1e0:	003d0900 	.word	0x003d0900

0800e1e4 <__get_PSP>:
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;

  __ASM volatile ("MRS %0, psp\n\t" 
 800e1e4:	f3ef 8009 	mrs	r0, PSP
 800e1e8:	4600      	mov	r0, r0
 800e1ea:	4770      	bx	lr

0800e1ec <__set_PSP>:
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n\t"
 800e1ec:	f380 8809 	msr	PSP, r0
 800e1f0:	4770      	bx	lr

0800e1f2 <__get_MSP>:
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;

  __ASM volatile ("MRS %0, msp\n\t" 
 800e1f2:	f3ef 8008 	mrs	r0, MSP
 800e1f6:	4600      	mov	r0, r0
 800e1f8:	4770      	bx	lr

0800e1fa <__set_MSP>:
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n\t"
 800e1fa:	f380 8808 	msr	MSP, r0
 800e1fe:	4770      	bx	lr

0800e200 <__get_BASEPRI>:
 */
uint32_t __get_BASEPRI(void)
{
  uint32_t result=0;
  
  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 800e200:	f3ef 8012 	mrs	r0, BASEPRI_MAX
  return(result);
}
 800e204:	4770      	bx	lr

0800e206 <__set_BASEPRI>:
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
 800e206:	f380 8811 	msr	BASEPRI, r0
 800e20a:	4770      	bx	lr

0800e20c <__get_PRIMASK>:
 */
uint32_t __get_PRIMASK(void)
{
  uint32_t result=0;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800e20c:	f3ef 8010 	mrs	r0, PRIMASK
  return(result);
}
 800e210:	4770      	bx	lr

0800e212 <__set_PRIMASK>:
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
 800e212:	f380 8810 	msr	PRIMASK, r0
 800e216:	4770      	bx	lr

0800e218 <__get_FAULTMASK>:
 */
uint32_t __get_FAULTMASK(void)
{
  uint32_t result=0;
  
  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 800e218:	f3ef 8013 	mrs	r0, FAULTMASK
  return(result);
}
 800e21c:	4770      	bx	lr

0800e21e <__set_FAULTMASK>:
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
 800e21e:	f380 8813 	msr	FAULTMASK, r0
 800e222:	4770      	bx	lr

0800e224 <__get_CONTROL>:
 */
uint32_t __get_CONTROL(void)
{
  uint32_t result=0;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800e224:	f3ef 8014 	mrs	r0, CONTROL
  return(result);
}
 800e228:	4770      	bx	lr

0800e22a <__set_CONTROL>:
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) );
 800e22a:	f380 8814 	msr	CONTROL, r0
 800e22e:	4770      	bx	lr

0800e230 <__REV>:
 */
uint32_t __REV(uint32_t value)
{
  uint32_t result=0;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800e230:	ba00      	rev	r0, r0
  return(result);
}
 800e232:	4770      	bx	lr

0800e234 <__REV16>:
 */
uint32_t __REV16(uint16_t value)
{
  uint32_t result=0;
  
  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
 800e234:	ba40      	rev16	r0, r0
  return(result);
}
 800e236:	4770      	bx	lr

0800e238 <__REVSH>:
 */
int32_t __REVSH(int16_t value)
{
  uint32_t result=0;
  
  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
 800e238:	bac0      	revsh	r0, r0
  return(result);
}
 800e23a:	4770      	bx	lr

0800e23c <__RBIT>:
 */
uint32_t __RBIT(uint32_t value)
{
  uint32_t result=0;
  
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e23c:	fa90 f0a0 	rbit	r0, r0
   return(result);
}
 800e240:	4770      	bx	lr

0800e242 <__LDREXB>:
 */
uint8_t __LDREXB(uint8_t *addr)
{
    uint8_t result=0;
  
   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
 800e242:	e8d0 0f4f 	ldrexb	r0, [r0]
   return(result);
}
 800e246:	b2c0      	uxtb	r0, r0
 800e248:	4770      	bx	lr

0800e24a <__LDREXH>:
 */
uint16_t __LDREXH(uint16_t *addr)
{
    uint16_t result=0;
  
   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
 800e24a:	e8d0 0f5f 	ldrexh	r0, [r0]
   return(result);
}
 800e24e:	b280      	uxth	r0, r0
 800e250:	4770      	bx	lr

0800e252 <__LDREXW>:
 */
uint32_t __LDREXW(uint32_t *addr)
{
    uint32_t result=0;
  
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
 800e252:	e850 0f00 	ldrex	r0, [r0]
   return(result);
}
 800e256:	4770      	bx	lr

0800e258 <__STREXB>:
 */
uint32_t __STREXB(uint8_t value, uint8_t *addr)
{
   uint32_t result=0;
  
   __ASM volatile ("strexb %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
 800e258:	e8c1 0f43 	strexb	r3, r0, [r1]
 800e25c:	4618      	mov	r0, r3
   return(result);
}
 800e25e:	4770      	bx	lr

0800e260 <__STREXH>:
 */
uint32_t __STREXH(uint16_t value, uint16_t *addr)
{
   uint32_t result=0;
  
   __ASM volatile ("strexh %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
 800e260:	e8c1 0f53 	strexh	r3, r0, [r1]
 800e264:	4618      	mov	r0, r3
   return(result);
}
 800e266:	4770      	bx	lr

0800e268 <__STREXW>:
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
   uint32_t result=0;
  
   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
 800e268:	e841 0000 	strex	r0, r0, [r1]
   return(result);
}
 800e26c:	4770      	bx	lr
	...

0800e270 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800e270:	4770      	bx	lr

0800e272 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800e272:	e7fe      	b.n	800e272 <MemManage_Handler>

0800e274 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800e274:	e7fe      	b.n	800e274 <BusFault_Handler>

0800e276 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800e276:	e7fe      	b.n	800e276 <UsageFault_Handler>

0800e278 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800e278:	4770      	bx	lr

0800e27a <USART2_IRQHandler>:

#ifdef CONFIG_UART2
void USART2_IRQHandler(void)
{
  //TRACE_IRQ_ENTER(USART2_IRQn);
  UART_irq(&__uart_vec[0]);
 800e27a:	4801      	ldr	r0, [pc, #4]	; (800e280 <USART2_IRQHandler+0x6>)
 800e27c:	f7f4 bdae 	b.w	8002ddc <UART_irq>
 800e280:	20000d34 	.word	0x20000d34

0800e284 <TIM2_IRQHandler>:
#endif

void STM32_SYSTEM_TIMER_IRQ_FN(void)
{
  //TRACE_IRQ_ENTER(STM32_SYSTEM_TIMER_IRQn);
  TIMER_irq();
 800e284:	f7fa bbe4 	b.w	8008a50 <TIMER_irq>

0800e288 <USBWakeUp_IRQHandler>:
}

// usb
void USBWakeUp_IRQHandler(void)
{
  TRACE_IRQ_ENTER(USBWakeUp_IRQn);
 800e288:	4b13      	ldr	r3, [pc, #76]	; (800e2d8 <USBWakeUp_IRQHandler+0x50>)
  //TRACE_IRQ_EXIT(STM32_SYSTEM_TIMER_IRQn);
}

// usb
void USBWakeUp_IRQHandler(void)
{
 800e28a:	b510      	push	{r4, lr}
  TRACE_IRQ_ENTER(USBWakeUp_IRQn);
 800e28c:	781a      	ldrb	r2, [r3, #0]
 800e28e:	461c      	mov	r4, r3
 800e290:	b16a      	cbz	r2, 800e2ae <USBWakeUp_IRQHandler+0x26>
 800e292:	4b12      	ldr	r3, [pc, #72]	; (800e2dc <USBWakeUp_IRQHandler+0x54>)
 800e294:	4a12      	ldr	r2, [pc, #72]	; (800e2e0 <USBWakeUp_IRQHandler+0x58>)
 800e296:	6819      	ldr	r1, [r3, #0]
 800e298:	f240 202f 	movw	r0, #559	; 0x22f
 800e29c:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
 800e2a0:	681a      	ldr	r2, [r3, #0]
 800e2a2:	2a3e      	cmp	r2, #62	; 0x3e
 800e2a4:	bf96      	itet	ls
 800e2a6:	681a      	ldrls	r2, [r3, #0]
 800e2a8:	2200      	movhi	r2, #0
 800e2aa:	3201      	addls	r2, #1
 800e2ac:	601a      	str	r2, [r3, #0]
  EXTI_ClearITPendingBit(EXTI_Line18);
 800e2ae:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800e2b2:	f7fe fbf3 	bl	800ca9c <EXTI_ClearITPendingBit>
  TRACE_IRQ_EXIT(USBWakeUp_IRQn);
 800e2b6:	7823      	ldrb	r3, [r4, #0]
 800e2b8:	b16b      	cbz	r3, 800e2d6 <USBWakeUp_IRQHandler+0x4e>
 800e2ba:	4b08      	ldr	r3, [pc, #32]	; (800e2dc <USBWakeUp_IRQHandler+0x54>)
 800e2bc:	4a08      	ldr	r2, [pc, #32]	; (800e2e0 <USBWakeUp_IRQHandler+0x58>)
 800e2be:	6819      	ldr	r1, [r3, #0]
 800e2c0:	f240 302f 	movw	r0, #815	; 0x32f
 800e2c4:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
 800e2c8:	681a      	ldr	r2, [r3, #0]
 800e2ca:	2a3e      	cmp	r2, #62	; 0x3e
 800e2cc:	bf96      	itet	ls
 800e2ce:	681a      	ldrls	r2, [r3, #0]
 800e2d0:	2200      	movhi	r2, #0
 800e2d2:	3201      	addls	r2, #1
 800e2d4:	601a      	str	r2, [r3, #0]
 800e2d6:	bd10      	pop	{r4, pc}
 800e2d8:	20000000 	.word	0x20000000
 800e2dc:	200001c0 	.word	0x200001c0
 800e2e0:	20000c74 	.word	0x20000c74

0800e2e4 <USB_LP_CAN1_RX0_IRQHandler>:

void USB_LP_CAN1_RX0_IRQHandler(void)
{
// Called once every ms
//  TRACE_IRQ_ENTER(USB_LP_CAN1_RX0_IRQn);
  USB_Istr();
 800e2e4:	f7fd bb88 	b.w	800b9f8 <USB_Istr>

0800e2e8 <memcpy>:
 800e2e8:	2a00      	cmp	r2, #0
 800e2ea:	bf08      	it	eq
 800e2ec:	4770      	bxeq	lr
 800e2ee:	b501      	push	{r0, lr}
 800e2f0:	2a20      	cmp	r2, #32
 800e2f2:	f080 8025 	bcs.w	800e340 <.memcpy_opt>

0800e2f6 <.memcpy_unalign>:
 800e2f6:	f012 0f01 	tst.w	r2, #1
 800e2fa:	f000 8008 	beq.w	800e30e <.memcpy1>
 800e2fe:	780b      	ldrb	r3, [r1, #0]
 800e300:	7003      	strb	r3, [r0, #0]
 800e302:	f100 0001 	add.w	r0, r0, #1
 800e306:	f101 0101 	add.w	r1, r1, #1
 800e30a:	f1a2 0201 	sub.w	r2, r2, #1

0800e30e <.memcpy1>:
 800e30e:	f012 0f02 	tst.w	r2, #2
 800e312:	f000 8008 	beq.w	800e326 <.memcpy2>
 800e316:	880b      	ldrh	r3, [r1, #0]
 800e318:	8003      	strh	r3, [r0, #0]
 800e31a:	f100 0002 	add.w	r0, r0, #2
 800e31e:	f101 0102 	add.w	r1, r1, #2
 800e322:	f1a2 0202 	sub.w	r2, r2, #2

0800e326 <.memcpy2>:
 800e326:	2a00      	cmp	r2, #0
 800e328:	f000 8009 	beq.w	800e33e <.memcpy_end>

0800e32c <.memcpy4>:
 800e32c:	680b      	ldr	r3, [r1, #0]
 800e32e:	6003      	str	r3, [r0, #0]
 800e330:	f100 0004 	add.w	r0, r0, #4
 800e334:	f101 0104 	add.w	r1, r1, #4
 800e338:	3a04      	subs	r2, #4
 800e33a:	f47f aff7 	bne.w	800e32c <.memcpy4>

0800e33e <.memcpy_end>:
 800e33e:	bd01      	pop	{r0, pc}

0800e340 <.memcpy_opt>:
 800e340:	ea80 0301 	eor.w	r3, r0, r1
 800e344:	f013 0f03 	tst.w	r3, #3
 800e348:	f47f afd5 	bne.w	800e2f6 <.memcpy_unalign>
 800e34c:	f010 0f01 	tst.w	r0, #1
 800e350:	f000 8008 	beq.w	800e364 <.memcpy_opt1>
 800e354:	780b      	ldrb	r3, [r1, #0]
 800e356:	7003      	strb	r3, [r0, #0]
 800e358:	f100 0001 	add.w	r0, r0, #1
 800e35c:	f101 0101 	add.w	r1, r1, #1
 800e360:	f1a2 0201 	sub.w	r2, r2, #1

0800e364 <.memcpy_opt1>:
 800e364:	f010 0f02 	tst.w	r0, #2
 800e368:	f000 8008 	beq.w	800e37c <.memcpy_opt16_i>
 800e36c:	880b      	ldrh	r3, [r1, #0]
 800e36e:	8003      	strh	r3, [r0, #0]
 800e370:	f100 0002 	add.w	r0, r0, #2
 800e374:	f101 0102 	add.w	r1, r1, #2
 800e378:	f1a2 0202 	sub.w	r2, r2, #2

0800e37c <.memcpy_opt16_i>:
 800e37c:	b470      	push	{r4, r5, r6}

0800e37e <.memcpy_opt16>:
 800e37e:	c978      	ldmia	r1!, {r3, r4, r5, r6}
 800e380:	c078      	stmia	r0!, {r3, r4, r5, r6}
 800e382:	3a10      	subs	r2, #16
 800e384:	2a10      	cmp	r2, #16
 800e386:	f4bf affa 	bcs.w	800e37e <.memcpy_opt16>
 800e38a:	bc70      	pop	{r4, r5, r6}
 800e38c:	f7ff bfb3 	b.w	800e2f6 <.memcpy_unalign>

0800e390 <memset>:
 800e390:	b500      	push	{lr}
 800e392:	4603      	mov	r3, r0
 800e394:	f361 210f 	bfi	r1, r1, #8, #8
 800e398:	f361 411f 	bfi	r1, r1, #16, #16
 800e39c:	f012 0f01 	tst.w	r2, #1
 800e3a0:	f000 8005 	beq.w	800e3ae <.memset1>
 800e3a4:	7019      	strb	r1, [r3, #0]
 800e3a6:	f103 0301 	add.w	r3, r3, #1
 800e3aa:	f1a2 0201 	sub.w	r2, r2, #1

0800e3ae <.memset1>:
 800e3ae:	f012 0f02 	tst.w	r2, #2
 800e3b2:	f000 8005 	beq.w	800e3c0 <.memset2>
 800e3b6:	8019      	strh	r1, [r3, #0]
 800e3b8:	f103 0302 	add.w	r3, r3, #2
 800e3bc:	f1a2 0202 	sub.w	r2, r2, #2

0800e3c0 <.memset2>:
 800e3c0:	2a00      	cmp	r2, #0
 800e3c2:	f000 8006 	beq.w	800e3d2 <.memset_end>

0800e3c6 <.memset4>:
 800e3c6:	6019      	str	r1, [r3, #0]
 800e3c8:	f103 0304 	add.w	r3, r3, #4
 800e3cc:	3a04      	subs	r2, #4
 800e3ce:	f47f affa 	bne.w	800e3c6 <.memset4>

0800e3d2 <.memset_end>:
 800e3d2:	bd00      	pop	{pc}

0800e3d4 <_variadic_call>:
 800e3d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3d8:	4604      	mov	r4, r0
 800e3da:	460d      	mov	r5, r1
 800e3dc:	4616      	mov	r6, r2
 800e3de:	f04f 0700 	mov.w	r7, #0
 800e3e2:	f04f 0000 	mov.w	r0, #0
 800e3e6:	f04f 0100 	mov.w	r1, #0
 800e3ea:	f04f 0200 	mov.w	r2, #0
 800e3ee:	f04f 0300 	mov.w	r3, #0
 800e3f2:	3d01      	subs	r5, #1
 800e3f4:	f100 8029 	bmi.w	800e44a <.call>
 800e3f8:	6830      	ldr	r0, [r6, #0]
 800e3fa:	3d01      	subs	r5, #1
 800e3fc:	f100 8025 	bmi.w	800e44a <.call>
 800e400:	f106 0604 	add.w	r6, r6, #4
 800e404:	6831      	ldr	r1, [r6, #0]
 800e406:	3d01      	subs	r5, #1
 800e408:	f100 801f 	bmi.w	800e44a <.call>
 800e40c:	f106 0604 	add.w	r6, r6, #4
 800e410:	6832      	ldr	r2, [r6, #0]
 800e412:	3d01      	subs	r5, #1
 800e414:	f100 8019 	bmi.w	800e44a <.call>
 800e418:	f106 0604 	add.w	r6, r6, #4
 800e41c:	6833      	ldr	r3, [r6, #0]
 800e41e:	3d01      	subs	r5, #1
 800e420:	f100 8013 	bmi.w	800e44a <.call>
 800e424:	ea4f 0785 	mov.w	r7, r5, lsl #2
 800e428:	f107 0704 	add.w	r7, r7, #4
 800e42c:	443e      	add	r6, r7

0800e42e <.arg_on_stack>:
 800e42e:	f8d6 8000 	ldr.w	r8, [r6]
 800e432:	f84d 8d04 	str.w	r8, [sp, #-4]!
 800e436:	f1a6 0604 	sub.w	r6, r6, #4
 800e43a:	3d01      	subs	r5, #1
 800e43c:	f57f aff7 	bpl.w	800e42e <.arg_on_stack>
 800e440:	47a0      	blx	r4
 800e442:	446f      	add	r7, sp
 800e444:	46bd      	mov	sp, r7
 800e446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e44a <.call>:
 800e44a:	47a0      	blx	r4
 800e44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e450 <Reset_Handler>:
 800e450:	2100      	movs	r1, #0
 800e452:	f000 b804 	b.w	800e45e <LoopCopyDataInit>

0800e456 <CopyDataInit>:
 800e456:	4b0c      	ldr	r3, [pc, #48]	; (800e488 <LoopFillZerobss+0x12>)
 800e458:	585b      	ldr	r3, [r3, r1]
 800e45a:	5043      	str	r3, [r0, r1]
 800e45c:	3104      	adds	r1, #4

0800e45e <LoopCopyDataInit>:
 800e45e:	480b      	ldr	r0, [pc, #44]	; (800e48c <LoopFillZerobss+0x16>)
 800e460:	4b0b      	ldr	r3, [pc, #44]	; (800e490 <LoopFillZerobss+0x1a>)
 800e462:	1842      	adds	r2, r0, r1
 800e464:	429a      	cmp	r2, r3
 800e466:	f4ff aff6 	bcc.w	800e456 <CopyDataInit>
 800e46a:	4a0a      	ldr	r2, [pc, #40]	; (800e494 <LoopFillZerobss+0x1e>)
 800e46c:	f000 b803 	b.w	800e476 <LoopFillZerobss>

0800e470 <FillZerobss>:
 800e470:	2300      	movs	r3, #0
 800e472:	f842 3b04 	str.w	r3, [r2], #4

0800e476 <LoopFillZerobss>:
 800e476:	4b08      	ldr	r3, [pc, #32]	; (800e498 <LoopFillZerobss+0x22>)
 800e478:	429a      	cmp	r2, r3
 800e47a:	f4ff aff9 	bcc.w	800e470 <FillZerobss>
 800e47e:	f7ff fe07 	bl	800e090 <SystemInit>
 800e482:	f000 f80d 	bl	800e4a0 <main>
 800e486:	4770      	bx	lr
 800e488:	08013400 	.word	0x08013400
 800e48c:	20000000 	.word	0x20000000
 800e490:	200001a8 	.word	0x200001a8
 800e494:	200001a8 	.word	0x200001a8
 800e498:	20001818 	.word	0x20001818

0800e49c <ADC1_2_IRQHandler>:
 800e49c:	f7ff bffe 	b.w	800e49c <ADC1_2_IRQHandler>

0800e4a0 <main>:
//  print("IPSR 0x%02x\nBPRI 0x%02x\n", ipsr, __get_BASEPRI());
}

// main entry from bootstrap

int main(void) {
 800e4a0:	b508      	push	{r3, lr}
  enter_critical();
 800e4a2:	f7f1 fe33 	bl	800010c <enter_critical>
  PROC_base_init();
 800e4a6:	f7f9 fa51 	bl	800794c <PROC_base_init>
  SYS_init();
 800e4aa:	f7f2 f87b 	bl	80005a4 <SYS_init>
  UART_init();
 800e4ae:	f7f4 ff27 	bl	8003300 <UART_init>
  UART_assure_tx(_UART(0), TRUE);
 800e4b2:	2101      	movs	r1, #1
 800e4b4:	481e      	ldr	r0, [pc, #120]	; (800e530 <main+0x90>)
 800e4b6:	f7f4 fe8c 	bl	80031d2 <UART_assure_tx>
  //UART_sync_tx(_UART(0), TRUE);
  PROC_periph_init();
 800e4ba:	f7f9 faa1 	bl	8007a00 <PROC_periph_init>
  exit_critical();
 800e4be:	f7f1 fe31 	bl	8000124 <exit_critical>

  SYS_set_assert_callback(assert_cb);
 800e4c2:	481c      	ldr	r0, [pc, #112]	; (800e534 <main+0x94>)
 800e4c4:	f7f2 f8be 	bl	8000644 <SYS_set_assert_callback>
  SYS_set_assert_behaviour(ASSERT_RESET);
 800e4c8:	2001      	movs	r0, #1
 800e4ca:	f7f2 f8c1 	bl	8000650 <SYS_set_assert_behaviour>

  IO_define(IOSTD, io_uart, UARTSTDIN);
 800e4ce:	2000      	movs	r0, #0
 800e4d0:	4601      	mov	r1, r0
 800e4d2:	4602      	mov	r2, r0
 800e4d4:	f7f2 fbe2 	bl	8000c9c <IO_define>
#ifndef CONFIG_ANNOYATRON
  IO_define(IOUSB, io_usb, -1);
 800e4d8:	2001      	movs	r0, #1
 800e4da:	4601      	mov	r1, r0
 800e4dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e4e0:	f7f2 fbdc 	bl	8000c9c <IO_define>
#endif

  USB_ARC_init();
 800e4e4:	f7fd f8f8 	bl	800b6d8 <USB_ARC_init>

  print("\n\n\nHardware initialization done\n");
 800e4e8:	4813      	ldr	r0, [pc, #76]	; (800e538 <main+0x98>)
 800e4ea:	f7fa fe57 	bl	800919c <arcprint>

  print("Stack 0x%08x -- 0x%08x\n", STACK_START, STACK_END);
 800e4ee:	4913      	ldr	r1, [pc, #76]	; (800e53c <main+0x9c>)
 800e4f0:	4a13      	ldr	r2, [pc, #76]	; (800e540 <main+0xa0>)
 800e4f2:	4814      	ldr	r0, [pc, #80]	; (800e544 <main+0xa4>)
 800e4f4:	f7fa fe52 	bl	800919c <arcprint>

  print("Subsystem initialization done\n");
 800e4f8:	4813      	ldr	r0, [pc, #76]	; (800e548 <main+0xa8>)
 800e4fa:	f7fa fe4f 	bl	800919c <arcprint>

  TASK_init();
 800e4fe:	f7f3 fb9f 	bl	8001c40 <TASK_init>

  CLI_init();
 800e502:	f7fa fa44 	bl	800898e <CLI_init>

  rand_seed(0xd0decaed ^ SYS_get_tick());
 800e506:	f7f2 f897 	bl	8000638 <SYS_get_tick>
 800e50a:	f080 4050 	eor.w	r0, r0, #3489660928	; 0xd0000000
 800e50e:	f480 005e 	eor.w	r0, r0, #14548992	; 0xde0000
 800e512:	f480 404a 	eor.w	r0, r0, #51712	; 0xca00
 800e516:	f080 00ed 	eor.w	r0, r0, #237	; 0xed
 800e51a:	f7f3 f95b 	bl	80017d4 <rand_seed>

  APP_init();
 800e51e:	f7fa fe4f 	bl	80091c0 <APP_init>

  while (1) {
    while (TASK_tick());
 800e522:	f7f3 fd6d 	bl	8002000 <TASK_tick>
 800e526:	2800      	cmp	r0, #0
 800e528:	d1fb      	bne.n	800e522 <main+0x82>
    TASK_wait();
 800e52a:	f7f3 fd03 	bl	8001f34 <TASK_wait>
  }
 800e52e:	e7f8      	b.n	800e522 <main+0x82>
 800e530:	20000d34 	.word	0x20000d34
 800e534:	08007941 	.word	0x08007941
 800e538:	0801138d 	.word	0x0801138d
 800e53c:	20001818 	.word	0x20001818
 800e540:	20004f80 	.word	0x20004f80
 800e544:	080113ae 	.word	0x080113ae
 800e548:	080113c6 	.word	0x080113c6

0800e54c <sym_strcmp.isra.4>:
  sym->offs_end = 0;

  return TRUE;
}

static int sym_strcmp(const char *str, const char *sym_str, lex_type_sym *sym) {
 800e54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e54e:	4614      	mov	r4, r2
 800e550:	461f      	mov	r7, r3
 800e552:	4606      	mov	r6, r0
 800e554:	460d      	mov	r5, r1
  char symdef, userdef;
  int symdeflen = strlen(str);
 800e556:	f7f2 fc81 	bl	8000e5c <strlen>

  if (sym->offs_end - sym->offs_start + 1 < symdeflen) return -1;
 800e55a:	1b3b      	subs	r3, r7, r4
 800e55c:	3301      	adds	r3, #1
 800e55e:	4283      	cmp	r3, r0
 800e560:	db1f      	blt.n	800e5a2 <sym_strcmp.isra.4+0x56>
  const char *s2 = &sym_str[sym->offs_start];
 800e562:	192a      	adds	r2, r5, r4
 800e564:	2500      	movs	r5, #0
  while ((((symdef = *str++) != 0) & ((userdef = *s2++) != 0))) {
 800e566:	5d53      	ldrb	r3, [r2, r5]
 800e568:	5d74      	ldrb	r4, [r6, r5]
 800e56a:	b1a3      	cbz	r3, 800e596 <sym_strcmp.isra.4+0x4a>
 800e56c:	b19c      	cbz	r4, 800e596 <sym_strcmp.isra.4+0x4a>

static u8_t lex_sym_ix;
static lex_type_sym lex_syms[MAX_LEX_SYM_LEN];

static char to_lower(char c) {
  if (c >= 'A' && c <= 'Z')
 800e56e:	f1a4 0141 	sub.w	r1, r4, #65	; 0x41
 800e572:	b2c9      	uxtb	r1, r1
 800e574:	2919      	cmp	r1, #25
 800e576:	f1a3 0141 	sub.w	r1, r3, #65	; 0x41
    return c - 'A' + 'a';
 800e57a:	bf98      	it	ls
 800e57c:	3420      	addls	r4, #32

static u8_t lex_sym_ix;
static lex_type_sym lex_syms[MAX_LEX_SYM_LEN];

static char to_lower(char c) {
  if (c >= 'A' && c <= 'Z')
 800e57e:	b2c9      	uxtb	r1, r1
    return c - 'A' + 'a';
 800e580:	bf98      	it	ls
 800e582:	b2e4      	uxtbls	r4, r4

static u8_t lex_sym_ix;
static lex_type_sym lex_syms[MAX_LEX_SYM_LEN];

static char to_lower(char c) {
  if (c >= 'A' && c <= 'Z')
 800e584:	2919      	cmp	r1, #25
    return c - 'A' + 'a';
 800e586:	bf9c      	itt	ls
 800e588:	3320      	addls	r3, #32
 800e58a:	b2db      	uxtbls	r3, r3
  int symdeflen = strlen(str);

  if (sym->offs_end - sym->offs_start + 1 < symdeflen) return -1;
  const char *s2 = &sym_str[sym->offs_start];
  while ((((symdef = *str++) != 0) & ((userdef = *s2++) != 0))) {
    if (to_lower(symdef) != to_lower(userdef)) {
 800e58c:	429c      	cmp	r4, r3
 800e58e:	f105 0501 	add.w	r5, r5, #1
 800e592:	d0e8      	beq.n	800e566 <sym_strcmp.isra.4+0x1a>
 800e594:	e005      	b.n	800e5a2 <sym_strcmp.isra.4+0x56>
      return -1;
    }
  }
  return (userdef == 0 || userdef == '(') ? 0 : 1;
 800e596:	b13b      	cbz	r3, 800e5a8 <sym_strcmp.isra.4+0x5c>
 800e598:	f1b3 0028 	subs.w	r0, r3, #40	; 0x28
 800e59c:	bf18      	it	ne
 800e59e:	2001      	movne	r0, #1
 800e5a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

static int sym_strcmp(const char *str, const char *sym_str, lex_type_sym *sym) {
  char symdef, userdef;
  int symdeflen = strlen(str);

  if (sym->offs_end - sym->offs_start + 1 < symdeflen) return -1;
 800e5a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e5a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while ((((symdef = *str++) != 0) & ((userdef = *s2++) != 0))) {
    if (to_lower(symdef) != to_lower(userdef)) {
      return -1;
    }
  }
  return (userdef == 0 || userdef == '(') ? 0 : 1;
 800e5a8:	4618      	mov	r0, r3
}
 800e5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e5ac <TRACE_NAMES>:
 800e5ac:	fed2 0800 fed5 0800 fedd 0800 fee7 0800     ................
 800e5bc:	fef1 0800 fef8 0800 ff00 0800 ff0a 0800     ................
 800e5cc:	ff14 0800 ff21 0800 ff2e 0800 ff38 0800     ....!.......8...
 800e5dc:	ff42 0800 ff4c 0800 ff56 0800 ff61 0800     B...L...V...a...
 800e5ec:	ff6f 0800 ff7a 0800 ff87 0800 ff91 0800     o...z...........
 800e5fc:	ff9f 0800 ffab 0800 ffba 0800 ffc9 0800     ................
 800e60c:	ffd8 0800 ffe3 0800 ffec 0800 fff7 0800     ................
 800e61c:	0001 0801 000b 0801 0015 0801 001f 0801     ................
 800e62c:	0029 0801 0033 0801 0040 0801 004d 0801     )...3...@...M...
 800e63c:	005a 0801 0067 0801 0079 0801 008b 0801     Z...g...y.......

0800e64c <TRACE_IRQ_NAMES>:
 800e64c:	0094 0801 00a0 0801 00b2 0801 00b6 0801     ................
 800e65c:	00c2 0801 00cf 0801 00d9 0801 00e2 0801     ................
 800e66c:	00ee 0801 00f7 0801 0102 0801 010b 0801     ................
 800e67c:	0116 0801 0121 0801 012c 0801 0137 0801     ....!...,...7...
 800e68c:	0142 0801 0155 0801 0168 0801 017b 0801     B...U...h...{...
 800e69c:	018e 0801 01a1 0801 01b4 0801 01c7 0801     ................
 800e6ac:	01d3 0801 01e7 0801 01fc 0801 020a 0801     ................
 800e6bc:	0218 0801 0225 0801 0233 0801 0240 0801     ....%...3...@...
 800e6cc:	0252 0801 025f 0801 0269 0801 0273 0801     R..._...i...s...
 800e6dc:	027d 0801 028a 0801 0297 0801 02a4 0801     }...............
 800e6ec:	02b1 0801 02bb 0801 02c5 0801 02d1 0801     ................
 800e6fc:	02dd 0801 02e9 0801 02f8 0801 0306 0801     ................

0800e70c <io_rcc>:
 800e70c:	0004 0000 0008 0000 0010 0000 0020 0000     ............ ...
 800e71c:	0040 0000 0080 0000 0100 0000               @...........

0800e728 <io_exti_lines>:
 800e728:	0001 0000 0002 0000 0004 0000 0008 0000     ................
 800e738:	0010 0000 0020 0000 0040 0000 0080 0000     .... ...@.......
 800e748:	0100 0000 0200 0000 0400 0000 0800 0000     ................
 800e758:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......

0800e768 <io_pins>:
 800e768:	0001 0002 0004 0008 0010 0020 0040 0080     .......... .@...
 800e778:	0100 0200 0400 0800 1000 2000 4000 8000     ........... .@..

0800e788 <io_speeds>:
 800e788:	0102 0003                                   ....

0800e78c <io_ports>:
 800e78c:	0800 4001 0c00 4001 1000 4001 1400 4001     ...@...@...@...@
 800e79c:	1800 4001 1c00 4001 2000 4001               ...@...@. .@

0800e7a8 <io_exti_portsources>:
 800e7a8:	0100 0302 0504 0006                              .......

0800e7af <io_exti_pinsources>:
 800e7af:	0100 0302 0504 0706 0908 0b0a 0d0c 0f0e     ................

0800e7bf <io_flanks>:
 800e7bf:	0c08 0610                                        ...

0800e7c2 <io_ext_irq>:
 800e7c2:	0706 0908 170a 1717 1717 2828 2828 2828     ..........((((((

0800e7d2 <io_afs>:
 800e7d2:	0100 0302 0504 0706 0908 0b0a 0d0c 0f0e     ................

0800e7e2 <io_pinsources>:
 800e7e2:	0100 0302 0504 0706 0908 0b0a 0d0c 0f0e     ................
	...

0800e7f4 <__func__.7167>:
 800e7f4:	696e 6666 5f73 6564 656c 6574 705f 6761     niffs_delete_pag
 800e804:	0065                                        e.

0800e806 <__func__.7360>:
 800e806:	696e 6666 5f73 6f6d 6576 705f 6761 0065     niffs_move_page.

0800e816 <__func__.7345>:
 800e816:	696e 6666 5f73 7265 7361 5f65 6573 7463     niffs_erase_sect
 800e826:	726f 6e00                                        or.

0800e829 <__func__.8396>:
 800e829:	696e 6666 5f73 6863 5f6b 6564 656c 6574     niffs_chk_delete
 800e839:	6f5f 7072 6168 5f6e 6162 5f64 6964 7472     _orphan_bad_dirt
 800e849:	5f79 0076                                   y_v.

0800e84d <__func__.8777>:
 800e84d:	696e 6666 5f73 6573 7574 0070               niffs_setup.

0800e859 <__func__.7430>:
 800e859:	696e 6666 5f73 7277 7469 5f65 6170 6567     niffs_write_page
	...

0800e86a <__func__.8573>:
 800e86a:	696e 6666 5f73 6863 5f6b 6f6d 6976 6f5f     niffs_chk_movi_o
 800e87a:	6a62 6468 5f72 6170 6567 5f73 6974 7964     bjhdr_pages_tidy
 800e88a:	765f 6e00                                        _v.

0800e88d <__func__.7305>:
 800e88d:	696e 6666 5f73 6966 646e 705f 6761 5f65     niffs_find_page_
 800e89d:	0076                                        v.

0800e89f <__func__.8024>:
 800e89f:	696e 6666 5f73 6572 6f6d 6576 6f5f 6a62     niffs_remove_obj
 800e8af:	695f 5f64 0076                              _id_v.

0800e8b5 <__func__.8631>:
 800e8b5:	696e 6666 5f73 6966 646e 645f 7075 696c     niffs_find_dupli
 800e8c5:	6163 6574 6f5f 6a62 685f 7264 695f 7364     cate_obj_hdr_ids
 800e8d5:	765f 6e00                                        _v.

0800e8d8 <__func__.7222>:
 800e8d8:	696e 6666 5f73 6966 646e 665f 6572 5f65     niffs_find_free_
 800e8e8:	6469 765f 6e00                                   id_v.

0800e8ed <__func__.7545>:
 800e8ed:	696e 6666 5f73 706f 6e65 765f 6e00               niffs_open_v.

0800e8fa <__func__.7281>:
 800e8fa:	696e 6666 5f73 6966 646e 665f 6572 5f65     niffs_find_free_
 800e90a:	6170 6567 6e00                                   page.

0800e90f <__func__.8593>:
 800e90f:	696e 6666 5f73 6863 5f6b 6974 7964 6d5f     niffs_chk_tidy_m
 800e91f:	766f 5f69 626f 686a 7264 705f 6761 0065     ovi_objhdr_page.

0800e92f <__func__.7319>:
 800e92f:	696e 6666 5f73 6966 646e 705f 6761 0065     niffs_find_page.

0800e93f <__func__.8491>:
 800e93f:	696e 6666 5f73 6863 5f6b 6e75 6966 696e     niffs_chk_unfini
 800e94f:	6873 6465 6d5f 766f 5f69 6164 6174 705f     shed_movi_data_p
 800e95f:	6761 7365 765f 6e00                              ages_v.

0800e966 <__func__.7197>:
 800e966:	696e 6666 5f73 6567 5f74 6966 656c 6564     niffs_get_filede
 800e976:	6373 6e00                                        sc.

0800e979 <__func__.7559>:
 800e979:	696e 6666 5f73 706f 6e65 6e00                    niffs_open.

0800e984 <__func__.7608>:
 800e984:	696e 6666 5f73 6c63 736f 0065               niffs_close.

0800e990 <__func__.7624>:
 800e990:	696e 6666 5f73 6572 6461 705f 7274 6e00          niffs_read_ptr.

0800e99f <__func__.7678>:
 800e99f:	696e 6666 5f73 6573 6b65 6e00                    niffs_seek.

0800e9aa <__func__.8323>:
 800e9aa:	696e 6666 5f73 6367 665f 6e69 5f64 6163     niffs_gc_find_ca
 800e9ba:	646e 6469 7461 5f65 6573 7463 726f 6e00          ndidate_sector.

0800e9c9 <__func__.8337>:
 800e9c9:	696e 6666 5f73 6367 6e00                         niffs_gc.

0800e9d2 <__func__.8211>:
 800e9d2:	696e 6666 5f73 6e65 7573 6572 665f 6572     niffs_ensure_fre
 800e9e2:	5f65 6170 6567 0073                         e_pages.

0800e9ea <__func__.7469>:
 800e9ea:	696e 6666 5f73 7263 6165 6574 6e00               niffs_create.

0800e9f7 <__func__.7234>:
 800e9f7:	696e 6666 5f73 6966 646e 665f 6572 5f65     niffs_find_free_
 800ea07:	6469 6e00                                        id.

0800ea0a <__func__.7708>:
 800ea0a:	696e 6666 5f73 7061 6570 646e 6e00               niffs_append.

0800ea17 <__func__.7910>:
 800ea17:	696e 6666 5f73 6f6d 6964 7966 6e00               niffs_modify.

0800ea24 <__func__.8038>:
 800ea24:	696e 6666 5f73 7274 6e75 6163 6574 6e00          niffs_truncate.

0800ea33 <__func__.8132>:
 800ea33:	696e 6666 5f73 6572 616e 656d 6e00               niffs_rename.

0800ea40 <__func__.8690>:
 800ea40:	696e 6666 5f73 6863 006b                    niffs_chk.

0800ea4a <__func__.8459>:
 800ea4a:	696e 6666 5f73 6863 5f6b 6564 656c 6574     niffs_chk_delete
 800ea5a:	6f5f 7072 6168 736e 625f 5f79 6469 615f     _orphans_by_id_a
 800ea6a:	646e 625f 6461 665f 616c 5f67 6e61 5f64     nd_bad_flag_and_
 800ea7a:	6964 7472 5f79 6170 6567 0073               dirty_pages.

0800ea86 <__func__.8525>:
 800ea86:	696e 6666 5f73 6863 5f6b 6e75 6966 696e     niffs_chk_unfini
 800ea96:	6873 6465 6d5f 766f 5f69 6164 6174 705f     shed_movi_data_p
 800eaa6:	6761 7365 6e00                                   ages.

0800eaab <__func__.8642>:
 800eaab:	696e 6666 5f73 6966 646e 645f 7075 696c     niffs_find_dupli
 800eabb:	6163 6574 6f5f 6a62 685f 7264 695f 7364     cate_obj_hdr_ids
	...

0800eacc <__func__.8660>:
 800eacc:	696e 6666 5f73 6863 5f6b 6f6d 6976 6f5f     niffs_chk_movi_o
 800eadc:	6a62 6468 5f72 6170 6567 0073               bjhdr_pages.

0800eae8 <__func__.8826>:
 800eae8:	494e 4646 5f53 6e69 7469 4e00                    NIFFS_init.

0800eaf3 <__func__.8932>:
 800eaf3:	494e 4646 5f53 6f66 6d72 7461 4e00               NIFFS_format.

0800eb00 <__func__.8959>:
 800eb00:	494e 4646 5f53 6f6d 6e75 0074               NIFFS_mount.

0800eb0c <__func__.8976>:
 800eb0c:	494e 4646 5f53 6e75 6f6d 6e75 0074 0000     NIFFS_unmount...

0800eb1c <c_tbl>:
 800eb1c:	1a22 0801 7af9 0800 0000 0000 1b3d 0801     "....z......=...
 800eb2c:	1d0f 0801 82fd 0800 0000 0000 1d13 0801     ................
 800eb3c:	1d41 0801 8281 0800 0000 0000 1d45 0801     A...........E...
 800eb4c:	1d64 0801 8265 0800 0000 0000 1d75 0801     d...e.......u...
 800eb5c:	1dc5 0801 8249 0800 0000 0000 1dd5 0801     ....I...........
 800eb6c:	1e0f 0801 822d 0800 0000 0000 1e21 0801     ....-.......!...
 800eb7c:	1e51 0801 8211 0800 0000 0000 1e65 0801     Q...........e...
 800eb8c:	1e92 0801 81f5 0800 0000 0000 1ea0 0801     ................
 800eb9c:	1edd 0801 81d9 0800 0000 0000 1ee9 0801     ................
 800ebac:	1f1d 0801 8669 0800 0000 0000 1f28 0801     ....i.......(...
 800ebbc:	1f41 0801 810d 0800 0000 0000 1f53 0801     A...........S...
 800ebcc:	1fe4 0801 8091 0800 0001 0000 1fed 0801     ................
 800ebdc:	2001 0801 8087 0800 0001 0000 2009 0801     . ........... ..
 800ebec:	201c 0801 807d 0800 0000 0000 201f 0801     . ..}........ ..
 800ebfc:	202c 0801 8051 0800 0000 0000 2031 0801     , ..Q.......1 ..
 800ec0c:	2047 0801 8025 0800 0000 0000 204c 0801     G ..%.......L ..
 800ec1c:	205a 0801 7ff9 0800 0000 0000 205d 0801     Z ..........] ..
 800ec2c:	206f 0801 7fe1 0800 0000 0000 2073 0801     o ..........s ..
 800ec3c:	2087 0801 7fc9 0800 0000 0000 208e 0801     . ........... ..
 800ec4c:	ff32 0800 7fb1 0800 0000 0000 20a3 0801     2............ ..
 800ec5c:	20b7 0801 7f99 0800 0000 0000 20be 0801     . ........... ..
 800ec6c:	20d4 0801 7f81 0800 0000 0000 20db 0801     . ........... ..
 800ec7c:	0086 0801 7f69 0800 0000 0000 20eb 0801     ....i........ ..
 800ec8c:	2004 0801 7e6f 0800 0001 0000 20ff 0801     . ..o~....... ..
 800ec9c:	211a 0801 7e61 0800 0001 0000 2125 0801     .!..a~......%!..
 800ecac:	2139 0801 85fd 0800 0001 0000 213e 0801     9!..........>!..
 800ecbc:	218d 0801 7e21 0800 0001 0000 2194 0801     .!..!~.......!..
 800eccc:	21ce 0801 7dc1 0800 0001 0000 21d4 0801     .!...}.......!..
 800ecdc:	224d 0801 7d71 0800 0001 0000 2253 0801     M"..q}......S"..
 800ecec:	1476 0801 7c45 0800 0000 0000 2289 0801     v...E|......."..
 800ecfc:	233c 0801 7afd 0800 0001 0000 2344 0801     <#...z......D#..
 800ed0c:	2373 0801 7bbd 0800 0001 0000 237b 0801     s#...{......{#..
 800ed1c:	239e 0801 7ba9 0800 0001 0000 23a5 0801     .#...{.......#..
 800ed2c:	23da 0801 7b91 0800 0001 0000 23df 0801     .#...{.......#..
 800ed3c:	2401 0801 7b85 0800 0001 0000 2407 0801     .$...{.......$..
 800ed4c:	2416 0801 86dd 0800 0001 0000 241c 0801     .$...........$..
 800ed5c:	2430 0801 850d 0800 0000 0000 2435 0801     0$..........5$..
 800ed6c:	00b4 0801 850d 0800 0000 0000 2435 0801     ............5$..
	...

0800ed8c <pin_map>:
 800ed8c:	0c01 0d01 0e01 0f01 0800 0900 0a00 0f00     ................
 800ed9c:	0301 0401 0501 0601 0701 0b01 0a01 0201     ................
 800edac:	0101 0001 0700 0600 0500 0400 0100 0000     ................
 800edbc:	0e02 0d02                                   ....

0800edc0 <led_map>:
 800edc0:	0f02                                        ..

0800edc2 <ARC_string_product>:
 800edc2:	031f 0041 0072 0063 0061 0064 0065 002d     ..A.r.c.a.d.e.-.
 800edd2:	0063 006f 006e 0074 0072 006f 006c 1e00          c.o.n.t.r.o.l..

0800ede1 <ARC_string_vendor>:
 800ede1:	031e 0070 0065 006c 006c 0065 0070 006c     ..p.e.l.l.e.p.l.
 800edf1:	0075 0074 0074 002e 0063 006f 006d          u.t.t...c.o.m.

0800edff <ARC_string_lang_ID>:
 800edff:	0304 0409                                   ....

0800ee03 <ARC_JOYSTICK_report_descriptor>:
 800ee03:	0105 0409 01a1 8115 7f25 0105 0109 00a1     ........%.......
 800ee13:	3009 3109 0875 0295 0281 05c0 1909 2901     .0.1u..........)
 800ee23:	1508 2500 7501 9501 5510 6500 8100 c002     ...%.u...U.e....

0800ee33 <ARC_MOUSE_report_descriptor>:
 800ee33:	0105 0209 01a1 0109 00a1 0905 0119 0329     ..............).
 800ee43:	0015 0125 0395 0175 0281 0195 0575 0181     ..%...u.....u...
 800ee53:	0105 3009 3109 3809 8115 7f25 0875 0395     ...0.1.8..%.u...
 800ee63:	0681 09c0 053c 09ff 1501 2500 7501 9501     ....<......%.u..
 800ee73:	b102 7522 9506 b101 c001                    .."u......

0800ee7d <ARC_KB_report_descriptor>:
 800ee7d:	0105 0609 01a1 0705 e019 e729 0015 0125     ..........)...%.
 800ee8d:	0175 0895 0281 0195 0875 0181 2095 0875     u.......u.... u.
 800ee9d:	ff26 0500 1907 2900 81bc 9500 7503 0501     &......).....u..
 800eead:	1908 2901 9103 9502 7505 9101 c001          ...).....u....

0800eebb <ARC_config_descriptor>:
 800eebb:	0209 00a7 0106 e000 0932 0004 0100 0103     ........2.......
 800eecb:	0001 2109 0111 0100 3e22 0700 8105 4003     ...!....">.....@
 800eedb:	1800 0409 0001 0301 0201 0900 0021 0001     ............!...
 800eeeb:	2201 004a 0507 0382 0004 0901 0204 0100     ."J.............
 800eefb:	0003 0000 2109 0110 0100 3022 0700 8305     .....!...."0....
 800ef0b:	0803 0a00 0409 0003 0301 0000 0900 1021     ..............!.
 800ef1b:	0001 2201 0030 0507 0384 0008 090a 0404     ..."0...........
 800ef2b:	0100 0202 0001 2405 1000 0501 0124 0500     .......$....$...
 800ef3b:	2404 0202 2405 0406 0705 8505 0803 ff00     .$...$..........
 800ef4b:	0409 0005 0a02 0000 0700 0605 4002 0000     .............@..
 800ef5b:	0507 0287 0040 1200                              ....@..

0800ef62 <ARC_device_descriptor>:
 800ef62:	0112 0200 0000 4000 fede beda 0230 0201     .......@....0...
 800ef72:	0103                                        ..

0800ef74 <keycode_map>:
	...
 800efa4:	0647 0801 2f4b 0801 0000 0000 2fb2 0801     G...K/......./..
 800efb4:	2f4e 0801 0000 0000 2b3c 0801 2f51 0801     N/......<+..Q/..
 800efc4:	0000 0000 11db 0801 2f54 0801 0000 0000     ........T/......
 800efd4:	038d 0801 2f57 0801 0000 0000 037f 0801     ....W/..........
 800efe4:	2f5a 0801 0000 0000 fec4 0800 2f5d 0801     Z/..........]/..
 800eff4:	0000 0000 3345 0801 2f60 0801 0000 0000     ....E3..`/......
 800f004:	33cd 0801 2f63 0801 0000 0000 2f66 0801     .3..c/......f/..
 800f014:	2f68 0801 0000 0000 039f 0801 2f6b 0801     h/..........k/..
 800f024:	0000 0000 03a5 0801 2f6e 0801 0000 0000     ........n/......
 800f034:	319a 0801 2f71 0801 0000 0000 3044 0801     .1..q/......D0..
 800f044:	2f74 0801 0000 0000 3157 0801 2f77 0801     t/......W1..w/..
 800f054:	0000 0000 3294 0801 2f7a 0801 0000 0000     .....2..z/......
 800f064:	3235 0801 2f7d 0801 0000 0000 0393 0801     52..}/..........
 800f074:	2f80 0801 0000 0000 03ab 0801 2f83 0801     ./.........../..
 800f084:	0000 0000 331e 0801 2f86 0801 0000 0000     .....3.../......
 800f094:	3152 0801 2f89 0801 0000 0000 2f8c 0801     R1.../......./..
 800f0a4:	2f8e 0801 0000 0000 0399 0801 2f91 0801     ./.........../..
 800f0b4:	0000 0000 2d78 0801 2f94 0801 0000 0000     ....x-.../......
 800f0c4:	3160 0801 2f97 0801 0000 0000 0338 0801     `1.../......8...
 800f0d4:	2f9a 0801 0000 0000 0368 0801 0368 0801     ./......h...h...
 800f0e4:	0000 0000 3038 0801 3038 0801 0000 0000     ....80..80......
 800f0f4:	3114 0801 3114 0801 0000 0000 3118 0801     .1...1.......1..
 800f104:	3118 0801 0000 0000 311c 0801 311c 0801     .1.......1...1..
 800f114:	0000 0000 3120 0801 3120 0801 0000 0000     .... 1.. 1......
 800f124:	3124 0801 3124 0801 0000 0000 3128 0801     $1..$1......(1..
 800f134:	3128 0801 0000 0000 312c 0801 312c 0801     (1......,1..,1..
 800f144:	0000 0000 31c1 0801 31c1 0801 0000 0000     .....1...1......
 800f154:	30ab 0801 197d 0801 0000 0000 2f9d 0801     .0..}......../..
	...
 800f16c:	2fa4 0801 2fae 0801 0000 0000 2fb0 0801     ./.../......./..
 800f17c:	0365 0801 0000 0000 2fa8 0801 1746 0801     e......../..F...
 800f18c:	0000 0000 309a 0801 2fb4 0801 0000 0000     .....0.../......
 800f19c:	310c 0801 2b4a 0801 0000 0000 2fb7 0801     .1..J+......./..
 800f1ac:	2fc3 0801 0000 0000 2fc5 0801 2fd2 0801     ./......./.../..
 800f1bc:	0000 0000 30f0 0801 2fd4 0801 0000 0000     .....0.../......
 800f1cc:	2fd6 0801 2fe1 0801 0000 0000 2fe4 0801     ./.../......./..
 800f1dc:	2fee 0801 0000 0000 2ff1 0801 2ff7 0801     ./......./.../..
 800f1ec:	0000 0000 2ffa 0801 3000 0801 0000 0000     ...../...0......
 800f1fc:	31ae 0801 3003 0801 0000 0000 30e6 0801     .1...0.......0..
 800f20c:	3005 0801 0000 0000 30f4 0801 3007 0801     .0.......0...0..
 800f21c:	0000 0000 300a 0801 0000 0000 0000 0000     .....0..........
 800f22c:	3013 0801 0000 0000 0000 0000 3016 0801     .0...........0..
	...
 800f244:	3019 0801 0000 0000 0000 0000 301c 0801     .0...........0..
	...
 800f25c:	301f 0801 0000 0000 0000 0000 3022 0801     .0.........."0..
	...
 800f274:	3025 0801 0000 0000 0000 0000 3028 0801     %0..........(0..
	...
 800f28c:	302b 0801 0000 0000 0000 0000 302e 0801     +0...........0..
	...
 800f2a4:	3032 0801 0000 0000 0000 0000 3036 0801     20..........60..
	...
 800f2bc:	303a 0801 0000 0000 0000 0000 3046 0801     :0..........F0..
	...
 800f2d4:	3301 0801 0000 0000 0000 0000 3051 0801     .3..........Q0..
	...
 800f2ec:	334b 0801 0000 0000 0000 0000 3058 0801     K3..........X0..
	...
 800f304:	305d 0801 0000 0000 0000 0000 3064 0801     ]0..........d0..
	...
 800f31c:	3068 0801 0000 0000 0000 0000 306f 0801     h0..........o0..
	...
 800f334:	3075 0801 0000 0000 0000 0000 306a 0801     u0..........j0..
	...
 800f34c:	305a 0801 0000 0000 0000 0000 307a 0801     Z0..........z0..
	...
 800f364:	3082 0801 0000 0000 0000 0000 308b 0801     .0...........0..
	...
 800f37c:	3097 0801 0000 0000 0000 0000 30a0 0801     .0...........0..
	...
 800f394:	30a8 0801 0000 0000 0000 0000 30b1 0801     .0...........0..
	...
 800f3ac:	30b6 0801 0000 0000 0000 0000 30bb 0801     .0...........0..
	...
 800f3c4:	30c0 0801 0000 0000 0000 0000 30c5 0801     .0...........0..
	...
 800f3dc:	30ca 0801 0000 0000 0000 0000 30cf 0801     .0...........0..
	...
 800f3f4:	30d4 0801 0000 0000 0000 0000 30d9 0801     .0...........0..
	...
 800f40c:	30de 0801 0000 0000 0000 0000 30e3 0801     .0...........0..
	...
 800f424:	30ea 0801 30fa 0801 0000 0000 30fd 0801     .0...0.......0..
	...
 800f43c:	3283 0801 0000 0000 0000 0000 3109 0801     .2...........1..
	...
 800f454:	3112 0801 0000 0000 0000 0000 3116 0801     .1...........1..
	...
 800f46c:	311a 0801 0000 0000 0000 0000 311e 0801     .1...........1..
	...
 800f484:	3122 0801 0000 0000 0000 0000 3126 0801     "1..........&1..
	...
 800f49c:	312a 0801 0000 0000 0000 0000 312e 0801     *1...........1..
	...
 800f4b4:	3132 0801 0000 0000 0000 0000 3136 0801     21..........61..
	...
 800f4cc:	313a 0801 0000 0000 0000 0000 313e 0801     :1..........>1..
	...
 800f4e4:	3142 0801 0000 0000 0000 0000 314a 0801     B1..........J1..
	...
 800f4fc:	314f 0801 0000 0000 0000 0000 330d 0801     O1...........3..
	...
 800f514:	32f1 0801 0000 0000 0000 0000 326a 0801     .2..........j2..
	...
 800f52c:	3154 0801 0000 0000 0000 0000 3159 0801     T1..........Y1..
	...
 800f544:	315d 0801 0000 0000 0000 0000 3162 0801     ]1..........b1..
	...
 800f55c:	3168 0801 0000 0000 0000 0000 32a8 0801     h1...........2..
	...
 800f574:	316d 0801 0000 0000 0000 0000 3177 0801     m1..........w1..
	...
 800f58c:	3183 0801 0000 0000 0000 0000 3190 0801     .1...........1..
	...
 800f5a4:	319c 0801 0000 0000 0000 0000 31ab 0801     .1...........1..
	...
 800f5bc:	31b4 0801 0000 0000 0000 0000 31c3 0801     .1...........1..
	...
 800f5d4:	31c8 0801 0000 0000 0000 0000 31cd 0801     .1...........1..
	...
 800f5ec:	31d2 0801 0000 0000 0000 0000 31d7 0801     .1...........1..
	...
 800f604:	31dc 0801 0000 0000 0000 0000 31e1 0801     .1...........1..
	...
 800f61c:	31e6 0801 0000 0000 0000 0000 31eb 0801     .1...........1..
	...
 800f634:	31f0 0801 0000 0000 0000 0000 31f6 0801     .1...........1..
	...
 800f64c:	31fc 0801 0000 0000 0000 0000 3202 0801     .1...........2..
	...
 800f664:	3208 0801 0000 0000 0000 0000 320e 0801     .2...........2..
	...
 800f67c:	3214 0801 0000 0000 0000 0000 321a 0801     .2...........2..
	...
 800f694:	3220 0801 0000 0000 0000 0000 3226 0801      2..........&2..
	...
 800f6ac:	3230 0801 0000 0000 0000 0000 3237 0801     02..........72..
	...
 800f6c4:	323e 0801 0000 0000 0000 0000 3244 0801     >2..........D2..
	...
 800f6dc:	324a 0801 0000 0000 0000 0000 3251 0801     J2..........Q2..
	...
 800f6f4:	325b 0801 0000 0000 0000 0000 325f 0801     [2.........._2..
	...
 800f70c:	3264 0801 0000 0000 0000 0000 3270 0801     d2..........p2..
	...
 800f724:	3276 0801 0000 0000 0000 0000 327c 0801     v2..........|2..
	...
 800f73c:	3289 0801 0000 0000 0000 0000 3296 0801     .2...........2..
	...
 800f754:	32a2 0801 0000 0000 0000 0000 32ad 0801     .2...........2..
	...
 800f76c:	32ba 0801 0000 0000 0000 0000 32c9 0801     .2...........2..
	...
 800f784:	32da 0801 0000 0000 0000 0000 32eb 0801     .2...........2..
	...
 800f79c:	32f6 0801 0000 0000 0000 0000 3307 0801     .2...........3..
	...
 800f7b4:	3314 0801 0000 0000 0000 0000 3320 0801     .3.......... 3..
	...
 800f7cc:	3325 0801 0000 0000 0000 0000 3330 0801     %3..........03..
	...
 800f7e4:	333c 0801 0000 0000 0000 0000 3347 0801     <3..........G3..
	...
 800f7fc:	3350 0801 0000 0000 0000 0000 3359 0801     P3..........Y3..
	...
 800f814:	3365 0801 0000 0000 0000 0000 336e 0801     e3..........n3..
	...
 800f82c:	337a 0801 0000 0000 0000 0000 3388 0801     z3...........3..
	...
 800f844:	339b 0801 0000 0000 0000 0000 33a8 0801     .3...........3..
	...
 800f85c:	33b2 0801 0000 0000 0000 0000 33bd 0801     .3...........3..
	...
 800f874:	33c6 0801 0000 0000 0000 0000 33cf 0801     .3...........3..
	...
 800f88c:	33da 0801 0000 0000 0000 0000 33e6 0801     .3...........3..
	...
 800f8a4:	33f0 0801 0000 0000 0000 0000               .3..........

0800f8b0 <mousecode_map>:
 800f8b0:	2f05 0801 0000 0000 0001 0000 2f0d 0801     ./.........../..
 800f8c0:	0000 0000 0001 0000 2f15 0801 0000 0000     ........./......
 800f8d0:	0000 0000 2f23 0801 0000 0000 0000 0000     ....#/..........
 800f8e0:	2f31 0801 0000 0000 0000 0000 2f3f 0801     1/..........?/..
 800f8f0:	0000 0000 0001 0000                         ........

0800f8f8 <joystickcode_map>:
 800f8f8:	2d73 0801 0000 0000 0001 0000 2d7a 0801     s-..........z-..
 800f908:	0000 0000 0001 0000 2d81 0801 0000 0000     .........-......
 800f918:	0000 0000 2d8e 0801 0000 0000 0000 0000     .....-..........
 800f928:	2d9b 0801 0000 0000 0000 0000 2da8 0801     .-...........-..
	...
 800f940:	2db5 0801 0000 0000 0000 0000 2dc2 0801     .-...........-..
	...
 800f958:	2dcf 0801 0000 0000 0000 0000 2ddc 0801     .-...........-..
	...
 800f970:	2de9 0801 0000 0000 0000 0000 2df6 0801     .-...........-..
	...
 800f988:	2e04 0801 0000 0000 0000 0000 2e12 0801     ................
	...
 800f9a0:	2e20 0801 0000 0000 0000 0000 2e2e 0801      ...............
	...
 800f9b8:	2e3c 0801 0000 0000 0001 0000 2e43 0801     <...........C...
 800f9c8:	0000 0000 0001 0000 2e4a 0801 0000 0000     ........J.......
 800f9d8:	0000 0000 2e57 0801 0000 0000 0000 0000     ....W...........
 800f9e8:	2e64 0801 0000 0000 0000 0000 2e71 0801     d...........q...
	...
 800fa00:	2e7e 0801 0000 0000 0000 0000 2e8b 0801     ~...............
	...
 800fa18:	2e98 0801 0000 0000 0000 0000 2ea5 0801     ................
	...
 800fa30:	2eb2 0801 0000 0000 0000 0000 2ebf 0801     ................
	...
 800fa48:	2ecd 0801 0000 0000 0000 0000 2edb 0801     ................
	...
 800fa60:	2ee9 0801 0000 0000 0000 0000 2ef7 0801     ................
	...
 800fa78:	6967 7374 6275 672f 6e65 7265 6369 655f     gitsub/generic_e
 800fa88:	626d 6465 6564 2f64 7273 2f63 7261 6863     mbedded/src/arch
 800fa98:	632f 726f 6574 2f78 7261 6863 632e 1b00     /cortex/arch.c..
 800faa8:	315b 333b 6d35 210a 2121 4820 5241 4644     [1;35m.!!! HARDF
 800fab8:	5541 544c 2120 2121 0a0a 5b1b 006d 7453     AULT !!!...[m.St
 800fac8:	6361 656b 2064 6572 6967 7473 7265 3a73     acked registers:
 800fad8:	000a 2020 6370 203a 2020 7830 3025 7838     ..  pc:   0x%08x
 800fae8:	000a 2020 726c 203a 2020 7830 3025 7838     ..  lr:   0x%08x
 800faf8:	000a 2020 7370 3a72 2020 7830 3025 7838     ..  psr:  0x%08x
 800fb08:	000a 2020 7073 203a 2020 7830 3025 7838     ..  sp:   0x%08x
 800fb18:	000a 2020 3072 203a 2020 7830 3025 7838     ..  r0:   0x%08x
 800fb28:	000a 2020 3172 203a 2020 7830 3025 7838     ..  r1:   0x%08x
 800fb38:	000a 2020 3272 203a 2020 7830 3025 7838     ..  r2:   0x%08x
 800fb48:	000a 2020 3372 203a 2020 7830 3025 7838     ..  r3:   0x%08x
 800fb58:	000a 2020 3172 3a32 2020 7830 3025 7838     ..  r12:  0x%08x
 800fb68:	000a 460a 7561 746c 7320 6174 7574 2073     ...Fault status 
 800fb78:	6572 6967 7473 7265 3a73 000a 2020 4642     registers:..  BF
 800fb88:	5241 203a 7830 3025 7838 000a 2020 4643     AR: 0x%08x..  CF
 800fb98:	5253 203a 7830 3025 7838 000a 2020 4648     SR: 0x%08x..  HF
 800fba8:	5253 203a 7830 3025 7838 000a 2020 4644     SR: 0x%08x..  DF
 800fbb8:	5253 203a 7830 3025 7838 000a 2020 4641     SR: 0x%08x..  AF
 800fbc8:	5253 203a 7830 3025 7838 000a 4d4d 5241     SR: 0x%08x..MMAR
 800fbd8:	4156 494c 3a44 4d20 6d65 614d 206e 7830     VALID: MemMan 0x
 800fbe8:	3025 7838 000a 534d 4b54 5245 3a52 4d20     %08x..MSTKERR: M
 800fbf8:	6d65 614d 206e 7265 6f72 2072 7564 6972     emMan error duri
 800fc08:	676e 7320 6174 6b63 6e69 0a67 4d00 4e55     ng stacking..MUN
 800fc18:	5453 454b 5252 203a 654d 4d6d 6e61 6520     STKERR: MemMan e
 800fc28:	7272 726f 6420 7275 6e69 2067 6e75 7473     rror during unst
 800fc38:	6361 696b 676e 000a 4144 4343 4956 4c4f     acking..DACCVIOL
 800fc48:	203a 654d 4d6d 6e61 6d20 6d65 726f 2079     : MemMan memory 
 800fc58:	6361 6563 7373 7620 6f69 616c 6974 6e6f     access violation
 800fc68:	202c 6164 6174 000a 4149 4343 4956 4c4f     , data..IACCVIOL
 800fc78:	203a 654d 4d6d 6e61 6d20 6d65 726f 2079     : MemMan memory 
 800fc88:	6361 6563 7373 7620 6f69 616c 6974 6e6f     access violation
 800fc98:	202c 6e69 7473 0a72 4200 4146 5652 4c41     , instr..BFARVAL
 800fca8:	4449 203a 7542 4673 746c 3020 2578 3830     ID: BusFlt 0x%08
 800fcb8:	0a78 5300 4b54 5245 3a52 4220 7375 6c46     x..STKERR: BusFl
 800fcc8:	2074 7265 6f72 2072 7564 6972 676e 7320     t error during s
 800fcd8:	6174 6b63 6e69 0a67 5500 534e 4b54 5245     tacking..UNSTKER
 800fce8:	3a52 4220 7375 6c46 2074 7265 6f72 2072     R: BusFlt error 
 800fcf8:	7564 6972 676e 7520 736e 6174 6b63 6e69     during unstackin
 800fd08:	0a67 4900 504d 4552 4943 4553 5252 203a     g..IMPRECISERR: 
 800fd18:	7542 4673 746c 6520 7272 726f 6420 7275     BusFlt error dur
 800fd28:	6e69 2067 6164 6174 6120 6363 7365 0a73     ing data access.
 800fd38:	4900 5542 4553 5252 203a 7542 4673 746c     .IBUSERR: BusFlt
 800fd48:	6220 7375 6520 7272 726f 000a 4944 4256      bus error..DIVB
 800fd58:	5a59 5245 3a4f 5520 6173 6c46 2074 6964     YZERO: UsaFlt di
 800fd68:	6976 6973 6e6f 6220 2079 657a 6f72 000a     vision by zero..
 800fd78:	4e55 4c41 4749 454e 3a44 5520 6173 6c46     UNALIGNED: UsaFl
 800fd88:	2074 6e75 6c61 6769 656e 2064 6361 6563     t unaligned acce
 800fd98:	7373 000a 4f4e 5043 203a 7355 4661 746c     ss..NOCP: UsaFlt
 800fda8:	6520 6578 7563 6574 6320 706f 6f72 6563      execute coproce
 800fdb8:	7373 726f 6920 736e 7274 000a 4e49 5056     ssor instr..INVP
 800fdc8:	3a43 5520 6173 6c46 2074 6567 656e 6172     C: UsaFlt genera
 800fdd8:	0a6c 4900 564e 5453 5441 3a45 5520 6173     l..INVSTATE: Usa
 800fde8:	6c46 2074 7865 6365 7475 2065 5241 204d     Flt execute ARM 
 800fdf8:	6e69 7473 0a72 5500 444e 4645 4e49 5453     instr..UNDEFINST
 800fe08:	3a52 5520 6173 6c46 2074 7865 6365 7475     R: UsaFlt execut
 800fe18:	2065 6162 2064 6e69 7473 0a72 4400 4245     e bad instr..DEB
 800fe28:	4755 5645 3a46 4820 7261 4664 746c 6420     UGEVF: HardFlt d
 800fe38:	6265 6775 6520 6576 746e 000a 4f46 4352     ebug event..FORC
 800fe48:	4445 203a 6148 6472 6c46 2074 5653 2f43     ED: HardFlt SVC/
 800fe58:	4b42 5450 7720 7469 6968 206e 5653 0a43     BKPT within SVC.
 800fe68:	5600 4345 4254 3a4c 4820 7261 4664 746c     .VECTBL: HardFlt
 800fe78:	7620 6365 6f74 2072 6566 6374 2068 6166      vector fetch fa
 800fe88:	6c69 6465 000a 7325 2020 7325 2020 7325     iled..%s  %s  %s
 800fe98:	000a 7325 2020 7325 2020 3025 7832 000a     ..%s  %s  %02x..
 800fea8:	5b1b 3b31 3533 0a6d 5341 4553 5452 203a     .[1;35m.ASSERT: 
 800feb8:	7325 253a 0a69 5b1b 006d 4244 0047 4e49     %s:%i..[m.DBG.IN
 800fec8:	0046 5257 004e 5446 004c 3e3c 6d00 5f73     F.WRN.FTL.<>.ms_
 800fed8:	6974 6b63 6900 7172 655f 746e 7265 6900     tick.irq_enter.i
 800fee8:	7172 655f 6978 2074 6900 7172 6f5f 006e     rq_exit .irq_on.
 800fef8:	7269 5f71 666f 0066 7463 5f78 656c 7661     irq_off.ctx_leav
 800ff08:	0065 7463 5f78 6e65 6574 0072 656b 6e72     e.ctx_enter.kern
 800ff18:	6c65 6c5f 6165 6576 6b00 7265 656e 5f6c     el_leave.kernel_
 800ff28:	6e65 6574 0072 6874 5f72 7263 6165 0074     enter.thr_creat.
 800ff38:	6874 5f72 6979 6c65 0064 6874 5f72 6c73     thr_yield.thr_sl
 800ff48:	6565 0070 6874 5f72 6564 6461 0020 756d     eep.thr_dead .mu
 800ff58:	6574 5f78 6f6c 6b63 6d00 7475 7865 615f     tex_lock.mutex_a
 800ff68:	7163 6975 6572 6d00 7475 7865 775f 6961     cquire.mutex_wai
 800ff78:	0074 756d 6574 5f78 6e75 6f6c 6b63 6300     t.mutex_unlock.c
 800ff88:	6e6f 5f64 6177 7469 6300 6e6f 5f64 6974     ond_wait.cond_ti
 800ff98:	5f6d 6177 7469 6300 6e6f 5f64 6973 6e67     m_wait.cond_sign
 800ffa8:	6c61 6300 6e6f 5f64 6973 5f67 6177 656b     al.cond_sig_wake
 800ffb8:	0064 6f63 646e 625f 6f72 6461 6163 7473     d.cond_broadcast
 800ffc8:	6300 6e6f 5f64 6974 5f6d 6177 656b 0064     .cond_tim_waked.
 800ffd8:	6874 5f72 6177 656b 7075 6f00 5f73 6c73     thr_wakeup.os_sl
 800ffe8:	6565 0070 7270 6565 706d 6974 6e6f 7400     eep.preemption.t
 800fff8:	7361 5f6b 6c61 6f6c 7400 7361 5f6b 7572     ask_allo.task_ru
 8010008:	206e 7400 7361 5f6b 6e65 7274 7400 7361     n .task_entr.tas
 8010018:	5f6b 7865 7469 7400 7361 5f6b 7266 6565     k_exit.task_free
 8010028:	7400 7361 5f6b 6974 726d 7400 7361 5f6b     .task_timr.task_
 8010038:	786d 655f 746e 0072 6174 6b73 6d5f 5f78     mx_entr.task_mx_
 8010048:	6177 7469 7400 7361 5f6b 786d 775f 6b61     wait.task_mx_wak
 8010058:	0065 6174 6b73 6d5f 5f78 7865 7469 7400     e.task_mx_exit.t
 8010068:	7361 5f6b 786d 655f 746e 5f72 6f6d 6572     ask_mx_entr_more
 8010078:	7400 7361 5f6b 786d 655f 6978 5f74 656c     .task_mx_exit_le
 8010088:	7373 7500 6573 5f72 736d 0067 5653 6143     ss.user_msg.SVCa
 8010098:	6c6c 495f 5152 006e 6544 7562 4d67 6e6f     ll_IRQn.DebugMon
 80100a8:	7469 726f 495f 5152 006e 3f3f 003f 6550     itor_IRQn.???.Pe
 80100b8:	646e 5653 495f 5152 006e 7953 5473 6369     ndSV_IRQn.SysTic
 80100c8:	5f6b 5249 6e51 5700 4457 5f47 5249 6e51     k_IRQn.WWDG_IRQn
 80100d8:	5000 4456 495f 5152 006e 4154 504d 5245     .PVD_IRQn.TAMPER
 80100e8:	495f 5152 006e 5452 5f43 5249 6e51 4600     _IRQn.RTC_IRQn.F
 80100f8:	414c 4853 495f 5152 006e 4352 5f43 5249     LASH_IRQn.RCC_IR
 8010108:	6e51 4500 5458 3049 495f 5152 006e 5845     Qn.EXTI0_IRQn.EX
 8010118:	4954 5f31 5249 6e51 4500 5458 3249 495f     TI1_IRQn.EXTI2_I
 8010128:	5152 006e 5845 4954 5f33 5249 6e51 4500     RQn.EXTI3_IRQn.E
 8010138:	5458 3449 495f 5152 006e 4d44 3141 435f     XTI4_IRQn.DMA1_C
 8010148:	6168 6e6e 6c65 5f31 5249 6e51 4400 414d     hannel1_IRQn.DMA
 8010158:	5f31 6843 6e61 656e 326c 495f 5152 006e     1_Channel2_IRQn.
 8010168:	4d44 3141 435f 6168 6e6e 6c65 5f33 5249     DMA1_Channel3_IR
 8010178:	6e51 4400 414d 5f31 6843 6e61 656e 346c     Qn.DMA1_Channel4
 8010188:	495f 5152 006e 4d44 3141 435f 6168 6e6e     _IRQn.DMA1_Chann
 8010198:	6c65 5f35 5249 6e51 4400 414d 5f31 6843     el5_IRQn.DMA1_Ch
 80101a8:	6e61 656e 366c 495f 5152 006e 4d44 3141     annel6_IRQn.DMA1
 80101b8:	435f 6168 6e6e 6c65 5f37 5249 6e51 4100     _Channel7_IRQn.A
 80101c8:	4344 5f31 5f32 5249 6e51 5500 4253 485f     DC1_2_IRQn.USB_H
 80101d8:	5f50 4143 314e 545f 5f58 5249 6e51 5500     P_CAN1_TX_IRQn.U
 80101e8:	4253 4c5f 5f50 4143 314e 525f 3058 495f     SB_LP_CAN1_RX0_I
 80101f8:	5152 006e 4143 314e 525f 3158 495f 5152     RQn.CAN1_RX1_IRQ
 8010208:	006e 4143 314e 535f 4543 495f 5152 006e     n.CAN1_SCE_IRQn.
 8010218:	5845 4954 5f39 5f35 5249 6e51 5400 4d49     EXTI9_5_IRQn.TIM
 8010228:	5f31 5242 5f4b 5249 6e51 5400 4d49 5f31     1_BRK_IRQn.TIM1_
 8010238:	5055 495f 5152 006e 4954 314d 545f 4752     UP_IRQn.TIM1_TRG
 8010248:	435f 4d4f 495f 5152 006e 4954 314d 435f     _COM_IRQn.TIM1_C
 8010258:	5f43 5249 6e51 5400 4d49 5f32 5249 6e51     C_IRQn.TIM2_IRQn
 8010268:	5400 4d49 5f33 5249 6e51 5400 4d49 5f34     .TIM3_IRQn.TIM4_
 8010278:	5249 6e51 4900 4332 5f31 5645 495f 5152     IRQn.I2C1_EV_IRQ
 8010288:	006e 3249 3143 455f 5f52 5249 6e51 4900     n.I2C1_ER_IRQn.I
 8010298:	4332 5f32 5645 495f 5152 006e 3249 3243     2C2_EV_IRQn.I2C2
 80102a8:	455f 5f52 5249 6e51 5300 4950 5f31 5249     _ER_IRQn.SPI1_IR
 80102b8:	6e51 5300 4950 5f32 5249 6e51 5500 4153     Qn.SPI2_IRQn.USA
 80102c8:	5452 5f31 5249 6e51 5500 4153 5452 5f32     RT1_IRQn.USART2_
 80102d8:	5249 6e51 5500 4153 5452 5f33 5249 6e51     IRQn.USART3_IRQn
 80102e8:	4500 5458 3149 5f35 3031 495f 5152 006e     .EXTI15_10_IRQn.
 80102f8:	5452 4143 616c 6d72 495f 5152 006e 5355     RTCAlarm_IRQn.US
 8010308:	5742 6b61 5565 5f70 5249 6e51 3000 3231     BWakeUp_IRQn.012
 8010318:	3433 3635 3837 4139 4342 4544 4746 4948     3456789ABCDEFGHI
 8010328:	4b4a 4d4c 4f4e 5150 5452 5553 5756 5958     JKLMNOPQRTSUVWXY
 8010338:	005a 3130 3332 3534 3736 3938 6261 6463     Z.0123456789abcd
 8010348:	6665 6867 6a69 6c6b 6e6d 706f 7271 7473     efghijklmnopqrst
 8010358:	7675 7877 7a79 2500 0063 0a20 090d 3000     uvwxyz.%c. ....0
 8010368:	0031 3130 3332 3534 3736 3938 6261 6463     1.0123456789abcd
 8010378:	6665 4241 4443 4645 3000 3231 3433 3635     efABCDEF.0123456
 8010388:	3837 0039 4520 2f00 0065 5220 2f00 0072     789. E./e. R./r.
 8010398:	5720 2f00 0077 4b20 2f00 006b 4c20 2f00      W./w. K./k. L./
 80103a8:	006c 5320 2f00 0073 7325 6920 3a78 3025     l. S./s.%s ix:%0
 80103b8:	7832 2020 3a66 3025 7838 2020 4c46 4741     2x  f:%08x  FLAG
 80103c8:	3a53 7325 7325 7325 7325 7325 7325 2020     S:%s%s%s%s%s%s  
 80103d8:	7261 3a67 3025 7838 2020 7261 7067 253a     arg:%08x  argp:%
 80103e8:	3830 0a78 7325 2020 2020 2020 2020 656e     08x.%s        ne
 80103f8:	7478 253a 3830 2078 7220 6e75 725f 7165     xt:%08x  run_req
 8010408:	3a73 6925 000a 7325 4e20 4e4f 0a45 6700     s:%i..%s NONE..g
 8010418:	7469 7573 2f62 6567 656e 6972 5f63 6d65     itsub/generic_em
 8010428:	6562 6464 6465 732f 6372 742f 7361 716b     bedded/src/taskq
 8010438:	632e 5400 5341 204b 6925 4020 2520 3830     .c.TASK %i @ %08
 8010448:	0a78 4100 494c 4556 4400 4145 2044 5400     x..ALIVE.DEAD .T
 8010458:	5341 204b 5953 5453 4d45 2d0a 2d2d 2d2d     ASK SYSTEM.-----
 8010468:	2d2d 2d2d 2d2d 000a 2020 7563 7272 6e65     ------..  curren
 8010478:	0074 3025 6932 2000 6c20 7361 2074 2020     t.%02i.  last   
 8010488:	2000 7020 6f6f 206c 6962 6d74 7061 0020     .  pool bitmap .
 8010498:	3025 3233 2062 2000 7420 6d69 7265 0a73     %032b .  timers.
 80104a8:	2500 2073 7325 2020 7473 7261 3a74 3025     .%s %s  start:%0
 80104b8:	7838 2820 2b25 3830 2978 2020 6572 7563     8x (%+08x)  recu
 80104c8:	7272 6e65 3a74 3025 7838 2020 656e 7478     rrent:%08x  next
 80104d8:	253a 3830 2078 5b20 7325 0a5d 2000 7420     :%08x  [%s]..  t
 80104e8:	7361 206b 696c 7473 5f20 205f 2000 7420     ask list __ .  t
 80104f8:	726d 6c20 7369 2074 5f5f 0020 4154 4b53     mr list __ .TASK
 8010508:	6920 696e 0a74 6700 7469 7573 2f62 6567      init..gitsub/ge
 8010518:	656e 6972 5f63 6d65 6562 6464 6465 732f     neric_embedded/s
 8010528:	6372 722f 6e69 6267 6675 632e 6500 7272     rc/ringbuf.c.err
 8010538:	2520 2069 2040 7325 6920 206e 7325 253a      %i @ %s in %s:%
 8010548:	0a69 6700 7469 7573 2f62 696e 6666 2f73     i..gitsub/niffs/
 8010558:	7273 2f63 696e 6666 5f73 6e69 6574 6e72     src/niffs_intern
 8010568:	6c61 632e 2000 6420 6c65 3a65 7020 7869     al.c.  dele: pix
 8010578:	2520 3430 0a78 2000 6920 666e 3a6f 7020      %04x..  info: p
 8010588:	7869 6420 6c65 7465 2065 6628 2564 6f69     ix delete (fd%io
 8010598:	6a62 3a29 2520 3430 2078 696f 3a64 3025     bj): %04x oid:%0
 80105a8:	7834 000a 2020 6e69 6f66 203a 6970 2078     4x..  info: pix 
 80105b8:	6564 656c 6574 2820 6466 6925 7563 2972     delete (fd%icur)
 80105c8:	203a 3025 7834 6f20 6469 253a 3430 0a78     : %04x oid:%04x.
 80105d8:	6900 666e 726f 3a6d 7020 7869 7520 6470     .inform: pix upd
 80105e8:	7461 2065 6628 2564 6f69 6a62 3a29 2520     ate (fd%iobj): %
 80105f8:	3430 2d78 253e 3430 2078 696f 3a64 3025     04x->%04x oid:%0
 8010608:	7834 000a 6e69 6f66 6d72 203a 6970 2078     4x..inform: pix 
 8010618:	7075 6164 6574 2820 6466 6925 7563 2972     update (fd%icur)
 8010628:	203a 3025 7834 3e2d 3025 7834 6f20 6469     : %04x->%04x oid
 8010638:	253a 3430 0a78 5700 4952 0054 4c43 4145     :%04x..WRIT.CLEA
 8010648:	4d00 564f 0049 2020 6f6d 6576 203a 6970     .MOVI.  move: pi
 8010658:	2078 3025 7834 3e2d 3025 7834 6620 616c     x %04x->%04x fla
 8010668:	3a67 7325 000a 7265 7361 2065 203a 6573     g:%s..erase : se
 8010678:	7463 726f 2520 2069 7265 5f61 6e63 3a74     ctor %i era_cnt:
 8010688:	6925 000a 6863 6365 206b 203a 6970 2078     %i..check : pix 
 8010698:	3025 7834 6220 6461 6620 616c 2067 7473     %04x bad flag st
 80106a8:	7461 7375 6620 2f6c 6469 253a 3430 2f78     atus fl/id:%04x/
 80106b8:	3025 7834 6420 6c65 7465 2065 6168 6472     %04x delete hard
 80106c8:	000a 6863 6365 206b 203a 6970 2078 3025     ..check : pix %0
 80106d8:	7834 6f20 7072 6168 206e 7962 6920 2064     4x orphan by id 
 80106e8:	696f 3a64 3025 7834 6420 6c65 7465 0a65     oid:%04x delete.
 80106f8:	6300 6568 6b63 3a20 7020 7869 2520 3430     .check : pix %04
 8010708:	2078 6e75 6966 696e 6873 6465 7220 6d65     x unfinished rem
 8010718:	766f 2065 696f 3a64 3025 7834 6420 6c65     ove oid:%04x del
 8010728:	7465 0a65 6300 6568 6b63 3a20 7020 7869     ete..check : pix
 8010738:	2520 3430 2078 6162 2064 656c 676e 6874      %04x bad length
 8010748:	6f20 6469 253a 3430 2078 6564 656c 6574      oid:%04x delete
 8010758:	000a 6863 6365 206b 203a 6970 2078 3025     ..check : pix %0
 8010768:	7834 6620 6572 2065 7562 2074 6f63 746e     4x free but cont
 8010778:	6961 736e 6420 7461 2c61 6420 6c65 7465     ains data, delet
 8010788:	2065 6168 6472 000a 6863 6365 206b 203a     e hard..check : 
 8010798:	7265 7361 6e69 2067 6e75 6e69 7469 6169     erasing uninitia
 80107a8:	696c 657a 2064 6573 7463 726f 2520 0a69     lized sector %i.
 80107b8:	4e00 444f 5441 0041 2020 7277 7469 203a     .NODATA.  writ: 
 80107c8:	6970 2078 3025 7834 2520 2073 696f 3a64     pix %04x %s oid:
 80107d8:	3025 7834 7320 6970 3a78 6925 000a 2020     %04x spix:%i..  
 80107e8:	6863 6b63 203a 6970 2078 3025 7834 6620     chck: pix %04x f
 80107f8:	756f 646e 4d20 564f 2049 626f 206a 6468     ound MOVI obj hd
 8010808:	2072 696f 3a64 3025 7834 7320 6970 3a78     r oid:%04x spix:
 8010818:	6925 6420 6c65 7465 0a65 7400 7572 636e     %i delete..trunc
 8010828:	2020 6177 6e72 203a 6970 2078 3025 7834       warn: pix %04x
 8010838:	6320 756f 646c 6e20 746f 6420 6c65 7465      could not delet
 8010848:	2065 6877 6e65 7420 7572 636e 2520 3430     e when trunc %04
 8010858:	2f78 3025 7834 3a20 2520 0a69 2000 6320     x/%04x : %i..  c
 8010868:	6368 3a6b 7020 7869 2520 3430 2078 6f66     hck: pix %04x fo
 8010878:	6e75 2064 7564 6c70 6369 7461 2065 626f     und duplicate ob
 8010888:	206a 6468 2072 696f 3a64 3025 7834 6420     j hdr oid:%04x d
 8010898:	6c65 7465 0a65 2000 6320 6368 3a6b 7020     elete..  chck: p
 80108a8:	7869 2520 3430 2078 6572 6967 7473 7265     ix %04x register
 80108b8:	4d20 564f 2049 626f 206a 6468 2072 696f      MOVI obj hdr oi
 80108c8:	3a64 3025 7834 6d20 7861 735f 6970 3a78     d:%04x max_spix:
 80108d8:	6925 000a 2020 6863 6b63 203a 6970 2078     %i..  chck: pix 
 80108e8:	3025 7834 7220 6765 7369 6574 2072 4f4d     %04x register MO
 80108f8:	4956 6f20 6a62 6820 7264 6c20 676f 6620     VI obj hdr log f
 8010908:	6c75 006c 2020 6863 6b63 203a 6966 646e     ull.  chck: find
 8010918:	7020 6761 7365 6f20 6469 253a 3430 2078      pages oid:%04x 
 8010928:	7073 7869 3e20 2520 2069 6f66 2072 6564     spix > %i for de
 8010938:	656c 6974 676e 000a 2020 6863 6b63 203a     leting..  chck: 
 8010948:	6970 2078 3025 7834 6d20 766f 2065 7361     pix %04x move as
 8010958:	7720 6972 7474 6e65 000a 2020 6863 6b63      written..  chck
 8010968:	203a 6970 2078 3025 7834 4d20 564f 2049     : pix %04x MOVI 
 8010978:	626f 206a 6468 3a72 6e20 206f 7266 6565     obj hdr: no free
 8010988:	7020 6761 2065 6f74 6d20 766f 2065 6f74      page to move to
 8010998:	000a 2020 6966 646e 203a 6970 2078 3025     ..  find: pix %0
 80109a8:	7834 7720 7261 206e 6f66 6e75 2064 4f4d     4x warn found MO
 80109b8:	4956 7720 6568 206e 6f6c 6b6f 6e69 2067     VI when looking 
 80109c8:	6f66 2072 626f 206a 6469 253a 3430 2078     for obj id:%04x 
 80109d8:	7073 7869 253a 0a69 6300 6568 6b63 3a20     spix:%i..check :
 80109e8:	7020 7869 2520 3430 2078 4f4d 4956 7020      pix %04x MOVI p
 80109f8:	6761 2065 6168 2073 5257 5449 7320 6269     age has WRIT sib
 8010a08:	696c 676e 203a 6564 656c 6574 000a 6863     ling: delete..ch
 8010a18:	6365 206b 203a 6970 2078 3025 7834 4d20     eck : pix %04x M
 8010a28:	564f 2049 6170 6567 6120 6f6c 656e 203a     OVI page alone: 
 8010a38:	6f6d 6576 7420 206f 5257 5449 000a 6863     move to WRIT..ch
 8010a48:	6365 206b 203a 6970 2078 3025 7834 4d20     eck : pix %04x M
 8010a58:	564f 2049 6170 6567 6120 6f6c 656e 203a     OVI page alone: 
 8010a68:	6f6e 6620 6572 2065 6170 6567 7420 206f     no free page to 
 8010a78:	6f6d 6576 7420 0a6f 6f00 6570 206e 3a20     move to..open  :
 8010a88:	7020 7869 2520 3430 2078 6f66 6e75 2064      pix %04x found 
 8010a98:	6e6f 796c 6d20 766f 2069 6170 6567 000a     only movi page..
 8010aa8:	706f 6e65 2020 203a 2522 2273 6620 756f     open  : "%s" fou
 8010ab8:	646e 4020 7020 7869 2520 3430 0a78 2000     nd @ pix %04x.. 
 8010ac8:	2020 6720 3a63 7320 6365 6f74 2072 3225        gc: sector %2
 8010ad8:	2069 7265 3a61 3625 2069 7265 5f61 3a64     i era:%6i era_d:
 8010ae8:	3425 2069 7266 6565 253a 6932 6420 6c65     %4i free:%2i del
 8010af8:	3a65 3225 2069 7562 7973 253a 6932 2020     e:%2i busy:%2i  
 8010b08:	2d2d 0020 6b73 7069 6570 2c64 7420 746f     -- .skipped, tot
 8010b18:	6c61 796c 6620 6572 0a65 6e00 206f 6f72     ally free..no ro
 8010b28:	6d6f 6620 726f 6d20 766f 6d65 6e65 0a74     om for movement.
 8010b38:	6300 6e6f 6174 6e69 2073 6874 2065 6e6f     .contains the on
 8010b48:	796c 6620 6572 2065 6170 6567 0a73 6600     ly free pages..f
 8010b58:	6c75 2c6c 6e20 746f 6120 6c6c 776f 6465     ull, not allowed
 8010b68:	000a 6373 726f 2065 6925 000a 6367 2020     ..score %i..gc  
 8010b78:	2020 203a 6f66 6e75 2064 6163 646e 6469       : found candid
 8010b88:	7461 2065 6573 7463 726f 2520 2069 7265     ate sector %i er
 8010b98:	5f61 6e63 3a74 6925 2820 7266 6565 253a     a_cnt:%i (free:%
 8010ba8:	2069 6564 656c 253a 2069 7562 7973 253a     i dele:%i busy:%
 8010bb8:	2969 000a 6367 2020 2020 203a 6f66 6e75     i)..gc    : foun
 8010bc8:	2064 6f6e 6320 6e61 6964 6164 6574 7320     d no candidate s
 8010bd8:	6365 6f74 0a72 6700 2063 2020 3a20 6620     ector..gc    : f
 8010be8:	6572 6465 2520 2069 6170 6567 2073 2528     reed %i pages (%
 8010bf8:	2069 6564 656c 202c 6925 6220 7375 2979     i dele, %i busy)
 8010c08:	000a 6e65 7573 6572 203a 7572 236e 6925     ..ensure: run#%i
 8010c18:	7720 7261 206e 7366 6320 6172 6d6d 6465      warn fs crammed
 8010c28:	202c 7266 6565 7020 6761 7365 253a 2c69     , free pages:%i,
 8010c38:	6e20 6565 2064 7461 6c20 6165 7473 253a      need at least:%
 8010c48:	0a69 6500 736e 7275 3a65 7220 6e75 2523     i..ensure: run#%
 8010c58:	2069 656e 6465 2520 2069 7266 6565 202c     i need %i free, 
 8010c68:	6168 6576 2520 2d69 6925 000a 7263 6165     have %i-%i..crea
 8010c78:	6574 203a 6970 2078 3025 7834 6f20 6469     te: pix %04x oid
 8010c88:	253a 3430 2078 616e 656d 253a 0a73 2000     :%04x name:%s.. 
 8010c98:	2020 2020 2020 7420 7079 3a65 3025 7832            type:%02x
 8010ca8:	7820 7274 5f61 656d 6174 6c5f 6e65 253a      xtra_meta_len:%
 8010cb8:	0a69 6100 7070 6e65 3a64 7020 7869 2520     i..append: pix %
 8010cc8:	3430 2078 626f 206a 6468 2072 696f 3a64     04x obj hdr oid:
 8010cd8:	3025 7834 7320 6970 3a78 2030 656c 3a6e     %04x spix:0 len:
 8010ce8:	6925 000a 7061 6570 646e 203a 6970 2078     %i..append: pix 
 8010cf8:	3025 7834 6620 6c75 206c 6170 6567 6f20     %04x full page o
 8010d08:	6469 253a 3430 2078 7073 7869 253a 2069     id:%04x spix:%i 
 8010d18:	656c 3a6e 6925 000a 7061 6570 646e 203a     len:%i..append: 
 8010d28:	6970 2078 3025 7834 6920 2073 7266 6565     pix %04x is free
 8010d38:	000a 7061 6570 646e 203a 6970 2078 3025     ..append: pix %0
 8010d48:	7834 6d20 646f 6669 2079 626f 206a 6468     4x modify obj hd
 8010d58:	2072 696f 3a64 3025 7834 7320 6970 3a78     r oid:%04x spix:
 8010d68:	6925 6c20 6e65 253a 0a69 6100 7070 6e65     %i len:%i..appen
 8010d78:	3a64 6e20 7765 6f20 6a62 6820 7264 7020     d: new obj hdr p
 8010d88:	7869 2520 3430 0a78 6100 7070 6e65 3a64     ix %04x..append:
 8010d98:	7020 7869 2520 3430 2078 6f6d 6964 7966      pix %04x modify
 8010da8:	7020 6761 2065 696f 3a64 3025 7834 7320      page oid:%04x s
 8010db8:	6970 3a78 6925 6c20 6e65 253a 0a69 6100     pix:%i len:%i..a
 8010dc8:	7070 6e65 3a64 6e20 7765 7020 7869 2520     ppend: new pix %
 8010dd8:	3430 0a78 6100 7070 6e65 3a64 6820 6165     04x..append: hea
 8010de8:	6564 2072 7075 6164 6574 6620 726f 6e20     der update for n
 8010df8:	7765 6f20 6a62 6365 2074 6468 2072 6f28     ew object hdr (o
 8010e08:	6c6e 2079 656c 676e 6874 6320 6168 676e     nly length chang
 8010e18:	2965 202c 6970 2078 3025 7834 000a 7061     e), pix %04x..ap
 8010e28:	6570 646e 203a 6568 6461 7265 7520 6470     pend: header upd
 8010e38:	7461 2065 6f66 2072 626f 656a 7463 6820     ate for object h
 8010e48:	7264 2820 6e69 6c63 6475 6e69 2067 6164     dr (including da
 8010e58:	6174 2c29 7020 7869 2520 3430 0a78 6100     ta), pix %04x..a
 8010e68:	7070 6e65 3a64 6820 6165 6564 2072 7075     ppend: header up
 8010e78:	6164 6574 6920 666e 726f 2c6d 6d20 766f     date inform, mov
 8010e88:	6465 6620 6f72 206d 6970 2078 3025 7834     ed from pix %04x
 8010e98:	000a 6f6d 6964 7966 203a 6970 2078 3025     ..modify: pix %0
 8010ea8:	7834 6f20 6469 253a 3430 2078 7073 7869     4x oid:%04x spix
 8010eb8:	253a 2069 666f 7366 253a 2069 656c 3a6e     :%i offs:%i len:
 8010ec8:	6925 000a 7274 6e75 2063 203a 616d 656b     %i..trunc : make
 8010ed8:	6f20 6469 2520 3430 2078 6925 6220 7479      oid %04x %i byt
 8010ee8:	7365 000a 6572 616e 656d 203a 616e 656d     es..rename: name
 8010ef8:	253a 2d73 253e 0a73 6300 6568 6b63 3a20     :%s->%s..check :
 8010f08:	2a20 6420 6c65 7465 2065 726f 6870 6e61      * delete orphan
 8010f18:	2073 7962 6920 2c64 6120 6f62 7472 6465     s by id, aborted
 8010f28:	7220 6d65 766f 7365 202c 6162 2064 6c66      removes, bad fl
 8010f38:	6761 2c73 6420 7269 7974 7020 6761 7365     ags, dirty pages
 8010f48:	000a 6863 6365 206b 203a 202a 6966 616e     ..check : * fina
 8010f58:	696c 657a 6d20 766f 6e69 2067 6170 6567     lize moving page
 8010f68:	0a73 6300 6568 6b63 3a20 2a20 7220 6d65     s..check : * rem
 8010f78:	766f 2065 626f 656a 7463 6820 6165 6564     ove object heade
 8010f88:	7372 7720 7469 2068 7564 6c70 6369 7461     rs with duplicat
 8010f98:	2065 6469 0a73 6300 6568 6b63 3a20 2a20     e ids..check : *
 8010fa8:	6420 6c65 7465 2065 726f 6870 6e61 2073      delete orphans 
 8010fb8:	7962 6c20 6e65 7467 0a68 6300 6568 6b63     by length..check
 8010fc8:	3a20 6620 6e69 2064 4f4d 4956 6f20 6a62      : find MOVI obj
 8010fd8:	7020 7869 253a 3430 2d78 652d 646e 000a      pix:%04x--end..
 8010fe8:	6863 6365 206b 203a 6966 646e 4d20 564f     check : find MOV
 8010ff8:	2049 626f 206a 6970 3a78 3025 7834 2d2d     I obj pix:%04x--
 8011008:	6e65 2064 202d 6f67 2074 7375 2520 2069     end - got us %i 
 8011018:	6e65 7274 6569 0a73 6300 6568 6b63 3a20     entries..check :
 8011028:	2a20 6720 2063 656e 6465 6465 202c 6925      * gc needed, %i
 8011038:	6620 6572 2c65 6d20 7375 2074 7461 6c20      free, must at l
 8011048:	6165 7473 6820 7661 2065 6925 000a 6f63     east have %i..co
 8011058:	666e 2020 203a 6170 6567 7320 7a69 2065     nf  : page size 
 8011068:	766f 7265 752f 646e 7265 6c66 776f 000a     over/underflow..
 8011078:	6f63 666e 2020 203a 696e 6666 5f73 626f     conf  : niffs_ob
 8011088:	5f6a 6469 7420 7079 2065 6f74 206f 6d73     j_id type too sm
 8011098:	6c61 206c 6f74 6520 736e 7275 2065 626f     all to ensure ob
 80110a8:	656a 7463 6920 2064 6e75 7169 6575 656e     ject id uniquene
 80110b8:	7373 6f20 2066 6925 7020 6761 7365 000a     ss of %i pages..
 80110c8:	6f63 666e 2020 203a 7562 6666 7265 6c20     conf  : buffer l
 80110d8:	6e65 7467 2068 6f74 206f 6d73 6c61 2c6c     ength too small,
 80110e8:	6e20 6565 2064 6925 6220 7479 7365 000a      need %i bytes..
 80110f8:	6170 6567 7320 7a69 2065 6572 3a71 2020     page size req:  
 8011108:	2020 2020 2020 2520 0a69 6100 7463 6175            %i..actua
 8011118:	206c 6170 6567 7320 7a69 3a65 2020 2020     l page size:    
 8011128:	2020 6925 000a 756e 206d 6e75 7169 6575       %i..num unique
 8011138:	6f20 6a62 6920 7364 203a 2020 2520 0a69      obj ids:    %i.
 8011148:	6d00 7861 7320 6170 206e 7869 203a 2020     .max span ix:   
 8011158:	2020 2020 2020 2020 6925 000a 616d 2078             %i..max 
 8011168:	6966 656c 6420 7461 2061 656c 676e 6874     file data length
 8011178:	203a 2520 0a69 6d00 7861 6e20 6d75 6620     :  %i..max num f
 8011188:	6c69 7365 6220 2079 6973 657a 203a 6925     iles by size: %i
 8011198:	000a 660a 7461 6c61 203a 7265 7361 2065     ...fatal: erase 
 80111a8:	6573 7463 726f 2520 2069 6468 2072 616d     sector %i hdr ma
 80111b8:	6967 2c63 6520 7078 6365 6574 2064 3025     gic, expected %0
 80111c8:	7838 202c 6177 2073 3025 7838 000a 4b4f     8x, was %08x..OK
 80111d8:	4200 4441 4600 2052 6600 2072 4400 2045     .BAD.FR .fr .DE 
 80111e8:	6400 2065 4300 204c 6300 206c 5700 2052     .de .CL .cl .WR 
 80111f8:	7700 2072 4d00 204f 6d00 206f 2000 2020     .wr .MO .mo .   
 8011208:	0020 4142 2044 4e00 4649 5346 000a 6573      .BAD .NIFFS..se
 8011218:	7463 726f 7320 7a69 2065 203a 6925 000a     ctor size : %i..
 8011228:	6573 7463 726f 2073 2020 2020 203a 6925     sectors     : %i
 8011238:	000a 6170 6567 2f73 6573 7463 726f 203a     ..pages/sector: 
 8011248:	6925 000a 6170 6567 7320 7a69 2065 2020     %i..page size   
 8011258:	203a 6925 000a 6870 7379 6120 6464 2072     : %i..phys addr 
 8011268:	2020 203a 7025 000a 7266 6565 7020 6761       : %p..free pag
 8011278:	7365 2020 203a 6925 000a 6564 656c 7020     es  : %i..dele p
 8011288:	6761 7365 2020 203a 6925 000a 6573 7463     ages  : %i..sect
 8011298:	726f 2520 6932 4020 2520 2070 6520 6172     or %2i @ %p  era
 80112a8:	635f 746e 253a 6934 2020 616d 6967 3a63     _cnt:%4i  magic:
 80112b8:	7325 000a 2020 3025 7834 6620 3a6c 3025     %s..  %04x fl:%0
 80112c8:	7834 6920 3a64 3025 7834 0020 2020 626f     4x id:%04x .  ob
 80112d8:	2e6a 6469 253a 3430 2078 7320 2e70 7869     j.id:%04x  sp.ix
 80112e8:	253a 3230 2078 0020 656c 3a6e 3025 7838     :%02x  .len:%08x
 80112f8:	2020 7974 6570 253a 3230 0078 2020 7473       type:%02x.  st
 8011308:	7261 5f74 6573 3a63 6425 2020 6572 7673     art_sec:%d  resv
 8011318:	735f 6365 253a 0064 2020 616e 656d 003a     _sec:%d.  name:.
 8011328:	4146 4154 214c 7220 6765 7369 6574 6572     FATAL! registere
 8011338:	2064 6564 656c 6574 2064 6170 6567 3a73     d deleted pages:
 8011348:	6925 202c 7562 2074 6f63 6e75 6574 2064     %i, but counted 
 8011358:	6925 000a 4146 4154 214c 7220 6765 7369     %i..FATAL! regis
 8011368:	6574 6572 2064 7266 6565 7020 6761 7365     tered free pages
 8011378:	253a 2c69 6220 7475 6320 756f 746e 6465     :%i, but counted
 8011388:	2520 0a69 0a00 0a0a 6148 6472 6177 6572      %i.....Hardware
 8011398:	6920 696e 6974 6c61 7a69 7461 6f69 206e      initialization 
 80113a8:	6f64 656e 000a 7453 6361 206b 7830 3025     done..Stack 0x%0
 80113b8:	7838 2d20 202d 7830 3025 7838 000a 7553     8x -- 0x%08x..Su
 80113c8:	7362 7379 6574 206d 6e69 7469 6169 696c     bsystem initiali
 80113d8:	617a 6974 6e6f 6420 6e6f 0a65 6600 6e69     zation done..fin
 80113e8:	6964 676e 3020 2578 3830 2e78 2e2e 000a     ding 0x%08x.....
 80113f8:	6572 6576 7372 2065 616d 6374 2068 6f66     reverse match fo
 8011408:	6e75 2064 2040 7830 3025 7838 000a 6966     und @ 0x%08x..fi
 8011418:	696e 6873 6465 000a 7273 2f63 6c63 2e69     nished..src/cli.
 8011428:	0063 7564 706d 6e69 2067 7830 3025 7838     c.dumping 0x%08x
 8011438:	202c 6925 6220 7479 7365 000a 464f 0046     , %i bytes..OFF.
 8011448:	4244 2047 656c 6576 3a6c 2520 0a69 4400     DBG level: %i..D
 8011458:	4742 6d20 7361 206b 7325 203a 7325 000a     BG mask %s: %s..
 8011468:	656c 6576 006c 6964 6173 6c62 0065 6264     level.disable.db
 8011478:	0067 6e69 6f66 7700 7261 006e 6166 6174     g.info.warn.fata
 8011488:	006c 6c61 006c 250a 2069 7962 6574 2073     l.all..%i bytes 
 8011498:	6572 6461 000a 430a 4f4c 4b43 0a53 2d2d     read...CLOCKS.--
 80114a8:	2d2d 2d2d 000a 4348 4b4c 203a 2020 2020     ----..HCLK:     
 80114b8:	2020 2520 0a69 5000 4c43 314b 203a 2020        %i..PCLK1:   
 80114c8:	2020 2020 6925 000a 4350 4c4b 3a32 2020         %i..PCKL2:  
 80114d8:	2020 2020 2520 0a69 5300 5359 4c43 3a4b          %i..SYSCLK:
 80114e8:	2020 2020 2020 6925 000a 4441 4343 4b4c           %i..ADCCLK
 80114f8:	203a 2020 2020 2520 0a69 0a00 454d 4f4d     :      %i...MEMO
 8011508:	5952 2d0a 2d2d 2d2d 0a2d 7200 6d61 6220     RY.------..ram b
 8011518:	6765 6e69 203a 2020 3025 7838 000a 6172     egin:   %08x..ra
 8011528:	206d 6e65 3a64 2020 2020 2520 3830 0a78     m end:     %08x.
 8011538:	6600 616c 6873 6220 6765 6e69 203a 3025     .flash begin: %0
 8011548:	7838 000a 6c66 7361 2068 6e65 3a64 2020     8x..flash end:  
 8011558:	2520 3830 0a78 7300 6d68 6d65 6220 6765      %08x..shmem beg
 8011568:	6e69 203a 3025 7838 000a 6873 656d 206d     in: %08x..shmem 
 8011578:	6e65 3a64 2020 2520 3830 0a78 7300 6174     end:   %08x..sta
 8011588:	6b63 6220 6765 6e69 203a 3025 7838 000a     ck begin: %08x..
 8011598:	7473 6361 206b 6e65 3a64 2020 2520 3830     stack end:   %08
 80115a8:	0a78 6500 7272 203a 6925 000a 6854 7369     x..err: %i..This
 80115b8:	7720 6c69 206c 6567 656e 6172 6574 6120      will generate a
 80115c8:	6c20 746f 6f20 2066 656b 7079 6572 7373      lot of keypress
 80115d8:	7365 0a2e 5000 656c 7361 2065 6f66 7563     es...Please focu
 80115e8:	2073 6f73 656d 7720 6e69 6f64 2077 6173     s some window sa
 80115f8:	6566 6620 726f 6720 7261 6c62 6465 6920     fe for garbled i
 8011608:	706e 7475 0a2e 5000 6572 7373 6e69 2067     nput...Pressing 
 8011618:	656b 7379 6920 2e6e 2e2e 000a 2020 6925     keys in.....  %i
 8011628:	7000 6e69 6420 6265 756f 636e 2065 7963     .pin debounce cy
 8011638:	6c63 7365 203a 2020 2020 2020 2020 2020     cles:           
 8011648:	2020 2020 2020 2520 0a69 6d00 756f 6573            %i..mouse
 8011658:	7220 7065 726f 2074 6564 746c 3a61 2020      report delta:  
 8011668:	2020 2020 2020 2020 2020 2020 2020 2020                     
 8011678:	2520 2069 736d 000a 6f6d 7375 2065 6f70      %i ms..mouse po
 8011688:	6973 6974 6e6f 6120 6363 6c65 7265 7461     sition accelerat
 8011698:	726f 7320 6570 6465 203a 2020 2020 6925     or speed:     %i
 80116a8:	000a 6f6d 7375 2065 6877 6565 206c 6361     ..mouse wheel ac
 80116b8:	6563 656c 6172 6f74 2072 7073 6565 3a64     celerator speed:
 80116c8:	2020 2020 2020 2020 6925 000a 6f6a 7379             %i..joys
 80116d8:	6974 6b63 7220 7065 726f 2074 6564 746c     tick report delt
 80116e8:	3a61 2020 2020 2020 2020 2020 2020 2020     a:              
 80116f8:	2020 6925 6d20 0a73 6a00 796f 7473 6369       %i ms..joystic
 8011708:	206b 6964 6572 7463 6f69 206e 6361 6563     k direction acce
 8011718:	656c 6172 6f74 2072 7073 6565 3a64 2520     lerator speed: %
 8011728:	0a69 2800 6e3c 6d75 293e 4b00 5945 4f42     i..(<num>).KEYBO
 8011738:	5241 2044 5953 424d 4c4f 3a53 200a 0020     ARD SYMBOLS:.  .
 8011748:	0a0a 4f4d 5355 2045 5953 424d 4c4f 3a53     ..MOUSE SYMBOLS:
 8011758:	200a 0020 0a0a 4f4a 5359 4954 4b43 5320     .  ...JOYSTICK S
 8011768:	4d59 4f42 534c 0a3a 2020 0a00 4e0a 4d55     YMBOLS:.  ...NUM
 8011778:	5245 5441 524f 3a53 3c0a 756e 3e6d 6920     ERATORS:.<num> i
 8011788:	2073 6564 6966 656e 2064 7361 2820 4341     s defined as (AC
 8011798:	2943 285b 292b 2d7c 5b5d 2e31 312e 3732     C)[(+)|-][1..127
 80117a8:	2e5d 000a 6156 696c 2064 756e 626d 7265     ]...Valid number
 80117b8:	6120 6572 2d20 3231 2037 6f74 3120 3732      are -127 to 127
 80117c8:	202c 7865 6c63 6475 6e69 2067 2e30 000a     , excluding 0...
 80117d8:	7865 202e 6f74 6d20 766f 2065 6f6d 7375     ex. to move mous
 80117e8:	2065 3031 7320 6574 7370 7220 6769 7468     e 10 steps right
 80117f8:	6f20 206e 2078 7861 7369 202c 7375 2065      on x axis, use 
 8011808:	4f4d 5355 5f45 2858 3031 2e29 000a 7865     MOUSE_X(10)...ex
 8011818:	202e 6f74 6d20 766f 2065 6f6d 7375 2065     . to move mouse 
 8011828:	3031 7320 6574 7370 6c20 6665 2074 6e6f     10 steps left on
 8011838:	7820 6120 6978 2c73 7520 6573 4d20 554f      x axis, use MOU
 8011848:	4553 585f 2d28 3031 2e29 000a 7865 202e     SE_X(-10)...ex. 
 8011858:	6f74 6d20 766f 2065 6f6d 7375 2065 6361     to move mouse ac
 8011868:	6563 656c 6172 6974 676e 6620 6f72 206d     celerating from 
 8011878:	2031 6f74 3120 2030 7473 7065 2073 6972     1 to 10 steps ri
 8011888:	6867 2074 6e6f 7820 6120 6978 2c73 7520     ght on x axis, u
 8011898:	6573 4d20 554f 4553 585f 4128 4343 3031     se MOUSE_X(ACC10
 80118a8:	2e29 000a 7865 202e 6f74 6d20 766f 2065     )...ex. to move 
 80118b8:	6f6d 7375 2065 6361 6563 656c 6172 6974     mouse accelerati
 80118c8:	676e 6620 6f72 206d 2031 6f74 3120 2030     ng from 1 to 10 
 80118d8:	7473 7065 2073 656c 7466 6f20 206e 2078     steps left on x 
 80118e8:	7861 7369 202c 7375 2065 4f4d 5355 5f45     axis, use MOUSE_
 80118f8:	2858 4341 2d43 3031 2e29 000a 7325 2509     X(ACC-10)...%s.%
 8011908:	0073 7325 6e09 206f 7573 6863 6320 6d6f     s.%s.no such com
 8011918:	616d 646e 000a 5241 4143 4544 4948 0044     mand..ARCADEHID.
 8011928:	2020 7325 7325 7325 6400 7961 253a 2069       %s%s%s.day:%i 
 8011938:	6974 656d 253a 3230 3a69 3025 6932 253a     time:%02i:%02i:%
 8011948:	3230 2e69 3025 6933 000a 6e45 6261 656c     02i.%03i..Enable
 8011958:	7520 6273 000a 6944 6173 6c62 2065 7375      usb..Disable us
 8011968:	0a62 0a00 6164 6574 253a 2069 7562 6c69     b...date:%i buil
 8011978:	3a64 6925 0a0a 5300 5359 4d5f 4941 5f4e     d:%i...SYS_MAIN_
 8011988:	4954 454d 5f52 5246 5145 2520 0a69 5300     TIMER_FREQ %i..S
 8011998:	5359 545f 4d49 5245 545f 4349 5f4b 5246     YS_TIMER_TICK_FR
 80119a8:	5145 2520 0a69 5500 5241 3254 535f 4550     EQ %i..UART2_SPE
 80119b8:	4445 2520 0a69 4300 4e4f 4946 5f47 4154     ED %i..CONFIG_TA
 80119c8:	4b53 505f 4f4f 204c 6925 000a 5041 5f50     SK_POOL %i..APP_
 80119d8:	4f43 464e 4749 505f 4e49 2053 6925 000a     CONFIG_PINS %i..
 80119e8:	5041 5f50 4f43 464e 4749 445f 4645 5f53     APP_CONFIG_DEFS_
 80119f8:	4550 5f52 4950 204e 6925 000a 5355 5f42     PER_PIN %i..USB_
 8011a08:	424b 525f 5045 524f 5f54 454b 4d59 5041     KB_REPORT_KEYMAP
 8011a18:	535f 5a49 2045 6925 000a 6564 0066 4b4f     _SIZE %i..def.OK
 8011a28:	000a 203e 4300 4e4f 2053 6f74 206f 616d     ..> .CONS too ma
 8011a38:	796e 6120 6772 0a73 4300 4e4f 2053 6163     ny args..CONS ca
 8011a48:	6c6c 6e69 2067 255b 5d70 7720 7469 2068     lling [%p] with 
 8011a58:	6925 6120 6772 0a73 7500 6b6e 6f6e 6e77     %i args..unknown
 8011a68:	6320 6d6f 616d 646e 2d20 7420 7972 6820      command - try h
 8011a78:	6c65 0a70 4300 4e4f 2053 6e69 7570 2074     elp..CONS input 
 8011a88:	766f 7265 6c66 776f 000a 4f43 534e 6c20     overflow..CONS l
 8011a98:	6e65 7467 2068 696d 6d73 7461 6863 000a     ength mismatch..
 8011aa8:	4c43 2049 6e69 7469 000a 7562 6c69 2064     CLI init..build 
 8011ab8:	2020 2020 203a 6925 000a 7562 6c69 2064         : %i..build 
 8011ac8:	6164 6574 203a 6925 000a 740a 7079 2065     date: %i...type 
 8011ad8:	3f27 2027 726f 2720 6568 706c 2027 6f66     '?' or 'help' fo
 8011ae8:	2072 696c 7473 6f20 2066 6f63 6d6d 6e61     r list of comman
 8011af8:	7364 0a0a 7300 7379 6100 7070 7400 7361     ds...sys.app.tas
 8011b08:	006b 736f 6800 6165 0070 6f63 6d6d 6300     k.os.heap.comm.c
 8011b18:	696c 6e00 7376 7300 6970 6500 6874 6600     li.nvs.spi.eth.f
 8011b28:	0073 3269 0063 6977 6966 7700 6265 7200     s.i2c.wifi.web.r
 8011b38:	6461 6f69 4400 6665 6e69 2065 2061 6970     adio.Define a pi
 8011b48:	736e 6620 6e75 7463 6f69 0a6e 7953 746e     ns function.Synt
 8011b58:	7861 203a 6564 2066 6970 3c6e 3e78 3d20     ax: def pin<x> =
 8011b68:	5b20 6428 6665 2a29 7c20 7020 6e69 793c      [(def)* | pin<y
 8011b78:	203e 203f 6428 6665 2a29 3a20 2820 6564     > ? (def)* : (de
 8011b88:	2966 5d2a 650a 3a78 6420 6665 6e69 2065     f)*].ex: define 
 8011b98:	6970 206e 2031 6f74 7320 6e65 2064 656b     pin 1 to send ke
 8011ba8:	6279 616f 6472 6320 6168 6172 7463 7265     yboard character
 8011bb8:	4120 200a 2020 6420 6665 7020 6e69 2031      A.    def pin1 
 8011bc8:	203d 0a61 7865 203a 6564 6966 656e 7020     = a.ex: define p
 8011bd8:	6e69 3220 7420 206f 6f6d 6576 6d20 756f     in 2 to move mou
 8011be8:	6573 7520 0a70 2020 2020 6564 2066 6970     se up.    def pi
 8011bf8:	326e 3d20 6d20 756f 6573 795f 2d28 2931     n2 = mouse_y(-1)
 8011c08:	650a 3a78 6420 6665 6e69 2065 6970 206e     .ex: define pin 
 8011c18:	2033 6f74 6d20 766f 2065 6f6d 7375 2065     3 to move mouse 
 8011c28:	6972 6867 2074 6669 7020 6e69 3420 6920     right if pin 4 i
 8011c38:	2073 7270 7365 6573 2064 6c65 6573 6c20     s pressed else l
 8011c48:	6665 0a74 2020 2020 6564 2066 6970 336e     eft.    def pin3
 8011c58:	3d20 7020 6e69 2034 203f 6f6d 7375 5f65      = pin4 ? mouse_
 8011c68:	2878 2931 3a20 6d20 756f 6573 785f 2d28     x(1) : mouse_x(-
 8011c78:	2931 0a0a 7865 203a 6564 6966 656e 7020     1)..ex: define p
 8011c88:	6e69 3520 7420 206f 6573 646e 6b20 7965     in 5 to send key
 8011c98:	6f62 7261 2064 6573 7571 6e65 6563 4320     board sequence C
 8011ca8:	5254 2b4c 4c41 2b54 4544 0a4c 2020 2020     TRL+ALT+DEL.    
 8011cb8:	6564 2066 6970 356e 3d20 4c20 4645 5f54     def pin5 = LEFT_
 8011cc8:	5443 4c52 4c20 4645 5f54 4c41 2054 4544     CTRL LEFT_ALT DE
 8011cd8:	454c 4554 540a 206f 6573 2065 6c61 206c     LETE.To see all 
 8011ce8:	6f70 7373 6269 656c 6420 6665 6e69 7469     possible definit
 8011cf8:	6f69 736e 202c 7375 2065 6f63 6d6d 6e61     ions, use comman
 8011d08:	2064 7973 0a6d 7300 6d79 4c00 7369 2074     d sym..sym.List 
 8011d18:	6c61 206c 6f70 7373 6269 656c 6420 6665     all possible def
 8011d28:	6e69 7469 6f69 736e 6920 206e 6564 2066     initions in def 
 8011d38:	6f63 6d6d 6e61 0a64 6300 6766 4400 7369     command..cfg.Dis
 8011d48:	6c70 7961 6320 7275 6572 746e 6320 6e6f     play current con
 8011d58:	6966 7567 6172 6974 6e6f 000a 6573 5f74     figuration..set_
 8011d68:	6970 5f6e 6564 6f62 6e75 6563 5300 7465     pin_debounce.Set
 8011d78:	6e20 6d75 6562 2072 666f 7220 7165 6975      number of requi
 8011d88:	6572 2064 6564 6f62 6e75 6563 6320 6379     red debounce cyc
 8011d98:	656c 2073 6572 7571 7269 6465 6620 726f     les required for
 8011da8:	6120 7020 6e69 7320 6174 6574 6320 6168      a pin state cha
 8011db8:	676e 2065 303c 322d 3535 0a3e 7300 7465     nge <0-255>..set
 8011dc8:	6d5f 756f 6573 645f 6c65 6174 5300 7465     _mouse_delta.Set
 8011dd8:	6e20 6d75 6562 2072 666f 6d20 6c69 696c      number of milli
 8011de8:	6573 6f63 646e 2073 6562 7774 6565 206e     seconds between 
 8011df8:	6f6d 7375 2065 6572 6f70 7472 2073 303c     mouse reports <0
 8011e08:	322d 3535 0a3e 7300 7465 6d5f 756f 6573     -255>..set_mouse
 8011e18:	705f 736f 615f 6363 5300 7465 6d20 756f     _pos_acc.Set mou
 8011e28:	6573 7020 736f 7469 6f69 206e 6361 6563     se position acce
 8011e38:	656c 6172 6f74 2072 7073 6565 2064 3028     lerator speed (0
 8011e48:	362d 3535 3533 0a29 7300 7465 6d5f 756f     -65535)..set_mou
 8011e58:	6573 775f 6568 6c65 615f 6363 5300 7465     se_wheel_acc.Set
 8011e68:	6d20 756f 6573 7720 6568 6c65 6120 6363      mouse wheel acc
 8011e78:	6c65 7265 7461 726f 7320 6570 6465 2820     elerator speed (
 8011e88:	2d30 3536 3335 2935 000a 6573 5f74 6f6a     0-65535)..set_jo
 8011e98:	5f79 6564 746c 0061 6553 2074 756e 626d     y_delta.Set numb
 8011ea8:	7265 6f20 2066 696d 6c6c 7369 6365 6e6f     er of millisecon
 8011eb8:	7364 6220 7465 6577 6e65 6a20 796f 7473     ds between joyst
 8011ec8:	6369 206b 6572 6f70 7472 2073 303c 322d     ick reports <0-2
 8011ed8:	3535 0a3e 7300 7465 6a5f 796f 615f 6363     55>..set_joy_acc
 8011ee8:	5300 7465 6a20 796f 7473 6369 206b 6964     .Set joystick di
 8011ef8:	6572 7463 6f69 206e 6361 6563 656c 6172     rection accelera
 8011f08:	6f74 2072 7073 6565 2064 3028 362d 3535     tor speed (0-655
 8011f18:	3533 0a29 7500 6273 655f 616e 6c62 0065     35)..usb_enable.
 8011f28:	6e45 6261 656c 2073 726f 6420 7369 6261     Enables or disab
 8011f38:	656c 2073 7375 0a62 7500 6273 745f 7365     les usb..usb_tes
 8011f48:	5f74 656b 6279 616f 6472 5400 7365 2074     t_keyboard.Test 
 8011f58:	656b 7379 6f20 206e 656b 6279 616f 6472     keys on keyboard
 8011f68:	420a 6665 726f 2065 7572 6e6e 6e69 2067     .Before running 
 8011f78:	6574 7473 202c 706f 6e65 7320 6d6f 2065     test, open some 
 8011f88:	6574 7478 6170 2c64 6520 672e 202e 6567     textpad, e.g. ge
 8011f98:	6964 2e74 520a 6e75 7420 6568 7420 7365     dit..Run the tes
 8011fa8:	2c74 6120 646e 6620 636f 7375 7420 6568     t, and focus the
 8011fb8:	7420 7865 7074 6461 6220 6665 726f 2065      textpad before 
 8011fc8:	6f63 6e75 6474 776f 0a6e 6572 6361 6568     countdown.reache
 8011fd8:	2073 657a 6f72 0a2e 6873 0020 7366 6d5f     s zero..sh .fs_m
 8011fe8:	756f 746e 4d00 756f 746e 2073 6966 656c     ount.Mounts file
 8011ff8:	7320 7379 6574 0a6d 6600 5f73 7564 706d      system..fs_dump
 8012008:	4400 6d75 7370 6620 6c69 2065 7973 7473     .Dumps file syst
 8012018:	6d65 000a 736c 4c00 7369 7374 6620 6c69     em..ls.Lists fil
 8012028:	7365 000a 6173 6576 5300 7661 7365 6320     es..save.Saves c
 8012038:	7275 6572 746e 6320 6e6f 6966 0a67 6c00     urrent config..l
 8012048:	616f 0064 6f4c 6461 2073 6f63 666e 6769     oad.Loads config
 8012058:	000a 6d72 5200 6d65 766f 7365 6120 6320     ..rm.Removes a c
 8012068:	6e6f 6966 0a67 6300 6b68 4300 6568 6b63     onfig..chk.Check
 8012078:	2073 6966 656c 7320 7379 6574 0a6d 6600     s file system..f
 8012088:	726f 616d 0074 6f46 6d72 7461 2073 6966     ormat.Formats fi
 8012098:	656c 7320 7379 6574 0a6d 4300 6572 7461     le system..Creat
 80120a8:	7365 6520 706d 7974 6620 6c69 0a65 6100     es empty file..a
 80120b8:	7070 6e65 0064 7041 6570 646e 2073 696c     ppend.Appends li
 80120c8:	656e 7420 206f 6966 656c 000a 6572 616e     ne to file..rena
 80120d8:	656d 5200 6e65 6d61 7365 6120 6620 6c69     me.Renames a fil
 80120e8:	0a65 5300 6f68 2077 6966 656c 6320 6e6f     e..Show file con
 80120f8:	6574 746e 0a73 4400 6d75 7370 7320 6174     tents..Dumps sta
 8012108:	6574 6f20 2066 6c61 206c 7973 7473 6d65     te of all system
 8012118:	000a 7564 706d 745f 6172 6563 4400 6d75     ..dump_trace.Dum
 8012128:	7370 7320 7379 6574 206d 7274 6361 0a65     ps system trace.
 8012138:	7400 6d69 0065 7250 6e69 7374 6f20 2072     .time.Prints or 
 8012148:	6573 7374 7420 6d69 0a65 6974 656d 6f20     sets time.time o
 8012158:	2072 6974 656d 3c20 6164 3e79 3c20 6f68     r time <day> <ho
 8012168:	7275 203e 6d3c 6e69 7475 3e65 3c20 6573     ur> <minute> <se
 8012178:	6f63 646e 203e 6d3c 6c69 696c 6573 6f63     cond> <milliseco
 8012188:	646e 0a3e 7500 7277 7469 0065 7257 7469     nd>..uwrite.Writ
 8012198:	7365 7420 206f 6175 7472 750a 7277 7469     es to uart.uwrit
 80121a8:	2065 753c 7261 3e74 3c20 7473 6972 676e     e <uart> <string
 80121b8:	0a3e 7865 203a 7775 6972 6574 3220 2220     >.ex: uwrite 2 "
 80121c8:	6f66 226f 000a 7275 6165 0064 6552 6461     foo"..uread.Read
 80121d8:	2073 7266 6d6f 7520 7261 0a74 7275 6165     s from uart.urea
 80121e8:	2064 753c 7261 3e74 2820 6e3c 6d75 6863     d <uart> (<numch
 80121f8:	7261 3e73 0a29 756e 636d 6168 7372 2d20     ars>).numchars -
 8012208:	6e20 6d75 6562 2072 666f 6320 6168 7372      number of chars
 8012218:	7420 206f 6572 6461 202c 6669 6f20 696d      to read, if omi
 8012228:	7474 6465 7520 7261 2074 7369 6420 6172     tted uart is dra
 8012238:	6e69 6465 650a 3a78 7520 6572 6461 3220     ined.ex: uread 2
 8012248:	3120 0a30 7500 6f63 666e 4300 6e6f 6966      10..uconf.Confi
 8012258:	7567 6572 7520 7261 0a74 6375 6e6f 2066     gure uart.uconf 
 8012268:	753c 7261 3e74 3c20 7073 6565 3e64 650a     <uart> <speed>.e
 8012278:	3a78 7520 6f63 666e 3220 3920 3036 0a30     x: uconf 2 9600.
 8012288:	5300 7465 6420 6265 6775 6620 6c69 6574     .Set debug filte
 8012298:	2072 6e61 2064 656c 6576 0a6c 6264 2067     r and level.dbg 
 80122a8:	6c28 7665 6c65 3c20 6264 7c67 6e69 6f66     (level <dbg|info
 80122b8:	777c 7261 7c6e 6166 6174 3e6c 2029 6528     |warn|fatal>) (e
 80122c8:	616e 6c62 2065 785b 2a5d 2029 6428 7369     nable [x]*) (dis
 80122d8:	6261 656c 5b20 5d78 292a 780a 2d20 3c20     able [x]*).x - <
 80122e8:	6174 6b73 687c 6165 7c70 6f63 6d6d 637c     task|heap|comm|c
 80122f8:	636e 637c 696c 6e7c 7376 737c 6970 617c     nc|cli|nvs|spi|a
 8012308:	6c6c 0a3e 7865 203a 6264 2067 656c 6576     ll>.ex: dbg leve
 8012318:	206c 6e69 6f66 6420 7369 6261 656c 6120     l info disable a
 8012328:	6c6c 6520 616e 6c62 2065 6e63 2063 6f63     ll enable cnc co
 8012338:	6d6d 000a 656d 666d 6e69 0064 6553 7261     mm..memfind.Sear
 8012348:	6863 7365 6620 726f 6820 7865 6920 206e     ches for hex in 
 8012358:	656d 6f6d 7972 6d0a 6d65 6966 646e 3020     memory.memfind 0
 8012368:	6e78 6e6e 6e6e 6e6e 0a6e 6d00 6d65 7564     xnnnnnnnn..memdu
 8012378:	706d 4400 6d75 7370 6d20 6d65 726f 0a79     mp.Dumps memory.
 8012388:	656d 646d 6d75 2070 613c 6464 3e72 3c20     memdump <addr> <
 8012398:	656c 3e6e 000a 7361 6573 7472 4100 7373     len>..assert.Ass
 80123a8:	7265 7374 7320 7379 6574 0a6d 4f4e 4554     erts system.NOTE
 80123b8:	7320 7379 6574 206d 6977 6c6c 6e20 6565      system will nee
 80123c8:	2064 6f74 6220 2065 6572 6f62 746f 6465     d to be rebooted
 80123d8:	000a 6172 646e 4700 6e65 7265 7461 7365     ..rand.Generates
 80123e8:	7020 6573 6475 206f 6172 646e 6d6f 7320      pseudo random s
 80123f8:	7165 6575 636e 0a65 7200 7365 7465 5200     equence..reset.R
 8012408:	7365 7465 2073 7973 7473 6d65 000a 7562     esets system..bu
 8012418:	6c69 0064 754f 7074 7475 2073 7562 6c69     ild.Outputs buil
 8012428:	2064 6e69 6f66 000a 6568 706c 5000 6972     d info..help.Pri
 8012438:	746e 2073 6568 706c 680a 6c65 2070 726f     nts help.help or
 8012448:	6820 6c65 2070 633c 6d6f 616d 646e 0a3e      help <command>.
 8012458:	7300 6372 612f 7070 632e 6300 756f 646c     .src/app.c.could
 8012468:	6e20 746f 6d20 756f 746e 6620 2073 202d      not mount fs - 
 8012478:	7265 6f72 2072 6925 000a 6f6e 6420 6665     error %i..no def
 8012488:	7561 746c 6320 6e6f 6966 2067 6f66 6e75     ault config foun
 8012498:	2c64 7320 7661 6e69 2067 6166 7463 726f     d, saving factor
 80124a8:	2079 6564 6166 6c75 0074 7366 6520 7272     y default.fs err
 80124b8:	726f 2520 0a69 6b00 2062 6572 6f70 7472     or %i..kb report
 80124c8:	000a 6f6d 7375 2065 6572 6f70 7472 6420     ..mouse report d
 80124d8:	3a78 6925 6420 3a79 6925 6420 3a77 6925     x:%i dy:%i dw:%i
 80124e8:	6d20 646f 253a 3830 0a62 6a00 796f 7220      mod:%08b..joy r
 80124f8:	7065 726f 2074 6925 000a 6564 6976 6563     eport %i..device
 8012508:	2520 3a69 6925 7020 6e65 6964 676e 7220      %i:%i pending r
 8012518:	7065 726f 0a74 7300 6f74 2070 6974 656d     eport..stop time
 8012528:	2072 6f66 2072 6564 6976 6563 2520 3a69     r for device %i:
 8012538:	6925 000a 6564 6976 6563 2520 3a69 6925     %i..device %i:%i
 8012548:	6320 7374 000a 6970 206e 6925 2520 0a73      cts..pin %i %s.
 8012558:	2100 6400 7665 6369 2065 6925 253a 2069     .!.device %i:%i 
 8012568:	6361 6974 6576 000a 6564 6976 6563 2520     active..device %
 8012578:	3a69 6925 6920 616e 7463 7669 0a65 7300     i:%i inactive..s
 8012588:	6174 7472 7420 6d69 7265 6620 726f 6420     tart timer for d
 8012598:	7665 6369 2065 6925 253a 0a69 7400 6d69     evice %i:%i..tim
 80125a8:	5e00 000a 7245 6f72 3a72 7520 6b6e 6f6e     .^..Error: unkno
 80125b8:	6e77 7320 6d79 6f62 0a6c 4500 7272 726f     wn symbol..Error
 80125c8:	203a 6f74 206f 6f6c 676e 6420 6665 6e69     : too long defin
 80125d8:	7469 6f69 0a6e 4500 7272 726f 203a 6162     ition..Error: ba
 80125e8:	2064 6863 7261 6361 6574 2072 255b 5d63     d character [%c]
 80125f8:	4020 6920 646e 7865 2520 0a69 4500 7272      @ index %i..Err
 8012608:	726f 203a 6e75 7865 6570 7463 6465 6320     or: unexpected c
 8012618:	6168 6172 7463 7265 5b20 6325 205d 2040     haracter [%c] @ 
 8012628:	6e69 6564 2078 6925 000a 7953 746e 7861     index %i..Syntax
 8012638:	6520 7272 726f 203a 6e75 7865 6570 7463      error: unexpect
 8012648:	6465 6e20 6d75 7265 7461 726f 0020 7953     ed numerator .Sy
 8012658:	746e 7861 6520 7272 726f 203a 756e 656d     ntax error: nume
 8012668:	6172 6f74 2072 756d 7473 6620 6c6f 6f6c     rator must follo
 8012678:	2077 2061 6564 6966 696e 6974 6e6f 202c     w a definition, 
 8012688:	6f66 6e75 2064 5300 6e79 6174 2078 7265     found .Syntax er
 8012698:	6f72 3a72 7420 7265 616e 7972 2720 6325     ror: ternary '%c
 80126a8:	2027 2040 6e69 6564 2078 6925 6120 726c     ' @ index %i alr
 80126b8:	6165 7964 6420 6665 6e69 6465 4020 6920     eady defined @ i
 80126c8:	646e 7865 2520 0a69 5300 6e79 6174 2078     ndex %i..Syntax 
 80126d8:	7265 6f72 3a72 7420 7265 616e 7972 2720     error: ternary '
 80126e8:	6325 2027 2040 6e69 6564 2078 6925 6d20     %c' @ index %i m
 80126f8:	7375 2074 6f66 6c6c 776f 6120 7020 6e69     ust follow a pin
 8012708:	6420 6665 6e69 7469 6f69 2c6e 6620 756f      definition, fou
 8012718:	646e 0020 7953 746e 7861 6520 7272 726f     nd .Syntax error
 8012728:	203a 6574 6e72 7261 2079 706f 6974 6e6f     : ternary option
 8012738:	2720 6325 2027 2040 6e69 6564 2078 6925      '%c' @ index %i
 8012748:	6120 726c 6165 7964 6420 6665 6e69 6465      already defined
 8012758:	4020 6920 646e 7865 2520 0a69 5300 6e79      @ index %i..Syn
 8012768:	6174 2078 7265 6f72 3a72 7520 6b6e 6f6e     tax error: unkno
 8012778:	6e77 7320 6d79 6f62 206c 4500 7272 726f     wn symbol .Error
 8012788:	203a 6f6e 6920 706e 7475 000a 7953 746e     : no input..Synt
 8012798:	7861 6520 7272 726f 203a 6f66 6e75 2064     ax error: found 
 80127a8:	6574 6e72 7261 2079 2527 2763 4020 6920     ternary '%c' @ i
 80127b8:	646e 7865 2520 2069 6977 6874 756f 2074     ndex %i without 
 80127c8:	6574 6e72 7261 2079 706f 6974 6e6f 2720     ternary option '
 80127d8:	6325 0a27 5300 6e79 6174 2078 7265 6f72     %c'..Syntax erro
 80127e8:	3a72 6620 756f 646e 7420 7265 616e 7972     r: found ternary
 80127f8:	6f20 7470 6f69 206e 2527 2763 4020 6920      option '%c' @ i
 8012808:	646e 7865 2520 2069 6564 6c63 7261 6465     ndex %i declared
 8012818:	6220 6665 726f 2065 6574 6e72 7261 2079      before ternary 
 8012828:	2527 2763 000a 7953 746e 7861 6520 7272     '%c'..Syntax err
 8012838:	726f 203a 7865 6570 7463 6465 7020 6e69     or: expected pin
 8012848:	6120 2073 6966 7372 2074 6564 6966 696e      as first defini
 8012858:	6974 6e6f 202c 6f66 6e75 2064 5300 6e79     tion, found .Syn
 8012868:	6174 2078 7265 6f72 3a72 6220 6461 7020     tax error: bad p
 8012878:	6e69 6e20 6d75 6562 2072 5300 6e79 6174     in number .Synta
 8012888:	2078 7265 6f72 3a72 7020 6e69 6e20 6d75     x error: pin num
 8012898:	6562 2072 756f 2074 666f 7220 6e61 6567     ber out of range
 80128a8:	0020 7953 746e 7861 6520 7272 726f 203a      .Syntax error: 
 80128b8:	7865 6570 7463 6465 6120 7373 6769 6d6e     expected assignm
 80128c8:	6e65 2074 2527 2763 6120 2073 6573 6f63     ent '%c' as seco
 80128d8:	646e 6420 6665 6e69 7469 6f69 006e 7953     nd definition.Sy
 80128e8:	746e 7861 6520 7272 726f 203a 6162 2064     ntax error: bad 
 80128f8:	6574 6e72 7261 2079 6970 206e 756e 626d     ternary pin numb
 8012908:	7265 0020 7953 746e 7861 6520 7272 726f     er .Syntax error
 8012918:	203a 6574 6e72 7261 2079 6970 206e 756e     : ternary pin nu
 8012928:	626d 7265 6f20 7475 6f20 2066 6172 676e     mber out of rang
 8012938:	2065 5300 6e79 6174 2078 7265 6f72 3a72     e .Syntax error:
 8012948:	7420 7265 616e 7972 7020 6e69 6320 6e61      ternary pin can
 8012958:	6f6e 2074 6168 6576 7320 6d61 2065 756e     not have same nu
 8012968:	626d 7265 6120 2073 6970 206e 7361 6973     mber as pin assi
 8012978:	6e67 656d 746e 0020 7953 746e 7861 6520     gnment .Syntax e
 8012988:	7272 726f 203a 6574 6e72 7261 2079 6863     rror: ternary ch
 8012998:	7261 6361 6574 2072 2527 2763 6d20 7375     aracter '%c' mus
 80129a8:	2074 6f66 6c6c 776f 7020 6e69 7420 7265     t follow pin ter
 80129b8:	616e 7972 6420 6665 6e69 7469 6f69 2c6e     nary definition,
 80129c8:	6620 756f 646e 0020 7953 746e 7861 6520      found .Syntax e
 80129d8:	7272 726f 203a 6e75 7865 6570 7463 6465     rror: unexpected
 80129e8:	6420 6665 6e69 7469 6f69 206e 5300 6e79      definition .Syn
 80129f8:	6174 2078 7265 6f72 3a72 6520 7078 6365     tax error: expec
 8012a08:	6574 2064 756e 656d 6172 6f74 2072 6e69     ted numerator in
 8012a18:	7473 6165 2064 666f 0020 7953 746e 7861     stead of .Syntax
 8012a28:	6520 7272 726f 203a 6e75 6e6b 776f 206e      error: unknown 
 8012a38:	6564 6966 696e 6974 6e6f 0020 7245 6f72     definition .Erro
 8012a48:	3a72 6920 6564 746e 6369 6c61 6420 6665     r: identical def
 8012a58:	6e69 7469 6f69 206e 4500 7272 726f 203a     inition .Error: 
 8012a68:	6564 6966 696e 6974 6e6f 6f20 6576 6672     definition overf
 8012a78:	6f6c 0a77 7300 6372 642f 6665 635f 6e6f     low..src/def_con
 8012a88:	6966 5f67 6170 7372 7265 632e 4500 7272     fig_parser.c.Err
 8012a98:	726f 203a 756e 656d 6172 6f74 2072 6162     or: numerator ba
 8012aa8:	2064 6176 756c 2065 5300 6e79 6174 2078     d value .Syntax 
 8012ab8:	7265 6f72 3a72 7520 656e 7078 6365 6574     error: unexpecte
 8012ac8:	2064 7973 626d 6c6f 0020 7953 746e 7861     d symbol .Syntax
 8012ad8:	6520 7272 726f 203a 7865 6570 7463 6465      error: expected
 8012ae8:	6e20 6d75 7265 7461 726f 0020 7953 746e      numerator .Synt
 8012af8:	7861 6520 7272 726f 203a 6f63 6c75 2064     ax error: could 
 8012b08:	6f6e 2074 6170 7372 2065 756e 656d 6172     not parse numera
 8012b18:	6f74 2072 2b00 7000 6e69 6925 3d20 0020     tor .+.pin%i = .
 8012b28:	6970 256e 2069 203f 3a00 0020 7325 0020     pin%i ? .: .%s .
 8012b38:	0028 4341 0043 7325 6925 7000 6e69 3f00     (.ACC.%s%i.pin.?
 8012b48:	003a 003d 2928 4100 4342 4544 4746 4948     :.=.().ABCDEFGHI
 8012b58:	4b4a 4d4c 4f4e 5150 5352 5554 5756 5958     JKLMNOPQRSTUVWXY
 8012b68:	615a 6362 6564 6766 6968 6b6a 6d6c 6f6e     Zabcdefghijklmno
 8012b78:	7170 7372 7574 7776 7978 307a 3231 3433     pqrstuvwxyz01234
 8012b88:	3635 3837 2b39 002d 4241 4443 4645 4847     56789+-.ABCDEFGH
 8012b98:	4a49 4c4b 4e4d 504f 5251 5453 5655 5857     IJKLMNOPQRSTUVWX
 8012ba8:	5a59 6261 6463 6665 6867 6a69 6c6b 6e6d     YZabcdefghijklmn
 8012bb8:	706f 7271 7473 7675 7877 7a79 3130 3332     opqrstuvwxyz0123
 8012bc8:	3534 3736 3938 005f 0920 4600 414c 4853     456789_. ..FLASH
 8012bd8:	455f 5252 4f5f 4854 5245 000a 4c46 5341     _ERR_OTHER..FLAS
 8012be8:	5f48 5245 5f52 5257 0a50 4600 414c 4853     H_ERR_WRP..FLASH
 8012bf8:	455f 5252 545f 4d49 4f45 5455 000a 6f6e     _ERR_TIMEOUT..no
 8012c08:	2074 2061 7366 202c 6f66 6d72 7461 6974     t a fs, formatti
 8012c18:	676e 2e2e 000a 2020 7325 5b20 3025 7834     ng....  %s [%04x
 8012c28:	205d 6973 657a 253a 0a69 2000 2520 2069     ] size:%i..  %i 
 8012c38:	7962 6574 2073 7375 6465 6f20 2066 6925     bytes used of %i
 8012c48:	7420 746f 6c61 6920 206e 6925 6620 6c69      total in %i fil
 8012c58:	2565 0a63 5700 5241 494e 474e 203a 6966     e%c..WARNING: fi
 8012c68:	656c 7973 7473 6d65 6320 6172 6d6d 6465     lesystem crammed
 8012c78:	202e 6552 6f6d 6576 6620 6c69 7365 6120     . Remove files a
 8012c88:	646e 7220 6e75 6320 6568 6b63 0a2e 7300     nd run check...s
 8012c98:	7661 2065 7265 3a72 6f20 6570 206e 6925     ave err: open %i
 8012ca8:	000a 6173 6576 6520 7272 203a 7277 7469     ..save err: writ
 8012cb8:	2065 6468 2072 6925 000a 6173 6576 6520     e hdr %i..save e
 8012cc8:	7272 203a 7277 7469 2065 6663 2067 6925     rr: write cfg %i
 8012cd8:	000a 6f6c 6461 6520 7272 203a 706f 6e65     ..load err: open
 8012ce8:	2520 0a69 6c00 616f 2064 7265 3a72 7220      %i..load err: r
 8012cf8:	6165 2064 6468 2072 6925 000a 7277 6e6f     ead hdr %i..wron
 8012d08:	2067 6966 656c 7620 7265 6973 6e6f 000a     g file version..
 8012d18:	6564 7366 7020 7265 7020 6e69 6d20 7369     defs per pin mis
 8012d28:	616d 6374 0a68 6e00 7262 6f20 2066 6970     match..nbr of pi
 8012d38:	206e 696d 6d73 7461 6863 000a 6572 6461     n mismatch..read
 8012d48:	6520 7272 203a 6572 6461 6320 6766 2520      err: read cfg %
 8012d58:	0a69 7300 6372 752f 6273 752f 6273 685f     i..src/usb/usb_h
 8012d68:	5f77 6f63 666e 6769 632e 4a00 594f 5f31     w_config.c.JOY1_
 8012d78:	0058 4f4a 3159 595f 4a00 594f 5f31 5542     X.JOY1_Y.JOY1_BU
 8012d88:	5454 4e4f 0031 4f4a 3159 425f 5455 4f54     TTON1.JOY1_BUTTO
 8012d98:	324e 4a00 594f 5f31 5542 5454 4e4f 0033     N2.JOY1_BUTTON3.
 8012da8:	4f4a 3159 425f 5455 4f54 344e 4a00 594f     JOY1_BUTTON4.JOY
 8012db8:	5f31 5542 5454 4e4f 0035 4f4a 3159 425f     1_BUTTON5.JOY1_B
 8012dc8:	5455 4f54 364e 4a00 594f 5f31 5542 5454     UTTON6.JOY1_BUTT
 8012dd8:	4e4f 0037 4f4a 3159 425f 5455 4f54 384e     ON7.JOY1_BUTTON8
 8012de8:	4a00 594f 5f31 5542 5454 4e4f 0039 4f4a     .JOY1_BUTTON9.JO
 8012df8:	3159 425f 5455 4f54 314e 0030 4f4a 3159     Y1_BUTTON10.JOY1
 8012e08:	425f 5455 4f54 314e 0031 4f4a 3159 425f     _BUTTON11.JOY1_B
 8012e18:	5455 4f54 314e 0032 4f4a 3159 425f 5455     UTTON12.JOY1_BUT
 8012e28:	4f54 314e 0033 4f4a 3159 425f 5455 4f54     TON13.JOY1_BUTTO
 8012e38:	314e 0034 4f4a 3259 585f 4a00 594f 5f32     N14.JOY2_X.JOY2_
 8012e48:	0059 4f4a 3259 425f 5455 4f54 314e 4a00     Y.JOY2_BUTTON1.J
 8012e58:	594f 5f32 5542 5454 4e4f 0032 4f4a 3259     OY2_BUTTON2.JOY2
 8012e68:	425f 5455 4f54 334e 4a00 594f 5f32 5542     _BUTTON3.JOY2_BU
 8012e78:	5454 4e4f 0034 4f4a 3259 425f 5455 4f54     TTON4.JOY2_BUTTO
 8012e88:	354e 4a00 594f 5f32 5542 5454 4e4f 0036     N5.JOY2_BUTTON6.
 8012e98:	4f4a 3259 425f 5455 4f54 374e 4a00 594f     JOY2_BUTTON7.JOY
 8012ea8:	5f32 5542 5454 4e4f 0038 4f4a 3259 425f     2_BUTTON8.JOY2_B
 8012eb8:	5455 4f54 394e 4a00 594f 5f32 5542 5454     UTTON9.JOY2_BUTT
 8012ec8:	4e4f 3031 4a00 594f 5f32 5542 5454 4e4f     ON10.JOY2_BUTTON
 8012ed8:	3131 4a00 594f 5f32 5542 5454 4e4f 3231     11.JOY2_BUTTON12
 8012ee8:	4a00 594f 5f32 5542 5454 4e4f 3331 4a00     .JOY2_BUTTON13.J
 8012ef8:	594f 5f32 5542 5454 4e4f 3431 4d00 554f     OY2_BUTTON14.MOU
 8012f08:	4553 585f 4d00 554f 4553 595f 4d00 554f     SE_X.MOUSE_Y.MOU
 8012f18:	4553 425f 5455 4f54 314e 4d00 554f 4553     SE_BUTTON1.MOUSE
 8012f28:	425f 5455 4f54 324e 4d00 554f 4553 425f     _BUTTON2.MOUSE_B
 8012f38:	5455 4f54 334e 4d00 554f 4553 575f 4548     UTTON3.MOUSE_WHE
 8012f48:	4c45 4100 0061 6242 4300 0063 6444 4500     EL.Aa.Bb.Cc.Dd.E
 8012f58:	0065 6646 4700 0067 6848 4900 0069 004a     e.Ff.Gg.Hh.Ii.J.
 8012f68:	6a4a 4b00 006b 6c4c 4d00 006d 6e4e 4f00     Jj.Kk.Ll.Mm.Nn.O
 8012f78:	006f 7050 5100 0071 7252 5300 0073 7454     o.Pp.Qq.Rr.Ss.Tt
 8012f88:	5500 0075 0056 7656 5700 0077 7858 5900     .Uu.V.Vv.Ww.Xx.Y
 8012f98:	0079 7a5a 4500 4353 5041 0045 4142 4b43     y.Zz.ESCAPE.BACK
 8012fa8:	5053 4341 0045 0008 4154 0042 5f2d 4c00     SPACE...TAB.-_.L
 8012fb8:	4645 4254 4152 4b43 5445 5b00 5200 4749     EFTBRACKET.[.RIG
 8012fc8:	5448 5242 4341 454b 0054 005d 005c 4f4e     HTBRACKET.].\.NO
 8012fd8:	554e 5f53 4148 4853 2300 007e 4553 494d     NUS_HASH.#~.SEMI
 8012fe8:	4f43 4f4c 004e 3a3b 5100 4f55 4554 2200     COLON.;:.QUOTE."
 8012ff8:	0027 5247 5641 0045 607e 2c00 2e00 3f00     '.GRAVE.~`.,...?
 8013008:	002f 4143 5350 4f4c 4b43 4600 0031 3246     /.CAPSLOCK.F1.F2
 8013018:	4600 0033 3446 4600 0035 3646 4600 0037     .F3.F4.F5.F6.F7.
 8013028:	3846 4600 0039 3146 0030 3146 0031 3146     F8.F9.F10.F11.F1
 8013038:	0032 5250 4e49 5354 5243 4545 004e 4353     2.PRINTSCREEN.SC
 8013048:	4f52 4c4c 4f4c 4b43 4900 534e 5245 0054     ROLLLOCK.INSERT.
 8013058:	4750 5055 4400 4c45 5445 0045 4e45 0044     PGUP.DELETE.END.
 8013068:	4750 4f44 4e57 5200 4749 5448 4c00 4645     PGDOWN.RIGHT.LEF
 8013078:	0054 554e 4c4d 434f 004b 504b 535f 414c     T.NUMLOCK.KP_SLA
 8013088:	4853 4b00 5f50 5341 4554 4952 4b53 4b00     SH.KP_ASTERISK.K
 8013098:	5f50 494d 554e 0053 504b 505f 554c 0053     P_MINUS.KP_PLUS.
 80130a8:	504b 455f 544e 5245 4b00 5f50 0031 504b     KP_ENTER.KP_1.KP
 80130b8:	325f 4b00 5f50 0033 504b 345f 4b00 5f50     _2.KP_3.KP_4.KP_
 80130c8:	0035 504b 365f 4b00 5f50 0037 504b 385f     5.KP_6.KP_7.KP_8
 80130d8:	4b00 5f50 0039 504b 305f 4b00 5f50 4f44     .KP_9.KP_0.KP_DO
 80130e8:	0054 4f4e 554e 5f53 4142 4b43 4c53 5341     T.NONUS_BACKSLAS
 80130f8:	0048 7c5c 4100 5050 494c 4143 4954 4e4f     H.\|.APPLICATION
 8013108:	4b00 5f50 5145 4155 004c 3146 0033 3146     .KP_EQUAL.F13.F1
 8013118:	0034 3146 0035 3146 0036 3146 0037 3146     4.F15.F16.F17.F1
 8013128:	0038 3146 0039 3246 0030 3246 0031 3246     8.F19.F20.F21.F2
 8013138:	0032 3246 0033 3246 0034 5845 4345 5455     2.F23.F24.EXECUT
 8013148:	0045 4548 504c 4d00 4e45 0055 4e55 4f44     E.HELP.MENU.UNDO
 8013158:	4300 5455 4300 504f 0059 4150 5453 0045     .CUT.COPY.PASTE.
 8013168:	4946 444e 5600 4c4f 4d55 5f45 5055 5600     FIND.VOLUME_UP.V
 8013178:	4c4f 4d55 5f45 4f44 4e57 4c00 434f 494b     OLUME_DOWN.LOCKI
 8013188:	474e 435f 5041 0053 4f4c 4b43 4e49 5f47     NG_CAPS.LOCKING_
 8013198:	554e 004d 4f4c 4b43 4e49 5f47 4353 4f52     NUM.LOCKING_SCRO
 80131a8:	4c4c 4b00 5f50 4f43 4d4d 0041 504b 455f     LL.KP_COMMA.KP_E
 80131b8:	5551 4c41 415f 3453 3030 4900 544e 0031     QUAL_AS400.INT1.
 80131c8:	4e49 3254 4900 544e 0033 4e49 3454 4900     INT2.INT3.INT4.I
 80131d8:	544e 0035 4e49 3654 4900 544e 0037 4e49     NT5.INT6.INT7.IN
 80131e8:	3854 4900 544e 0039 414c 474e 0031 414c     T8.INT9.LANG1.LA
 80131f8:	474e 0032 414c 474e 0033 414c 474e 0034     NG2.LANG3.LANG4.
 8013208:	414c 474e 0035 414c 474e 0036 414c 474e     LANG5.LANG6.LANG
 8013218:	0037 414c 474e 0038 414c 474e 0039 4c41     7.LANG8.LANG9.AL
 8013228:	5f54 5245 5341 0045 5953 5253 5145 4300     T_ERASE.SYSREQ.C
 8013238:	4e41 4543 004c 4c43 4145 0052 5250 4f49     ANCEL.CLEAR.PRIO
 8013248:	0052 4552 5554 4e52 5300 5045 5241 5441     R.RETURN.SEPARAT
 8013258:	524f 4f00 5455 4f00 4550 0052 4c43 4145     OR.OUT.OPER.CLEA
 8013268:	5f52 4741 4941 004e 5243 4553 004c 5845     R_AGAIN.CRSEL.EX
 8013278:	4553 004c 5953 5453 4d45 505f 574f 5245     SEL.SYSTEM_POWER
 8013288:	5300 5359 4554 5f4d 4c53 4545 0050 5953     .SYSTEM_SLEEP.SY
 8013298:	5453 4d45 575f 4b41 0045 5541 4944 5f4f     STEM_WAKE.AUDIO_
 80132a8:	554d 4554 4100 4455 4f49 565f 4c4f 555f     MUTE.AUDIO_VOL_U
 80132b8:	0050 5541 4944 5f4f 4f56 5f4c 4f44 4e57     P.AUDIO_VOL_DOWN
 80132c8:	4d00 4445 4149 4e5f 5845 5f54 5254 4341     .MEDIA_NEXT_TRAC
 80132d8:	004b 454d 4944 5f41 5250 5645 545f 4152     K.MEDIA_PREV_TRA
 80132e8:	4b43 4d00 4445 4149 535f 4f54 0050 454d     CK.MEDIA_STOP.ME
 80132f8:	4944 5f41 4c50 5941 505f 5541 4553 4d00     DIA_PLAY_PAUSE.M
 8013308:	4445 4149 535f 4c45 4345 0054 454d 4944     EDIA_SELECT.MEDI
 8013318:	5f41 4a45 4345 0054 414d 4c49 4300 4c41     A_EJECT.MAIL.CAL
 8013328:	5543 414c 4f54 0052 594d 435f 4d4f 5550     CULATOR.MY_COMPU
 8013338:	4554 0052 5757 5f57 4553 5241 4843 5700     TER.WWW_SEARCH.W
 8013348:	5757 485f 4d4f 0045 5757 5f57 4142 4b43     WW_HOME.WWW_BACK
 8013358:	5700 5757 465f 524f 4157 4452 5700 5757     .WWW_FORWARD.WWW
 8013368:	535f 4f54 0050 5757 5f57 4552 5246 5345     _STOP.WWW_REFRES
 8013378:	0048 5757 5f57 4146 4f56 4952 4554 0053     H.WWW_FAVORITES.
 8013388:	454d 4944 5f41 4146 5453 465f 524f 4157     MEDIA_FAST_FORWA
 8013398:	4452 4d00 4445 4149 525f 5745 4e49 0044     RD.MEDIA_REWIND.
 80133a8:	454c 5446 435f 5254 004c 454c 5446 535f     LEFT_CTRL.LEFT_S
 80133b8:	4948 5446 4c00 4645 5f54 4c41 0054 454c     HIFT.LEFT_ALT.LE
 80133c8:	5446 475f 4955 5200 4749 5448 435f 5254     FT_GUI.RIGHT_CTR
 80133d8:	004c 4952 4847 5f54 4853 4649 0054 4952     L.RIGHT_SHIFT.RI
 80133e8:	4847 5f54 4c41 0054 4952 4847 5f54 5547     GHT_ALT.RIGHT_GU
 80133f8:	0049 0000                                   I...

Disassembly of section .data:

20000000 <__trace>:
20000000:	0001 0000                                   ....

20000004 <__dbg_level_str>:
20000004:	fec2 0800 fec6 0800 feca 0800 fece 0800     ................

20000014 <DBG_BIT_NAME>:
20000014:	1afd 0801 1b01 0801 1b05 0801 1b0a 0801     ................
20000024:	1b0d 0801 1b12 0801 1b17 0801 1b1b 0801     ................
20000034:	1b1f 0801 1b23 0801 1b27 0801 1b2a 0801     ....#...'...*...
20000044:	1b2e 0801 1b33 0801 1b37 0801               ....3...7...

20000050 <pin_sym>:
20000050:	2b43 0801                                   C+..

20000054 <ignore_chars>:
20000054:	2bd0 0801                                   .+..

20000058 <sym_chars>:
20000058:	2b90 0801                                   .+..

2000005c <num_chars>:
2000005c:	2b4f 0801                                   O+..

20000060 <numdef_chars>:
20000060:	2b4c 0801                                   L+..

20000064 <assign_chars>:
20000064:	2b4a 0801                                   J+..

20000068 <tern_chars>:
20000068:	2b47 0801                                   G+..

2000006c <acc_sym>:
2000006c:	1e61 0801                                   a...

20000070 <ARC_string_serial>:
20000070:	031a 0070 0065 006c 006c 0065 0000 0000     ..p.e.l.l.e.....
	...

2000008a <kb_tx_complete>:
2000008a:	0101                                             .

2000008b <mouse_tx_complete>:
2000008b:	0101                                             .

2000008c <joy1_tx_complete>:
2000008c:	0101                                             .

2000008d <joy2_tx_complete>:
2000008d:	0001 d500                                        ...

20000090 <pEpInt_OUT>:
20000090:	b3d5 0800 b3d5 0800 b3d5 0800 b3d5 0800     ................
200000a0:	b3d5 0800 b49d 0800 b3d5 0800               ............

200000ac <pEpInt_IN>:
200000ac:	b3d9 0800 b3f5 0800 b411 0800 b42d 0800     ............-...
200000bc:	b3d5 0800 b3d5 0800 b449 0800               ........I...

200000c8 <linecoding>:
200000c8:	c200 0001 0000 0008                         ........

200000d0 <Device_Property>:
200000d0:	bd2d 0800 bd51 0800 bbe5 0800 bc09 0800     -...Q...........
200000e0:	bc51 0800 bf61 0800 bd05 0800 bee1 0800     Q...a...........
200000f0:	beed 0800 bef9 0800 0000 0000 0040 0000     ............@...

20000100 <Device_Descriptor>:
20000100:	ef62 0800 0012 0000                         b.......

20000108 <Config_Descriptor>:
20000108:	eebb 0800 00a7 0000                         ........

20000110 <String_Descriptor>:
20000110:	edff 0800 0004 0000 ede1 0800 001e 0000     ................
20000120:	edc2 0800 001f 0000 0070 2000 001a 0000     ........p.. ....

20000130 <ARC_KB_Report_Descriptor>:
20000130:	ee7d 0800 003e 0000                         }...>...

20000138 <ARC_MOUSE_Report_Descriptor>:
20000138:	ee33 0800 004a 0000                         3...J...

20000140 <ARC_JOYSTICK_Report_Descriptor>:
20000140:	ee03 0800 0030 0000                         ....0...

20000148 <ARC_Hid_Descriptor>:
20000148:	eecd 0800 0009 0000                         ........

20000150 <User_Standard_Requests>:
20000150:	b3d5 0800 bbc1 0800 b3d5 0800 b3d5 0800     ................
20000160:	b3d5 0800 b3d5 0800 b3d5 0800 b3d5 0800     ................
20000170:	bbd9 0800                                   ....

20000174 <Device_Table>:
20000174:	0108 0000                                   ....

20000178 <fSuspendEnabled>:
20000178:	0001                                             .

20000179 <APBAHBPrescTable>:
20000179:	0000 0000 0201 0403 0201 0403 0706 0908     ................

20000189 <ADCPrescTable>:
20000189:	0402 0806 0000 0000                              .......

20000190 <SystemCoreClock>:
20000190:	a200 044a                                   ..J.

20000194 <AHBPrescTable>:
	...
2000019c:	0201 0403 0706 0908 0000 0000               ............

Disassembly of section .bss:

200001a8 <__bss_start__>:
200001a8:	00000000 	.word	0x00000000

200001ac <sys>:
	...

200001c0 <_trace_log_ix>:
200001c0:	00000000                                ....

200001c4 <assert_cb>:
200001c4:	00000000                                ....

200001c8 <assert_behaviour>:
200001c8:	00000000                                ....

200001cc <io_bus>:
	...

200001ec <_rand_seed>:
200001ec:	00000000                                ....

200001f0 <task_sys>:
	...

20000204 <task_pool>:
	...

20000508 <_g_timer_ix>:
20000508:	00000000                                ....

2000050c <_gpio>:
	...

20000568 <_argc>:
20000568:	00000000                                ....

2000056c <_args>:
	...

200005ac <in>:
	...

200006ac <app>:
	...

20000a9c <app_init>:
	...

20000a9d <print_io>:
20000a9d:	00000000                                         ...

20000aa0 <lex_sym_ix>:
	...

20000aa2 <lex_syms>:
	...

20000b20 <fs>:
	...

20000b5c <niffs_buf>:
	...

20000bdc <niffs_fd>:
	...

20000c1c <Data_Mul_MaxPacketSize>:
20000c1c:	00000000                                ....

20000c20 <FrameCount.7170>:
20000c20:	00000000                                ....

20000c24 <kb_report_ready_cb>:
20000c24:	00000000                                ....

20000c28 <mouse_report_ready_cb>:
20000c28:	00000000                                ....

20000c2c <joy_report_ready_cb>:
20000c2c:	00000000                                ....

20000c30 <rx_cb>:
20000c30:	00000000                                ....

20000c34 <USB_Tx_State>:
	...

20000c35 <kb_led_state>:
20000c35:	00000000                                         ...

20000c38 <bIntPackSOF>:
20000c38:	00000000                                ....

20000c3c <esof_counter>:
20000c3c:	00000000                                ....

20000c40 <wCNTR>:
20000c40:	00000000                                ....

20000c44 <old_led_state.7195>:
	...

20000c45 <Request>:
20000c45:	00000000                                         ...

20000c48 <remotewakeupon>:
20000c48:	00000000                                ....

20000c4c <bDeviceState>:
20000c4c:	00000000                                ....

20000c50 <stacked_r1>:
20000c50:	00000000                                ....

20000c54 <stacked_r3>:
20000c54:	00000000                                ....

20000c58 <stacked_lr>:
20000c58:	00000000                                ....

20000c5c <stacked_pc>:
20000c5c:	00000000                                ....

20000c60 <stacked_r0>:
20000c60:	00000000                                ....

20000c64 <stacked_r12>:
20000c64:	00000000                                ....

20000c68 <stacked_psr>:
20000c68:	00000000                                ....

20000c6c <stacked_r2>:
20000c6c:	00000000                                ....

20000c70 <stack_pointer>:
20000c70:	00000000                                ....

20000c74 <_trace_log>:
	...

20000d34 <__uart_vec>:
	...

2000114c <cli_state>:
	...

20001154 <StatusInfo>:
	...

20001156 <USB_Rx_Buffer>:
	...

20001198 <HSEStartUpStatus>:
20001198:	00000000                                ....

2000119c <tx_rb>:
	...

200011a8 <rx_buf>:
	...

200013a8 <tx_buf>:
	...

200017a8 <rx_rb>:
	...

200017b4 <SaveState>:
200017b4:	00000000                                ....

200017b8 <pProperty>:
200017b8:	00000000                                ....

200017bc <EPindex>:
200017bc:	00000000                                ....

200017c0 <Device_Info>:
	...

200017dc <pUser_Standard_Requests>:
200017dc:	00000000                                ....

200017e0 <pInformation>:
200017e0:	00000000                                ....

200017e4 <wInterrupt_Mask>:
	...

200017e6 <SaveRState>:
	...

200017e8 <SaveTState>:
	...

200017ea <wIstr>:
	...

200017ec <ProtocolValue>:
200017ec:	00000000                                ....

200017f0 <ResumeS>:
200017f0:	00000000                                ....

200017f4 <EP>:
	...
